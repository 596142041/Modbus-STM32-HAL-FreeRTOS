
ModbusF103.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fb4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001cc  080070c4  080070c4  000170c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007290  08007290  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08007290  08007290  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007290  08007290  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007290  08007290  00017290  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007294  08007294  00017294  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007298  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002790  20000010  080072a8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200027a0  080072a8  000227a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac62  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000353c  00000000  00000000  0003ac9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001488  00000000  00000000  0003e1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012f0  00000000  00000000  0003f660  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a195  00000000  00000000  00040950  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013187  00000000  00000000  0005aae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000946b1  00000000  00000000  0006dc6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010231d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054a0  00000000  00000000  00102398  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080070ac 	.word	0x080070ac

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080070ac 	.word	0x080070ac

08000150 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000150:	b580      	push	{r7, lr}
 8000152:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000154:	4a0c      	ldr	r2, [pc, #48]	; (8000188 <MX_FREERTOS_Init+0x38>)
 8000156:	2100      	movs	r1, #0
 8000158:	480c      	ldr	r0, [pc, #48]	; (800018c <MX_FREERTOS_Init+0x3c>)
 800015a:	f002 fa25 	bl	80025a8 <osThreadNew>
 800015e:	4602      	mov	r2, r0
 8000160:	4b0b      	ldr	r3, [pc, #44]	; (8000190 <MX_FREERTOS_Init+0x40>)
 8000162:	601a      	str	r2, [r3, #0]

  /* creation of myTaskMaster */
  myTaskMasterHandle = osThreadNew(StartTaskMaster, NULL, &myTaskMaster_attributes);
 8000164:	4a0b      	ldr	r2, [pc, #44]	; (8000194 <MX_FREERTOS_Init+0x44>)
 8000166:	2100      	movs	r1, #0
 8000168:	480b      	ldr	r0, [pc, #44]	; (8000198 <MX_FREERTOS_Init+0x48>)
 800016a:	f002 fa1d 	bl	80025a8 <osThreadNew>
 800016e:	4602      	mov	r2, r0
 8000170:	4b0a      	ldr	r3, [pc, #40]	; (800019c <MX_FREERTOS_Init+0x4c>)
 8000172:	601a      	str	r2, [r3, #0]

  /* creation of myTaskSlave */
  myTaskSlaveHandle = osThreadNew(StartTaskSlave, NULL, &myTaskSlave_attributes);
 8000174:	4a0a      	ldr	r2, [pc, #40]	; (80001a0 <MX_FREERTOS_Init+0x50>)
 8000176:	2100      	movs	r1, #0
 8000178:	480a      	ldr	r0, [pc, #40]	; (80001a4 <MX_FREERTOS_Init+0x54>)
 800017a:	f002 fa15 	bl	80025a8 <osThreadNew>
 800017e:	4602      	mov	r2, r0
 8000180:	4b09      	ldr	r3, [pc, #36]	; (80001a8 <MX_FREERTOS_Init+0x58>)
 8000182:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000184:	bf00      	nop
 8000186:	bd80      	pop	{r7, pc}
 8000188:	0800717c 	.word	0x0800717c
 800018c:	080001ad 	.word	0x080001ad
 8000190:	200024f0 	.word	0x200024f0
 8000194:	080071a0 	.word	0x080071a0
 8000198:	080001bd 	.word	0x080001bd
 800019c:	20002500 	.word	0x20002500
 80001a0:	080071c4 	.word	0x080071c4
 80001a4:	08000241 	.word	0x08000241
 80001a8:	200024fc 	.word	0x200024fc

080001ac <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b082      	sub	sp, #8
 80001b0:	af00      	add	r7, sp, #0
 80001b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 80001b4:	200a      	movs	r0, #10
 80001b6:	f002 faa1 	bl	80026fc <osDelay>
 80001ba:	e7fb      	b.n	80001b4 <StartDefaultTask+0x8>

080001bc <StartTaskMaster>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMaster */
void StartTaskMaster(void *argument)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b082      	sub	sp, #8
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMaster */
  /* Infinite loop */
	 // telegram 0: read registers

  telegram[0].u8id = 17; // slave address
 80001c4:	4b1b      	ldr	r3, [pc, #108]	; (8000234 <StartTaskMaster+0x78>)
 80001c6:	2211      	movs	r2, #17
 80001c8:	701a      	strb	r2, [r3, #0]
  telegram[0].u8fct = 3; // function code (this one is registers read)
 80001ca:	4b1a      	ldr	r3, [pc, #104]	; (8000234 <StartTaskMaster+0x78>)
 80001cc:	2203      	movs	r2, #3
 80001ce:	705a      	strb	r2, [r3, #1]
  //telegram[0].u16RegAdd = 0x160; // start address in slave
  telegram[0].u16RegAdd = 0x0; // start address in slave
 80001d0:	4b18      	ldr	r3, [pc, #96]	; (8000234 <StartTaskMaster+0x78>)
 80001d2:	2200      	movs	r2, #0
 80001d4:	805a      	strh	r2, [r3, #2]
  telegram[0].u16CoilsNo = 3; // number of elements (coils or registers) to read
 80001d6:	4b17      	ldr	r3, [pc, #92]	; (8000234 <StartTaskMaster+0x78>)
 80001d8:	2203      	movs	r2, #3
 80001da:	809a      	strh	r2, [r3, #4]
  telegram[0].au16reg = ModbusDATA; // pointer to a memory array in the Arduino
 80001dc:	4b15      	ldr	r3, [pc, #84]	; (8000234 <StartTaskMaster+0x78>)
 80001de:	4a16      	ldr	r2, [pc, #88]	; (8000238 <StartTaskMaster+0x7c>)
 80001e0:	609a      	str	r2, [r3, #8]


  // telegram 0: read registers
  telegram[1].u8id = 17; // slave address
 80001e2:	4b14      	ldr	r3, [pc, #80]	; (8000234 <StartTaskMaster+0x78>)
 80001e4:	2211      	movs	r2, #17
 80001e6:	731a      	strb	r2, [r3, #12]
  telegram[1].u8fct = 16; // function code (this one is registers write)
 80001e8:	4b12      	ldr	r3, [pc, #72]	; (8000234 <StartTaskMaster+0x78>)
 80001ea:	2210      	movs	r2, #16
 80001ec:	735a      	strb	r2, [r3, #13]
  //telegram[1].u16RegAdd = 0x160; // start address in slave
  telegram[1].u16RegAdd = 0x0;
 80001ee:	4b11      	ldr	r3, [pc, #68]	; (8000234 <StartTaskMaster+0x78>)
 80001f0:	2200      	movs	r2, #0
 80001f2:	81da      	strh	r2, [r3, #14]
  telegram[1].u16CoilsNo = 3; // number of elements (coils or registers) to read
 80001f4:	4b0f      	ldr	r3, [pc, #60]	; (8000234 <StartTaskMaster+0x78>)
 80001f6:	2203      	movs	r2, #3
 80001f8:	821a      	strh	r2, [r3, #16]
  telegram[1].au16reg = ModbusDATA; // pointer to a memory array in the Arduino
 80001fa:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <StartTaskMaster+0x78>)
 80001fc:	4a0e      	ldr	r2, [pc, #56]	; (8000238 <StartTaskMaster+0x7c>)
 80001fe:	615a      	str	r2, [r3, #20]

  for(;;)
  {
	  ModbusQuery(&ModbusH, telegram[0]); // make a query
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <StartTaskMaster+0x78>)
 8000202:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000204:	480d      	ldr	r0, [pc, #52]	; (800023c <StartTaskMaster+0x80>)
 8000206:	f005 fe77 	bl	8005ef8 <ModbusQuery>
	  osDelay(1000);
 800020a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800020e:	f002 fa75 	bl	80026fc <osDelay>
	  ModbusDATA[0]++;
 8000212:	4b09      	ldr	r3, [pc, #36]	; (8000238 <StartTaskMaster+0x7c>)
 8000214:	881b      	ldrh	r3, [r3, #0]
 8000216:	3301      	adds	r3, #1
 8000218:	b29a      	uxth	r2, r3
 800021a:	4b07      	ldr	r3, [pc, #28]	; (8000238 <StartTaskMaster+0x7c>)
 800021c:	801a      	strh	r2, [r3, #0]
	  ModbusQuery(&ModbusH, telegram[1]); // make a query
 800021e:	4b05      	ldr	r3, [pc, #20]	; (8000234 <StartTaskMaster+0x78>)
 8000220:	330c      	adds	r3, #12
 8000222:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000224:	4805      	ldr	r0, [pc, #20]	; (800023c <StartTaskMaster+0x80>)
 8000226:	f005 fe67 	bl	8005ef8 <ModbusQuery>
	  osDelay(1000);
 800022a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800022e:	f002 fa65 	bl	80026fc <osDelay>
	  ModbusQuery(&ModbusH, telegram[0]); // make a query
 8000232:	e7e5      	b.n	8000200 <StartTaskMaster+0x44>
 8000234:	20002504 	.word	0x20002504
 8000238:	200025a8 	.word	0x200025a8
 800023c:	2000251c 	.word	0x2000251c

08000240 <StartTaskSlave>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskSlave */
void StartTaskSlave(void *argument)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b082      	sub	sp, #8
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskSlave */
  /* Infinite loop */
  for(;;)
  {

	xSemaphoreTake(ModbusH2.ModBusSphrHandle , portMAX_DELAY);
 8000248:	4b0f      	ldr	r3, [pc, #60]	; (8000288 <StartTaskSlave+0x48>)
 800024a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800024e:	f04f 31ff 	mov.w	r1, #4294967295
 8000252:	4618      	mov	r0, r3
 8000254:	f003 f890 	bl	8003378 <xQueueSemaphoreTake>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, ModbusH2.au16regs[0] & 0x1);
 8000258:	4b0b      	ldr	r3, [pc, #44]	; (8000288 <StartTaskSlave+0x48>)
 800025a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800025c:	881b      	ldrh	r3, [r3, #0]
 800025e:	b2db      	uxtb	r3, r3
 8000260:	f003 0301 	and.w	r3, r3, #1
 8000264:	b2db      	uxtb	r3, r3
 8000266:	461a      	mov	r2, r3
 8000268:	2120      	movs	r1, #32
 800026a:	4808      	ldr	r0, [pc, #32]	; (800028c <StartTaskSlave+0x4c>)
 800026c:	f000 feb4 	bl	8000fd8 <HAL_GPIO_WritePin>
	xSemaphoreGive(ModbusH2.ModBusSphrHandle);
 8000270:	4b05      	ldr	r3, [pc, #20]	; (8000288 <StartTaskSlave+0x48>)
 8000272:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8000276:	2300      	movs	r3, #0
 8000278:	2200      	movs	r2, #0
 800027a:	2100      	movs	r1, #0
 800027c:	f002 fe12 	bl	8002ea4 <xQueueGenericSend>
	osDelay(200);
 8000280:	20c8      	movs	r0, #200	; 0xc8
 8000282:	f002 fa3b 	bl	80026fc <osDelay>
	xSemaphoreTake(ModbusH2.ModBusSphrHandle , portMAX_DELAY);
 8000286:	e7df      	b.n	8000248 <StartTaskSlave+0x8>
 8000288:	200025b8 	.word	0x200025b8
 800028c:	40010800 	.word	0x40010800

08000290 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000296:	f107 0310 	add.w	r3, r7, #16
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002a4:	4b37      	ldr	r3, [pc, #220]	; (8000384 <MX_GPIO_Init+0xf4>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	4a36      	ldr	r2, [pc, #216]	; (8000384 <MX_GPIO_Init+0xf4>)
 80002aa:	f043 0310 	orr.w	r3, r3, #16
 80002ae:	6193      	str	r3, [r2, #24]
 80002b0:	4b34      	ldr	r3, [pc, #208]	; (8000384 <MX_GPIO_Init+0xf4>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	f003 0310 	and.w	r3, r3, #16
 80002b8:	60fb      	str	r3, [r7, #12]
 80002ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002bc:	4b31      	ldr	r3, [pc, #196]	; (8000384 <MX_GPIO_Init+0xf4>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	4a30      	ldr	r2, [pc, #192]	; (8000384 <MX_GPIO_Init+0xf4>)
 80002c2:	f043 0320 	orr.w	r3, r3, #32
 80002c6:	6193      	str	r3, [r2, #24]
 80002c8:	4b2e      	ldr	r3, [pc, #184]	; (8000384 <MX_GPIO_Init+0xf4>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	f003 0320 	and.w	r3, r3, #32
 80002d0:	60bb      	str	r3, [r7, #8]
 80002d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002d4:	4b2b      	ldr	r3, [pc, #172]	; (8000384 <MX_GPIO_Init+0xf4>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	4a2a      	ldr	r2, [pc, #168]	; (8000384 <MX_GPIO_Init+0xf4>)
 80002da:	f043 0304 	orr.w	r3, r3, #4
 80002de:	6193      	str	r3, [r2, #24]
 80002e0:	4b28      	ldr	r3, [pc, #160]	; (8000384 <MX_GPIO_Init+0xf4>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	f003 0304 	and.w	r3, r3, #4
 80002e8:	607b      	str	r3, [r7, #4]
 80002ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ec:	4b25      	ldr	r3, [pc, #148]	; (8000384 <MX_GPIO_Init+0xf4>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a24      	ldr	r2, [pc, #144]	; (8000384 <MX_GPIO_Init+0xf4>)
 80002f2:	f043 0308 	orr.w	r3, r3, #8
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b22      	ldr	r3, [pc, #136]	; (8000384 <MX_GPIO_Init+0xf4>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0308 	and.w	r3, r3, #8
 8000300:	603b      	str	r3, [r7, #0]
 8000302:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EN_485_GPIO_Port, EN_485_Pin, GPIO_PIN_RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	2101      	movs	r1, #1
 8000308:	481f      	ldr	r0, [pc, #124]	; (8000388 <MX_GPIO_Init+0xf8>)
 800030a:	f000 fe65 	bl	8000fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800030e:	2200      	movs	r2, #0
 8000310:	2120      	movs	r1, #32
 8000312:	481e      	ldr	r0, [pc, #120]	; (800038c <MX_GPIO_Init+0xfc>)
 8000314:	f000 fe60 	bl	8000fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800031c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800031e:	4b1c      	ldr	r3, [pc, #112]	; (8000390 <MX_GPIO_Init+0x100>)
 8000320:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000322:	2300      	movs	r3, #0
 8000324:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000326:	f107 0310 	add.w	r3, r7, #16
 800032a:	4619      	mov	r1, r3
 800032c:	4816      	ldr	r0, [pc, #88]	; (8000388 <MX_GPIO_Init+0xf8>)
 800032e:	f000 fcf9 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EN_485_Pin;
 8000332:	2301      	movs	r3, #1
 8000334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000336:	2301      	movs	r3, #1
 8000338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800033a:	2300      	movs	r3, #0
 800033c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800033e:	2302      	movs	r3, #2
 8000340:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EN_485_GPIO_Port, &GPIO_InitStruct);
 8000342:	f107 0310 	add.w	r3, r7, #16
 8000346:	4619      	mov	r1, r3
 8000348:	480f      	ldr	r0, [pc, #60]	; (8000388 <MX_GPIO_Init+0xf8>)
 800034a:	f000 fceb 	bl	8000d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800034e:	2320      	movs	r3, #32
 8000350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000352:	2301      	movs	r3, #1
 8000354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000356:	2300      	movs	r3, #0
 8000358:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800035a:	2302      	movs	r3, #2
 800035c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800035e:	f107 0310 	add.w	r3, r7, #16
 8000362:	4619      	mov	r1, r3
 8000364:	4809      	ldr	r0, [pc, #36]	; (800038c <MX_GPIO_Init+0xfc>)
 8000366:	f000 fcdd 	bl	8000d24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800036a:	2200      	movs	r2, #0
 800036c:	2105      	movs	r1, #5
 800036e:	2028      	movs	r0, #40	; 0x28
 8000370:	f000 fc37 	bl	8000be2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000374:	2028      	movs	r0, #40	; 0x28
 8000376:	f000 fc50 	bl	8000c1a <HAL_NVIC_EnableIRQ>

}
 800037a:	bf00      	nop
 800037c:	3720      	adds	r7, #32
 800037e:	46bd      	mov	sp, r7
 8000380:	bd80      	pop	{r7, pc}
 8000382:	bf00      	nop
 8000384:	40021000 	.word	0x40021000
 8000388:	40011000 	.word	0x40011000
 800038c:	40010800 	.word	0x40010800
 8000390:	10110000 	.word	0x10110000

08000394 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000398:	f000 fb3c 	bl	8000a14 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800039c:	f000 f866 	bl	800046c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003a0:	f7ff ff76 	bl	8000290 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80003a4:	f000 f9f0 	bl	8000788 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80003a8:	f000 f9c4 	bl	8000734 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80003ac:	f000 fa16 	bl	80007dc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */


  /* Master initialization */
  ModbusH.uiModbusType = MASTER_RTU;
 80003b0:	4b27      	ldr	r3, [pc, #156]	; (8000450 <main+0xbc>)
 80003b2:	2204      	movs	r2, #4
 80003b4:	701a      	strb	r2, [r3, #0]
  ModbusH.port =  &huart1;
 80003b6:	4b26      	ldr	r3, [pc, #152]	; (8000450 <main+0xbc>)
 80003b8:	4a26      	ldr	r2, [pc, #152]	; (8000454 <main+0xc0>)
 80003ba:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 0; // Form master it must be 0
 80003bc:	4b24      	ldr	r3, [pc, #144]	; (8000450 <main+0xbc>)
 80003be:	2200      	movs	r2, #0
 80003c0:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 80003c2:	4b23      	ldr	r3, [pc, #140]	; (8000450 <main+0xbc>)
 80003c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  ModbusH.EN_Port = NULL;
 80003cc:	4b20      	ldr	r3, [pc, #128]	; (8000450 <main+0xbc>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	60da      	str	r2, [r3, #12]
  ModbusH.EN_Port = EN_485_GPIO_Port;
 80003d2:	4b1f      	ldr	r3, [pc, #124]	; (8000450 <main+0xbc>)
 80003d4:	4a20      	ldr	r2, [pc, #128]	; (8000458 <main+0xc4>)
 80003d6:	60da      	str	r2, [r3, #12]
  ModbusH.EN_Pin = EN_485_Pin;
 80003d8:	4b1d      	ldr	r3, [pc, #116]	; (8000450 <main+0xbc>)
 80003da:	2201      	movs	r2, #1
 80003dc:	821a      	strh	r2, [r3, #16]
  ModbusH.u32overTime = 0;
 80003de:	4b1c      	ldr	r3, [pc, #112]	; (8000450 <main+0xbc>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	66da      	str	r2, [r3, #108]	; 0x6c
  ModbusH.au16regs = ModbusDATA;
 80003e4:	4b1a      	ldr	r3, [pc, #104]	; (8000450 <main+0xbc>)
 80003e6:	4a1d      	ldr	r2, [pc, #116]	; (800045c <main+0xc8>)
 80003e8:	659a      	str	r2, [r3, #88]	; 0x58
  ModbusH.u8regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 80003ea:	4b19      	ldr	r3, [pc, #100]	; (8000450 <main+0xbc>)
 80003ec:	2208      	movs	r2, #8
 80003ee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  //Initialize Modbus library
  ModbusInit(&ModbusH);
 80003f2:	4817      	ldr	r0, [pc, #92]	; (8000450 <main+0xbc>)
 80003f4:	f005 fb72 	bl	8005adc <ModbusInit>
  //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 80003f8:	4815      	ldr	r0, [pc, #84]	; (8000450 <main+0xbc>)
 80003fa:	f005 fbf9 	bl	8005bf0 <ModbusStart>



  /* Slave initialization */

  ModbusH2.uiModbusType = SLAVE_RTU;
 80003fe:	4b18      	ldr	r3, [pc, #96]	; (8000460 <main+0xcc>)
 8000400:	2203      	movs	r2, #3
 8000402:	701a      	strb	r2, [r3, #0]
  ModbusH2.port =  &huart3;
 8000404:	4b16      	ldr	r3, [pc, #88]	; (8000460 <main+0xcc>)
 8000406:	4a17      	ldr	r2, [pc, #92]	; (8000464 <main+0xd0>)
 8000408:	605a      	str	r2, [r3, #4]
  ModbusH2.u8id = 17;
 800040a:	4b15      	ldr	r3, [pc, #84]	; (8000460 <main+0xcc>)
 800040c:	2211      	movs	r2, #17
 800040e:	721a      	strb	r2, [r3, #8]
  ModbusH2.u16timeOut = 1000;
 8000410:	4b13      	ldr	r3, [pc, #76]	; (8000460 <main+0xcc>)
 8000412:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000416:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  ModbusH2.EN_Port = NULL;
 800041a:	4b11      	ldr	r3, [pc, #68]	; (8000460 <main+0xcc>)
 800041c:	2200      	movs	r2, #0
 800041e:	60da      	str	r2, [r3, #12]
  //ModbusH2.EN_Port = LD2_GPIO_Port;
  //ModbusH2.EN_Pin = LD2_Pin;
  ModbusH2.u32overTime = 0;
 8000420:	4b0f      	ldr	r3, [pc, #60]	; (8000460 <main+0xcc>)
 8000422:	2200      	movs	r2, #0
 8000424:	66da      	str	r2, [r3, #108]	; 0x6c
  ModbusH2.au16regs = ModbusDATA2;
 8000426:	4b0e      	ldr	r3, [pc, #56]	; (8000460 <main+0xcc>)
 8000428:	4a0f      	ldr	r2, [pc, #60]	; (8000468 <main+0xd4>)
 800042a:	659a      	str	r2, [r3, #88]	; 0x58
  ModbusH2.u8regsize= sizeof(ModbusDATA2)/sizeof(ModbusDATA2[0]);
 800042c:	4b0c      	ldr	r3, [pc, #48]	; (8000460 <main+0xcc>)
 800042e:	2208      	movs	r2, #8
 8000430:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  //Initialize Modbus library
  ModbusInit(&ModbusH2);
 8000434:	480a      	ldr	r0, [pc, #40]	; (8000460 <main+0xcc>)
 8000436:	f005 fb51 	bl	8005adc <ModbusInit>
  //Start capturing traffic on serial Port
  ModbusStart(&ModbusH2);
 800043a:	4809      	ldr	r0, [pc, #36]	; (8000460 <main+0xcc>)
 800043c:	f005 fbd8 	bl	8005bf0 <ModbusStart>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000440:	f002 f84c 	bl	80024dc <osKernelInitialize>
  MX_FREERTOS_Init();
 8000444:	f7ff fe84 	bl	8000150 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000448:	f002 f87a 	bl	8002540 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800044c:	e7fe      	b.n	800044c <main+0xb8>
 800044e:	bf00      	nop
 8000450:	2000251c 	.word	0x2000251c
 8000454:	200026dc 	.word	0x200026dc
 8000458:	40011000 	.word	0x40011000
 800045c:	200025a8 	.word	0x200025a8
 8000460:	200025b8 	.word	0x200025b8
 8000464:	2000269c 	.word	0x2000269c
 8000468:	20002644 	.word	0x20002644

0800046c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b090      	sub	sp, #64	; 0x40
 8000470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000472:	f107 0318 	add.w	r3, r7, #24
 8000476:	2228      	movs	r2, #40	; 0x28
 8000478:	2100      	movs	r1, #0
 800047a:	4618      	mov	r0, r3
 800047c:	f006 fe0d 	bl	800709a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800048e:	2302      	movs	r3, #2
 8000490:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000492:	2301      	movs	r3, #1
 8000494:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000496:	2310      	movs	r3, #16
 8000498:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800049a:	2302      	movs	r3, #2
 800049c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800049e:	2300      	movs	r3, #0
 80004a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80004a2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80004a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a8:	f107 0318 	add.w	r3, r7, #24
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 fdcd 	bl	800104c <HAL_RCC_OscConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80004b8:	f000 f82c 	bl	8000514 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004bc:	230f      	movs	r3, #15
 80004be:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c0:	2302      	movs	r3, #2
 80004c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004ce:	2300      	movs	r3, #0
 80004d0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	2102      	movs	r1, #2
 80004d6:	4618      	mov	r0, r3
 80004d8:	f001 f838 	bl	800154c <HAL_RCC_ClockConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80004e2:	f000 f817 	bl	8000514 <Error_Handler>
  }
}
 80004e6:	bf00      	nop
 80004e8:	3740      	adds	r7, #64	; 0x40
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
	...

080004f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b082      	sub	sp, #8
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a04      	ldr	r2, [pc, #16]	; (8000510 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d101      	bne.n	8000506 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000502:	f000 fa9d 	bl	8000a40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40012c00 	.word	0x40012c00

08000514 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr

08000520 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000526:	4b18      	ldr	r3, [pc, #96]	; (8000588 <HAL_MspInit+0x68>)
 8000528:	699b      	ldr	r3, [r3, #24]
 800052a:	4a17      	ldr	r2, [pc, #92]	; (8000588 <HAL_MspInit+0x68>)
 800052c:	f043 0301 	orr.w	r3, r3, #1
 8000530:	6193      	str	r3, [r2, #24]
 8000532:	4b15      	ldr	r3, [pc, #84]	; (8000588 <HAL_MspInit+0x68>)
 8000534:	699b      	ldr	r3, [r3, #24]
 8000536:	f003 0301 	and.w	r3, r3, #1
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800053e:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_MspInit+0x68>)
 8000540:	69db      	ldr	r3, [r3, #28]
 8000542:	4a11      	ldr	r2, [pc, #68]	; (8000588 <HAL_MspInit+0x68>)
 8000544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000548:	61d3      	str	r3, [r2, #28]
 800054a:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <HAL_MspInit+0x68>)
 800054c:	69db      	ldr	r3, [r3, #28]
 800054e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000552:	607b      	str	r3, [r7, #4]
 8000554:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000556:	2200      	movs	r2, #0
 8000558:	210f      	movs	r1, #15
 800055a:	f06f 0001 	mvn.w	r0, #1
 800055e:	f000 fb40 	bl	8000be2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000562:	4b0a      	ldr	r3, [pc, #40]	; (800058c <HAL_MspInit+0x6c>)
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	60fb      	str	r3, [r7, #12]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000576:	60fb      	str	r3, [r7, #12]
 8000578:	4a04      	ldr	r2, [pc, #16]	; (800058c <HAL_MspInit+0x6c>)
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057e:	bf00      	nop
 8000580:	3710      	adds	r7, #16
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000
 800058c:	40010000 	.word	0x40010000

08000590 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b08c      	sub	sp, #48	; 0x30
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000598:	2300      	movs	r3, #0
 800059a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800059c:	2300      	movs	r3, #0
 800059e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 80005a0:	2200      	movs	r2, #0
 80005a2:	6879      	ldr	r1, [r7, #4]
 80005a4:	2019      	movs	r0, #25
 80005a6:	f000 fb1c 	bl	8000be2 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80005aa:	2019      	movs	r0, #25
 80005ac:	f000 fb35 	bl	8000c1a <HAL_NVIC_EnableIRQ>
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80005b0:	4b1e      	ldr	r3, [pc, #120]	; (800062c <HAL_InitTick+0x9c>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	4a1d      	ldr	r2, [pc, #116]	; (800062c <HAL_InitTick+0x9c>)
 80005b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005ba:	6193      	str	r3, [r2, #24]
 80005bc:	4b1b      	ldr	r3, [pc, #108]	; (800062c <HAL_InitTick+0x9c>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005c4:	60fb      	str	r3, [r7, #12]
 80005c6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005c8:	f107 0210 	add.w	r2, r7, #16
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	4611      	mov	r1, r2
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 f938 	bl	8001848 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80005d8:	f001 f922 	bl	8001820 <HAL_RCC_GetPCLK2Freq>
 80005dc:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80005de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005e0:	4a13      	ldr	r2, [pc, #76]	; (8000630 <HAL_InitTick+0xa0>)
 80005e2:	fba2 2303 	umull	r2, r3, r2, r3
 80005e6:	0c9b      	lsrs	r3, r3, #18
 80005e8:	3b01      	subs	r3, #1
 80005ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80005ec:	4b11      	ldr	r3, [pc, #68]	; (8000634 <HAL_InitTick+0xa4>)
 80005ee:	4a12      	ldr	r2, [pc, #72]	; (8000638 <HAL_InitTick+0xa8>)
 80005f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80005f2:	4b10      	ldr	r3, [pc, #64]	; (8000634 <HAL_InitTick+0xa4>)
 80005f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <HAL_InitTick+0xa4>)
 80005fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000600:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <HAL_InitTick+0xa4>)
 8000602:	2200      	movs	r2, #0
 8000604:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000606:	4b0b      	ldr	r3, [pc, #44]	; (8000634 <HAL_InitTick+0xa4>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800060c:	4809      	ldr	r0, [pc, #36]	; (8000634 <HAL_InitTick+0xa4>)
 800060e:	f001 f969 	bl	80018e4 <HAL_TIM_Base_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d104      	bne.n	8000622 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000618:	4806      	ldr	r0, [pc, #24]	; (8000634 <HAL_InitTick+0xa4>)
 800061a:	f001 f9bb 	bl	8001994 <HAL_TIM_Base_Start_IT>
 800061e:	4603      	mov	r3, r0
 8000620:	e000      	b.n	8000624 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000622:	2301      	movs	r3, #1
}
 8000624:	4618      	mov	r0, r3
 8000626:	3730      	adds	r7, #48	; 0x30
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	40021000 	.word	0x40021000
 8000630:	431bde83 	.word	0x431bde83
 8000634:	20002654 	.word	0x20002654
 8000638:	40012c00 	.word	0x40012c00

0800063c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800064c:	e7fe      	b.n	800064c <HardFault_Handler+0x4>

0800064e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800064e:	b480      	push	{r7}
 8000650:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000652:	e7fe      	b.n	8000652 <MemManage_Handler+0x4>

08000654 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000658:	e7fe      	b.n	8000658 <BusFault_Handler+0x4>

0800065a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800065a:	b480      	push	{r7}
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800065e:	e7fe      	b.n	800065e <UsageFault_Handler+0x4>

08000660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	bc80      	pop	{r7}
 800066a:	4770      	bx	lr

0800066c <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000670:	4802      	ldr	r0, [pc, #8]	; (800067c <TIM1_UP_IRQHandler+0x10>)
 8000672:	f001 f9e1 	bl	8001a38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20002654 	.word	0x20002654

08000680 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000684:	4802      	ldr	r0, [pc, #8]	; (8000690 <USART1_IRQHandler+0x10>)
 8000686:	f001 fc5d 	bl	8001f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200026dc 	.word	0x200026dc

08000694 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <USART2_IRQHandler+0x10>)
 800069a:	f001 fc53 	bl	8001f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	2000271c 	.word	0x2000271c

080006a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80006ac:	4802      	ldr	r0, [pc, #8]	; (80006b8 <USART3_IRQHandler+0x10>)
 80006ae:	f001 fc49 	bl	8001f44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	2000269c 	.word	0x2000269c

080006bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80006c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80006c4:	f000 fca0 	bl	8001008 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}

080006cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80006d0:	4b15      	ldr	r3, [pc, #84]	; (8000728 <SystemInit+0x5c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a14      	ldr	r2, [pc, #80]	; (8000728 <SystemInit+0x5c>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <SystemInit+0x5c>)
 80006de:	685a      	ldr	r2, [r3, #4]
 80006e0:	4911      	ldr	r1, [pc, #68]	; (8000728 <SystemInit+0x5c>)
 80006e2:	4b12      	ldr	r3, [pc, #72]	; (800072c <SystemInit+0x60>)
 80006e4:	4013      	ands	r3, r2
 80006e6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <SystemInit+0x5c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <SystemInit+0x5c>)
 80006ee:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80006f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006f6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <SystemInit+0x5c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <SystemInit+0x5c>)
 80006fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000702:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <SystemInit+0x5c>)
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <SystemInit+0x5c>)
 800070a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800070e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <SystemInit+0x5c>)
 8000712:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000716:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000718:	4b05      	ldr	r3, [pc, #20]	; (8000730 <SystemInit+0x64>)
 800071a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800071e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	40021000 	.word	0x40021000
 800072c:	f8ff0000 	.word	0xf8ff0000
 8000730:	e000ed00 	.word	0xe000ed00

08000734 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800073a:	4a12      	ldr	r2, [pc, #72]	; (8000784 <MX_USART1_UART_Init+0x50>)
 800073c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800074c:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000754:	2200      	movs	r2, #0
 8000756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000758:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800075a:	220c      	movs	r2, #12
 800075c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000760:	2200      	movs	r2, #0
 8000762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800076a:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_USART1_UART_Init+0x4c>)
 800076c:	f001 fb04 	bl	8001d78 <HAL_UART_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000776:	f7ff fecd 	bl	8000514 <Error_Handler>
  }

}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	200026dc 	.word	0x200026dc
 8000784:	40013800 	.word	0x40013800

08000788 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800078c:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800078e:	4a12      	ldr	r2, [pc, #72]	; (80007d8 <MX_USART2_UART_Init+0x50>)
 8000790:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b09      	ldr	r3, [pc, #36]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b06      	ldr	r3, [pc, #24]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007be:	4805      	ldr	r0, [pc, #20]	; (80007d4 <MX_USART2_UART_Init+0x4c>)
 80007c0:	f001 fada 	bl	8001d78 <HAL_UART_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007ca:	f7ff fea3 	bl	8000514 <Error_Handler>
  }

}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	2000271c 	.word	0x2000271c
 80007d8:	40004400 	.word	0x40004400

080007dc <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	; (800082c <MX_USART3_UART_Init+0x50>)
 80007e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000800:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 8000802:	220c      	movs	r2, #12
 8000804:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000806:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800080c:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART3_UART_Init+0x4c>)
 8000814:	f001 fab0 	bl	8001d78 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800081e:	f7ff fe79 	bl	8000514 <Error_Handler>
  }

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	2000269c 	.word	0x2000269c
 800082c:	40004800 	.word	0x40004800

08000830 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000838:	f107 0320 	add.w	r3, r7, #32
 800083c:	2200      	movs	r2, #0
 800083e:	601a      	str	r2, [r3, #0]
 8000840:	605a      	str	r2, [r3, #4]
 8000842:	609a      	str	r2, [r3, #8]
 8000844:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a59      	ldr	r2, [pc, #356]	; (80009b0 <HAL_UART_MspInit+0x180>)
 800084c:	4293      	cmp	r3, r2
 800084e:	d13a      	bne.n	80008c6 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000850:	4b58      	ldr	r3, [pc, #352]	; (80009b4 <HAL_UART_MspInit+0x184>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	4a57      	ldr	r2, [pc, #348]	; (80009b4 <HAL_UART_MspInit+0x184>)
 8000856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085a:	6193      	str	r3, [r2, #24]
 800085c:	4b55      	ldr	r3, [pc, #340]	; (80009b4 <HAL_UART_MspInit+0x184>)
 800085e:	699b      	ldr	r3, [r3, #24]
 8000860:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000864:	61fb      	str	r3, [r7, #28]
 8000866:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000868:	4b52      	ldr	r3, [pc, #328]	; (80009b4 <HAL_UART_MspInit+0x184>)
 800086a:	699b      	ldr	r3, [r3, #24]
 800086c:	4a51      	ldr	r2, [pc, #324]	; (80009b4 <HAL_UART_MspInit+0x184>)
 800086e:	f043 0304 	orr.w	r3, r3, #4
 8000872:	6193      	str	r3, [r2, #24]
 8000874:	4b4f      	ldr	r3, [pc, #316]	; (80009b4 <HAL_UART_MspInit+0x184>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	f003 0304 	and.w	r3, r3, #4
 800087c:	61bb      	str	r3, [r7, #24]
 800087e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000884:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	2302      	movs	r3, #2
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0320 	add.w	r3, r7, #32
 8000892:	4619      	mov	r1, r3
 8000894:	4848      	ldr	r0, [pc, #288]	; (80009b8 <HAL_UART_MspInit+0x188>)
 8000896:	f000 fa45 	bl	8000d24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800089a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800089e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 0320 	add.w	r3, r7, #32
 80008ac:	4619      	mov	r1, r3
 80008ae:	4842      	ldr	r0, [pc, #264]	; (80009b8 <HAL_UART_MspInit+0x188>)
 80008b0:	f000 fa38 	bl	8000d24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2105      	movs	r1, #5
 80008b8:	2025      	movs	r0, #37	; 0x25
 80008ba:	f000 f992 	bl	8000be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008be:	2025      	movs	r0, #37	; 0x25
 80008c0:	f000 f9ab 	bl	8000c1a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80008c4:	e070      	b.n	80009a8 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART2)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	4a3c      	ldr	r2, [pc, #240]	; (80009bc <HAL_UART_MspInit+0x18c>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d12c      	bne.n	800092a <HAL_UART_MspInit+0xfa>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008d0:	4b38      	ldr	r3, [pc, #224]	; (80009b4 <HAL_UART_MspInit+0x184>)
 80008d2:	69db      	ldr	r3, [r3, #28]
 80008d4:	4a37      	ldr	r2, [pc, #220]	; (80009b4 <HAL_UART_MspInit+0x184>)
 80008d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008da:	61d3      	str	r3, [r2, #28]
 80008dc:	4b35      	ldr	r3, [pc, #212]	; (80009b4 <HAL_UART_MspInit+0x184>)
 80008de:	69db      	ldr	r3, [r3, #28]
 80008e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008e4:	617b      	str	r3, [r7, #20]
 80008e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e8:	4b32      	ldr	r3, [pc, #200]	; (80009b4 <HAL_UART_MspInit+0x184>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	4a31      	ldr	r2, [pc, #196]	; (80009b4 <HAL_UART_MspInit+0x184>)
 80008ee:	f043 0304 	orr.w	r3, r3, #4
 80008f2:	6193      	str	r3, [r2, #24]
 80008f4:	4b2f      	ldr	r3, [pc, #188]	; (80009b4 <HAL_UART_MspInit+0x184>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	f003 0304 	and.w	r3, r3, #4
 80008fc:	613b      	str	r3, [r7, #16]
 80008fe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000900:	230c      	movs	r3, #12
 8000902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2302      	movs	r3, #2
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800090c:	f107 0320 	add.w	r3, r7, #32
 8000910:	4619      	mov	r1, r3
 8000912:	4829      	ldr	r0, [pc, #164]	; (80009b8 <HAL_UART_MspInit+0x188>)
 8000914:	f000 fa06 	bl	8000d24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000918:	2200      	movs	r2, #0
 800091a:	2105      	movs	r1, #5
 800091c:	2026      	movs	r0, #38	; 0x26
 800091e:	f000 f960 	bl	8000be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000922:	2026      	movs	r0, #38	; 0x26
 8000924:	f000 f979 	bl	8000c1a <HAL_NVIC_EnableIRQ>
}
 8000928:	e03e      	b.n	80009a8 <HAL_UART_MspInit+0x178>
  else if(uartHandle->Instance==USART3)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	4a24      	ldr	r2, [pc, #144]	; (80009c0 <HAL_UART_MspInit+0x190>)
 8000930:	4293      	cmp	r3, r2
 8000932:	d139      	bne.n	80009a8 <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000934:	4b1f      	ldr	r3, [pc, #124]	; (80009b4 <HAL_UART_MspInit+0x184>)
 8000936:	69db      	ldr	r3, [r3, #28]
 8000938:	4a1e      	ldr	r2, [pc, #120]	; (80009b4 <HAL_UART_MspInit+0x184>)
 800093a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800093e:	61d3      	str	r3, [r2, #28]
 8000940:	4b1c      	ldr	r3, [pc, #112]	; (80009b4 <HAL_UART_MspInit+0x184>)
 8000942:	69db      	ldr	r3, [r3, #28]
 8000944:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <HAL_UART_MspInit+0x184>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	4a18      	ldr	r2, [pc, #96]	; (80009b4 <HAL_UART_MspInit+0x184>)
 8000952:	f043 0308 	orr.w	r3, r3, #8
 8000956:	6193      	str	r3, [r2, #24]
 8000958:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <HAL_UART_MspInit+0x184>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f003 0308 	and.w	r3, r3, #8
 8000960:	60bb      	str	r3, [r7, #8]
 8000962:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000964:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000968:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800096e:	2303      	movs	r3, #3
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000972:	f107 0320 	add.w	r3, r7, #32
 8000976:	4619      	mov	r1, r3
 8000978:	4812      	ldr	r0, [pc, #72]	; (80009c4 <HAL_UART_MspInit+0x194>)
 800097a:	f000 f9d3 	bl	8000d24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800097e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000982:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098c:	f107 0320 	add.w	r3, r7, #32
 8000990:	4619      	mov	r1, r3
 8000992:	480c      	ldr	r0, [pc, #48]	; (80009c4 <HAL_UART_MspInit+0x194>)
 8000994:	f000 f9c6 	bl	8000d24 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2105      	movs	r1, #5
 800099c:	2027      	movs	r0, #39	; 0x27
 800099e:	f000 f920 	bl	8000be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80009a2:	2027      	movs	r0, #39	; 0x27
 80009a4:	f000 f939 	bl	8000c1a <HAL_NVIC_EnableIRQ>
}
 80009a8:	bf00      	nop
 80009aa:	3730      	adds	r7, #48	; 0x30
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40013800 	.word	0x40013800
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40010800 	.word	0x40010800
 80009bc:	40004400 	.word	0x40004400
 80009c0:	40004800 	.word	0x40004800
 80009c4:	40010c00 	.word	0x40010c00

080009c8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80009c8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80009ca:	e003      	b.n	80009d4 <LoopCopyDataInit>

080009cc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80009cc:	4b0b      	ldr	r3, [pc, #44]	; (80009fc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80009ce:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009d0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009d2:	3104      	adds	r1, #4

080009d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009d4:	480a      	ldr	r0, [pc, #40]	; (8000a00 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80009d6:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80009d8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009da:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009dc:	d3f6      	bcc.n	80009cc <CopyDataInit>
  ldr r2, =_sbss
 80009de:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80009e0:	e002      	b.n	80009e8 <LoopFillZerobss>

080009e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80009e4:	f842 3b04 	str.w	r3, [r2], #4

080009e8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <LoopFillZerobss+0x24>)
  cmp r2, r3
 80009ea:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009ec:	d3f9      	bcc.n	80009e2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009ee:	f7ff fe6d 	bl	80006cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009f2:	f006 fb23 	bl	800703c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009f6:	f7ff fccd 	bl	8000394 <main>
  bx lr
 80009fa:	4770      	bx	lr
  ldr r3, =_sidata
 80009fc:	08007298 	.word	0x08007298
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a04:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000a08:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000a0c:	200027a0 	.word	0x200027a0

08000a10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a10:	e7fe      	b.n	8000a10 <ADC1_2_IRQHandler>
	...

08000a14 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a18:	4b08      	ldr	r3, [pc, #32]	; (8000a3c <HAL_Init+0x28>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_Init+0x28>)
 8000a1e:	f043 0310 	orr.w	r3, r3, #16
 8000a22:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a24:	2003      	movs	r0, #3
 8000a26:	f000 f8d1 	bl	8000bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff fdb0 	bl	8000590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a30:	f7ff fd76 	bl	8000520 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40022000 	.word	0x40022000

08000a40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a44:	4b05      	ldr	r3, [pc, #20]	; (8000a5c <HAL_IncTick+0x1c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	461a      	mov	r2, r3
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <HAL_IncTick+0x20>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4413      	add	r3, r2
 8000a50:	4a03      	ldr	r2, [pc, #12]	; (8000a60 <HAL_IncTick+0x20>)
 8000a52:	6013      	str	r3, [r2, #0]
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	2000275c 	.word	0x2000275c

08000a64 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return uwTick;
 8000a68:	4b02      	ldr	r3, [pc, #8]	; (8000a74 <HAL_GetTick+0x10>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
}
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr
 8000a74:	2000275c 	.word	0x2000275c

08000a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b085      	sub	sp, #20
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	f003 0307 	and.w	r3, r3, #7
 8000a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a88:	4b0c      	ldr	r3, [pc, #48]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a94:	4013      	ands	r3, r2
 8000a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <__NVIC_SetPriorityGrouping+0x44>)
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	60d3      	str	r3, [r2, #12]
}
 8000ab0:	bf00      	nop
 8000ab2:	3714      	adds	r7, #20
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	0a1b      	lsrs	r3, r3, #8
 8000aca:	f003 0307 	and.w	r3, r3, #7
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	e000ed00 	.word	0xe000ed00

08000adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	db0b      	blt.n	8000b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f003 021f 	and.w	r2, r3, #31
 8000af4:	4906      	ldr	r1, [pc, #24]	; (8000b10 <__NVIC_EnableIRQ+0x34>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	095b      	lsrs	r3, r3, #5
 8000afc:	2001      	movs	r0, #1
 8000afe:	fa00 f202 	lsl.w	r2, r0, r2
 8000b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	e000e100 	.word	0xe000e100

08000b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	6039      	str	r1, [r7, #0]
 8000b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	db0a      	blt.n	8000b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	b2da      	uxtb	r2, r3
 8000b2c:	490c      	ldr	r1, [pc, #48]	; (8000b60 <__NVIC_SetPriority+0x4c>)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	0112      	lsls	r2, r2, #4
 8000b34:	b2d2      	uxtb	r2, r2
 8000b36:	440b      	add	r3, r1
 8000b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b3c:	e00a      	b.n	8000b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	b2da      	uxtb	r2, r3
 8000b42:	4908      	ldr	r1, [pc, #32]	; (8000b64 <__NVIC_SetPriority+0x50>)
 8000b44:	79fb      	ldrb	r3, [r7, #7]
 8000b46:	f003 030f 	and.w	r3, r3, #15
 8000b4a:	3b04      	subs	r3, #4
 8000b4c:	0112      	lsls	r2, r2, #4
 8000b4e:	b2d2      	uxtb	r2, r2
 8000b50:	440b      	add	r3, r1
 8000b52:	761a      	strb	r2, [r3, #24]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000e100 	.word	0xe000e100
 8000b64:	e000ed00 	.word	0xe000ed00

08000b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b089      	sub	sp, #36	; 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	f1c3 0307 	rsb	r3, r3, #7
 8000b82:	2b04      	cmp	r3, #4
 8000b84:	bf28      	it	cs
 8000b86:	2304      	movcs	r3, #4
 8000b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3304      	adds	r3, #4
 8000b8e:	2b06      	cmp	r3, #6
 8000b90:	d902      	bls.n	8000b98 <NVIC_EncodePriority+0x30>
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	3b03      	subs	r3, #3
 8000b96:	e000      	b.n	8000b9a <NVIC_EncodePriority+0x32>
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000ba0:	69bb      	ldr	r3, [r7, #24]
 8000ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba6:	43da      	mvns	r2, r3
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	401a      	ands	r2, r3
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bba:	43d9      	mvns	r1, r3
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc0:	4313      	orrs	r3, r2
         );
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3724      	adds	r7, #36	; 0x24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr

08000bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff ff4f 	bl	8000a78 <__NVIC_SetPriorityGrouping>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b086      	sub	sp, #24
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf4:	f7ff ff64 	bl	8000ac0 <__NVIC_GetPriorityGrouping>
 8000bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	68b9      	ldr	r1, [r7, #8]
 8000bfe:	6978      	ldr	r0, [r7, #20]
 8000c00:	f7ff ffb2 	bl	8000b68 <NVIC_EncodePriority>
 8000c04:	4602      	mov	r2, r0
 8000c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff81 	bl	8000b14 <__NVIC_SetPriority>
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff57 	bl	8000adc <__NVIC_EnableIRQ>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c40:	2300      	movs	r3, #0
 8000c42:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d005      	beq.n	8000c5a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	2204      	movs	r2, #4
 8000c52:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
 8000c58:	e051      	b.n	8000cfe <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	f022 020e 	bic.w	r2, r2, #14
 8000c68:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f022 0201 	bic.w	r2, r2, #1
 8000c78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4a22      	ldr	r2, [pc, #136]	; (8000d08 <HAL_DMA_Abort_IT+0xd0>)
 8000c80:	4293      	cmp	r3, r2
 8000c82:	d029      	beq.n	8000cd8 <HAL_DMA_Abort_IT+0xa0>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a20      	ldr	r2, [pc, #128]	; (8000d0c <HAL_DMA_Abort_IT+0xd4>)
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	d022      	beq.n	8000cd4 <HAL_DMA_Abort_IT+0x9c>
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a1f      	ldr	r2, [pc, #124]	; (8000d10 <HAL_DMA_Abort_IT+0xd8>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d01a      	beq.n	8000cce <HAL_DMA_Abort_IT+0x96>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a1d      	ldr	r2, [pc, #116]	; (8000d14 <HAL_DMA_Abort_IT+0xdc>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d012      	beq.n	8000cc8 <HAL_DMA_Abort_IT+0x90>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <HAL_DMA_Abort_IT+0xe0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d00a      	beq.n	8000cc2 <HAL_DMA_Abort_IT+0x8a>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a1a      	ldr	r2, [pc, #104]	; (8000d1c <HAL_DMA_Abort_IT+0xe4>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d102      	bne.n	8000cbc <HAL_DMA_Abort_IT+0x84>
 8000cb6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cba:	e00e      	b.n	8000cda <HAL_DMA_Abort_IT+0xa2>
 8000cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cc0:	e00b      	b.n	8000cda <HAL_DMA_Abort_IT+0xa2>
 8000cc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cc6:	e008      	b.n	8000cda <HAL_DMA_Abort_IT+0xa2>
 8000cc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ccc:	e005      	b.n	8000cda <HAL_DMA_Abort_IT+0xa2>
 8000cce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cd2:	e002      	b.n	8000cda <HAL_DMA_Abort_IT+0xa2>
 8000cd4:	2310      	movs	r3, #16
 8000cd6:	e000      	b.n	8000cda <HAL_DMA_Abort_IT+0xa2>
 8000cd8:	2301      	movs	r3, #1
 8000cda:	4a11      	ldr	r2, [pc, #68]	; (8000d20 <HAL_DMA_Abort_IT+0xe8>)
 8000cdc:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d003      	beq.n	8000cfe <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	4798      	blx	r3
    } 
  }
  return status;
 8000cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3710      	adds	r7, #16
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	40020008 	.word	0x40020008
 8000d0c:	4002001c 	.word	0x4002001c
 8000d10:	40020030 	.word	0x40020030
 8000d14:	40020044 	.word	0x40020044
 8000d18:	40020058 	.word	0x40020058
 8000d1c:	4002006c 	.word	0x4002006c
 8000d20:	40020000 	.word	0x40020000

08000d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b08b      	sub	sp, #44	; 0x2c
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d32:	2300      	movs	r3, #0
 8000d34:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d36:	e127      	b.n	8000f88 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	69fa      	ldr	r2, [r7, #28]
 8000d48:	4013      	ands	r3, r2
 8000d4a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d4c:	69ba      	ldr	r2, [r7, #24]
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	f040 8116 	bne.w	8000f82 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b12      	cmp	r3, #18
 8000d5c:	d034      	beq.n	8000dc8 <HAL_GPIO_Init+0xa4>
 8000d5e:	2b12      	cmp	r3, #18
 8000d60:	d80d      	bhi.n	8000d7e <HAL_GPIO_Init+0x5a>
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d02b      	beq.n	8000dbe <HAL_GPIO_Init+0x9a>
 8000d66:	2b02      	cmp	r3, #2
 8000d68:	d804      	bhi.n	8000d74 <HAL_GPIO_Init+0x50>
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d031      	beq.n	8000dd2 <HAL_GPIO_Init+0xae>
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d01c      	beq.n	8000dac <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d72:	e048      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d043      	beq.n	8000e00 <HAL_GPIO_Init+0xdc>
 8000d78:	2b11      	cmp	r3, #17
 8000d7a:	d01b      	beq.n	8000db4 <HAL_GPIO_Init+0x90>
          break;
 8000d7c:	e043      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d7e:	4a89      	ldr	r2, [pc, #548]	; (8000fa4 <HAL_GPIO_Init+0x280>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d026      	beq.n	8000dd2 <HAL_GPIO_Init+0xae>
 8000d84:	4a87      	ldr	r2, [pc, #540]	; (8000fa4 <HAL_GPIO_Init+0x280>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d806      	bhi.n	8000d98 <HAL_GPIO_Init+0x74>
 8000d8a:	4a87      	ldr	r2, [pc, #540]	; (8000fa8 <HAL_GPIO_Init+0x284>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	d020      	beq.n	8000dd2 <HAL_GPIO_Init+0xae>
 8000d90:	4a86      	ldr	r2, [pc, #536]	; (8000fac <HAL_GPIO_Init+0x288>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d01d      	beq.n	8000dd2 <HAL_GPIO_Init+0xae>
          break;
 8000d96:	e036      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000d98:	4a85      	ldr	r2, [pc, #532]	; (8000fb0 <HAL_GPIO_Init+0x28c>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d019      	beq.n	8000dd2 <HAL_GPIO_Init+0xae>
 8000d9e:	4a85      	ldr	r2, [pc, #532]	; (8000fb4 <HAL_GPIO_Init+0x290>)
 8000da0:	4293      	cmp	r3, r2
 8000da2:	d016      	beq.n	8000dd2 <HAL_GPIO_Init+0xae>
 8000da4:	4a84      	ldr	r2, [pc, #528]	; (8000fb8 <HAL_GPIO_Init+0x294>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0xae>
          break;
 8000daa:	e02c      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	623b      	str	r3, [r7, #32]
          break;
 8000db2:	e028      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	3304      	adds	r3, #4
 8000dba:	623b      	str	r3, [r7, #32]
          break;
 8000dbc:	e023      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	3308      	adds	r3, #8
 8000dc4:	623b      	str	r3, [r7, #32]
          break;
 8000dc6:	e01e      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	330c      	adds	r3, #12
 8000dce:	623b      	str	r3, [r7, #32]
          break;
 8000dd0:	e019      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d102      	bne.n	8000de0 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000dda:	2304      	movs	r3, #4
 8000ddc:	623b      	str	r3, [r7, #32]
          break;
 8000dde:	e012      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d105      	bne.n	8000df4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000de8:	2308      	movs	r3, #8
 8000dea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	69fa      	ldr	r2, [r7, #28]
 8000df0:	611a      	str	r2, [r3, #16]
          break;
 8000df2:	e008      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000df4:	2308      	movs	r3, #8
 8000df6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69fa      	ldr	r2, [r7, #28]
 8000dfc:	615a      	str	r2, [r3, #20]
          break;
 8000dfe:	e002      	b.n	8000e06 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e00:	2300      	movs	r3, #0
 8000e02:	623b      	str	r3, [r7, #32]
          break;
 8000e04:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	2bff      	cmp	r3, #255	; 0xff
 8000e0a:	d801      	bhi.n	8000e10 <HAL_GPIO_Init+0xec>
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	e001      	b.n	8000e14 <HAL_GPIO_Init+0xf0>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	3304      	adds	r3, #4
 8000e14:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	2bff      	cmp	r3, #255	; 0xff
 8000e1a:	d802      	bhi.n	8000e22 <HAL_GPIO_Init+0xfe>
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	e002      	b.n	8000e28 <HAL_GPIO_Init+0x104>
 8000e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e24:	3b08      	subs	r3, #8
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	210f      	movs	r1, #15
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	fa01 f303 	lsl.w	r3, r1, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	401a      	ands	r2, r3
 8000e3a:	6a39      	ldr	r1, [r7, #32]
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	431a      	orrs	r2, r3
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f000 8096 	beq.w	8000f82 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000e56:	4b59      	ldr	r3, [pc, #356]	; (8000fbc <HAL_GPIO_Init+0x298>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	4a58      	ldr	r2, [pc, #352]	; (8000fbc <HAL_GPIO_Init+0x298>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	6193      	str	r3, [r2, #24]
 8000e62:	4b56      	ldr	r3, [pc, #344]	; (8000fbc <HAL_GPIO_Init+0x298>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000e6e:	4a54      	ldr	r2, [pc, #336]	; (8000fc0 <HAL_GPIO_Init+0x29c>)
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	089b      	lsrs	r3, r3, #2
 8000e74:	3302      	adds	r3, #2
 8000e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e7a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7e:	f003 0303 	and.w	r3, r3, #3
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	220f      	movs	r2, #15
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	68fa      	ldr	r2, [r7, #12]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4b      	ldr	r2, [pc, #300]	; (8000fc4 <HAL_GPIO_Init+0x2a0>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d013      	beq.n	8000ec2 <HAL_GPIO_Init+0x19e>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4a      	ldr	r2, [pc, #296]	; (8000fc8 <HAL_GPIO_Init+0x2a4>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d00d      	beq.n	8000ebe <HAL_GPIO_Init+0x19a>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a49      	ldr	r2, [pc, #292]	; (8000fcc <HAL_GPIO_Init+0x2a8>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d007      	beq.n	8000eba <HAL_GPIO_Init+0x196>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a48      	ldr	r2, [pc, #288]	; (8000fd0 <HAL_GPIO_Init+0x2ac>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d101      	bne.n	8000eb6 <HAL_GPIO_Init+0x192>
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e006      	b.n	8000ec4 <HAL_GPIO_Init+0x1a0>
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	e004      	b.n	8000ec4 <HAL_GPIO_Init+0x1a0>
 8000eba:	2302      	movs	r3, #2
 8000ebc:	e002      	b.n	8000ec4 <HAL_GPIO_Init+0x1a0>
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e000      	b.n	8000ec4 <HAL_GPIO_Init+0x1a0>
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ec6:	f002 0203 	and.w	r2, r2, #3
 8000eca:	0092      	lsls	r2, r2, #2
 8000ecc:	4093      	lsls	r3, r2
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ed4:	493a      	ldr	r1, [pc, #232]	; (8000fc0 <HAL_GPIO_Init+0x29c>)
 8000ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ed8:	089b      	lsrs	r3, r3, #2
 8000eda:	3302      	adds	r3, #2
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d006      	beq.n	8000efc <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eee:	4b39      	ldr	r3, [pc, #228]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	4938      	ldr	r1, [pc, #224]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000ef4:	69bb      	ldr	r3, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	600b      	str	r3, [r1, #0]
 8000efa:	e006      	b.n	8000f0a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000efc:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	43db      	mvns	r3, r3
 8000f04:	4933      	ldr	r1, [pc, #204]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f06:	4013      	ands	r3, r2
 8000f08:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d006      	beq.n	8000f24 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000f16:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	492e      	ldr	r1, [pc, #184]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	604b      	str	r3, [r1, #4]
 8000f22:	e006      	b.n	8000f32 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000f24:	4b2b      	ldr	r3, [pc, #172]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	43db      	mvns	r3, r3
 8000f2c:	4929      	ldr	r1, [pc, #164]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f2e:	4013      	ands	r3, r2
 8000f30:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d006      	beq.n	8000f4c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f3e:	4b25      	ldr	r3, [pc, #148]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f40:	689a      	ldr	r2, [r3, #8]
 8000f42:	4924      	ldr	r1, [pc, #144]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	608b      	str	r3, [r1, #8]
 8000f4a:	e006      	b.n	8000f5a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f4c:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	491f      	ldr	r1, [pc, #124]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f56:	4013      	ands	r3, r2
 8000f58:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d006      	beq.n	8000f74 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000f66:	4b1b      	ldr	r3, [pc, #108]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f68:	68da      	ldr	r2, [r3, #12]
 8000f6a:	491a      	ldr	r1, [pc, #104]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	60cb      	str	r3, [r1, #12]
 8000f72:	e006      	b.n	8000f82 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f76:	68da      	ldr	r2, [r3, #12]
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	4915      	ldr	r1, [pc, #84]	; (8000fd4 <HAL_GPIO_Init+0x2b0>)
 8000f7e:	4013      	ands	r3, r2
 8000f80:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f84:	3301      	adds	r3, #1
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	f47f aed0 	bne.w	8000d38 <HAL_GPIO_Init+0x14>
  }
}
 8000f98:	bf00      	nop
 8000f9a:	372c      	adds	r7, #44	; 0x2c
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	10210000 	.word	0x10210000
 8000fa8:	10110000 	.word	0x10110000
 8000fac:	10120000 	.word	0x10120000
 8000fb0:	10310000 	.word	0x10310000
 8000fb4:	10320000 	.word	0x10320000
 8000fb8:	10220000 	.word	0x10220000
 8000fbc:	40021000 	.word	0x40021000
 8000fc0:	40010000 	.word	0x40010000
 8000fc4:	40010800 	.word	0x40010800
 8000fc8:	40010c00 	.word	0x40010c00
 8000fcc:	40011000 	.word	0x40011000
 8000fd0:	40011400 	.word	0x40011400
 8000fd4:	40010400 	.word	0x40010400

08000fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fe8:	787b      	ldrb	r3, [r7, #1]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fee:	887a      	ldrh	r2, [r7, #2]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000ff4:	e003      	b.n	8000ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000ff6:	887b      	ldrh	r3, [r7, #2]
 8000ff8:	041a      	lsls	r2, r3, #16
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	611a      	str	r2, [r3, #16]
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr

08001008 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001014:	695a      	ldr	r2, [r3, #20]
 8001016:	88fb      	ldrh	r3, [r7, #6]
 8001018:	4013      	ands	r3, r2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d006      	beq.n	800102c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800101e:	4a05      	ldr	r2, [pc, #20]	; (8001034 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001020:	88fb      	ldrh	r3, [r7, #6]
 8001022:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001024:	88fb      	ldrh	r3, [r7, #6]
 8001026:	4618      	mov	r0, r3
 8001028:	f000 f806 	bl	8001038 <HAL_GPIO_EXTI_Callback>
  }
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40010400 	.word	0x40010400

08001038 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001042:	bf00      	nop
 8001044:	370c      	adds	r7, #12
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d101      	bne.n	800105e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e26c      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 8087 	beq.w	800117a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800106c:	4b92      	ldr	r3, [pc, #584]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 030c 	and.w	r3, r3, #12
 8001074:	2b04      	cmp	r3, #4
 8001076:	d00c      	beq.n	8001092 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001078:	4b8f      	ldr	r3, [pc, #572]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 030c 	and.w	r3, r3, #12
 8001080:	2b08      	cmp	r3, #8
 8001082:	d112      	bne.n	80010aa <HAL_RCC_OscConfig+0x5e>
 8001084:	4b8c      	ldr	r3, [pc, #560]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001086:	685b      	ldr	r3, [r3, #4]
 8001088:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800108c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001090:	d10b      	bne.n	80010aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001092:	4b89      	ldr	r3, [pc, #548]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d06c      	beq.n	8001178 <HAL_RCC_OscConfig+0x12c>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d168      	bne.n	8001178 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	e246      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010b2:	d106      	bne.n	80010c2 <HAL_RCC_OscConfig+0x76>
 80010b4:	4b80      	ldr	r3, [pc, #512]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a7f      	ldr	r2, [pc, #508]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	e02e      	b.n	8001120 <HAL_RCC_OscConfig+0xd4>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d10c      	bne.n	80010e4 <HAL_RCC_OscConfig+0x98>
 80010ca:	4b7b      	ldr	r3, [pc, #492]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a7a      	ldr	r2, [pc, #488]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010d4:	6013      	str	r3, [r2, #0]
 80010d6:	4b78      	ldr	r3, [pc, #480]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a77      	ldr	r2, [pc, #476]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e01d      	b.n	8001120 <HAL_RCC_OscConfig+0xd4>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ec:	d10c      	bne.n	8001108 <HAL_RCC_OscConfig+0xbc>
 80010ee:	4b72      	ldr	r3, [pc, #456]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a71      	ldr	r2, [pc, #452]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b6f      	ldr	r3, [pc, #444]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a6e      	ldr	r2, [pc, #440]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e00b      	b.n	8001120 <HAL_RCC_OscConfig+0xd4>
 8001108:	4b6b      	ldr	r3, [pc, #428]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a6a      	ldr	r2, [pc, #424]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800110e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b68      	ldr	r3, [pc, #416]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a67      	ldr	r2, [pc, #412]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800111a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800111e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d013      	beq.n	8001150 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff fc9c 	bl	8000a64 <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001130:	f7ff fc98 	bl	8000a64 <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b64      	cmp	r3, #100	; 0x64
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e1fa      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	4b5d      	ldr	r3, [pc, #372]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0xe4>
 800114e:	e014      	b.n	800117a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fc88 	bl	8000a64 <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fc84 	bl	8000a64 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e1e6      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116a:	4b53      	ldr	r3, [pc, #332]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0x10c>
 8001176:	e000      	b.n	800117a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d063      	beq.n	800124e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001186:	4b4c      	ldr	r3, [pc, #304]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00b      	beq.n	80011aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001192:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 030c 	and.w	r3, r3, #12
 800119a:	2b08      	cmp	r3, #8
 800119c:	d11c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x18c>
 800119e:	4b46      	ldr	r3, [pc, #280]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d116      	bne.n	80011d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011aa:	4b43      	ldr	r3, [pc, #268]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <HAL_RCC_OscConfig+0x176>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d001      	beq.n	80011c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e1ba      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c2:	4b3d      	ldr	r3, [pc, #244]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4939      	ldr	r1, [pc, #228]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d6:	e03a      	b.n	800124e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	691b      	ldr	r3, [r3, #16]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d020      	beq.n	8001222 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e0:	4b36      	ldr	r3, [pc, #216]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e6:	f7ff fc3d 	bl	8000a64 <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011ee:	f7ff fc39 	bl	8000a64 <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e19b      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120c:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	695b      	ldr	r3, [r3, #20]
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4927      	ldr	r1, [pc, #156]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 800121c:	4313      	orrs	r3, r2
 800121e:	600b      	str	r3, [r1, #0]
 8001220:	e015      	b.n	800124e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001222:	4b26      	ldr	r3, [pc, #152]	; (80012bc <HAL_RCC_OscConfig+0x270>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fc1c 	bl	8000a64 <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001230:	f7ff fc18 	bl	8000a64 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e17a      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d03a      	beq.n	80012d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	699b      	ldr	r3, [r3, #24]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d019      	beq.n	8001296 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001262:	4b17      	ldr	r3, [pc, #92]	; (80012c0 <HAL_RCC_OscConfig+0x274>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001268:	f7ff fbfc 	bl	8000a64 <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fbf8 	bl	8000a64 <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e15a      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001282:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <HAL_RCC_OscConfig+0x26c>)
 8001284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800128e:	2001      	movs	r0, #1
 8001290:	f000 fb0a 	bl	80018a8 <RCC_Delay>
 8001294:	e01c      	b.n	80012d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001296:	4b0a      	ldr	r3, [pc, #40]	; (80012c0 <HAL_RCC_OscConfig+0x274>)
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800129c:	f7ff fbe2 	bl	8000a64 <HAL_GetTick>
 80012a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012a2:	e00f      	b.n	80012c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a4:	f7ff fbde 	bl	8000a64 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d908      	bls.n	80012c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e140      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000
 80012bc:	42420000 	.word	0x42420000
 80012c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012c4:	4b9e      	ldr	r3, [pc, #632]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1e9      	bne.n	80012a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	f000 80a6 	beq.w	800142a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012de:	2300      	movs	r3, #0
 80012e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012e2:	4b97      	ldr	r3, [pc, #604]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80012e4:	69db      	ldr	r3, [r3, #28]
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10d      	bne.n	800130a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	4b94      	ldr	r3, [pc, #592]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a93      	ldr	r2, [pc, #588]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b91      	ldr	r3, [pc, #580]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001306:	2301      	movs	r3, #1
 8001308:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	4b8e      	ldr	r3, [pc, #568]	; (8001544 <HAL_RCC_OscConfig+0x4f8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001312:	2b00      	cmp	r3, #0
 8001314:	d118      	bne.n	8001348 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001316:	4b8b      	ldr	r3, [pc, #556]	; (8001544 <HAL_RCC_OscConfig+0x4f8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a8a      	ldr	r2, [pc, #552]	; (8001544 <HAL_RCC_OscConfig+0x4f8>)
 800131c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001320:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001322:	f7ff fb9f 	bl	8000a64 <HAL_GetTick>
 8001326:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001328:	e008      	b.n	800133c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800132a:	f7ff fb9b 	bl	8000a64 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	1ad3      	subs	r3, r2, r3
 8001334:	2b64      	cmp	r3, #100	; 0x64
 8001336:	d901      	bls.n	800133c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001338:	2303      	movs	r3, #3
 800133a:	e0fd      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800133c:	4b81      	ldr	r3, [pc, #516]	; (8001544 <HAL_RCC_OscConfig+0x4f8>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001344:	2b00      	cmp	r3, #0
 8001346:	d0f0      	beq.n	800132a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d106      	bne.n	800135e <HAL_RCC_OscConfig+0x312>
 8001350:	4b7b      	ldr	r3, [pc, #492]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4a7a      	ldr	r2, [pc, #488]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001356:	f043 0301 	orr.w	r3, r3, #1
 800135a:	6213      	str	r3, [r2, #32]
 800135c:	e02d      	b.n	80013ba <HAL_RCC_OscConfig+0x36e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	68db      	ldr	r3, [r3, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0x334>
 8001366:	4b76      	ldr	r3, [pc, #472]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	4a75      	ldr	r2, [pc, #468]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800136c:	f023 0301 	bic.w	r3, r3, #1
 8001370:	6213      	str	r3, [r2, #32]
 8001372:	4b73      	ldr	r3, [pc, #460]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4a72      	ldr	r2, [pc, #456]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001378:	f023 0304 	bic.w	r3, r3, #4
 800137c:	6213      	str	r3, [r2, #32]
 800137e:	e01c      	b.n	80013ba <HAL_RCC_OscConfig+0x36e>
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	2b05      	cmp	r3, #5
 8001386:	d10c      	bne.n	80013a2 <HAL_RCC_OscConfig+0x356>
 8001388:	4b6d      	ldr	r3, [pc, #436]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	4a6c      	ldr	r2, [pc, #432]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800138e:	f043 0304 	orr.w	r3, r3, #4
 8001392:	6213      	str	r3, [r2, #32]
 8001394:	4b6a      	ldr	r3, [pc, #424]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	4a69      	ldr	r2, [pc, #420]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800139a:	f043 0301 	orr.w	r3, r3, #1
 800139e:	6213      	str	r3, [r2, #32]
 80013a0:	e00b      	b.n	80013ba <HAL_RCC_OscConfig+0x36e>
 80013a2:	4b67      	ldr	r3, [pc, #412]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4a66      	ldr	r2, [pc, #408]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80013a8:	f023 0301 	bic.w	r3, r3, #1
 80013ac:	6213      	str	r3, [r2, #32]
 80013ae:	4b64      	ldr	r3, [pc, #400]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80013b0:	6a1b      	ldr	r3, [r3, #32]
 80013b2:	4a63      	ldr	r2, [pc, #396]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80013b4:	f023 0304 	bic.w	r3, r3, #4
 80013b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	68db      	ldr	r3, [r3, #12]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d015      	beq.n	80013ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c2:	f7ff fb4f 	bl	8000a64 <HAL_GetTick>
 80013c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c8:	e00a      	b.n	80013e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ca:	f7ff fb4b 	bl	8000a64 <HAL_GetTick>
 80013ce:	4602      	mov	r2, r0
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d8:	4293      	cmp	r3, r2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e0ab      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013e0:	4b57      	ldr	r3, [pc, #348]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	f003 0302 	and.w	r3, r3, #2
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0ee      	beq.n	80013ca <HAL_RCC_OscConfig+0x37e>
 80013ec:	e014      	b.n	8001418 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ee:	f7ff fb39 	bl	8000a64 <HAL_GetTick>
 80013f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013f4:	e00a      	b.n	800140c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013f6:	f7ff fb35 	bl	8000a64 <HAL_GetTick>
 80013fa:	4602      	mov	r2, r0
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	f241 3288 	movw	r2, #5000	; 0x1388
 8001404:	4293      	cmp	r3, r2
 8001406:	d901      	bls.n	800140c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001408:	2303      	movs	r3, #3
 800140a:	e095      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800140c:	4b4c      	ldr	r3, [pc, #304]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800140e:	6a1b      	ldr	r3, [r3, #32]
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d1ee      	bne.n	80013f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001418:	7dfb      	ldrb	r3, [r7, #23]
 800141a:	2b01      	cmp	r3, #1
 800141c:	d105      	bne.n	800142a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800141e:	4b48      	ldr	r3, [pc, #288]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	4a47      	ldr	r2, [pc, #284]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001424:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001428:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	69db      	ldr	r3, [r3, #28]
 800142e:	2b00      	cmp	r3, #0
 8001430:	f000 8081 	beq.w	8001536 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001434:	4b42      	ldr	r3, [pc, #264]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f003 030c 	and.w	r3, r3, #12
 800143c:	2b08      	cmp	r3, #8
 800143e:	d061      	beq.n	8001504 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	2b02      	cmp	r3, #2
 8001446:	d146      	bne.n	80014d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001448:	4b3f      	ldr	r3, [pc, #252]	; (8001548 <HAL_RCC_OscConfig+0x4fc>)
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144e:	f7ff fb09 	bl	8000a64 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001456:	f7ff fb05 	bl	8000a64 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b02      	cmp	r3, #2
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e067      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001468:	4b35      	ldr	r3, [pc, #212]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1f0      	bne.n	8001456 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a1b      	ldr	r3, [r3, #32]
 8001478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800147c:	d108      	bne.n	8001490 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800147e:	4b30      	ldr	r3, [pc, #192]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	492d      	ldr	r1, [pc, #180]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001490:	4b2b      	ldr	r3, [pc, #172]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a19      	ldr	r1, [r3, #32]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	430b      	orrs	r3, r1
 80014a2:	4927      	ldr	r1, [pc, #156]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014a8:	4b27      	ldr	r3, [pc, #156]	; (8001548 <HAL_RCC_OscConfig+0x4fc>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ae:	f7ff fad9 	bl	8000a64 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b6:	f7ff fad5 	bl	8000a64 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e037      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x46a>
 80014d4:	e02f      	b.n	8001536 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <HAL_RCC_OscConfig+0x4fc>)
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7ff fac2 	bl	8000a64 <HAL_GetTick>
 80014e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e2:	e008      	b.n	80014f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e4:	f7ff fabe 	bl	8000a64 <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	2b02      	cmp	r3, #2
 80014f0:	d901      	bls.n	80014f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80014f2:	2303      	movs	r3, #3
 80014f4:	e020      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1f0      	bne.n	80014e4 <HAL_RCC_OscConfig+0x498>
 8001502:	e018      	b.n	8001536 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	69db      	ldr	r3, [r3, #28]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d101      	bne.n	8001510 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	e013      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_RCC_OscConfig+0x4f4>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	429a      	cmp	r2, r3
 8001522:	d106      	bne.n	8001532 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800152e:	429a      	cmp	r2, r3
 8001530:	d001      	beq.n	8001536 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40021000 	.word	0x40021000
 8001544:	40007000 	.word	0x40007000
 8001548:	42420060 	.word	0x42420060

0800154c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e0d0      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001560:	4b6a      	ldr	r3, [pc, #424]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0307 	and.w	r3, r3, #7
 8001568:	683a      	ldr	r2, [r7, #0]
 800156a:	429a      	cmp	r2, r3
 800156c:	d910      	bls.n	8001590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800156e:	4b67      	ldr	r3, [pc, #412]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f023 0207 	bic.w	r2, r3, #7
 8001576:	4965      	ldr	r1, [pc, #404]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	4313      	orrs	r3, r2
 800157c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800157e:	4b63      	ldr	r3, [pc, #396]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	683a      	ldr	r2, [r7, #0]
 8001588:	429a      	cmp	r2, r3
 800158a:	d001      	beq.n	8001590 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e0b8      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d020      	beq.n	80015de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d005      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015a8:	4b59      	ldr	r3, [pc, #356]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	4a58      	ldr	r2, [pc, #352]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0308 	and.w	r3, r3, #8
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d005      	beq.n	80015cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c0:	4b53      	ldr	r3, [pc, #332]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	4a52      	ldr	r2, [pc, #328]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015cc:	4b50      	ldr	r3, [pc, #320]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	494d      	ldr	r1, [pc, #308]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015da:	4313      	orrs	r3, r2
 80015dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d040      	beq.n	800166c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d107      	bne.n	8001602 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f2:	4b47      	ldr	r3, [pc, #284]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d115      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e07f      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	2b02      	cmp	r3, #2
 8001608:	d107      	bne.n	800161a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800160a:	4b41      	ldr	r3, [pc, #260]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d109      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e073      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800161a:	4b3d      	ldr	r3, [pc, #244]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0302 	and.w	r3, r3, #2
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e06b      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800162a:	4b39      	ldr	r3, [pc, #228]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f023 0203 	bic.w	r2, r3, #3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	4936      	ldr	r1, [pc, #216]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 8001638:	4313      	orrs	r3, r2
 800163a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800163c:	f7ff fa12 	bl	8000a64 <HAL_GetTick>
 8001640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001642:	e00a      	b.n	800165a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001644:	f7ff fa0e 	bl	8000a64 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001652:	4293      	cmp	r3, r2
 8001654:	d901      	bls.n	800165a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e053      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800165a:	4b2d      	ldr	r3, [pc, #180]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f003 020c 	and.w	r2, r3, #12
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	429a      	cmp	r2, r3
 800166a:	d1eb      	bne.n	8001644 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800166c:	4b27      	ldr	r3, [pc, #156]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d210      	bcs.n	800169c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 0207 	bic.w	r2, r3, #7
 8001682:	4922      	ldr	r1, [pc, #136]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800168a:	4b20      	ldr	r3, [pc, #128]	; (800170c <HAL_RCC_ClockConfig+0x1c0>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	429a      	cmp	r2, r3
 8001696:	d001      	beq.n	800169c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e032      	b.n	8001702 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0304 	and.w	r3, r3, #4
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d008      	beq.n	80016ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a8:	4b19      	ldr	r3, [pc, #100]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	4916      	ldr	r1, [pc, #88]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0308 	and.w	r3, r3, #8
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d009      	beq.n	80016da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80016c6:	4b12      	ldr	r3, [pc, #72]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	691b      	ldr	r3, [r3, #16]
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	490e      	ldr	r1, [pc, #56]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016da:	f000 f821 	bl	8001720 <HAL_RCC_GetSysClockFreq>
 80016de:	4601      	mov	r1, r0
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <HAL_RCC_ClockConfig+0x1c4>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 030f 	and.w	r3, r3, #15
 80016ea:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <HAL_RCC_ClockConfig+0x1c8>)
 80016ec:	5cd3      	ldrb	r3, [r2, r3]
 80016ee:	fa21 f303 	lsr.w	r3, r1, r3
 80016f2:	4a09      	ldr	r2, [pc, #36]	; (8001718 <HAL_RCC_ClockConfig+0x1cc>)
 80016f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_RCC_ClockConfig+0x1d0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ff48 	bl	8000590 <HAL_InitTick>

  return HAL_OK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	3710      	adds	r7, #16
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40022000 	.word	0x40022000
 8001710:	40021000 	.word	0x40021000
 8001714:	080071e8 	.word	0x080071e8
 8001718:	20000000 	.word	0x20000000
 800171c:	20000004 	.word	0x20000004

08001720 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001720:	b490      	push	{r4, r7}
 8001722:	b08a      	sub	sp, #40	; 0x28
 8001724:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001726:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001728:	1d3c      	adds	r4, r7, #4
 800172a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800172c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001732:	881b      	ldrh	r3, [r3, #0]
 8001734:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
 800173a:	2300      	movs	r3, #0
 800173c:	61bb      	str	r3, [r7, #24]
 800173e:	2300      	movs	r3, #0
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001746:	2300      	movs	r3, #0
 8001748:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800174a:	4b23      	ldr	r3, [pc, #140]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f003 030c 	and.w	r3, r3, #12
 8001756:	2b04      	cmp	r3, #4
 8001758:	d002      	beq.n	8001760 <HAL_RCC_GetSysClockFreq+0x40>
 800175a:	2b08      	cmp	r3, #8
 800175c:	d003      	beq.n	8001766 <HAL_RCC_GetSysClockFreq+0x46>
 800175e:	e02d      	b.n	80017bc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001760:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001762:	623b      	str	r3, [r7, #32]
      break;
 8001764:	e02d      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	0c9b      	lsrs	r3, r3, #18
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001772:	4413      	add	r3, r2
 8001774:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001778:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d013      	beq.n	80017ac <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001784:	4b14      	ldr	r3, [pc, #80]	; (80017d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	0c5b      	lsrs	r3, r3, #17
 800178a:	f003 0301 	and.w	r3, r3, #1
 800178e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001792:	4413      	add	r3, r2
 8001794:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001798:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	4a0f      	ldr	r2, [pc, #60]	; (80017dc <HAL_RCC_GetSysClockFreq+0xbc>)
 800179e:	fb02 f203 	mul.w	r2, r2, r3
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
 80017aa:	e004      	b.n	80017b6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	4a0c      	ldr	r2, [pc, #48]	; (80017e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80017b0:	fb02 f303 	mul.w	r3, r2, r3
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80017b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b8:	623b      	str	r3, [r7, #32]
      break;
 80017ba:	e002      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017bc:	4b07      	ldr	r3, [pc, #28]	; (80017dc <HAL_RCC_GetSysClockFreq+0xbc>)
 80017be:	623b      	str	r3, [r7, #32]
      break;
 80017c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017c2:	6a3b      	ldr	r3, [r7, #32]
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3728      	adds	r7, #40	; 0x28
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc90      	pop	{r4, r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	080070ec 	.word	0x080070ec
 80017d4:	080070fc 	.word	0x080070fc
 80017d8:	40021000 	.word	0x40021000
 80017dc:	007a1200 	.word	0x007a1200
 80017e0:	003d0900 	.word	0x003d0900

080017e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017e8:	4b02      	ldr	r3, [pc, #8]	; (80017f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr
 80017f4:	20000000 	.word	0x20000000

080017f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80017fc:	f7ff fff2 	bl	80017e4 <HAL_RCC_GetHCLKFreq>
 8001800:	4601      	mov	r1, r0
 8001802:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	0a1b      	lsrs	r3, r3, #8
 8001808:	f003 0307 	and.w	r3, r3, #7
 800180c:	4a03      	ldr	r2, [pc, #12]	; (800181c <HAL_RCC_GetPCLK1Freq+0x24>)
 800180e:	5cd3      	ldrb	r3, [r2, r3]
 8001810:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001814:	4618      	mov	r0, r3
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	080071f8 	.word	0x080071f8

08001820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001824:	f7ff ffde 	bl	80017e4 <HAL_RCC_GetHCLKFreq>
 8001828:	4601      	mov	r1, r0
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	0adb      	lsrs	r3, r3, #11
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	4a03      	ldr	r2, [pc, #12]	; (8001844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001836:	5cd3      	ldrb	r3, [r2, r3]
 8001838:	fa21 f303 	lsr.w	r3, r1, r3
}
 800183c:	4618      	mov	r0, r3
 800183e:	bd80      	pop	{r7, pc}
 8001840:	40021000 	.word	0x40021000
 8001844:	080071f8 	.word	0x080071f8

08001848 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	220f      	movs	r2, #15
 8001856:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001858:	4b11      	ldr	r3, [pc, #68]	; (80018a0 <HAL_RCC_GetClockConfig+0x58>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 0203 	and.w	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <HAL_RCC_GetClockConfig+0x58>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <HAL_RCC_GetClockConfig+0x58>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800187c:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <HAL_RCC_GetClockConfig+0x58>)
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	08db      	lsrs	r3, r3, #3
 8001882:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800188a:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <HAL_RCC_GetClockConfig+0x5c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0207 	and.w	r2, r3, #7
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001896:	bf00      	nop
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	bc80      	pop	{r7}
 800189e:	4770      	bx	lr
 80018a0:	40021000 	.word	0x40021000
 80018a4:	40022000 	.word	0x40022000

080018a8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018b0:	4b0a      	ldr	r3, [pc, #40]	; (80018dc <RCC_Delay+0x34>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <RCC_Delay+0x38>)
 80018b6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ba:	0a5b      	lsrs	r3, r3, #9
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	fb02 f303 	mul.w	r3, r2, r3
 80018c2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018c4:	bf00      	nop
  }
  while (Delay --);
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	1e5a      	subs	r2, r3, #1
 80018ca:	60fa      	str	r2, [r7, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d1f9      	bne.n	80018c4 <RCC_Delay+0x1c>
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	20000000 	.word	0x20000000
 80018e0:	10624dd3 	.word	0x10624dd3

080018e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e041      	b.n	800197a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d106      	bne.n	8001910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f000 f839 	bl	8001982 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3304      	adds	r3, #4
 8001920:	4619      	mov	r1, r3
 8001922:	4610      	mov	r0, r2
 8001924:	f000 f9b4 	bl	8001c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2201      	movs	r2, #1
 8001934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr

08001994 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d001      	beq.n	80019ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e03a      	b.n	8001a22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2202      	movs	r2, #2
 80019b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f042 0201 	orr.w	r2, r2, #1
 80019c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a18      	ldr	r2, [pc, #96]	; (8001a2c <HAL_TIM_Base_Start_IT+0x98>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d00e      	beq.n	80019ec <HAL_TIM_Base_Start_IT+0x58>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d6:	d009      	beq.n	80019ec <HAL_TIM_Base_Start_IT+0x58>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a14      	ldr	r2, [pc, #80]	; (8001a30 <HAL_TIM_Base_Start_IT+0x9c>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d004      	beq.n	80019ec <HAL_TIM_Base_Start_IT+0x58>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a13      	ldr	r2, [pc, #76]	; (8001a34 <HAL_TIM_Base_Start_IT+0xa0>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d111      	bne.n	8001a10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2b06      	cmp	r3, #6
 80019fc:	d010      	beq.n	8001a20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f042 0201 	orr.w	r2, r2, #1
 8001a0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a0e:	e007      	b.n	8001a20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f042 0201 	orr.w	r2, r2, #1
 8001a1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3714      	adds	r7, #20
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr
 8001a2c:	40012c00 	.word	0x40012c00
 8001a30:	40000400 	.word	0x40000400
 8001a34:	40000800 	.word	0x40000800

08001a38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d122      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d11b      	bne.n	8001a94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f06f 0202 	mvn.w	r2, #2
 8001a64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f003 0303 	and.w	r3, r3, #3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d003      	beq.n	8001a82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f000 f8ed 	bl	8001c5a <HAL_TIM_IC_CaptureCallback>
 8001a80:	e005      	b.n	8001a8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f8e0 	bl	8001c48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f8ef 	bl	8001c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2200      	movs	r2, #0
 8001a92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	f003 0304 	and.w	r3, r3, #4
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d122      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	d11b      	bne.n	8001ae8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f06f 0204 	mvn.w	r2, #4
 8001ab8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2202      	movs	r2, #2
 8001abe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 f8c3 	bl	8001c5a <HAL_TIM_IC_CaptureCallback>
 8001ad4:	e005      	b.n	8001ae2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ad6:	6878      	ldr	r0, [r7, #4]
 8001ad8:	f000 f8b6 	bl	8001c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f8c5 	bl	8001c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	f003 0308 	and.w	r3, r3, #8
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d122      	bne.n	8001b3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d11b      	bne.n	8001b3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f06f 0208 	mvn.w	r2, #8
 8001b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2204      	movs	r2, #4
 8001b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	69db      	ldr	r3, [r3, #28]
 8001b1a:	f003 0303 	and.w	r3, r3, #3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d003      	beq.n	8001b2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 f899 	bl	8001c5a <HAL_TIM_IC_CaptureCallback>
 8001b28:	e005      	b.n	8001b36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f000 f88c 	bl	8001c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 f89b 	bl	8001c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	691b      	ldr	r3, [r3, #16]
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	2b10      	cmp	r3, #16
 8001b48:	d122      	bne.n	8001b90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	2b10      	cmp	r3, #16
 8001b56:	d11b      	bne.n	8001b90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f06f 0210 	mvn.w	r2, #16
 8001b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2208      	movs	r2, #8
 8001b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	69db      	ldr	r3, [r3, #28]
 8001b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f000 f86f 	bl	8001c5a <HAL_TIM_IC_CaptureCallback>
 8001b7c:	e005      	b.n	8001b8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f862 	bl	8001c48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f871 	bl	8001c6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f003 0301 	and.w	r3, r3, #1
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d10e      	bne.n	8001bbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f003 0301 	and.w	r3, r3, #1
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d107      	bne.n	8001bbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0201 	mvn.w	r2, #1
 8001bb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7fe fc9a 	bl	80004f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc6:	2b80      	cmp	r3, #128	; 0x80
 8001bc8:	d10e      	bne.n	8001be8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd4:	2b80      	cmp	r3, #128	; 0x80
 8001bd6:	d107      	bne.n	8001be8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f000 f8bf 	bl	8001d66 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf2:	2b40      	cmp	r3, #64	; 0x40
 8001bf4:	d10e      	bne.n	8001c14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c00:	2b40      	cmp	r3, #64	; 0x40
 8001c02:	d107      	bne.n	8001c14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f835 	bl	8001c7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	f003 0320 	and.w	r3, r3, #32
 8001c1e:	2b20      	cmp	r3, #32
 8001c20:	d10e      	bne.n	8001c40 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f003 0320 	and.w	r3, r3, #32
 8001c2c:	2b20      	cmp	r3, #32
 8001c2e:	d107      	bne.n	8001c40 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f06f 0220 	mvn.w	r2, #32
 8001c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f88a 	bl	8001d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bc80      	pop	{r7}
 8001c6a:	4770      	bx	lr

08001c6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc80      	pop	{r7}
 8001c7c:	4770      	bx	lr

08001c7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001c7e:	b480      	push	{r7}
 8001c80:	b083      	sub	sp, #12
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b085      	sub	sp, #20
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a29      	ldr	r2, [pc, #164]	; (8001d48 <TIM_Base_SetConfig+0xb8>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d00b      	beq.n	8001cc0 <TIM_Base_SetConfig+0x30>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cae:	d007      	beq.n	8001cc0 <TIM_Base_SetConfig+0x30>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a26      	ldr	r2, [pc, #152]	; (8001d4c <TIM_Base_SetConfig+0xbc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d003      	beq.n	8001cc0 <TIM_Base_SetConfig+0x30>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a25      	ldr	r2, [pc, #148]	; (8001d50 <TIM_Base_SetConfig+0xc0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d108      	bne.n	8001cd2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	68fa      	ldr	r2, [r7, #12]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a1c      	ldr	r2, [pc, #112]	; (8001d48 <TIM_Base_SetConfig+0xb8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d00b      	beq.n	8001cf2 <TIM_Base_SetConfig+0x62>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce0:	d007      	beq.n	8001cf2 <TIM_Base_SetConfig+0x62>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a19      	ldr	r2, [pc, #100]	; (8001d4c <TIM_Base_SetConfig+0xbc>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d003      	beq.n	8001cf2 <TIM_Base_SetConfig+0x62>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a18      	ldr	r2, [pc, #96]	; (8001d50 <TIM_Base_SetConfig+0xc0>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d108      	bne.n	8001d04 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	4a07      	ldr	r2, [pc, #28]	; (8001d48 <TIM_Base_SetConfig+0xb8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d103      	bne.n	8001d38 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	691a      	ldr	r2, [r3, #16]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	615a      	str	r2, [r3, #20]
}
 8001d3e:	bf00      	nop
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	40012c00 	.word	0x40012c00
 8001d4c:	40000400 	.word	0x40000400
 8001d50:	40000800 	.word	0x40000800

08001d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bc80      	pop	{r7}
 8001d76:	4770      	bx	lr

08001d78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e03f      	b.n	8001e0a <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d106      	bne.n	8001da4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	f7fe fd46 	bl	8000830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2224      	movs	r2, #36	; 0x24
 8001da8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68da      	ldr	r2, [r3, #12]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001dba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 faff 	bl	80023c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	691a      	ldr	r2, [r3, #16]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001dd0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	695a      	ldr	r2, [r3, #20]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001de0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001df0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2220      	movs	r2, #32
 8001e04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	60b9      	str	r1, [r7, #8]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b20      	cmp	r3, #32
 8001e2a:	d130      	bne.n	8001e8e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d002      	beq.n	8001e38 <HAL_UART_Transmit_IT+0x26>
 8001e32:	88fb      	ldrh	r3, [r7, #6]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e029      	b.n	8001e90 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d101      	bne.n	8001e4a <HAL_UART_Transmit_IT+0x38>
 8001e46:	2302      	movs	r3, #2
 8001e48:	e022      	b.n	8001e90 <HAL_UART_Transmit_IT+0x7e>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	68ba      	ldr	r2, [r7, #8]
 8001e56:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	88fa      	ldrh	r2, [r7, #6]
 8001e5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	88fa      	ldrh	r2, [r7, #6]
 8001e62:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2221      	movs	r2, #33	; 0x21
 8001e6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e88:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001e8e:	2302      	movs	r3, #2
  }
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3714      	adds	r7, #20
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b085      	sub	sp, #20
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	60b9      	str	r1, [r7, #8]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001eae:	b2db      	uxtb	r3, r3
 8001eb0:	2b20      	cmp	r3, #32
 8001eb2:	d140      	bne.n	8001f36 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d002      	beq.n	8001ec0 <HAL_UART_Receive_IT+0x26>
 8001eba:	88fb      	ldrh	r3, [r7, #6]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d101      	bne.n	8001ec4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e039      	b.n	8001f38 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d101      	bne.n	8001ed2 <HAL_UART_Receive_IT+0x38>
 8001ece:	2302      	movs	r3, #2
 8001ed0:	e032      	b.n	8001f38 <HAL_UART_Receive_IT+0x9e>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	68ba      	ldr	r2, [r7, #8]
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	88fa      	ldrh	r2, [r7, #6]
 8001ee4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	88fa      	ldrh	r2, [r7, #6]
 8001eea:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	2222      	movs	r2, #34	; 0x22
 8001ef6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	68da      	ldr	r2, [r3, #12]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f10:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	695a      	ldr	r2, [r3, #20]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f042 0201 	orr.w	r2, r2, #1
 8001f20:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0220 	orr.w	r2, r2, #32
 8001f30:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e000      	b.n	8001f38 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001f36:	2302      	movs	r3, #2
  }
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3714      	adds	r7, #20
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	695b      	ldr	r3, [r3, #20]
 8001f62:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d10d      	bne.n	8001f96 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	f003 0320 	and.w	r3, r3, #32
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d008      	beq.n	8001f96 <HAL_UART_IRQHandler+0x52>
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	f003 0320 	and.w	r3, r3, #32
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d003      	beq.n	8001f96 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 f996 	bl	80022c0 <UART_Receive_IT>
      return;
 8001f94:	e0d1      	b.n	800213a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80b0 	beq.w	80020fe <HAL_UART_IRQHandler+0x1ba>
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d105      	bne.n	8001fb4 <HAL_UART_IRQHandler+0x70>
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	f000 80a5 	beq.w	80020fe <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00a      	beq.n	8001fd4 <HAL_UART_IRQHandler+0x90>
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fcc:	f043 0201 	orr.w	r2, r3, #1
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00a      	beq.n	8001ff4 <HAL_UART_IRQHandler+0xb0>
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fec:	f043 0202 	orr.w	r2, r3, #2
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00a      	beq.n	8002014 <HAL_UART_IRQHandler+0xd0>
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d005      	beq.n	8002014 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200c:	f043 0204 	orr.w	r2, r3, #4
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00f      	beq.n	800203e <HAL_UART_IRQHandler+0xfa>
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	2b00      	cmp	r3, #0
 8002026:	d104      	bne.n	8002032 <HAL_UART_IRQHandler+0xee>
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	d005      	beq.n	800203e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002036:	f043 0208 	orr.w	r2, r3, #8
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002042:	2b00      	cmp	r3, #0
 8002044:	d078      	beq.n	8002138 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	2b00      	cmp	r3, #0
 800204e:	d007      	beq.n	8002060 <HAL_UART_IRQHandler+0x11c>
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	f003 0320 	and.w	r3, r3, #32
 8002056:	2b00      	cmp	r3, #0
 8002058:	d002      	beq.n	8002060 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f930 	bl	80022c0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	695b      	ldr	r3, [r3, #20]
 8002066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206a:	2b00      	cmp	r3, #0
 800206c:	bf14      	ite	ne
 800206e:	2301      	movne	r3, #1
 8002070:	2300      	moveq	r3, #0
 8002072:	b2db      	uxtb	r3, r3
 8002074:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	2b00      	cmp	r3, #0
 8002080:	d102      	bne.n	8002088 <HAL_UART_IRQHandler+0x144>
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d031      	beq.n	80020ec <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f000 f881 	bl	8002190 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	695b      	ldr	r3, [r3, #20]
 8002094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002098:	2b00      	cmp	r3, #0
 800209a:	d023      	beq.n	80020e4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020aa:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d013      	beq.n	80020dc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020b8:	4a21      	ldr	r2, [pc, #132]	; (8002140 <HAL_UART_IRQHandler+0x1fc>)
 80020ba:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c0:	4618      	mov	r0, r3
 80020c2:	f7fe fdb9 	bl	8000c38 <HAL_DMA_Abort_IT>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d016      	beq.n	80020fa <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020d6:	4610      	mov	r0, r2
 80020d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020da:	e00e      	b.n	80020fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 f831 	bl	8002144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020e2:	e00a      	b.n	80020fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f000 f82d 	bl	8002144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020ea:	e006      	b.n	80020fa <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 f829 	bl	8002144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80020f8:	e01e      	b.n	8002138 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020fa:	bf00      	nop
    return;
 80020fc:	e01c      	b.n	8002138 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_UART_IRQHandler+0x1d6>
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f86d 	bl	80021f2 <UART_Transmit_IT>
    return;
 8002118:	e00f      	b.n	800213a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002120:	2b00      	cmp	r3, #0
 8002122:	d00a      	beq.n	800213a <HAL_UART_IRQHandler+0x1f6>
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f000 f8ae 	bl	8002290 <UART_EndTransmit_IT>
    return;
 8002134:	bf00      	nop
 8002136:	e000      	b.n	800213a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002138:	bf00      	nop
  }
}
 800213a:	3720      	adds	r7, #32
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	080021cb 	.word	0x080021cb

08002144 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	bc80      	pop	{r7}
 8002154:	4770      	bx	lr

08002156 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8002156:	b480      	push	{r7}
 8002158:	b085      	sub	sp, #20
 800215a:	af00      	add	r7, sp, #0
 800215c:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 800215e:	2300      	movs	r3, #0
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800216c:	b2db      	uxtb	r3, r3
 800216e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002176:	b2db      	uxtb	r3, r3
 8002178:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	b2da      	uxtb	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	4313      	orrs	r3, r2
 8002184:	b2db      	uxtb	r3, r3
}
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bc80      	pop	{r7}
 800218e:	4770      	bx	lr

08002190 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80021a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695a      	ldr	r2, [r3, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f022 0201 	bic.w	r2, r2, #1
 80021b6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2220      	movs	r2, #32
 80021bc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80021c0:	bf00      	nop
 80021c2:	370c      	adds	r7, #12
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr

080021ca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80021ca:	b580      	push	{r7, lr}
 80021cc:	b084      	sub	sp, #16
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2200      	movs	r2, #0
 80021e2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f7ff ffad 	bl	8002144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80021ea:	bf00      	nop
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b085      	sub	sp, #20
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b21      	cmp	r3, #33	; 0x21
 8002204:	d13e      	bne.n	8002284 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220e:	d114      	bne.n	800223a <UART_Transmit_IT+0x48>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d110      	bne.n	800223a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	881b      	ldrh	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800222c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	1c9a      	adds	r2, r3, #2
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	621a      	str	r2, [r3, #32]
 8002238:	e008      	b.n	800224c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	1c59      	adds	r1, r3, #1
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	6211      	str	r1, [r2, #32]
 8002244:	781a      	ldrb	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002250:	b29b      	uxth	r3, r3
 8002252:	3b01      	subs	r3, #1
 8002254:	b29b      	uxth	r3, r3
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	4619      	mov	r1, r3
 800225a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800225c:	2b00      	cmp	r3, #0
 800225e:	d10f      	bne.n	8002280 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800226e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800227e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	e000      	b.n	8002286 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002284:	2302      	movs	r3, #2
  }
}
 8002286:	4618      	mov	r0, r3
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr

08002290 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022a6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f004 fe93 	bl	8006fdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}

080022c0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b22      	cmp	r3, #34	; 0x22
 80022d2:	d170      	bne.n	80023b6 <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022dc:	d117      	bne.n	800230e <UART_Receive_IT+0x4e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d113      	bne.n	800230e <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 80022e6:	2300      	movs	r3, #0
 80022e8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ee:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	b29b      	uxth	r3, r3
 80022f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	1c9a      	adds	r2, r3, #2
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	629a      	str	r2, [r3, #40]	; 0x28
 800230c:	e026      	b.n	800235c <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002312:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002320:	d007      	beq.n	8002332 <UART_Receive_IT+0x72>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10a      	bne.n	8002340 <UART_Receive_IT+0x80>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d106      	bne.n	8002340 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	b2da      	uxtb	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	e008      	b.n	8002352 <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800234c:	b2da      	uxtb	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002360:	b29b      	uxth	r3, r3
 8002362:	3b01      	subs	r3, #1
 8002364:	b29b      	uxth	r3, r3
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	4619      	mov	r1, r3
 800236a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800236c:	2b00      	cmp	r3, #0
 800236e:	d120      	bne.n	80023b2 <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f022 0220 	bic.w	r2, r2, #32
 800237e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68da      	ldr	r2, [r3, #12]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800238e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	695a      	ldr	r2, [r3, #20]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f022 0201 	bic.w	r2, r2, #1
 800239e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2220      	movs	r2, #32
 80023a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80023a8:	6878      	ldr	r0, [r7, #4]
 80023aa:	f004 f931 	bl	8006610 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80023ae:	2300      	movs	r3, #0
 80023b0:	e002      	b.n	80023b8 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 80023b2:	2300      	movs	r3, #0
 80023b4:	e000      	b.n	80023b8 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 80023b6:	2302      	movs	r3, #2
  }
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3710      	adds	r7, #16
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	431a      	orrs	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68db      	ldr	r3, [r3, #12]
 80023f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80023fa:	f023 030c 	bic.w	r3, r3, #12
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	6812      	ldr	r2, [r2, #0]
 8002402:	68b9      	ldr	r1, [r7, #8]
 8002404:	430b      	orrs	r3, r1
 8002406:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699a      	ldr	r2, [r3, #24]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a2c      	ldr	r2, [pc, #176]	; (80024d4 <UART_SetConfig+0x114>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d103      	bne.n	8002430 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002428:	f7ff f9fa 	bl	8001820 <HAL_RCC_GetPCLK2Freq>
 800242c:	60f8      	str	r0, [r7, #12]
 800242e:	e002      	b.n	8002436 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002430:	f7ff f9e2 	bl	80017f8 <HAL_RCC_GetPCLK1Freq>
 8002434:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	4613      	mov	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4413      	add	r3, r2
 800243e:	009a      	lsls	r2, r3, #2
 8002440:	441a      	add	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	fbb2 f3f3 	udiv	r3, r2, r3
 800244c:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <UART_SetConfig+0x118>)
 800244e:	fba2 2303 	umull	r2, r3, r2, r3
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	0119      	lsls	r1, r3, #4
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4613      	mov	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	4413      	add	r3, r2
 800245e:	009a      	lsls	r2, r3, #2
 8002460:	441a      	add	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	fbb2 f2f3 	udiv	r2, r2, r3
 800246c:	4b1a      	ldr	r3, [pc, #104]	; (80024d8 <UART_SetConfig+0x118>)
 800246e:	fba3 0302 	umull	r0, r3, r3, r2
 8002472:	095b      	lsrs	r3, r3, #5
 8002474:	2064      	movs	r0, #100	; 0x64
 8002476:	fb00 f303 	mul.w	r3, r0, r3
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	011b      	lsls	r3, r3, #4
 800247e:	3332      	adds	r3, #50	; 0x32
 8002480:	4a15      	ldr	r2, [pc, #84]	; (80024d8 <UART_SetConfig+0x118>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	095b      	lsrs	r3, r3, #5
 8002488:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800248c:	4419      	add	r1, r3
 800248e:	68fa      	ldr	r2, [r7, #12]
 8002490:	4613      	mov	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	4413      	add	r3, r2
 8002496:	009a      	lsls	r2, r3, #2
 8002498:	441a      	add	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <UART_SetConfig+0x118>)
 80024a6:	fba3 0302 	umull	r0, r3, r3, r2
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2064      	movs	r0, #100	; 0x64
 80024ae:	fb00 f303 	mul.w	r3, r0, r3
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	011b      	lsls	r3, r3, #4
 80024b6:	3332      	adds	r3, #50	; 0x32
 80024b8:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <UART_SetConfig+0x118>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	095b      	lsrs	r3, r3, #5
 80024c0:	f003 020f 	and.w	r2, r3, #15
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	440a      	add	r2, r1
 80024ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024cc:	bf00      	nop
 80024ce:	3710      	adds	r7, #16
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40013800 	.word	0x40013800
 80024d8:	51eb851f 	.word	0x51eb851f

080024dc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024e2:	f3ef 8305 	mrs	r3, IPSR
 80024e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80024e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d10f      	bne.n	800250e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80024ee:	f3ef 8310 	mrs	r3, PRIMASK
 80024f2:	607b      	str	r3, [r7, #4]
  return(result);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d109      	bne.n	800250e <osKernelInitialize+0x32>
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <osKernelInitialize+0x60>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d109      	bne.n	8002516 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002502:	f3ef 8311 	mrs	r3, BASEPRI
 8002506:	603b      	str	r3, [r7, #0]
  return(result);
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800250e:	f06f 0305 	mvn.w	r3, #5
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	e00c      	b.n	8002530 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <osKernelInitialize+0x60>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d105      	bne.n	800252a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800251e:	4b07      	ldr	r3, [pc, #28]	; (800253c <osKernelInitialize+0x60>)
 8002520:	2201      	movs	r2, #1
 8002522:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	e002      	b.n	8002530 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800252a:	f04f 33ff 	mov.w	r3, #4294967295
 800252e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002530:	68fb      	ldr	r3, [r7, #12]
}
 8002532:	4618      	mov	r0, r3
 8002534:	3714      	adds	r7, #20
 8002536:	46bd      	mov	sp, r7
 8002538:	bc80      	pop	{r7}
 800253a:	4770      	bx	lr
 800253c:	2000002c 	.word	0x2000002c

08002540 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002546:	f3ef 8305 	mrs	r3, IPSR
 800254a:	60bb      	str	r3, [r7, #8]
  return(result);
 800254c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10f      	bne.n	8002572 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002552:	f3ef 8310 	mrs	r3, PRIMASK
 8002556:	607b      	str	r3, [r7, #4]
  return(result);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d109      	bne.n	8002572 <osKernelStart+0x32>
 800255e:	4b11      	ldr	r3, [pc, #68]	; (80025a4 <osKernelStart+0x64>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d109      	bne.n	800257a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002566:	f3ef 8311 	mrs	r3, BASEPRI
 800256a:	603b      	str	r3, [r7, #0]
  return(result);
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002572:	f06f 0305 	mvn.w	r3, #5
 8002576:	60fb      	str	r3, [r7, #12]
 8002578:	e00e      	b.n	8002598 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <osKernelStart+0x64>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d107      	bne.n	8002592 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002582:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <osKernelStart+0x64>)
 8002584:	2202      	movs	r2, #2
 8002586:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002588:	f001 fbb0 	bl	8003cec <vTaskStartScheduler>
      stat = osOK;
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	e002      	b.n	8002598 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002598:	68fb      	ldr	r3, [r7, #12]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	2000002c 	.word	0x2000002c

080025a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b092      	sub	sp, #72	; 0x48
 80025ac:	af04      	add	r7, sp, #16
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025b8:	f3ef 8305 	mrs	r3, IPSR
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80025be:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	f040 8094 	bne.w	80026ee <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025c6:	f3ef 8310 	mrs	r3, PRIMASK
 80025ca:	623b      	str	r3, [r7, #32]
  return(result);
 80025cc:	6a3b      	ldr	r3, [r7, #32]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f040 808d 	bne.w	80026ee <osThreadNew+0x146>
 80025d4:	4b48      	ldr	r3, [pc, #288]	; (80026f8 <osThreadNew+0x150>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d106      	bne.n	80025ea <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025dc:	f3ef 8311 	mrs	r3, BASEPRI
 80025e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f040 8082 	bne.w	80026ee <osThreadNew+0x146>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d07e      	beq.n	80026ee <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80025f4:	2318      	movs	r3, #24
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80025f8:	2300      	movs	r3, #0
 80025fa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80025fc:	f107 031b 	add.w	r3, r7, #27
 8002600:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002602:	f04f 33ff 	mov.w	r3, #4294967295
 8002606:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d045      	beq.n	800269a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d002      	beq.n	800261c <osThreadNew+0x74>
        name = attr->name;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	699b      	ldr	r3, [r3, #24]
 8002628:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800262a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262c:	2b00      	cmp	r3, #0
 800262e:	d008      	beq.n	8002642 <osThreadNew+0x9a>
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002632:	2b38      	cmp	r3, #56	; 0x38
 8002634:	d805      	bhi.n	8002642 <osThreadNew+0x9a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <osThreadNew+0x9e>
        return (NULL);
 8002642:	2300      	movs	r3, #0
 8002644:	e054      	b.n	80026f0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	089b      	lsrs	r3, r3, #2
 8002654:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d00e      	beq.n	800267c <osThreadNew+0xd4>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	2b5b      	cmp	r3, #91	; 0x5b
 8002664:	d90a      	bls.n	800267c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800266a:	2b00      	cmp	r3, #0
 800266c:	d006      	beq.n	800267c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d002      	beq.n	800267c <osThreadNew+0xd4>
        mem = 1;
 8002676:	2301      	movs	r3, #1
 8002678:	62bb      	str	r3, [r7, #40]	; 0x28
 800267a:	e010      	b.n	800269e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10c      	bne.n	800269e <osThreadNew+0xf6>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d108      	bne.n	800269e <osThreadNew+0xf6>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	691b      	ldr	r3, [r3, #16]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d104      	bne.n	800269e <osThreadNew+0xf6>
          mem = 0;
 8002694:	2300      	movs	r3, #0
 8002696:	62bb      	str	r3, [r7, #40]	; 0x28
 8002698:	e001      	b.n	800269e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800269a:	2300      	movs	r3, #0
 800269c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800269e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d110      	bne.n	80026c6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80026ac:	9202      	str	r2, [sp, #8]
 80026ae:	9301      	str	r3, [sp, #4]
 80026b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026ba:	68f8      	ldr	r0, [r7, #12]
 80026bc:	f001 f94e 	bl	800395c <xTaskCreateStatic>
 80026c0:	4603      	mov	r3, r0
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	e013      	b.n	80026ee <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80026c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d110      	bne.n	80026ee <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80026cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	f107 0314 	add.w	r3, r7, #20
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f001 f995 	bl	8003a0e <xTaskCreate>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d001      	beq.n	80026ee <osThreadNew+0x146>
          hTask = NULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80026ee:	697b      	ldr	r3, [r7, #20]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3738      	adds	r7, #56	; 0x38
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	2000002c 	.word	0x2000002c

080026fc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002704:	f3ef 8305 	mrs	r3, IPSR
 8002708:	613b      	str	r3, [r7, #16]
  return(result);
 800270a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10f      	bne.n	8002730 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002710:	f3ef 8310 	mrs	r3, PRIMASK
 8002714:	60fb      	str	r3, [r7, #12]
  return(result);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d109      	bne.n	8002730 <osDelay+0x34>
 800271c:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <osDelay+0x58>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d109      	bne.n	8002738 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002724:	f3ef 8311 	mrs	r3, BASEPRI
 8002728:	60bb      	str	r3, [r7, #8]
  return(result);
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <osDelay+0x3c>
    stat = osErrorISR;
 8002730:	f06f 0305 	mvn.w	r3, #5
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	e007      	b.n	8002748 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002738:	2300      	movs	r3, #0
 800273a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d002      	beq.n	8002748 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f001 fa9e 	bl	8003c84 <vTaskDelay>
    }
  }

  return (stat);
 8002748:	697b      	ldr	r3, [r7, #20]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	2000002c 	.word	0x2000002c

08002758 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b08c      	sub	sp, #48	; 0x30
 800275c:	af02      	add	r7, sp, #8
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8002764:	2300      	movs	r3, #0
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002768:	f3ef 8305 	mrs	r3, IPSR
 800276c:	61bb      	str	r3, [r7, #24]
  return(result);
 800276e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002770:	2b00      	cmp	r3, #0
 8002772:	f040 8088 	bne.w	8002886 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002776:	f3ef 8310 	mrs	r3, PRIMASK
 800277a:	617b      	str	r3, [r7, #20]
  return(result);
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	2b00      	cmp	r3, #0
 8002780:	f040 8081 	bne.w	8002886 <osSemaphoreNew+0x12e>
 8002784:	4b42      	ldr	r3, [pc, #264]	; (8002890 <osSemaphoreNew+0x138>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d105      	bne.n	8002798 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800278c:	f3ef 8311 	mrs	r3, BASEPRI
 8002790:	613b      	str	r3, [r7, #16]
  return(result);
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d176      	bne.n	8002886 <osSemaphoreNew+0x12e>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d073      	beq.n	8002886 <osSemaphoreNew+0x12e>
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d86f      	bhi.n	8002886 <osSemaphoreNew+0x12e>
    mem = -1;
 80027a6:	f04f 33ff 	mov.w	r3, #4294967295
 80027aa:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d015      	beq.n	80027de <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d006      	beq.n	80027c8 <osSemaphoreNew+0x70>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	2b4f      	cmp	r3, #79	; 0x4f
 80027c0:	d902      	bls.n	80027c8 <osSemaphoreNew+0x70>
        mem = 1;
 80027c2:	2301      	movs	r3, #1
 80027c4:	623b      	str	r3, [r7, #32]
 80027c6:	e00c      	b.n	80027e2 <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d108      	bne.n	80027e2 <osSemaphoreNew+0x8a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d104      	bne.n	80027e2 <osSemaphoreNew+0x8a>
          mem = 0;
 80027d8:	2300      	movs	r3, #0
 80027da:	623b      	str	r3, [r7, #32]
 80027dc:	e001      	b.n	80027e2 <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80027e2:	6a3b      	ldr	r3, [r7, #32]
 80027e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e8:	d04d      	beq.n	8002886 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d129      	bne.n	8002844 <osSemaphoreNew+0xec>
        if (mem == 1) {
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d10b      	bne.n	800280e <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	2303      	movs	r3, #3
 80027fc:	9300      	str	r3, [sp, #0]
 80027fe:	4613      	mov	r3, r2
 8002800:	2200      	movs	r2, #0
 8002802:	2100      	movs	r1, #0
 8002804:	2001      	movs	r0, #1
 8002806:	f000 fa15 	bl	8002c34 <xQueueGenericCreateStatic>
 800280a:	6278      	str	r0, [r7, #36]	; 0x24
 800280c:	e005      	b.n	800281a <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800280e:	2203      	movs	r2, #3
 8002810:	2100      	movs	r1, #0
 8002812:	2001      	movs	r0, #1
 8002814:	f000 fa80 	bl	8002d18 <xQueueGenericCreate>
 8002818:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800281a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281c:	2b00      	cmp	r3, #0
 800281e:	d022      	beq.n	8002866 <osSemaphoreNew+0x10e>
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d01f      	beq.n	8002866 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002826:	2300      	movs	r3, #0
 8002828:	2200      	movs	r2, #0
 800282a:	2100      	movs	r1, #0
 800282c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800282e:	f000 fb39 	bl	8002ea4 <xQueueGenericSend>
 8002832:	4603      	mov	r3, r0
 8002834:	2b01      	cmp	r3, #1
 8002836:	d016      	beq.n	8002866 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8002838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800283a:	f000 fec2 	bl	80035c2 <vQueueDelete>
            hSemaphore = NULL;
 800283e:	2300      	movs	r3, #0
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
 8002842:	e010      	b.n	8002866 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d108      	bne.n	800285c <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	461a      	mov	r2, r3
 8002850:	68b9      	ldr	r1, [r7, #8]
 8002852:	68f8      	ldr	r0, [r7, #12]
 8002854:	f000 fac0 	bl	8002dd8 <xQueueCreateCountingSemaphoreStatic>
 8002858:	6278      	str	r0, [r7, #36]	; 0x24
 800285a:	e004      	b.n	8002866 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800285c:	68b9      	ldr	r1, [r7, #8]
 800285e:	68f8      	ldr	r0, [r7, #12]
 8002860:	f000 faef 	bl	8002e42 <xQueueCreateCountingSemaphore>
 8002864:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	2b00      	cmp	r3, #0
 800286a:	d00c      	beq.n	8002886 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <osSemaphoreNew+0x122>
          name = attr->name;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	61fb      	str	r3, [r7, #28]
 8002878:	e001      	b.n	800287e <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800287e:	69f9      	ldr	r1, [r7, #28]
 8002880:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002882:	f000 ffe7 	bl	8003854 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002888:	4618      	mov	r0, r3
 800288a:	3728      	adds	r7, #40	; 0x28
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}
 8002890:	2000002c 	.word	0x2000002c

08002894 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002894:	b580      	push	{r7, lr}
 8002896:	b08c      	sub	sp, #48	; 0x30
 8002898:	af02      	add	r7, sp, #8
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028a4:	f3ef 8305 	mrs	r3, IPSR
 80028a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80028aa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d170      	bne.n	8002992 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80028b0:	f3ef 8310 	mrs	r3, PRIMASK
 80028b4:	617b      	str	r3, [r7, #20]
  return(result);
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d16a      	bne.n	8002992 <osMessageQueueNew+0xfe>
 80028bc:	4b37      	ldr	r3, [pc, #220]	; (800299c <osMessageQueueNew+0x108>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d105      	bne.n	80028d0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80028c4:	f3ef 8311 	mrs	r3, BASEPRI
 80028c8:	613b      	str	r3, [r7, #16]
  return(result);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d160      	bne.n	8002992 <osMessageQueueNew+0xfe>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d05d      	beq.n	8002992 <osMessageQueueNew+0xfe>
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d05a      	beq.n	8002992 <osMessageQueueNew+0xfe>
    mem = -1;
 80028dc:	f04f 33ff 	mov.w	r3, #4294967295
 80028e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d029      	beq.n	800293c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d012      	beq.n	8002916 <osMessageQueueNew+0x82>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	2b4f      	cmp	r3, #79	; 0x4f
 80028f6:	d90e      	bls.n	8002916 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d00a      	beq.n	8002916 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	695a      	ldr	r2, [r3, #20]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	68b9      	ldr	r1, [r7, #8]
 8002908:	fb01 f303 	mul.w	r3, r1, r3
 800290c:	429a      	cmp	r2, r3
 800290e:	d302      	bcc.n	8002916 <osMessageQueueNew+0x82>
        mem = 1;
 8002910:	2301      	movs	r3, #1
 8002912:	623b      	str	r3, [r7, #32]
 8002914:	e014      	b.n	8002940 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d110      	bne.n	8002940 <osMessageQueueNew+0xac>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10c      	bne.n	8002940 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800292a:	2b00      	cmp	r3, #0
 800292c:	d108      	bne.n	8002940 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	695b      	ldr	r3, [r3, #20]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d104      	bne.n	8002940 <osMessageQueueNew+0xac>
          mem = 0;
 8002936:	2300      	movs	r3, #0
 8002938:	623b      	str	r3, [r7, #32]
 800293a:	e001      	b.n	8002940 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002940:	6a3b      	ldr	r3, [r7, #32]
 8002942:	2b01      	cmp	r3, #1
 8002944:	d10c      	bne.n	8002960 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	691a      	ldr	r2, [r3, #16]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6899      	ldr	r1, [r3, #8]
 800294e:	2300      	movs	r3, #0
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	460b      	mov	r3, r1
 8002954:	68b9      	ldr	r1, [r7, #8]
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f96c 	bl	8002c34 <xQueueGenericCreateStatic>
 800295c:	6278      	str	r0, [r7, #36]	; 0x24
 800295e:	e008      	b.n	8002972 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8002960:	6a3b      	ldr	r3, [r7, #32]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d105      	bne.n	8002972 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002966:	2200      	movs	r2, #0
 8002968:	68b9      	ldr	r1, [r7, #8]
 800296a:	68f8      	ldr	r0, [r7, #12]
 800296c:	f000 f9d4 	bl	8002d18 <xQueueGenericCreate>
 8002970:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00c      	beq.n	8002992 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d003      	beq.n	8002986 <osMessageQueueNew+0xf2>
        name = attr->name;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	61fb      	str	r3, [r7, #28]
 8002984:	e001      	b.n	800298a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800298a:	69f9      	ldr	r1, [r7, #28]
 800298c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800298e:	f000 ff61 	bl	8003854 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002994:	4618      	mov	r0, r3
 8002996:	3728      	adds	r7, #40	; 0x28
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	2000002c 	.word	0x2000002c

080029a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80029a0:	b480      	push	{r7}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4a06      	ldr	r2, [pc, #24]	; (80029c8 <vApplicationGetIdleTaskMemory+0x28>)
 80029b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	4a05      	ldr	r2, [pc, #20]	; (80029cc <vApplicationGetIdleTaskMemory+0x2c>)
 80029b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2280      	movs	r2, #128	; 0x80
 80029bc:	601a      	str	r2, [r3, #0]
}
 80029be:	bf00      	nop
 80029c0:	3714      	adds	r7, #20
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bc80      	pop	{r7}
 80029c6:	4770      	bx	lr
 80029c8:	20000030 	.word	0x20000030
 80029cc:	2000008c 	.word	0x2000008c

080029d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80029d0:	b480      	push	{r7}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4a07      	ldr	r2, [pc, #28]	; (80029fc <vApplicationGetTimerTaskMemory+0x2c>)
 80029e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	4a06      	ldr	r2, [pc, #24]	; (8002a00 <vApplicationGetTimerTaskMemory+0x30>)
 80029e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80029ee:	601a      	str	r2, [r3, #0]
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	2000028c 	.word	0x2000028c
 8002a00:	200002e8 	.word	0x200002e8

08002a04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002a04:	b480      	push	{r7}
 8002a06:	b083      	sub	sp, #12
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f103 0208 	add.w	r2, r3, #8
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f04f 32ff 	mov.w	r2, #4294967295
 8002a1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f103 0208 	add.w	r2, r3, #8
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f103 0208 	add.w	r2, r3, #8
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b085      	sub	sp, #20
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	601a      	str	r2, [r3, #0]
}
 8002a96:	bf00      	nop
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bc80      	pop	{r7}
 8002a9e:	4770      	bx	lr

08002aa0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab6:	d103      	bne.n	8002ac0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	e00c      	b.n	8002ada <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3308      	adds	r3, #8
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	e002      	b.n	8002ace <vListInsert+0x2e>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d2f6      	bcs.n	8002ac8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	687a      	ldr	r2, [r7, #4]
 8002afa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	601a      	str	r2, [r3, #0]
}
 8002b06:	bf00      	nop
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	691b      	ldr	r3, [r3, #16]
 8002b1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	6892      	ldr	r2, [r2, #8]
 8002b26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6852      	ldr	r2, [r2, #4]
 8002b30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d103      	bne.n	8002b44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2200      	movs	r2, #0
 8002b48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	1e5a      	subs	r2, r3, #1
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr
	...

08002b64 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d109      	bne.n	8002b8c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7c:	f383 8811 	msr	BASEPRI, r3
 8002b80:	f3bf 8f6f 	isb	sy
 8002b84:	f3bf 8f4f 	dsb	sy
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	e7fe      	b.n	8002b8a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8002b8c:	f002 fcdc 	bl	8005548 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b98:	68f9      	ldr	r1, [r7, #12]
 8002b9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ba0:	441a      	add	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	68f9      	ldr	r1, [r7, #12]
 8002bc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002bc2:	fb01 f303 	mul.w	r3, r1, r3
 8002bc6:	441a      	add	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	22ff      	movs	r2, #255	; 0xff
 8002bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	22ff      	movs	r2, #255	; 0xff
 8002bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d114      	bne.n	8002c0c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	691b      	ldr	r3, [r3, #16]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d01a      	beq.n	8002c20 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	3310      	adds	r3, #16
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f001 fb12 	bl	8004218 <xTaskRemoveFromEventList>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d012      	beq.n	8002c20 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	; (8002c30 <xQueueGenericReset+0xcc>)
 8002bfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	f3bf 8f4f 	dsb	sy
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	e009      	b.n	8002c20 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	3310      	adds	r3, #16
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff fef7 	bl	8002a04 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	3324      	adds	r3, #36	; 0x24
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7ff fef2 	bl	8002a04 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002c20:	f002 fcc0 	bl	80055a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002c24:	2301      	movs	r3, #1
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	e000ed04 	.word	0xe000ed04

08002c34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08e      	sub	sp, #56	; 0x38
 8002c38:	af02      	add	r7, sp, #8
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d109      	bne.n	8002c5c <xQueueGenericCreateStatic+0x28>
 8002c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c5a:	e7fe      	b.n	8002c5a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <xQueueGenericCreateStatic+0x42>
 8002c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c66:	f383 8811 	msr	BASEPRI, r3
 8002c6a:	f3bf 8f6f 	isb	sy
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
 8002c74:	e7fe      	b.n	8002c74 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <xQueueGenericCreateStatic+0x4e>
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d001      	beq.n	8002c86 <xQueueGenericCreateStatic+0x52>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <xQueueGenericCreateStatic+0x54>
 8002c86:	2300      	movs	r3, #0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d109      	bne.n	8002ca0 <xQueueGenericCreateStatic+0x6c>
 8002c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c90:	f383 8811 	msr	BASEPRI, r3
 8002c94:	f3bf 8f6f 	isb	sy
 8002c98:	f3bf 8f4f 	dsb	sy
 8002c9c:	623b      	str	r3, [r7, #32]
 8002c9e:	e7fe      	b.n	8002c9e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d102      	bne.n	8002cac <xQueueGenericCreateStatic+0x78>
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <xQueueGenericCreateStatic+0x7c>
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <xQueueGenericCreateStatic+0x7e>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d109      	bne.n	8002cca <xQueueGenericCreateStatic+0x96>
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	61fb      	str	r3, [r7, #28]
 8002cc8:	e7fe      	b.n	8002cc8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002cca:	2350      	movs	r3, #80	; 0x50
 8002ccc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2b50      	cmp	r3, #80	; 0x50
 8002cd2:	d009      	beq.n	8002ce8 <xQueueGenericCreateStatic+0xb4>
 8002cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	61bb      	str	r3, [r7, #24]
 8002ce6:	e7fe      	b.n	8002ce6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00d      	beq.n	8002d0e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002cfa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d00:	9300      	str	r3, [sp, #0]
 8002d02:	4613      	mov	r3, r2
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	68b9      	ldr	r1, [r7, #8]
 8002d08:	68f8      	ldr	r0, [r7, #12]
 8002d0a:	f000 f842 	bl	8002d92 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3730      	adds	r7, #48	; 0x30
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b08a      	sub	sp, #40	; 0x28
 8002d1c:	af02      	add	r7, sp, #8
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	4613      	mov	r3, r2
 8002d24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <xQueueGenericCreate+0x28>
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	e7fe      	b.n	8002d3e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d102      	bne.n	8002d4c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002d46:	2300      	movs	r3, #0
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	e004      	b.n	8002d56 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	fb02 f303 	mul.w	r3, r2, r3
 8002d54:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3350      	adds	r3, #80	; 0x50
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f002 fcea 	bl	8005734 <pvPortMalloc>
 8002d60:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00f      	beq.n	8002d88 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	3350      	adds	r3, #80	; 0x50
 8002d6c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002d76:	79fa      	ldrb	r2, [r7, #7]
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	68b9      	ldr	r1, [r7, #8]
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f000 f805 	bl	8002d92 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002d88:	69bb      	ldr	r3, [r7, #24]
	}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3720      	adds	r7, #32
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}

08002d92 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002d92:	b580      	push	{r7, lr}
 8002d94:	b084      	sub	sp, #16
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	60f8      	str	r0, [r7, #12]
 8002d9a:	60b9      	str	r1, [r7, #8]
 8002d9c:	607a      	str	r2, [r7, #4]
 8002d9e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d103      	bne.n	8002dae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	601a      	str	r2, [r3, #0]
 8002dac:	e002      	b.n	8002db4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	69b8      	ldr	r0, [r7, #24]
 8002dc4:	f7ff fece 	bl	8002b64 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002dd0:	bf00      	nop
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	; 0x28
 8002ddc:	af02      	add	r7, sp, #8
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <xQueueCreateCountingSemaphoreStatic+0x26>
 8002dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	61bb      	str	r3, [r7, #24]
 8002dfc:	e7fe      	b.n	8002dfc <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d909      	bls.n	8002e1a <xQueueCreateCountingSemaphoreStatic+0x42>
 8002e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0a:	f383 8811 	msr	BASEPRI, r3
 8002e0e:	f3bf 8f6f 	isb	sy
 8002e12:	f3bf 8f4f 	dsb	sy
 8002e16:	617b      	str	r3, [r7, #20]
 8002e18:	e7fe      	b.n	8002e18 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	2100      	movs	r1, #0
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f7ff ff05 	bl	8002c34 <xQueueGenericCreateStatic>
 8002e2a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002e38:	69fb      	ldr	r3, [r7, #28]
	}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3720      	adds	r7, #32
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b086      	sub	sp, #24
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d109      	bne.n	8002e66 <xQueueCreateCountingSemaphore+0x24>
 8002e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e56:	f383 8811 	msr	BASEPRI, r3
 8002e5a:	f3bf 8f6f 	isb	sy
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	613b      	str	r3, [r7, #16]
 8002e64:	e7fe      	b.n	8002e64 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d909      	bls.n	8002e82 <xQueueCreateCountingSemaphore+0x40>
 8002e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e72:	f383 8811 	msr	BASEPRI, r3
 8002e76:	f3bf 8f6f 	isb	sy
 8002e7a:	f3bf 8f4f 	dsb	sy
 8002e7e:	60fb      	str	r3, [r7, #12]
 8002e80:	e7fe      	b.n	8002e80 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002e82:	2202      	movs	r2, #2
 8002e84:	2100      	movs	r1, #0
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff ff46 	bl	8002d18 <xQueueGenericCreate>
 8002e8c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d002      	beq.n	8002e9a <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002e9a:	697b      	ldr	r3, [r7, #20]
	}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3718      	adds	r7, #24
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}

08002ea4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08e      	sub	sp, #56	; 0x38
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
 8002eb0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <xQueueGenericSend+0x30>
 8002ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec4:	f383 8811 	msr	BASEPRI, r3
 8002ec8:	f3bf 8f6f 	isb	sy
 8002ecc:	f3bf 8f4f 	dsb	sy
 8002ed0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ed2:	e7fe      	b.n	8002ed2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ed4:	68bb      	ldr	r3, [r7, #8]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d103      	bne.n	8002ee2 <xQueueGenericSend+0x3e>
 8002eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <xQueueGenericSend+0x42>
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <xQueueGenericSend+0x44>
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d109      	bne.n	8002f00 <xQueueGenericSend+0x5c>
 8002eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef0:	f383 8811 	msr	BASEPRI, r3
 8002ef4:	f3bf 8f6f 	isb	sy
 8002ef8:	f3bf 8f4f 	dsb	sy
 8002efc:	627b      	str	r3, [r7, #36]	; 0x24
 8002efe:	e7fe      	b.n	8002efe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d103      	bne.n	8002f0e <xQueueGenericSend+0x6a>
 8002f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <xQueueGenericSend+0x6e>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <xQueueGenericSend+0x70>
 8002f12:	2300      	movs	r3, #0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d109      	bne.n	8002f2c <xQueueGenericSend+0x88>
 8002f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	623b      	str	r3, [r7, #32]
 8002f2a:	e7fe      	b.n	8002f2a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f2c:	f001 fb2e 	bl	800458c <xTaskGetSchedulerState>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d102      	bne.n	8002f3c <xQueueGenericSend+0x98>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d101      	bne.n	8002f40 <xQueueGenericSend+0x9c>
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e000      	b.n	8002f42 <xQueueGenericSend+0x9e>
 8002f40:	2300      	movs	r3, #0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <xQueueGenericSend+0xb6>
 8002f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4a:	f383 8811 	msr	BASEPRI, r3
 8002f4e:	f3bf 8f6f 	isb	sy
 8002f52:	f3bf 8f4f 	dsb	sy
 8002f56:	61fb      	str	r3, [r7, #28]
 8002f58:	e7fe      	b.n	8002f58 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f5a:	f002 faf5 	bl	8005548 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d302      	bcc.n	8002f70 <xQueueGenericSend+0xcc>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d129      	bne.n	8002fc4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f76:	f000 fb5d 	bl	8003634 <prvCopyDataToQueue>
 8002f7a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d010      	beq.n	8002fa6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f86:	3324      	adds	r3, #36	; 0x24
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f001 f945 	bl	8004218 <xTaskRemoveFromEventList>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d013      	beq.n	8002fbc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f94:	4b3f      	ldr	r3, [pc, #252]	; (8003094 <xQueueGenericSend+0x1f0>)
 8002f96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	f3bf 8f4f 	dsb	sy
 8002fa0:	f3bf 8f6f 	isb	sy
 8002fa4:	e00a      	b.n	8002fbc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d007      	beq.n	8002fbc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002fac:	4b39      	ldr	r3, [pc, #228]	; (8003094 <xQueueGenericSend+0x1f0>)
 8002fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fb2:	601a      	str	r2, [r3, #0]
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002fbc:	f002 faf2 	bl	80055a4 <vPortExitCritical>
				return pdPASS;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e063      	b.n	800308c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d103      	bne.n	8002fd2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fca:	f002 faeb 	bl	80055a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e05c      	b.n	800308c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d106      	bne.n	8002fe6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fd8:	f107 0314 	add.w	r3, r7, #20
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 f97d 	bl	80042dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fe6:	f002 fadd 	bl	80055a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002fea:	f000 fee3 	bl	8003db4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fee:	f002 faab 	bl	8005548 <vPortEnterCritical>
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ff8:	b25b      	sxtb	r3, r3
 8002ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffe:	d103      	bne.n	8003008 <xQueueGenericSend+0x164>
 8003000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800300e:	b25b      	sxtb	r3, r3
 8003010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003014:	d103      	bne.n	800301e <xQueueGenericSend+0x17a>
 8003016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800301e:	f002 fac1 	bl	80055a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003022:	1d3a      	adds	r2, r7, #4
 8003024:	f107 0314 	add.w	r3, r7, #20
 8003028:	4611      	mov	r1, r2
 800302a:	4618      	mov	r0, r3
 800302c:	f001 f96c 	bl	8004308 <xTaskCheckForTimeOut>
 8003030:	4603      	mov	r3, r0
 8003032:	2b00      	cmp	r3, #0
 8003034:	d124      	bne.n	8003080 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003036:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003038:	f000 fbf4 	bl	8003824 <prvIsQueueFull>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d018      	beq.n	8003074 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003044:	3310      	adds	r3, #16
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	4611      	mov	r1, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f001 f896 	bl	800417c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003050:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003052:	f000 fb7f 	bl	8003754 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003056:	f000 febb 	bl	8003dd0 <xTaskResumeAll>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	f47f af7c 	bne.w	8002f5a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003062:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <xQueueGenericSend+0x1f0>)
 8003064:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	f3bf 8f6f 	isb	sy
 8003072:	e772      	b.n	8002f5a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003076:	f000 fb6d 	bl	8003754 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800307a:	f000 fea9 	bl	8003dd0 <xTaskResumeAll>
 800307e:	e76c      	b.n	8002f5a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003082:	f000 fb67 	bl	8003754 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003086:	f000 fea3 	bl	8003dd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800308a:	2300      	movs	r3, #0
		}
	}
}
 800308c:	4618      	mov	r0, r3
 800308e:	3738      	adds	r7, #56	; 0x38
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	e000ed04 	.word	0xe000ed04

08003098 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08e      	sub	sp, #56	; 0x38
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
 80030a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80030aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d109      	bne.n	80030c4 <xQueueGenericSendFromISR+0x2c>
 80030b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b4:	f383 8811 	msr	BASEPRI, r3
 80030b8:	f3bf 8f6f 	isb	sy
 80030bc:	f3bf 8f4f 	dsb	sy
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
 80030c2:	e7fe      	b.n	80030c2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d103      	bne.n	80030d2 <xQueueGenericSendFromISR+0x3a>
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <xQueueGenericSendFromISR+0x3e>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <xQueueGenericSendFromISR+0x40>
 80030d6:	2300      	movs	r3, #0
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <xQueueGenericSendFromISR+0x58>
 80030dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	623b      	str	r3, [r7, #32]
 80030ee:	e7fe      	b.n	80030ee <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d103      	bne.n	80030fe <xQueueGenericSendFromISR+0x66>
 80030f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d101      	bne.n	8003102 <xQueueGenericSendFromISR+0x6a>
 80030fe:	2301      	movs	r3, #1
 8003100:	e000      	b.n	8003104 <xQueueGenericSendFromISR+0x6c>
 8003102:	2300      	movs	r3, #0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <xQueueGenericSendFromISR+0x84>
 8003108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310c:	f383 8811 	msr	BASEPRI, r3
 8003110:	f3bf 8f6f 	isb	sy
 8003114:	f3bf 8f4f 	dsb	sy
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	e7fe      	b.n	800311a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800311c:	f002 face 	bl	80056bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003120:	f3ef 8211 	mrs	r2, BASEPRI
 8003124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003128:	f383 8811 	msr	BASEPRI, r3
 800312c:	f3bf 8f6f 	isb	sy
 8003130:	f3bf 8f4f 	dsb	sy
 8003134:	61ba      	str	r2, [r7, #24]
 8003136:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003138:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800313a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800313c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003144:	429a      	cmp	r2, r3
 8003146:	d302      	bcc.n	800314e <xQueueGenericSendFromISR+0xb6>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d12c      	bne.n	80031a8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800314e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003150:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003154:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	68b9      	ldr	r1, [r7, #8]
 800315c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800315e:	f000 fa69 	bl	8003634 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003162:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316a:	d112      	bne.n	8003192 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	2b00      	cmp	r3, #0
 8003172:	d016      	beq.n	80031a2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	3324      	adds	r3, #36	; 0x24
 8003178:	4618      	mov	r0, r3
 800317a:	f001 f84d 	bl	8004218 <xTaskRemoveFromEventList>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00e      	beq.n	80031a2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00b      	beq.n	80031a2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	e007      	b.n	80031a2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003192:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003196:	3301      	adds	r3, #1
 8003198:	b2db      	uxtb	r3, r3
 800319a:	b25a      	sxtb	r2, r3
 800319c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800319e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80031a2:	2301      	movs	r3, #1
 80031a4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80031a6:	e001      	b.n	80031ac <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	637b      	str	r3, [r7, #52]	; 0x34
 80031ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3738      	adds	r7, #56	; 0x38
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08c      	sub	sp, #48	; 0x30
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80031cc:	2300      	movs	r3, #0
 80031ce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <xQueueReceive+0x2e>
	__asm volatile
 80031da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031de:	f383 8811 	msr	BASEPRI, r3
 80031e2:	f3bf 8f6f 	isb	sy
 80031e6:	f3bf 8f4f 	dsb	sy
 80031ea:	623b      	str	r3, [r7, #32]
 80031ec:	e7fe      	b.n	80031ec <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d103      	bne.n	80031fc <xQueueReceive+0x3c>
 80031f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d101      	bne.n	8003200 <xQueueReceive+0x40>
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <xQueueReceive+0x42>
 8003200:	2300      	movs	r3, #0
 8003202:	2b00      	cmp	r3, #0
 8003204:	d109      	bne.n	800321a <xQueueReceive+0x5a>
 8003206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800320a:	f383 8811 	msr	BASEPRI, r3
 800320e:	f3bf 8f6f 	isb	sy
 8003212:	f3bf 8f4f 	dsb	sy
 8003216:	61fb      	str	r3, [r7, #28]
 8003218:	e7fe      	b.n	8003218 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800321a:	f001 f9b7 	bl	800458c <xTaskGetSchedulerState>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d102      	bne.n	800322a <xQueueReceive+0x6a>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d101      	bne.n	800322e <xQueueReceive+0x6e>
 800322a:	2301      	movs	r3, #1
 800322c:	e000      	b.n	8003230 <xQueueReceive+0x70>
 800322e:	2300      	movs	r3, #0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d109      	bne.n	8003248 <xQueueReceive+0x88>
 8003234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003238:	f383 8811 	msr	BASEPRI, r3
 800323c:	f3bf 8f6f 	isb	sy
 8003240:	f3bf 8f4f 	dsb	sy
 8003244:	61bb      	str	r3, [r7, #24]
 8003246:	e7fe      	b.n	8003246 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003248:	f002 f97e 	bl	8005548 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003250:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	2b00      	cmp	r3, #0
 8003256:	d01f      	beq.n	8003298 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003258:	68b9      	ldr	r1, [r7, #8]
 800325a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800325c:	f000 fa54 	bl	8003708 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003262:	1e5a      	subs	r2, r3, #1
 8003264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003266:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00f      	beq.n	8003290 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003272:	3310      	adds	r3, #16
 8003274:	4618      	mov	r0, r3
 8003276:	f000 ffcf 	bl	8004218 <xTaskRemoveFromEventList>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d007      	beq.n	8003290 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003280:	4b3c      	ldr	r3, [pc, #240]	; (8003374 <xQueueReceive+0x1b4>)
 8003282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	f3bf 8f4f 	dsb	sy
 800328c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003290:	f002 f988 	bl	80055a4 <vPortExitCritical>
				return pdPASS;
 8003294:	2301      	movs	r3, #1
 8003296:	e069      	b.n	800336c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d103      	bne.n	80032a6 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800329e:	f002 f981 	bl	80055a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032a2:	2300      	movs	r3, #0
 80032a4:	e062      	b.n	800336c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d106      	bne.n	80032ba <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032ac:	f107 0310 	add.w	r3, r7, #16
 80032b0:	4618      	mov	r0, r3
 80032b2:	f001 f813 	bl	80042dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032b6:	2301      	movs	r3, #1
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032ba:	f002 f973 	bl	80055a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032be:	f000 fd79 	bl	8003db4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032c2:	f002 f941 	bl	8005548 <vPortEnterCritical>
 80032c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032cc:	b25b      	sxtb	r3, r3
 80032ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d2:	d103      	bne.n	80032dc <xQueueReceive+0x11c>
 80032d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032e2:	b25b      	sxtb	r3, r3
 80032e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e8:	d103      	bne.n	80032f2 <xQueueReceive+0x132>
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80032f2:	f002 f957 	bl	80055a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032f6:	1d3a      	adds	r2, r7, #4
 80032f8:	f107 0310 	add.w	r3, r7, #16
 80032fc:	4611      	mov	r1, r2
 80032fe:	4618      	mov	r0, r3
 8003300:	f001 f802 	bl	8004308 <xTaskCheckForTimeOut>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d123      	bne.n	8003352 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800330a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800330c:	f000 fa74 	bl	80037f8 <prvIsQueueEmpty>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d017      	beq.n	8003346 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003318:	3324      	adds	r3, #36	; 0x24
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	4611      	mov	r1, r2
 800331e:	4618      	mov	r0, r3
 8003320:	f000 ff2c 	bl	800417c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003326:	f000 fa15 	bl	8003754 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800332a:	f000 fd51 	bl	8003dd0 <xTaskResumeAll>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d189      	bne.n	8003248 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003334:	4b0f      	ldr	r3, [pc, #60]	; (8003374 <xQueueReceive+0x1b4>)
 8003336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	f3bf 8f6f 	isb	sy
 8003344:	e780      	b.n	8003248 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003348:	f000 fa04 	bl	8003754 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800334c:	f000 fd40 	bl	8003dd0 <xTaskResumeAll>
 8003350:	e77a      	b.n	8003248 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003352:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003354:	f000 f9fe 	bl	8003754 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003358:	f000 fd3a 	bl	8003dd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800335c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800335e:	f000 fa4b 	bl	80037f8 <prvIsQueueEmpty>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	f43f af6f 	beq.w	8003248 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800336a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800336c:	4618      	mov	r0, r3
 800336e:	3730      	adds	r7, #48	; 0x30
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	e000ed04 	.word	0xe000ed04

08003378 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08e      	sub	sp, #56	; 0x38
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003382:	2300      	movs	r3, #0
 8003384:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800338a:	2300      	movs	r3, #0
 800338c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003390:	2b00      	cmp	r3, #0
 8003392:	d109      	bne.n	80033a8 <xQueueSemaphoreTake+0x30>
 8003394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003398:	f383 8811 	msr	BASEPRI, r3
 800339c:	f3bf 8f6f 	isb	sy
 80033a0:	f3bf 8f4f 	dsb	sy
 80033a4:	623b      	str	r3, [r7, #32]
 80033a6:	e7fe      	b.n	80033a6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80033a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d009      	beq.n	80033c4 <xQueueSemaphoreTake+0x4c>
 80033b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033b4:	f383 8811 	msr	BASEPRI, r3
 80033b8:	f3bf 8f6f 	isb	sy
 80033bc:	f3bf 8f4f 	dsb	sy
 80033c0:	61fb      	str	r3, [r7, #28]
 80033c2:	e7fe      	b.n	80033c2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033c4:	f001 f8e2 	bl	800458c <xTaskGetSchedulerState>
 80033c8:	4603      	mov	r3, r0
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d102      	bne.n	80033d4 <xQueueSemaphoreTake+0x5c>
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d101      	bne.n	80033d8 <xQueueSemaphoreTake+0x60>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <xQueueSemaphoreTake+0x62>
 80033d8:	2300      	movs	r3, #0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <xQueueSemaphoreTake+0x7a>
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	f383 8811 	msr	BASEPRI, r3
 80033e6:	f3bf 8f6f 	isb	sy
 80033ea:	f3bf 8f4f 	dsb	sy
 80033ee:	61bb      	str	r3, [r7, #24]
 80033f0:	e7fe      	b.n	80033f0 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80033f2:	f002 f8a9 	bl	8005548 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80033f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fa:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80033fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d024      	beq.n	800344c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003404:	1e5a      	subs	r2, r3, #1
 8003406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003408:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800340a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d104      	bne.n	800341c <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003412:	f001 fa37 	bl	8004884 <pvTaskIncrementMutexHeldCount>
 8003416:	4602      	mov	r2, r0
 8003418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341a:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800341c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d00f      	beq.n	8003444 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003426:	3310      	adds	r3, #16
 8003428:	4618      	mov	r0, r3
 800342a:	f000 fef5 	bl	8004218 <xTaskRemoveFromEventList>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d007      	beq.n	8003444 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003434:	4b53      	ldr	r3, [pc, #332]	; (8003584 <xQueueSemaphoreTake+0x20c>)
 8003436:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	f3bf 8f4f 	dsb	sy
 8003440:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003444:	f002 f8ae 	bl	80055a4 <vPortExitCritical>
				return pdPASS;
 8003448:	2301      	movs	r3, #1
 800344a:	e096      	b.n	800357a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d110      	bne.n	8003474 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	2b00      	cmp	r3, #0
 8003456:	d009      	beq.n	800346c <xQueueSemaphoreTake+0xf4>
 8003458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800345c:	f383 8811 	msr	BASEPRI, r3
 8003460:	f3bf 8f6f 	isb	sy
 8003464:	f3bf 8f4f 	dsb	sy
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	e7fe      	b.n	800346a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800346c:	f002 f89a 	bl	80055a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003470:	2300      	movs	r3, #0
 8003472:	e082      	b.n	800357a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800347a:	f107 030c 	add.w	r3, r7, #12
 800347e:	4618      	mov	r0, r3
 8003480:	f000 ff2c 	bl	80042dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003484:	2301      	movs	r3, #1
 8003486:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003488:	f002 f88c 	bl	80055a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800348c:	f000 fc92 	bl	8003db4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003490:	f002 f85a 	bl	8005548 <vPortEnterCritical>
 8003494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003496:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800349a:	b25b      	sxtb	r3, r3
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a0:	d103      	bne.n	80034aa <xQueueSemaphoreTake+0x132>
 80034a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034b0:	b25b      	sxtb	r3, r3
 80034b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b6:	d103      	bne.n	80034c0 <xQueueSemaphoreTake+0x148>
 80034b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034c0:	f002 f870 	bl	80055a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034c4:	463a      	mov	r2, r7
 80034c6:	f107 030c 	add.w	r3, r7, #12
 80034ca:	4611      	mov	r1, r2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f000 ff1b 	bl	8004308 <xTaskCheckForTimeOut>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d132      	bne.n	800353e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80034da:	f000 f98d 	bl	80037f8 <prvIsQueueEmpty>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d026      	beq.n	8003532 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d109      	bne.n	8003500 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80034ec:	f002 f82c 	bl	8005548 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80034f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f001 f867 	bl	80045c8 <xTaskPriorityInherit>
 80034fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80034fc:	f002 f852 	bl	80055a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003502:	3324      	adds	r3, #36	; 0x24
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	4611      	mov	r1, r2
 8003508:	4618      	mov	r0, r3
 800350a:	f000 fe37 	bl	800417c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800350e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003510:	f000 f920 	bl	8003754 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003514:	f000 fc5c 	bl	8003dd0 <xTaskResumeAll>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	f47f af69 	bne.w	80033f2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003520:	4b18      	ldr	r3, [pc, #96]	; (8003584 <xQueueSemaphoreTake+0x20c>)
 8003522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	f3bf 8f4f 	dsb	sy
 800352c:	f3bf 8f6f 	isb	sy
 8003530:	e75f      	b.n	80033f2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003534:	f000 f90e 	bl	8003754 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003538:	f000 fc4a 	bl	8003dd0 <xTaskResumeAll>
 800353c:	e759      	b.n	80033f2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800353e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003540:	f000 f908 	bl	8003754 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003544:	f000 fc44 	bl	8003dd0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003548:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800354a:	f000 f955 	bl	80037f8 <prvIsQueueEmpty>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	f43f af4e 	beq.w	80033f2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00d      	beq.n	8003578 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800355c:	f001 fff4 	bl	8005548 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003560:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003562:	f000 f850 	bl	8003606 <prvGetDisinheritPriorityAfterTimeout>
 8003566:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8003568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800356e:	4618      	mov	r0, r3
 8003570:	f001 f904 	bl	800477c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003574:	f002 f816 	bl	80055a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003578:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800357a:	4618      	mov	r0, r3
 800357c:	3738      	adds	r7, #56	; 0x38
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	e000ed04 	.word	0xe000ed04

08003588 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d109      	bne.n	80035aa <uxQueueMessagesWaiting+0x22>
 8003596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359a:	f383 8811 	msr	BASEPRI, r3
 800359e:	f3bf 8f6f 	isb	sy
 80035a2:	f3bf 8f4f 	dsb	sy
 80035a6:	60bb      	str	r3, [r7, #8]
 80035a8:	e7fe      	b.n	80035a8 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 80035aa:	f001 ffcd 	bl	8005548 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b2:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80035b4:	f001 fff6 	bl	80055a4 <vPortExitCritical>

	return uxReturn;
 80035b8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80035ba:	4618      	mov	r0, r3
 80035bc:	3710      	adds	r7, #16
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b084      	sub	sp, #16
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d109      	bne.n	80035e8 <vQueueDelete+0x26>
 80035d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d8:	f383 8811 	msr	BASEPRI, r3
 80035dc:	f3bf 8f6f 	isb	sy
 80035e0:	f3bf 8f4f 	dsb	sy
 80035e4:	60bb      	str	r3, [r7, #8]
 80035e6:	e7fe      	b.n	80035e6 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 f95b 	bl	80038a4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d102      	bne.n	80035fe <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f002 f95d 	bl	80058b8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80035fe:	bf00      	nop
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003606:	b480      	push	{r7}
 8003608:	b085      	sub	sp, #20
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	2b00      	cmp	r3, #0
 8003614:	d006      	beq.n	8003624 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	e001      	b.n	8003628 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003628:	68fb      	ldr	r3, [r7, #12]
	}
 800362a:	4618      	mov	r0, r3
 800362c:	3714      	adds	r7, #20
 800362e:	46bd      	mov	sp, r7
 8003630:	bc80      	pop	{r7}
 8003632:	4770      	bx	lr

08003634 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003640:	2300      	movs	r3, #0
 8003642:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10d      	bne.n	800366e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d14d      	bne.n	80036f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	4618      	mov	r0, r3
 8003660:	f001 f820 	bl	80046a4 <xTaskPriorityDisinherit>
 8003664:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	e043      	b.n	80036f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d119      	bne.n	80036a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6898      	ldr	r0, [r3, #8]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	461a      	mov	r2, r3
 800367e:	68b9      	ldr	r1, [r7, #8]
 8003680:	f003 fd00 	bl	8007084 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368c:	441a      	add	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689a      	ldr	r2, [r3, #8]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	429a      	cmp	r2, r3
 800369c:	d32b      	bcc.n	80036f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	609a      	str	r2, [r3, #8]
 80036a6:	e026      	b.n	80036f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	68d8      	ldr	r0, [r3, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	461a      	mov	r2, r3
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	f003 fce6 	bl	8007084 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	68da      	ldr	r2, [r3, #12]
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	425b      	negs	r3, r3
 80036c2:	441a      	add	r2, r3
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	68da      	ldr	r2, [r3, #12]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d207      	bcs.n	80036e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036dc:	425b      	negs	r3, r3
 80036de:	441a      	add	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b02      	cmp	r3, #2
 80036e8:	d105      	bne.n	80036f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d002      	beq.n	80036f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80036fe:	697b      	ldr	r3, [r7, #20]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d018      	beq.n	800374c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003722:	441a      	add	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68da      	ldr	r2, [r3, #12]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	429a      	cmp	r2, r3
 8003732:	d303      	bcc.n	800373c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	68d9      	ldr	r1, [r3, #12]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	461a      	mov	r2, r3
 8003746:	6838      	ldr	r0, [r7, #0]
 8003748:	f003 fc9c 	bl	8007084 <memcpy>
	}
}
 800374c:	bf00      	nop
 800374e:	3708      	adds	r7, #8
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800375c:	f001 fef4 	bl	8005548 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003766:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003768:	e011      	b.n	800378e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	2b00      	cmp	r3, #0
 8003770:	d012      	beq.n	8003798 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3324      	adds	r3, #36	; 0x24
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fd4e 	bl	8004218 <xTaskRemoveFromEventList>
 800377c:	4603      	mov	r3, r0
 800377e:	2b00      	cmp	r3, #0
 8003780:	d001      	beq.n	8003786 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003782:	f000 fe21 	bl	80043c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003786:	7bfb      	ldrb	r3, [r7, #15]
 8003788:	3b01      	subs	r3, #1
 800378a:	b2db      	uxtb	r3, r3
 800378c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800378e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003792:	2b00      	cmp	r3, #0
 8003794:	dce9      	bgt.n	800376a <prvUnlockQueue+0x16>
 8003796:	e000      	b.n	800379a <prvUnlockQueue+0x46>
					break;
 8003798:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	22ff      	movs	r2, #255	; 0xff
 800379e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80037a2:	f001 feff 	bl	80055a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037a6:	f001 fecf 	bl	8005548 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037b2:	e011      	b.n	80037d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d012      	beq.n	80037e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3310      	adds	r3, #16
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 fd29 	bl	8004218 <xTaskRemoveFromEventList>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80037cc:	f000 fdfc 	bl	80043c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80037d0:	7bbb      	ldrb	r3, [r7, #14]
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	dce9      	bgt.n	80037b4 <prvUnlockQueue+0x60>
 80037e0:	e000      	b.n	80037e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80037e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	22ff      	movs	r2, #255	; 0xff
 80037e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80037ec:	f001 feda 	bl	80055a4 <vPortExitCritical>
}
 80037f0:	bf00      	nop
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003800:	f001 fea2 	bl	8005548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	2b00      	cmp	r3, #0
 800380a:	d102      	bne.n	8003812 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800380c:	2301      	movs	r3, #1
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	e001      	b.n	8003816 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003812:	2300      	movs	r3, #0
 8003814:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003816:	f001 fec5 	bl	80055a4 <vPortExitCritical>

	return xReturn;
 800381a:	68fb      	ldr	r3, [r7, #12]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800382c:	f001 fe8c 	bl	8005548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003838:	429a      	cmp	r2, r3
 800383a:	d102      	bne.n	8003842 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800383c:	2301      	movs	r3, #1
 800383e:	60fb      	str	r3, [r7, #12]
 8003840:	e001      	b.n	8003846 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003842:	2300      	movs	r3, #0
 8003844:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003846:	f001 fead 	bl	80055a4 <vPortExitCritical>

	return xReturn;
 800384a:	68fb      	ldr	r3, [r7, #12]
}
 800384c:	4618      	mov	r0, r3
 800384e:	3710      	adds	r7, #16
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	e014      	b.n	800388e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003864:	4a0e      	ldr	r2, [pc, #56]	; (80038a0 <vQueueAddToRegistry+0x4c>)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10b      	bne.n	8003888 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003870:	490b      	ldr	r1, [pc, #44]	; (80038a0 <vQueueAddToRegistry+0x4c>)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800387a:	4a09      	ldr	r2, [pc, #36]	; (80038a0 <vQueueAddToRegistry+0x4c>)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	00db      	lsls	r3, r3, #3
 8003880:	4413      	add	r3, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003886:	e005      	b.n	8003894 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3301      	adds	r3, #1
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2b07      	cmp	r3, #7
 8003892:	d9e7      	bls.n	8003864 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003894:	bf00      	nop
 8003896:	3714      	adds	r7, #20
 8003898:	46bd      	mov	sp, r7
 800389a:	bc80      	pop	{r7}
 800389c:	4770      	bx	lr
 800389e:	bf00      	nop
 80038a0:	20002760 	.word	0x20002760

080038a4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038ac:	2300      	movs	r3, #0
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e016      	b.n	80038e0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80038b2:	4a0f      	ldr	r2, [pc, #60]	; (80038f0 <vQueueUnregisterQueue+0x4c>)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4413      	add	r3, r2
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	429a      	cmp	r2, r3
 80038c0:	d10b      	bne.n	80038da <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80038c2:	4a0b      	ldr	r2, [pc, #44]	; (80038f0 <vQueueUnregisterQueue+0x4c>)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2100      	movs	r1, #0
 80038c8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80038cc:	4a08      	ldr	r2, [pc, #32]	; (80038f0 <vQueueUnregisterQueue+0x4c>)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4413      	add	r3, r2
 80038d4:	2200      	movs	r2, #0
 80038d6:	605a      	str	r2, [r3, #4]
				break;
 80038d8:	e005      	b.n	80038e6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3301      	adds	r3, #1
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2b07      	cmp	r3, #7
 80038e4:	d9e5      	bls.n	80038b2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80038e6:	bf00      	nop
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr
 80038f0:	20002760 	.word	0x20002760

080038f4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003904:	f001 fe20 	bl	8005548 <vPortEnterCritical>
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800390e:	b25b      	sxtb	r3, r3
 8003910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003914:	d103      	bne.n	800391e <vQueueWaitForMessageRestricted+0x2a>
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003924:	b25b      	sxtb	r3, r3
 8003926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392a:	d103      	bne.n	8003934 <vQueueWaitForMessageRestricted+0x40>
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003934:	f001 fe36 	bl	80055a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	2b00      	cmp	r3, #0
 800393e:	d106      	bne.n	800394e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	3324      	adds	r3, #36	; 0x24
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	68b9      	ldr	r1, [r7, #8]
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fc3b 	bl	80041c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800394e:	6978      	ldr	r0, [r7, #20]
 8003950:	f7ff ff00 	bl	8003754 <prvUnlockQueue>
	}
 8003954:	bf00      	nop
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800395c:	b580      	push	{r7, lr}
 800395e:	b08e      	sub	sp, #56	; 0x38
 8003960:	af04      	add	r7, sp, #16
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800396a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396c:	2b00      	cmp	r3, #0
 800396e:	d109      	bne.n	8003984 <xTaskCreateStatic+0x28>
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	623b      	str	r3, [r7, #32]
 8003982:	e7fe      	b.n	8003982 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <xTaskCreateStatic+0x42>
 800398a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800398e:	f383 8811 	msr	BASEPRI, r3
 8003992:	f3bf 8f6f 	isb	sy
 8003996:	f3bf 8f4f 	dsb	sy
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	e7fe      	b.n	800399c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800399e:	235c      	movs	r3, #92	; 0x5c
 80039a0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2b5c      	cmp	r3, #92	; 0x5c
 80039a6:	d009      	beq.n	80039bc <xTaskCreateStatic+0x60>
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	e7fe      	b.n	80039ba <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d01e      	beq.n	8003a00 <xTaskCreateStatic+0xa4>
 80039c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d01b      	beq.n	8003a00 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80039d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	2202      	movs	r2, #2
 80039d6:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039da:	2300      	movs	r3, #0
 80039dc:	9303      	str	r3, [sp, #12]
 80039de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e0:	9302      	str	r3, [sp, #8]
 80039e2:	f107 0314 	add.w	r3, r7, #20
 80039e6:	9301      	str	r3, [sp, #4]
 80039e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68b9      	ldr	r1, [r7, #8]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f850 	bl	8003a98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039fa:	f000 f8d3 	bl	8003ba4 <prvAddNewTaskToReadyList>
 80039fe:	e001      	b.n	8003a04 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003a04:	697b      	ldr	r3, [r7, #20]
	}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3728      	adds	r7, #40	; 0x28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b08c      	sub	sp, #48	; 0x30
 8003a12:	af04      	add	r7, sp, #16
 8003a14:	60f8      	str	r0, [r7, #12]
 8003a16:	60b9      	str	r1, [r7, #8]
 8003a18:	603b      	str	r3, [r7, #0]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a1e:	88fb      	ldrh	r3, [r7, #6]
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f001 fe86 	bl	8005734 <pvPortMalloc>
 8003a28:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d00e      	beq.n	8003a4e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a30:	205c      	movs	r0, #92	; 0x5c
 8003a32:	f001 fe7f 	bl	8005734 <pvPortMalloc>
 8003a36:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
 8003a44:	e005      	b.n	8003a52 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a46:	6978      	ldr	r0, [r7, #20]
 8003a48:	f001 ff36 	bl	80058b8 <vPortFree>
 8003a4c:	e001      	b.n	8003a52 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d017      	beq.n	8003a88 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a60:	88fa      	ldrh	r2, [r7, #6]
 8003a62:	2300      	movs	r3, #0
 8003a64:	9303      	str	r3, [sp, #12]
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	9302      	str	r3, [sp, #8]
 8003a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6c:	9301      	str	r3, [sp, #4]
 8003a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a70:	9300      	str	r3, [sp, #0]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	68b9      	ldr	r1, [r7, #8]
 8003a76:	68f8      	ldr	r0, [r7, #12]
 8003a78:	f000 f80e 	bl	8003a98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a7c:	69f8      	ldr	r0, [r7, #28]
 8003a7e:	f000 f891 	bl	8003ba4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a82:	2301      	movs	r3, #1
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	e002      	b.n	8003a8e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a88:	f04f 33ff 	mov.w	r3, #4294967295
 8003a8c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a8e:	69bb      	ldr	r3, [r7, #24]
	}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3720      	adds	r7, #32
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
 8003aa4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	461a      	mov	r2, r3
 8003ab0:	21a5      	movs	r1, #165	; 0xa5
 8003ab2:	f003 faf2 	bl	800709a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f023 0307 	bic.w	r3, r3, #7
 8003ace:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	f003 0307 	and.w	r3, r3, #7
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d009      	beq.n	8003aee <prvInitialiseNewTask+0x56>
 8003ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ade:	f383 8811 	msr	BASEPRI, r3
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	e7fe      	b.n	8003aec <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aee:	2300      	movs	r3, #0
 8003af0:	61fb      	str	r3, [r7, #28]
 8003af2:	e012      	b.n	8003b1a <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	4413      	add	r3, r2
 8003afa:	7819      	ldrb	r1, [r3, #0]
 8003afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	4413      	add	r3, r2
 8003b02:	3334      	adds	r3, #52	; 0x34
 8003b04:	460a      	mov	r2, r1
 8003b06:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d006      	beq.n	8003b22 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	3301      	adds	r3, #1
 8003b18:	61fb      	str	r3, [r7, #28]
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	2b0f      	cmp	r3, #15
 8003b1e:	d9e9      	bls.n	8003af4 <prvInitialiseNewTask+0x5c>
 8003b20:	e000      	b.n	8003b24 <prvInitialiseNewTask+0x8c>
		{
			break;
 8003b22:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	2b37      	cmp	r3, #55	; 0x37
 8003b30:	d901      	bls.n	8003b36 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b32:	2337      	movs	r3, #55	; 0x37
 8003b34:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b3a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b40:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b44:	2200      	movs	r2, #0
 8003b46:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	3304      	adds	r3, #4
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	f7fe ff78 	bl	8002a42 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	3318      	adds	r3, #24
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fe ff73 	bl	8002a42 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b60:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b64:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	2200      	movs	r2, #0
 8003b76:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	68f9      	ldr	r1, [r7, #12]
 8003b84:	69b8      	ldr	r0, [r7, #24]
 8003b86:	f001 fbf3 	bl	8005370 <pxPortInitialiseStack>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b8e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d002      	beq.n	8003b9c <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b9a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b9c:	bf00      	nop
 8003b9e:	3720      	adds	r7, #32
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003bac:	f001 fccc 	bl	8005548 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003bb0:	4b2d      	ldr	r3, [pc, #180]	; (8003c68 <prvAddNewTaskToReadyList+0xc4>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	4a2c      	ldr	r2, [pc, #176]	; (8003c68 <prvAddNewTaskToReadyList+0xc4>)
 8003bb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003bba:	4b2c      	ldr	r3, [pc, #176]	; (8003c6c <prvAddNewTaskToReadyList+0xc8>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d109      	bne.n	8003bd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003bc2:	4a2a      	ldr	r2, [pc, #168]	; (8003c6c <prvAddNewTaskToReadyList+0xc8>)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bc8:	4b27      	ldr	r3, [pc, #156]	; (8003c68 <prvAddNewTaskToReadyList+0xc4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d110      	bne.n	8003bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bd0:	f000 fc1e 	bl	8004410 <prvInitialiseTaskLists>
 8003bd4:	e00d      	b.n	8003bf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bd6:	4b26      	ldr	r3, [pc, #152]	; (8003c70 <prvAddNewTaskToReadyList+0xcc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d109      	bne.n	8003bf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bde:	4b23      	ldr	r3, [pc, #140]	; (8003c6c <prvAddNewTaskToReadyList+0xc8>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d802      	bhi.n	8003bf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bec:	4a1f      	ldr	r2, [pc, #124]	; (8003c6c <prvAddNewTaskToReadyList+0xc8>)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bf2:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <prvAddNewTaskToReadyList+0xd0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	4a1e      	ldr	r2, [pc, #120]	; (8003c74 <prvAddNewTaskToReadyList+0xd0>)
 8003bfa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003bfc:	4b1d      	ldr	r3, [pc, #116]	; (8003c74 <prvAddNewTaskToReadyList+0xd0>)
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c08:	4b1b      	ldr	r3, [pc, #108]	; (8003c78 <prvAddNewTaskToReadyList+0xd4>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d903      	bls.n	8003c18 <prvAddNewTaskToReadyList+0x74>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	4a18      	ldr	r2, [pc, #96]	; (8003c78 <prvAddNewTaskToReadyList+0xd4>)
 8003c16:	6013      	str	r3, [r2, #0]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4a15      	ldr	r2, [pc, #84]	; (8003c7c <prvAddNewTaskToReadyList+0xd8>)
 8003c26:	441a      	add	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	4610      	mov	r0, r2
 8003c30:	f7fe ff13 	bl	8002a5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c34:	f001 fcb6 	bl	80055a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c38:	4b0d      	ldr	r3, [pc, #52]	; (8003c70 <prvAddNewTaskToReadyList+0xcc>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d00e      	beq.n	8003c5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c40:	4b0a      	ldr	r3, [pc, #40]	; (8003c6c <prvAddNewTaskToReadyList+0xc8>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d207      	bcs.n	8003c5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c4e:	4b0c      	ldr	r3, [pc, #48]	; (8003c80 <prvAddNewTaskToReadyList+0xdc>)
 8003c50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	f3bf 8f4f 	dsb	sy
 8003c5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c5e:	bf00      	nop
 8003c60:	3708      	adds	r7, #8
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	20000bbc 	.word	0x20000bbc
 8003c6c:	200006e8 	.word	0x200006e8
 8003c70:	20000bc8 	.word	0x20000bc8
 8003c74:	20000bd8 	.word	0x20000bd8
 8003c78:	20000bc4 	.word	0x20000bc4
 8003c7c:	200006ec 	.word	0x200006ec
 8003c80:	e000ed04 	.word	0xe000ed04

08003c84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b084      	sub	sp, #16
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d016      	beq.n	8003cc4 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c96:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <vTaskDelay+0x60>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d009      	beq.n	8003cb2 <vTaskDelay+0x2e>
 8003c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca2:	f383 8811 	msr	BASEPRI, r3
 8003ca6:	f3bf 8f6f 	isb	sy
 8003caa:	f3bf 8f4f 	dsb	sy
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	e7fe      	b.n	8003cb0 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003cb2:	f000 f87f 	bl	8003db4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 ffa9 	bl	8004c10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003cbe:	f000 f887 	bl	8003dd0 <xTaskResumeAll>
 8003cc2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d107      	bne.n	8003cda <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003cca:	4b07      	ldr	r3, [pc, #28]	; (8003ce8 <vTaskDelay+0x64>)
 8003ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	20000be4 	.word	0x20000be4
 8003ce8:	e000ed04 	.word	0xe000ed04

08003cec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b08a      	sub	sp, #40	; 0x28
 8003cf0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cfa:	463a      	mov	r2, r7
 8003cfc:	1d39      	adds	r1, r7, #4
 8003cfe:	f107 0308 	add.w	r3, r7, #8
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fe fe4c 	bl	80029a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003d08:	6839      	ldr	r1, [r7, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	9202      	str	r2, [sp, #8]
 8003d10:	9301      	str	r3, [sp, #4]
 8003d12:	2300      	movs	r3, #0
 8003d14:	9300      	str	r3, [sp, #0]
 8003d16:	2300      	movs	r3, #0
 8003d18:	460a      	mov	r2, r1
 8003d1a:	4920      	ldr	r1, [pc, #128]	; (8003d9c <vTaskStartScheduler+0xb0>)
 8003d1c:	4820      	ldr	r0, [pc, #128]	; (8003da0 <vTaskStartScheduler+0xb4>)
 8003d1e:	f7ff fe1d 	bl	800395c <xTaskCreateStatic>
 8003d22:	4602      	mov	r2, r0
 8003d24:	4b1f      	ldr	r3, [pc, #124]	; (8003da4 <vTaskStartScheduler+0xb8>)
 8003d26:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d28:	4b1e      	ldr	r3, [pc, #120]	; (8003da4 <vTaskStartScheduler+0xb8>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d002      	beq.n	8003d36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d30:	2301      	movs	r3, #1
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	e001      	b.n	8003d3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d102      	bne.n	8003d46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d40:	f000 ffba 	bl	8004cb8 <xTimerCreateTimerTask>
 8003d44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d115      	bne.n	8003d78 <vTaskStartScheduler+0x8c>
 8003d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d5e:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <vTaskStartScheduler+0xbc>)
 8003d60:	f04f 32ff 	mov.w	r2, #4294967295
 8003d64:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d66:	4b11      	ldr	r3, [pc, #68]	; (8003dac <vTaskStartScheduler+0xc0>)
 8003d68:	2201      	movs	r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d6c:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <vTaskStartScheduler+0xc4>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d72:	f001 fb79 	bl	8005468 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d76:	e00d      	b.n	8003d94 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7e:	d109      	bne.n	8003d94 <vTaskStartScheduler+0xa8>
 8003d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	60fb      	str	r3, [r7, #12]
 8003d92:	e7fe      	b.n	8003d92 <vTaskStartScheduler+0xa6>
}
 8003d94:	bf00      	nop
 8003d96:	3718      	adds	r7, #24
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}
 8003d9c:	08007100 	.word	0x08007100
 8003da0:	080043e1 	.word	0x080043e1
 8003da4:	20000be0 	.word	0x20000be0
 8003da8:	20000bdc 	.word	0x20000bdc
 8003dac:	20000bc8 	.word	0x20000bc8
 8003db0:	20000bc0 	.word	0x20000bc0

08003db4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <vTaskSuspendAll+0x18>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	4a03      	ldr	r2, [pc, #12]	; (8003dcc <vTaskSuspendAll+0x18>)
 8003dc0:	6013      	str	r3, [r2, #0]
}
 8003dc2:	bf00      	nop
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bc80      	pop	{r7}
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	20000be4 	.word	0x20000be4

08003dd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dde:	4b41      	ldr	r3, [pc, #260]	; (8003ee4 <xTaskResumeAll+0x114>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d109      	bne.n	8003dfa <xTaskResumeAll+0x2a>
 8003de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	e7fe      	b.n	8003df8 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003dfa:	f001 fba5 	bl	8005548 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003dfe:	4b39      	ldr	r3, [pc, #228]	; (8003ee4 <xTaskResumeAll+0x114>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	4a37      	ldr	r2, [pc, #220]	; (8003ee4 <xTaskResumeAll+0x114>)
 8003e06:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e08:	4b36      	ldr	r3, [pc, #216]	; (8003ee4 <xTaskResumeAll+0x114>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d162      	bne.n	8003ed6 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e10:	4b35      	ldr	r3, [pc, #212]	; (8003ee8 <xTaskResumeAll+0x118>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d05e      	beq.n	8003ed6 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e18:	e02f      	b.n	8003e7a <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e1a:	4b34      	ldr	r3, [pc, #208]	; (8003eec <xTaskResumeAll+0x11c>)
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3318      	adds	r3, #24
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fe fe72 	bl	8002b10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe fe6d 	bl	8002b10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3a:	4b2d      	ldr	r3, [pc, #180]	; (8003ef0 <xTaskResumeAll+0x120>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d903      	bls.n	8003e4a <xTaskResumeAll+0x7a>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	4a2a      	ldr	r2, [pc, #168]	; (8003ef0 <xTaskResumeAll+0x120>)
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4a27      	ldr	r2, [pc, #156]	; (8003ef4 <xTaskResumeAll+0x124>)
 8003e58:	441a      	add	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	3304      	adds	r3, #4
 8003e5e:	4619      	mov	r1, r3
 8003e60:	4610      	mov	r0, r2
 8003e62:	f7fe fdfa 	bl	8002a5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6a:	4b23      	ldr	r3, [pc, #140]	; (8003ef8 <xTaskResumeAll+0x128>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	429a      	cmp	r2, r3
 8003e72:	d302      	bcc.n	8003e7a <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003e74:	4b21      	ldr	r3, [pc, #132]	; (8003efc <xTaskResumeAll+0x12c>)
 8003e76:	2201      	movs	r2, #1
 8003e78:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e7a:	4b1c      	ldr	r3, [pc, #112]	; (8003eec <xTaskResumeAll+0x11c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1cb      	bne.n	8003e1a <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e88:	f000 fb5c 	bl	8004544 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e8c:	4b1c      	ldr	r3, [pc, #112]	; (8003f00 <xTaskResumeAll+0x130>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d010      	beq.n	8003eba <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e98:	f000 f856 	bl	8003f48 <xTaskIncrementTick>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003ea2:	4b16      	ldr	r3, [pc, #88]	; (8003efc <xTaskResumeAll+0x12c>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f1      	bne.n	8003e98 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003eb4:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <xTaskResumeAll+0x130>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003eba:	4b10      	ldr	r3, [pc, #64]	; (8003efc <xTaskResumeAll+0x12c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d009      	beq.n	8003ed6 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ec6:	4b0f      	ldr	r3, [pc, #60]	; (8003f04 <xTaskResumeAll+0x134>)
 8003ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ed6:	f001 fb65 	bl	80055a4 <vPortExitCritical>

	return xAlreadyYielded;
 8003eda:	68bb      	ldr	r3, [r7, #8]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3710      	adds	r7, #16
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	20000be4 	.word	0x20000be4
 8003ee8:	20000bbc 	.word	0x20000bbc
 8003eec:	20000b7c 	.word	0x20000b7c
 8003ef0:	20000bc4 	.word	0x20000bc4
 8003ef4:	200006ec 	.word	0x200006ec
 8003ef8:	200006e8 	.word	0x200006e8
 8003efc:	20000bd0 	.word	0x20000bd0
 8003f00:	20000bcc 	.word	0x20000bcc
 8003f04:	e000ed04 	.word	0xe000ed04

08003f08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b083      	sub	sp, #12
 8003f0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003f0e:	4b04      	ldr	r3, [pc, #16]	; (8003f20 <xTaskGetTickCount+0x18>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f14:	687b      	ldr	r3, [r7, #4]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bc80      	pop	{r7}
 8003f1e:	4770      	bx	lr
 8003f20:	20000bc0 	.word	0x20000bc0

08003f24 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b082      	sub	sp, #8
 8003f28:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f2a:	f001 fbc7 	bl	80056bc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003f2e:	2300      	movs	r3, #0
 8003f30:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8003f32:	4b04      	ldr	r3, [pc, #16]	; (8003f44 <xTaskGetTickCountFromISR+0x20>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f38:	683b      	ldr	r3, [r7, #0]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3708      	adds	r7, #8
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	20000bc0 	.word	0x20000bc0

08003f48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f52:	4b51      	ldr	r3, [pc, #324]	; (8004098 <xTaskIncrementTick+0x150>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f040 808d 	bne.w	8004076 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f5c:	4b4f      	ldr	r3, [pc, #316]	; (800409c <xTaskIncrementTick+0x154>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	3301      	adds	r3, #1
 8003f62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f64:	4a4d      	ldr	r2, [pc, #308]	; (800409c <xTaskIncrementTick+0x154>)
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d11f      	bne.n	8003fb0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f70:	4b4b      	ldr	r3, [pc, #300]	; (80040a0 <xTaskIncrementTick+0x158>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d009      	beq.n	8003f8e <xTaskIncrementTick+0x46>
 8003f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	e7fe      	b.n	8003f8c <xTaskIncrementTick+0x44>
 8003f8e:	4b44      	ldr	r3, [pc, #272]	; (80040a0 <xTaskIncrementTick+0x158>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	4b43      	ldr	r3, [pc, #268]	; (80040a4 <xTaskIncrementTick+0x15c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a41      	ldr	r2, [pc, #260]	; (80040a0 <xTaskIncrementTick+0x158>)
 8003f9a:	6013      	str	r3, [r2, #0]
 8003f9c:	4a41      	ldr	r2, [pc, #260]	; (80040a4 <xTaskIncrementTick+0x15c>)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	4b41      	ldr	r3, [pc, #260]	; (80040a8 <xTaskIncrementTick+0x160>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	3301      	adds	r3, #1
 8003fa8:	4a3f      	ldr	r2, [pc, #252]	; (80040a8 <xTaskIncrementTick+0x160>)
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	f000 faca 	bl	8004544 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003fb0:	4b3e      	ldr	r3, [pc, #248]	; (80040ac <xTaskIncrementTick+0x164>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d34e      	bcc.n	8004058 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003fba:	4b39      	ldr	r3, [pc, #228]	; (80040a0 <xTaskIncrementTick+0x158>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <xTaskIncrementTick+0x80>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e000      	b.n	8003fca <xTaskIncrementTick+0x82>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d004      	beq.n	8003fd8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fce:	4b37      	ldr	r3, [pc, #220]	; (80040ac <xTaskIncrementTick+0x164>)
 8003fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8003fd4:	601a      	str	r2, [r3, #0]
					break;
 8003fd6:	e03f      	b.n	8004058 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fd8:	4b31      	ldr	r3, [pc, #196]	; (80040a0 <xTaskIncrementTick+0x158>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fe8:	693a      	ldr	r2, [r7, #16]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d203      	bcs.n	8003ff8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ff0:	4a2e      	ldr	r2, [pc, #184]	; (80040ac <xTaskIncrementTick+0x164>)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6013      	str	r3, [r2, #0]
						break;
 8003ff6:	e02f      	b.n	8004058 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f7fe fd87 	bl	8002b10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	2b00      	cmp	r3, #0
 8004008:	d004      	beq.n	8004014 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	3318      	adds	r3, #24
 800400e:	4618      	mov	r0, r3
 8004010:	f7fe fd7e 	bl	8002b10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004018:	4b25      	ldr	r3, [pc, #148]	; (80040b0 <xTaskIncrementTick+0x168>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	429a      	cmp	r2, r3
 800401e:	d903      	bls.n	8004028 <xTaskIncrementTick+0xe0>
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004024:	4a22      	ldr	r2, [pc, #136]	; (80040b0 <xTaskIncrementTick+0x168>)
 8004026:	6013      	str	r3, [r2, #0]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402c:	4613      	mov	r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4a1f      	ldr	r2, [pc, #124]	; (80040b4 <xTaskIncrementTick+0x16c>)
 8004036:	441a      	add	r2, r3
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	3304      	adds	r3, #4
 800403c:	4619      	mov	r1, r3
 800403e:	4610      	mov	r0, r2
 8004040:	f7fe fd0b 	bl	8002a5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004048:	4b1b      	ldr	r3, [pc, #108]	; (80040b8 <xTaskIncrementTick+0x170>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404e:	429a      	cmp	r2, r3
 8004050:	d3b3      	bcc.n	8003fba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004052:	2301      	movs	r3, #1
 8004054:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004056:	e7b0      	b.n	8003fba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004058:	4b17      	ldr	r3, [pc, #92]	; (80040b8 <xTaskIncrementTick+0x170>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800405e:	4915      	ldr	r1, [pc, #84]	; (80040b4 <xTaskIncrementTick+0x16c>)
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d907      	bls.n	8004080 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8004070:	2301      	movs	r3, #1
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	e004      	b.n	8004080 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004076:	4b11      	ldr	r3, [pc, #68]	; (80040bc <xTaskIncrementTick+0x174>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3301      	adds	r3, #1
 800407c:	4a0f      	ldr	r2, [pc, #60]	; (80040bc <xTaskIncrementTick+0x174>)
 800407e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004080:	4b0f      	ldr	r3, [pc, #60]	; (80040c0 <xTaskIncrementTick+0x178>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8004088:	2301      	movs	r3, #1
 800408a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800408c:	697b      	ldr	r3, [r7, #20]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	20000be4 	.word	0x20000be4
 800409c:	20000bc0 	.word	0x20000bc0
 80040a0:	20000b74 	.word	0x20000b74
 80040a4:	20000b78 	.word	0x20000b78
 80040a8:	20000bd4 	.word	0x20000bd4
 80040ac:	20000bdc 	.word	0x20000bdc
 80040b0:	20000bc4 	.word	0x20000bc4
 80040b4:	200006ec 	.word	0x200006ec
 80040b8:	200006e8 	.word	0x200006e8
 80040bc:	20000bcc 	.word	0x20000bcc
 80040c0:	20000bd0 	.word	0x20000bd0

080040c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80040ca:	4b27      	ldr	r3, [pc, #156]	; (8004168 <vTaskSwitchContext+0xa4>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80040d2:	4b26      	ldr	r3, [pc, #152]	; (800416c <vTaskSwitchContext+0xa8>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040d8:	e040      	b.n	800415c <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80040da:	4b24      	ldr	r3, [pc, #144]	; (800416c <vTaskSwitchContext+0xa8>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80040e0:	4b23      	ldr	r3, [pc, #140]	; (8004170 <vTaskSwitchContext+0xac>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	60fb      	str	r3, [r7, #12]
 80040e6:	e00f      	b.n	8004108 <vTaskSwitchContext+0x44>
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d109      	bne.n	8004102 <vTaskSwitchContext+0x3e>
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	e7fe      	b.n	8004100 <vTaskSwitchContext+0x3c>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	3b01      	subs	r3, #1
 8004106:	60fb      	str	r3, [r7, #12]
 8004108:	491a      	ldr	r1, [pc, #104]	; (8004174 <vTaskSwitchContext+0xb0>)
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4613      	mov	r3, r2
 800410e:	009b      	lsls	r3, r3, #2
 8004110:	4413      	add	r3, r2
 8004112:	009b      	lsls	r3, r3, #2
 8004114:	440b      	add	r3, r1
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0e5      	beq.n	80040e8 <vTaskSwitchContext+0x24>
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4a13      	ldr	r2, [pc, #76]	; (8004174 <vTaskSwitchContext+0xb0>)
 8004128:	4413      	add	r3, r2
 800412a:	60bb      	str	r3, [r7, #8]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	605a      	str	r2, [r3, #4]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	3308      	adds	r3, #8
 800413e:	429a      	cmp	r2, r3
 8004140:	d104      	bne.n	800414c <vTaskSwitchContext+0x88>
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	685a      	ldr	r2, [r3, #4]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	605a      	str	r2, [r3, #4]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	4a09      	ldr	r2, [pc, #36]	; (8004178 <vTaskSwitchContext+0xb4>)
 8004154:	6013      	str	r3, [r2, #0]
 8004156:	4a06      	ldr	r2, [pc, #24]	; (8004170 <vTaskSwitchContext+0xac>)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6013      	str	r3, [r2, #0]
}
 800415c:	bf00      	nop
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	20000be4 	.word	0x20000be4
 800416c:	20000bd0 	.word	0x20000bd0
 8004170:	20000bc4 	.word	0x20000bc4
 8004174:	200006ec 	.word	0x200006ec
 8004178:	200006e8 	.word	0x200006e8

0800417c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
 8004184:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d109      	bne.n	80041a0 <vTaskPlaceOnEventList+0x24>
 800418c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	60fb      	str	r3, [r7, #12]
 800419e:	e7fe      	b.n	800419e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041a0:	4b07      	ldr	r3, [pc, #28]	; (80041c0 <vTaskPlaceOnEventList+0x44>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	3318      	adds	r3, #24
 80041a6:	4619      	mov	r1, r3
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7fe fc79 	bl	8002aa0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80041ae:	2101      	movs	r1, #1
 80041b0:	6838      	ldr	r0, [r7, #0]
 80041b2:	f000 fd2d 	bl	8004c10 <prvAddCurrentTaskToDelayedList>
}
 80041b6:	bf00      	nop
 80041b8:	3710      	adds	r7, #16
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	200006e8 	.word	0x200006e8

080041c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b086      	sub	sp, #24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d109      	bne.n	80041ea <vTaskPlaceOnEventListRestricted+0x26>
 80041d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041da:	f383 8811 	msr	BASEPRI, r3
 80041de:	f3bf 8f6f 	isb	sy
 80041e2:	f3bf 8f4f 	dsb	sy
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	e7fe      	b.n	80041e8 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041ea:	4b0a      	ldr	r3, [pc, #40]	; (8004214 <vTaskPlaceOnEventListRestricted+0x50>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	3318      	adds	r3, #24
 80041f0:	4619      	mov	r1, r3
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f7fe fc31 	bl	8002a5a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d002      	beq.n	8004204 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80041fe:	f04f 33ff 	mov.w	r3, #4294967295
 8004202:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	68b8      	ldr	r0, [r7, #8]
 8004208:	f000 fd02 	bl	8004c10 <prvAddCurrentTaskToDelayedList>
	}
 800420c:	bf00      	nop
 800420e:	3718      	adds	r7, #24
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	200006e8 	.word	0x200006e8

08004218 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <xTaskRemoveFromEventList+0x2a>
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	60fb      	str	r3, [r7, #12]
 8004240:	e7fe      	b.n	8004240 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	3318      	adds	r3, #24
 8004246:	4618      	mov	r0, r3
 8004248:	f7fe fc62 	bl	8002b10 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800424c:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <xTaskRemoveFromEventList+0xac>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d11d      	bne.n	8004290 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	3304      	adds	r3, #4
 8004258:	4618      	mov	r0, r3
 800425a:	f7fe fc59 	bl	8002b10 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004262:	4b19      	ldr	r3, [pc, #100]	; (80042c8 <xTaskRemoveFromEventList+0xb0>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d903      	bls.n	8004272 <xTaskRemoveFromEventList+0x5a>
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800426e:	4a16      	ldr	r2, [pc, #88]	; (80042c8 <xTaskRemoveFromEventList+0xb0>)
 8004270:	6013      	str	r3, [r2, #0]
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4a13      	ldr	r2, [pc, #76]	; (80042cc <xTaskRemoveFromEventList+0xb4>)
 8004280:	441a      	add	r2, r3
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	3304      	adds	r3, #4
 8004286:	4619      	mov	r1, r3
 8004288:	4610      	mov	r0, r2
 800428a:	f7fe fbe6 	bl	8002a5a <vListInsertEnd>
 800428e:	e005      	b.n	800429c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	3318      	adds	r3, #24
 8004294:	4619      	mov	r1, r3
 8004296:	480e      	ldr	r0, [pc, #56]	; (80042d0 <xTaskRemoveFromEventList+0xb8>)
 8004298:	f7fe fbdf 	bl	8002a5a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042a0:	4b0c      	ldr	r3, [pc, #48]	; (80042d4 <xTaskRemoveFromEventList+0xbc>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d905      	bls.n	80042b6 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80042aa:	2301      	movs	r3, #1
 80042ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80042ae:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <xTaskRemoveFromEventList+0xc0>)
 80042b0:	2201      	movs	r2, #1
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	e001      	b.n	80042ba <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80042b6:	2300      	movs	r3, #0
 80042b8:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80042ba:	697b      	ldr	r3, [r7, #20]
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20000be4 	.word	0x20000be4
 80042c8:	20000bc4 	.word	0x20000bc4
 80042cc:	200006ec 	.word	0x200006ec
 80042d0:	20000b7c 	.word	0x20000b7c
 80042d4:	200006e8 	.word	0x200006e8
 80042d8:	20000bd0 	.word	0x20000bd0

080042dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042dc:	b480      	push	{r7}
 80042de:	b083      	sub	sp, #12
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042e4:	4b06      	ldr	r3, [pc, #24]	; (8004300 <vTaskInternalSetTimeOutState+0x24>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042ec:	4b05      	ldr	r3, [pc, #20]	; (8004304 <vTaskInternalSetTimeOutState+0x28>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	605a      	str	r2, [r3, #4]
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bc80      	pop	{r7}
 80042fc:	4770      	bx	lr
 80042fe:	bf00      	nop
 8004300:	20000bd4 	.word	0x20000bd4
 8004304:	20000bc0 	.word	0x20000bc0

08004308 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b088      	sub	sp, #32
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d109      	bne.n	800432c <xTaskCheckForTimeOut+0x24>
 8004318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431c:	f383 8811 	msr	BASEPRI, r3
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	e7fe      	b.n	800432a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d109      	bne.n	8004346 <xTaskCheckForTimeOut+0x3e>
 8004332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004336:	f383 8811 	msr	BASEPRI, r3
 800433a:	f3bf 8f6f 	isb	sy
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	e7fe      	b.n	8004344 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004346:	f001 f8ff 	bl	8005548 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800434a:	4b1d      	ldr	r3, [pc, #116]	; (80043c0 <xTaskCheckForTimeOut+0xb8>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	69ba      	ldr	r2, [r7, #24]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004362:	d102      	bne.n	800436a <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004364:	2300      	movs	r3, #0
 8004366:	61fb      	str	r3, [r7, #28]
 8004368:	e023      	b.n	80043b2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	4b15      	ldr	r3, [pc, #84]	; (80043c4 <xTaskCheckForTimeOut+0xbc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d007      	beq.n	8004386 <xTaskCheckForTimeOut+0x7e>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	429a      	cmp	r2, r3
 800437e:	d302      	bcc.n	8004386 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004380:	2301      	movs	r3, #1
 8004382:	61fb      	str	r3, [r7, #28]
 8004384:	e015      	b.n	80043b2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	429a      	cmp	r2, r3
 800438e:	d20b      	bcs.n	80043a8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	1ad2      	subs	r2, r2, r3
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f7ff ff9d 	bl	80042dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61fb      	str	r3, [r7, #28]
 80043a6:	e004      	b.n	80043b2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80043ae:	2301      	movs	r3, #1
 80043b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80043b2:	f001 f8f7 	bl	80055a4 <vPortExitCritical>

	return xReturn;
 80043b6:	69fb      	ldr	r3, [r7, #28]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3720      	adds	r7, #32
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000bc0 	.word	0x20000bc0
 80043c4:	20000bd4 	.word	0x20000bd4

080043c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043c8:	b480      	push	{r7}
 80043ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043cc:	4b03      	ldr	r3, [pc, #12]	; (80043dc <vTaskMissedYield+0x14>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	601a      	str	r2, [r3, #0]
}
 80043d2:	bf00      	nop
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bc80      	pop	{r7}
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	20000bd0 	.word	0x20000bd0

080043e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043e8:	f000 f852 	bl	8004490 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <prvIdleTask+0x28>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d9f9      	bls.n	80043e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043f4:	4b05      	ldr	r3, [pc, #20]	; (800440c <prvIdleTask+0x2c>)
 80043f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	f3bf 8f4f 	dsb	sy
 8004400:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004404:	e7f0      	b.n	80043e8 <prvIdleTask+0x8>
 8004406:	bf00      	nop
 8004408:	200006ec 	.word	0x200006ec
 800440c:	e000ed04 	.word	0xe000ed04

08004410 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004416:	2300      	movs	r3, #0
 8004418:	607b      	str	r3, [r7, #4]
 800441a:	e00c      	b.n	8004436 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	4613      	mov	r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	4413      	add	r3, r2
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4a12      	ldr	r2, [pc, #72]	; (8004470 <prvInitialiseTaskLists+0x60>)
 8004428:	4413      	add	r3, r2
 800442a:	4618      	mov	r0, r3
 800442c:	f7fe faea 	bl	8002a04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	3301      	adds	r3, #1
 8004434:	607b      	str	r3, [r7, #4]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2b37      	cmp	r3, #55	; 0x37
 800443a:	d9ef      	bls.n	800441c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800443c:	480d      	ldr	r0, [pc, #52]	; (8004474 <prvInitialiseTaskLists+0x64>)
 800443e:	f7fe fae1 	bl	8002a04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004442:	480d      	ldr	r0, [pc, #52]	; (8004478 <prvInitialiseTaskLists+0x68>)
 8004444:	f7fe fade 	bl	8002a04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004448:	480c      	ldr	r0, [pc, #48]	; (800447c <prvInitialiseTaskLists+0x6c>)
 800444a:	f7fe fadb 	bl	8002a04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800444e:	480c      	ldr	r0, [pc, #48]	; (8004480 <prvInitialiseTaskLists+0x70>)
 8004450:	f7fe fad8 	bl	8002a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004454:	480b      	ldr	r0, [pc, #44]	; (8004484 <prvInitialiseTaskLists+0x74>)
 8004456:	f7fe fad5 	bl	8002a04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800445a:	4b0b      	ldr	r3, [pc, #44]	; (8004488 <prvInitialiseTaskLists+0x78>)
 800445c:	4a05      	ldr	r2, [pc, #20]	; (8004474 <prvInitialiseTaskLists+0x64>)
 800445e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004460:	4b0a      	ldr	r3, [pc, #40]	; (800448c <prvInitialiseTaskLists+0x7c>)
 8004462:	4a05      	ldr	r2, [pc, #20]	; (8004478 <prvInitialiseTaskLists+0x68>)
 8004464:	601a      	str	r2, [r3, #0]
}
 8004466:	bf00      	nop
 8004468:	3708      	adds	r7, #8
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	200006ec 	.word	0x200006ec
 8004474:	20000b4c 	.word	0x20000b4c
 8004478:	20000b60 	.word	0x20000b60
 800447c:	20000b7c 	.word	0x20000b7c
 8004480:	20000b90 	.word	0x20000b90
 8004484:	20000ba8 	.word	0x20000ba8
 8004488:	20000b74 	.word	0x20000b74
 800448c:	20000b78 	.word	0x20000b78

08004490 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004496:	e019      	b.n	80044cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004498:	f001 f856 	bl	8005548 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800449c:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <prvCheckTasksWaitingTermination+0x4c>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3304      	adds	r3, #4
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fe fb31 	bl	8002b10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80044ae:	4b0c      	ldr	r3, [pc, #48]	; (80044e0 <prvCheckTasksWaitingTermination+0x50>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3b01      	subs	r3, #1
 80044b4:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <prvCheckTasksWaitingTermination+0x50>)
 80044b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80044b8:	4b0a      	ldr	r3, [pc, #40]	; (80044e4 <prvCheckTasksWaitingTermination+0x54>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3b01      	subs	r3, #1
 80044be:	4a09      	ldr	r2, [pc, #36]	; (80044e4 <prvCheckTasksWaitingTermination+0x54>)
 80044c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80044c2:	f001 f86f 	bl	80055a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 f80e 	bl	80044e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044cc:	4b05      	ldr	r3, [pc, #20]	; (80044e4 <prvCheckTasksWaitingTermination+0x54>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e1      	bne.n	8004498 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044d4:	bf00      	nop
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000b90 	.word	0x20000b90
 80044e0:	20000bbc 	.word	0x20000bbc
 80044e4:	20000ba4 	.word	0x20000ba4

080044e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d108      	bne.n	800450c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fe:	4618      	mov	r0, r3
 8004500:	f001 f9da 	bl	80058b8 <vPortFree>
				vPortFree( pxTCB );
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f001 f9d7 	bl	80058b8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800450a:	e017      	b.n	800453c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004512:	2b01      	cmp	r3, #1
 8004514:	d103      	bne.n	800451e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f001 f9ce 	bl	80058b8 <vPortFree>
	}
 800451c:	e00e      	b.n	800453c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8004524:	2b02      	cmp	r3, #2
 8004526:	d009      	beq.n	800453c <prvDeleteTCB+0x54>
 8004528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452c:	f383 8811 	msr	BASEPRI, r3
 8004530:	f3bf 8f6f 	isb	sy
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	60fb      	str	r3, [r7, #12]
 800453a:	e7fe      	b.n	800453a <prvDeleteTCB+0x52>
	}
 800453c:	bf00      	nop
 800453e:	3710      	adds	r7, #16
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800454a:	4b0e      	ldr	r3, [pc, #56]	; (8004584 <prvResetNextTaskUnblockTime+0x40>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <prvResetNextTaskUnblockTime+0x14>
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <prvResetNextTaskUnblockTime+0x16>
 8004558:	2300      	movs	r3, #0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d004      	beq.n	8004568 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800455e:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <prvResetNextTaskUnblockTime+0x44>)
 8004560:	f04f 32ff 	mov.w	r2, #4294967295
 8004564:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004566:	e008      	b.n	800457a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004568:	4b06      	ldr	r3, [pc, #24]	; (8004584 <prvResetNextTaskUnblockTime+0x40>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	4a04      	ldr	r2, [pc, #16]	; (8004588 <prvResetNextTaskUnblockTime+0x44>)
 8004578:	6013      	str	r3, [r2, #0]
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	bc80      	pop	{r7}
 8004582:	4770      	bx	lr
 8004584:	20000b74 	.word	0x20000b74
 8004588:	20000bdc 	.word	0x20000bdc

0800458c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004592:	4b0b      	ldr	r3, [pc, #44]	; (80045c0 <xTaskGetSchedulerState+0x34>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d102      	bne.n	80045a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800459a:	2301      	movs	r3, #1
 800459c:	607b      	str	r3, [r7, #4]
 800459e:	e008      	b.n	80045b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80045a0:	4b08      	ldr	r3, [pc, #32]	; (80045c4 <xTaskGetSchedulerState+0x38>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d102      	bne.n	80045ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80045a8:	2302      	movs	r3, #2
 80045aa:	607b      	str	r3, [r7, #4]
 80045ac:	e001      	b.n	80045b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80045ae:	2300      	movs	r3, #0
 80045b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80045b2:	687b      	ldr	r3, [r7, #4]
	}
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	20000bc8 	.word	0x20000bc8
 80045c4:	20000be4 	.word	0x20000be4

080045c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80045d4:	2300      	movs	r3, #0
 80045d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d056      	beq.n	800468c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e2:	4b2d      	ldr	r3, [pc, #180]	; (8004698 <xTaskPriorityInherit+0xd0>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d246      	bcs.n	800467a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	db06      	blt.n	8004602 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045f4:	4b28      	ldr	r3, [pc, #160]	; (8004698 <xTaskPriorityInherit+0xd0>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	6959      	ldr	r1, [r3, #20]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460a:	4613      	mov	r3, r2
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4a22      	ldr	r2, [pc, #136]	; (800469c <xTaskPriorityInherit+0xd4>)
 8004614:	4413      	add	r3, r2
 8004616:	4299      	cmp	r1, r3
 8004618:	d101      	bne.n	800461e <xTaskPriorityInherit+0x56>
 800461a:	2301      	movs	r3, #1
 800461c:	e000      	b.n	8004620 <xTaskPriorityInherit+0x58>
 800461e:	2300      	movs	r3, #0
 8004620:	2b00      	cmp	r3, #0
 8004622:	d022      	beq.n	800466a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	3304      	adds	r3, #4
 8004628:	4618      	mov	r0, r3
 800462a:	f7fe fa71 	bl	8002b10 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800462e:	4b1a      	ldr	r3, [pc, #104]	; (8004698 <xTaskPriorityInherit+0xd0>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463c:	4b18      	ldr	r3, [pc, #96]	; (80046a0 <xTaskPriorityInherit+0xd8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	429a      	cmp	r2, r3
 8004642:	d903      	bls.n	800464c <xTaskPriorityInherit+0x84>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004648:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <xTaskPriorityInherit+0xd8>)
 800464a:	6013      	str	r3, [r2, #0]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004650:	4613      	mov	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4a10      	ldr	r2, [pc, #64]	; (800469c <xTaskPriorityInherit+0xd4>)
 800465a:	441a      	add	r2, r3
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	3304      	adds	r3, #4
 8004660:	4619      	mov	r1, r3
 8004662:	4610      	mov	r0, r2
 8004664:	f7fe f9f9 	bl	8002a5a <vListInsertEnd>
 8004668:	e004      	b.n	8004674 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800466a:	4b0b      	ldr	r3, [pc, #44]	; (8004698 <xTaskPriorityInherit+0xd0>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004674:	2301      	movs	r3, #1
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	e008      	b.n	800468c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800467e:	4b06      	ldr	r3, [pc, #24]	; (8004698 <xTaskPriorityInherit+0xd0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004684:	429a      	cmp	r2, r3
 8004686:	d201      	bcs.n	800468c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004688:	2301      	movs	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800468c:	68fb      	ldr	r3, [r7, #12]
	}
 800468e:	4618      	mov	r0, r3
 8004690:	3710      	adds	r7, #16
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	200006e8 	.word	0x200006e8
 800469c:	200006ec 	.word	0x200006ec
 80046a0:	20000bc4 	.word	0x20000bc4

080046a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80046b0:	2300      	movs	r3, #0
 80046b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d054      	beq.n	8004764 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80046ba:	4b2d      	ldr	r3, [pc, #180]	; (8004770 <xTaskPriorityDisinherit+0xcc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d009      	beq.n	80046d8 <xTaskPriorityDisinherit+0x34>
 80046c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c8:	f383 8811 	msr	BASEPRI, r3
 80046cc:	f3bf 8f6f 	isb	sy
 80046d0:	f3bf 8f4f 	dsb	sy
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	e7fe      	b.n	80046d6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d109      	bne.n	80046f4 <xTaskPriorityDisinherit+0x50>
 80046e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e4:	f383 8811 	msr	BASEPRI, r3
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	e7fe      	b.n	80046f2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046f8:	1e5a      	subs	r2, r3, #1
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004706:	429a      	cmp	r2, r3
 8004708:	d02c      	beq.n	8004764 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800470e:	2b00      	cmp	r3, #0
 8004710:	d128      	bne.n	8004764 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	3304      	adds	r3, #4
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe f9fa 	bl	8002b10 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004728:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004734:	4b0f      	ldr	r3, [pc, #60]	; (8004774 <xTaskPriorityDisinherit+0xd0>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	429a      	cmp	r2, r3
 800473a:	d903      	bls.n	8004744 <xTaskPriorityDisinherit+0xa0>
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	4a0c      	ldr	r2, [pc, #48]	; (8004774 <xTaskPriorityDisinherit+0xd0>)
 8004742:	6013      	str	r3, [r2, #0]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004748:	4613      	mov	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	4a09      	ldr	r2, [pc, #36]	; (8004778 <xTaskPriorityDisinherit+0xd4>)
 8004752:	441a      	add	r2, r3
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	3304      	adds	r3, #4
 8004758:	4619      	mov	r1, r3
 800475a:	4610      	mov	r0, r2
 800475c:	f7fe f97d 	bl	8002a5a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004760:	2301      	movs	r3, #1
 8004762:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004764:	697b      	ldr	r3, [r7, #20]
	}
 8004766:	4618      	mov	r0, r3
 8004768:	3718      	adds	r7, #24
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}
 800476e:	bf00      	nop
 8004770:	200006e8 	.word	0x200006e8
 8004774:	20000bc4 	.word	0x20000bc4
 8004778:	200006ec 	.word	0x200006ec

0800477c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800477c:	b580      	push	{r7, lr}
 800477e:	b088      	sub	sp, #32
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800478a:	2301      	movs	r3, #1
 800478c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d06d      	beq.n	8004870 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004798:	2b00      	cmp	r3, #0
 800479a:	d109      	bne.n	80047b0 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800479c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	60fb      	str	r3, [r7, #12]
 80047ae:	e7fe      	b.n	80047ae <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d902      	bls.n	80047c0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	61fb      	str	r3, [r7, #28]
 80047be:	e002      	b.n	80047c6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d04f      	beq.n	8004870 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d4:	697a      	ldr	r2, [r7, #20]
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d14a      	bne.n	8004870 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80047da:	4b27      	ldr	r3, [pc, #156]	; (8004878 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69ba      	ldr	r2, [r7, #24]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d109      	bne.n	80047f8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 80047e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e8:	f383 8811 	msr	BASEPRI, r3
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f3bf 8f4f 	dsb	sy
 80047f4:	60bb      	str	r3, [r7, #8]
 80047f6:	e7fe      	b.n	80047f6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	69fa      	ldr	r2, [r7, #28]
 8004802:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	db04      	blt.n	8004816 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	6959      	ldr	r1, [r3, #20]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4613      	mov	r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	4413      	add	r3, r2
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	4a15      	ldr	r2, [pc, #84]	; (800487c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004826:	4413      	add	r3, r2
 8004828:	4299      	cmp	r1, r3
 800482a:	d101      	bne.n	8004830 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 800482c:	2301      	movs	r3, #1
 800482e:	e000      	b.n	8004832 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8004830:	2300      	movs	r3, #0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d01c      	beq.n	8004870 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	3304      	adds	r3, #4
 800483a:	4618      	mov	r0, r3
 800483c:	f7fe f968 	bl	8002b10 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004844:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d903      	bls.n	8004854 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	4a0b      	ldr	r2, [pc, #44]	; (8004880 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4a06      	ldr	r2, [pc, #24]	; (800487c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004862:	441a      	add	r2, r3
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	3304      	adds	r3, #4
 8004868:	4619      	mov	r1, r3
 800486a:	4610      	mov	r0, r2
 800486c:	f7fe f8f5 	bl	8002a5a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004870:	bf00      	nop
 8004872:	3720      	adds	r7, #32
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	200006e8 	.word	0x200006e8
 800487c:	200006ec 	.word	0x200006ec
 8004880:	20000bc4 	.word	0x20000bc4

08004884 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004888:	4b07      	ldr	r3, [pc, #28]	; (80048a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d004      	beq.n	800489a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004890:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <pvTaskIncrementMutexHeldCount+0x24>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004896:	3201      	adds	r2, #1
 8004898:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800489a:	4b03      	ldr	r3, [pc, #12]	; (80048a8 <pvTaskIncrementMutexHeldCount+0x24>)
 800489c:	681b      	ldr	r3, [r3, #0]
	}
 800489e:	4618      	mov	r0, r3
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bc80      	pop	{r7}
 80048a4:	4770      	bx	lr
 80048a6:	bf00      	nop
 80048a8:	200006e8 	.word	0x200006e8

080048ac <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80048b6:	f000 fe47 	bl	8005548 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80048ba:	4b1e      	ldr	r3, [pc, #120]	; (8004934 <ulTaskNotifyTake+0x88>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d113      	bne.n	80048ec <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80048c4:	4b1b      	ldr	r3, [pc, #108]	; (8004934 <ulTaskNotifyTake+0x88>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00b      	beq.n	80048ec <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048d4:	2101      	movs	r1, #1
 80048d6:	6838      	ldr	r0, [r7, #0]
 80048d8:	f000 f99a 	bl	8004c10 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80048dc:	4b16      	ldr	r3, [pc, #88]	; (8004938 <ulTaskNotifyTake+0x8c>)
 80048de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e2:	601a      	str	r2, [r3, #0]
 80048e4:	f3bf 8f4f 	dsb	sy
 80048e8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80048ec:	f000 fe5a 	bl	80055a4 <vPortExitCritical>

		taskENTER_CRITICAL();
 80048f0:	f000 fe2a 	bl	8005548 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80048f4:	4b0f      	ldr	r3, [pc, #60]	; (8004934 <ulTaskNotifyTake+0x88>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048fa:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d00c      	beq.n	800491c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d004      	beq.n	8004912 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8004908:	4b0a      	ldr	r3, [pc, #40]	; (8004934 <ulTaskNotifyTake+0x88>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2200      	movs	r2, #0
 800490e:	655a      	str	r2, [r3, #84]	; 0x54
 8004910:	e004      	b.n	800491c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8004912:	4b08      	ldr	r3, [pc, #32]	; (8004934 <ulTaskNotifyTake+0x88>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68fa      	ldr	r2, [r7, #12]
 8004918:	3a01      	subs	r2, #1
 800491a:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800491c:	4b05      	ldr	r3, [pc, #20]	; (8004934 <ulTaskNotifyTake+0x88>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8004926:	f000 fe3d 	bl	80055a4 <vPortExitCritical>

		return ulReturn;
 800492a:	68fb      	ldr	r3, [r7, #12]
	}
 800492c:	4618      	mov	r0, r3
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	200006e8 	.word	0x200006e8
 8004938:	e000ed04 	.word	0xe000ed04

0800493c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08a      	sub	sp, #40	; 0x28
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	603b      	str	r3, [r7, #0]
 8004948:	4613      	mov	r3, r2
 800494a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800494c:	2301      	movs	r3, #1
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d109      	bne.n	800496a <xTaskGenericNotify+0x2e>
 8004956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	61bb      	str	r3, [r7, #24]
 8004968:	e7fe      	b.n	8004968 <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800496e:	f000 fdeb 	bl	8005548 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004978:	6a3b      	ldr	r3, [r7, #32]
 800497a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004986:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	2202      	movs	r2, #2
 800498c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8004990:	79fb      	ldrb	r3, [r7, #7]
 8004992:	2b04      	cmp	r3, #4
 8004994:	d827      	bhi.n	80049e6 <xTaskGenericNotify+0xaa>
 8004996:	a201      	add	r2, pc, #4	; (adr r2, 800499c <xTaskGenericNotify+0x60>)
 8004998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499c:	080049e7 	.word	0x080049e7
 80049a0:	080049b1 	.word	0x080049b1
 80049a4:	080049bf 	.word	0x080049bf
 80049a8:	080049cb 	.word	0x080049cb
 80049ac:	080049d3 	.word	0x080049d3
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80049b0:	6a3b      	ldr	r3, [r7, #32]
 80049b2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	431a      	orrs	r2, r3
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80049bc:	e013      	b.n	80049e6 <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	6a3b      	ldr	r3, [r7, #32]
 80049c6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80049c8:	e00d      	b.n	80049e6 <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80049ca:	6a3b      	ldr	r3, [r7, #32]
 80049cc:	68ba      	ldr	r2, [r7, #8]
 80049ce:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 80049d0:	e009      	b.n	80049e6 <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80049d2:	7ffb      	ldrb	r3, [r7, #31]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d003      	beq.n	80049e0 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80049d8:	6a3b      	ldr	r3, [r7, #32]
 80049da:	68ba      	ldr	r2, [r7, #8]
 80049dc:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80049de:	e001      	b.n	80049e4 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 80049e0:	2300      	movs	r3, #0
 80049e2:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80049e4:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80049e6:	7ffb      	ldrb	r3, [r7, #31]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d139      	bne.n	8004a60 <xTaskGenericNotify+0x124>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049ec:	6a3b      	ldr	r3, [r7, #32]
 80049ee:	3304      	adds	r3, #4
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7fe f88d 	bl	8002b10 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80049f6:	6a3b      	ldr	r3, [r7, #32]
 80049f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049fa:	4b1d      	ldr	r3, [pc, #116]	; (8004a70 <xTaskGenericNotify+0x134>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d903      	bls.n	8004a0a <xTaskGenericNotify+0xce>
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	4a1a      	ldr	r2, [pc, #104]	; (8004a70 <xTaskGenericNotify+0x134>)
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	6a3b      	ldr	r3, [r7, #32]
 8004a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0e:	4613      	mov	r3, r2
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	4413      	add	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4a17      	ldr	r2, [pc, #92]	; (8004a74 <xTaskGenericNotify+0x138>)
 8004a18:	441a      	add	r2, r3
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	4619      	mov	r1, r3
 8004a20:	4610      	mov	r0, r2
 8004a22:	f7fe f81a 	bl	8002a5a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d009      	beq.n	8004a42 <xTaskGenericNotify+0x106>
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	617b      	str	r3, [r7, #20]
 8004a40:	e7fe      	b.n	8004a40 <xTaskGenericNotify+0x104>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a46:	4b0c      	ldr	r3, [pc, #48]	; (8004a78 <xTaskGenericNotify+0x13c>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d907      	bls.n	8004a60 <xTaskGenericNotify+0x124>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8004a50:	4b0a      	ldr	r3, [pc, #40]	; (8004a7c <xTaskGenericNotify+0x140>)
 8004a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a56:	601a      	str	r2, [r3, #0]
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8004a60:	f000 fda0 	bl	80055a4 <vPortExitCritical>

		return xReturn;
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3728      	adds	r7, #40	; 0x28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000bc4 	.word	0x20000bc4
 8004a74:	200006ec 	.word	0x200006ec
 8004a78:	200006e8 	.word	0x200006e8
 8004a7c:	e000ed04 	.word	0xe000ed04

08004a80 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b08e      	sub	sp, #56	; 0x38
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	603b      	str	r3, [r7, #0]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8004a90:	2301      	movs	r3, #1
 8004a92:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d109      	bne.n	8004aae <xTaskGenericNotifyFromISR+0x2e>
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	627b      	str	r3, [r7, #36]	; 0x24
 8004aac:	e7fe      	b.n	8004aac <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004aae:	f000 fe05 	bl	80056bc <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8004ab6:	f3ef 8211 	mrs	r2, BASEPRI
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	623a      	str	r2, [r7, #32]
 8004acc:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8004ace:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d003      	beq.n	8004ae0 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8004ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ada:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8004ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	2202      	movs	r2, #2
 8004aee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8004af2:	79fb      	ldrb	r3, [r7, #7]
 8004af4:	2b04      	cmp	r3, #4
 8004af6:	d829      	bhi.n	8004b4c <xTaskGenericNotifyFromISR+0xcc>
 8004af8:	a201      	add	r2, pc, #4	; (adr r2, 8004b00 <xTaskGenericNotifyFromISR+0x80>)
 8004afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afe:	bf00      	nop
 8004b00:	08004b4d 	.word	0x08004b4d
 8004b04:	08004b15 	.word	0x08004b15
 8004b08:	08004b23 	.word	0x08004b23
 8004b0c:	08004b2f 	.word	0x08004b2f
 8004b10:	08004b37 	.word	0x08004b37
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004b20:	e014      	b.n	8004b4c <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8004b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b2a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004b2c:	e00e      	b.n	8004b4c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b30:	68ba      	ldr	r2, [r7, #8]
 8004b32:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8004b34:	e00a      	b.n	8004b4c <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004b36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d003      	beq.n	8004b46 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	68ba      	ldr	r2, [r7, #8]
 8004b42:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8004b44:	e001      	b.n	8004b4a <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8004b4a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004b4c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d146      	bne.n	8004be2 <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d009      	beq.n	8004b70 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	61bb      	str	r3, [r7, #24]
 8004b6e:	e7fe      	b.n	8004b6e <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b70:	4b21      	ldr	r3, [pc, #132]	; (8004bf8 <xTaskGenericNotifyFromISR+0x178>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d11d      	bne.n	8004bb4 <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f7fd ffc7 	bl	8002b10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b86:	4b1d      	ldr	r3, [pc, #116]	; (8004bfc <xTaskGenericNotifyFromISR+0x17c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d903      	bls.n	8004b96 <xTaskGenericNotifyFromISR+0x116>
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b92:	4a1a      	ldr	r2, [pc, #104]	; (8004bfc <xTaskGenericNotifyFromISR+0x17c>)
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4413      	add	r3, r2
 8004ba0:	009b      	lsls	r3, r3, #2
 8004ba2:	4a17      	ldr	r2, [pc, #92]	; (8004c00 <xTaskGenericNotifyFromISR+0x180>)
 8004ba4:	441a      	add	r2, r3
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	3304      	adds	r3, #4
 8004baa:	4619      	mov	r1, r3
 8004bac:	4610      	mov	r0, r2
 8004bae:	f7fd ff54 	bl	8002a5a <vListInsertEnd>
 8004bb2:	e005      	b.n	8004bc0 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb6:	3318      	adds	r3, #24
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4812      	ldr	r0, [pc, #72]	; (8004c04 <xTaskGenericNotifyFromISR+0x184>)
 8004bbc:	f7fd ff4d 	bl	8002a5a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc4:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <xTaskGenericNotifyFromISR+0x188>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d909      	bls.n	8004be2 <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8004bce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8004bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]
 8004bda:	e002      	b.n	8004be2 <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8004bdc:	4b0b      	ldr	r3, [pc, #44]	; (8004c0c <xTaskGenericNotifyFromISR+0x18c>)
 8004bde:	2201      	movs	r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
 8004be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be4:	617b      	str	r3, [r7, #20]
	__asm volatile
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8004bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3738      	adds	r7, #56	; 0x38
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20000be4 	.word	0x20000be4
 8004bfc:	20000bc4 	.word	0x20000bc4
 8004c00:	200006ec 	.word	0x200006ec
 8004c04:	20000b7c 	.word	0x20000b7c
 8004c08:	200006e8 	.word	0x200006e8
 8004c0c:	20000bd0 	.word	0x20000bd0

08004c10 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c1a:	4b21      	ldr	r3, [pc, #132]	; (8004ca0 <prvAddCurrentTaskToDelayedList+0x90>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c20:	4b20      	ldr	r3, [pc, #128]	; (8004ca4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3304      	adds	r3, #4
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fd ff72 	bl	8002b10 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c32:	d10a      	bne.n	8004c4a <prvAddCurrentTaskToDelayedList+0x3a>
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d007      	beq.n	8004c4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ca4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3304      	adds	r3, #4
 8004c40:	4619      	mov	r1, r3
 8004c42:	4819      	ldr	r0, [pc, #100]	; (8004ca8 <prvAddCurrentTaskToDelayedList+0x98>)
 8004c44:	f7fd ff09 	bl	8002a5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c48:	e026      	b.n	8004c98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4413      	add	r3, r2
 8004c50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c52:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d209      	bcs.n	8004c76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c62:	4b12      	ldr	r3, [pc, #72]	; (8004cac <prvAddCurrentTaskToDelayedList+0x9c>)
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	4b0f      	ldr	r3, [pc, #60]	; (8004ca4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	3304      	adds	r3, #4
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	4610      	mov	r0, r2
 8004c70:	f7fd ff16 	bl	8002aa0 <vListInsert>
}
 8004c74:	e010      	b.n	8004c98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c76:	4b0e      	ldr	r3, [pc, #56]	; (8004cb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ca4 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	4619      	mov	r1, r3
 8004c82:	4610      	mov	r0, r2
 8004c84:	f7fd ff0c 	bl	8002aa0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d202      	bcs.n	8004c98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004c92:	4a08      	ldr	r2, [pc, #32]	; (8004cb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	6013      	str	r3, [r2, #0]
}
 8004c98:	bf00      	nop
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	20000bc0 	.word	0x20000bc0
 8004ca4:	200006e8 	.word	0x200006e8
 8004ca8:	20000ba8 	.word	0x20000ba8
 8004cac:	20000b78 	.word	0x20000b78
 8004cb0:	20000b74 	.word	0x20000b74
 8004cb4:	20000bdc 	.word	0x20000bdc

08004cb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b08a      	sub	sp, #40	; 0x28
 8004cbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004cc2:	f000 fb15 	bl	80052f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004cc6:	4b1c      	ldr	r3, [pc, #112]	; (8004d38 <xTimerCreateTimerTask+0x80>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d021      	beq.n	8004d12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004cd6:	1d3a      	adds	r2, r7, #4
 8004cd8:	f107 0108 	add.w	r1, r7, #8
 8004cdc:	f107 030c 	add.w	r3, r7, #12
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7fd fe75 	bl	80029d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	9202      	str	r2, [sp, #8]
 8004cee:	9301      	str	r3, [sp, #4]
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	460a      	mov	r2, r1
 8004cf8:	4910      	ldr	r1, [pc, #64]	; (8004d3c <xTimerCreateTimerTask+0x84>)
 8004cfa:	4811      	ldr	r0, [pc, #68]	; (8004d40 <xTimerCreateTimerTask+0x88>)
 8004cfc:	f7fe fe2e 	bl	800395c <xTaskCreateStatic>
 8004d00:	4602      	mov	r2, r0
 8004d02:	4b10      	ldr	r3, [pc, #64]	; (8004d44 <xTimerCreateTimerTask+0x8c>)
 8004d04:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d06:	4b0f      	ldr	r3, [pc, #60]	; (8004d44 <xTimerCreateTimerTask+0x8c>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d109      	bne.n	8004d2c <xTimerCreateTimerTask+0x74>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	e7fe      	b.n	8004d2a <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004d2c:	697b      	ldr	r3, [r7, #20]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3718      	adds	r7, #24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	20000c18 	.word	0x20000c18
 8004d3c:	08007108 	.word	0x08007108
 8004d40:	08004f05 	.word	0x08004f05
 8004d44:	20000c1c 	.word	0x20000c1c

08004d48 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af02      	add	r7, sp, #8
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8004d56:	2030      	movs	r0, #48	; 0x30
 8004d58:	f000 fcec 	bl	8005734 <pvPortMalloc>
 8004d5c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00d      	beq.n	8004d80 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f000 f809 	bl	8004d8a <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8004d80:	697b      	ldr	r3, [r7, #20]
	}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3718      	adds	r7, #24
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b086      	sub	sp, #24
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	607a      	str	r2, [r7, #4]
 8004d96:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <prvInitialiseNewTimer+0x28>
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	e7fe      	b.n	8004db0 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d015      	beq.n	8004de4 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8004db8:	f000 fa9a 	bl	80052f0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	68ba      	ldr	r2, [r7, #8]
 8004dc6:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8004dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8004dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dd6:	6a3a      	ldr	r2, [r7, #32]
 8004dd8:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ddc:	3304      	adds	r3, #4
 8004dde:	4618      	mov	r0, r3
 8004de0:	f7fd fe2f 	bl	8002a42 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8004de4:	bf00      	nop
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08a      	sub	sp, #40	; 0x28
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	60f8      	str	r0, [r7, #12]
 8004df4:	60b9      	str	r1, [r7, #8]
 8004df6:	607a      	str	r2, [r7, #4]
 8004df8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d109      	bne.n	8004e18 <xTimerGenericCommand+0x2c>
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	623b      	str	r3, [r7, #32]
 8004e16:	e7fe      	b.n	8004e16 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004e18:	4b19      	ldr	r3, [pc, #100]	; (8004e80 <xTimerGenericCommand+0x94>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d02a      	beq.n	8004e76 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	2b05      	cmp	r3, #5
 8004e30:	dc18      	bgt.n	8004e64 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004e32:	f7ff fbab 	bl	800458c <xTaskGetSchedulerState>
 8004e36:	4603      	mov	r3, r0
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d109      	bne.n	8004e50 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004e3c:	4b10      	ldr	r3, [pc, #64]	; (8004e80 <xTimerGenericCommand+0x94>)
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	f107 0110 	add.w	r1, r7, #16
 8004e44:	2300      	movs	r3, #0
 8004e46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e48:	f7fe f82c 	bl	8002ea4 <xQueueGenericSend>
 8004e4c:	6278      	str	r0, [r7, #36]	; 0x24
 8004e4e:	e012      	b.n	8004e76 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004e50:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <xTimerGenericCommand+0x94>)
 8004e52:	6818      	ldr	r0, [r3, #0]
 8004e54:	f107 0110 	add.w	r1, r7, #16
 8004e58:	2300      	movs	r3, #0
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f7fe f822 	bl	8002ea4 <xQueueGenericSend>
 8004e60:	6278      	str	r0, [r7, #36]	; 0x24
 8004e62:	e008      	b.n	8004e76 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004e64:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <xTimerGenericCommand+0x94>)
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	f107 0110 	add.w	r1, r7, #16
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	683a      	ldr	r2, [r7, #0]
 8004e70:	f7fe f912 	bl	8003098 <xQueueGenericSendFromISR>
 8004e74:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	3728      	adds	r7, #40	; 0x28
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	20000c18 	.word	0x20000c18

08004e84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b088      	sub	sp, #32
 8004e88:	af02      	add	r7, sp, #8
 8004e8a:	6078      	str	r0, [r7, #4]
 8004e8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004e8e:	4b1c      	ldr	r3, [pc, #112]	; (8004f00 <prvProcessExpiredTimer+0x7c>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f7fd fe37 	bl	8002b10 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d121      	bne.n	8004eee <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	18d1      	adds	r1, r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	6978      	ldr	r0, [r7, #20]
 8004eb8:	f000 f8c8 	bl	800504c <prvInsertTimerInActiveList>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d015      	beq.n	8004eee <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	9300      	str	r3, [sp, #0]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	2100      	movs	r1, #0
 8004ecc:	6978      	ldr	r0, [r7, #20]
 8004ece:	f7ff ff8d 	bl	8004dec <xTimerGenericCommand>
 8004ed2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d109      	bne.n	8004eee <prvProcessExpiredTimer+0x6a>
 8004eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	e7fe      	b.n	8004eec <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	6978      	ldr	r0, [r7, #20]
 8004ef4:	4798      	blx	r3
}
 8004ef6:	bf00      	nop
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	20000c10 	.word	0x20000c10

08004f04 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f0c:	f107 0308 	add.w	r3, r7, #8
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 f857 	bl	8004fc4 <prvGetNextExpireTime>
 8004f16:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 f803 	bl	8004f28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004f22:	f000 f8d5 	bl	80050d0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004f26:	e7f1      	b.n	8004f0c <prvTimerTask+0x8>

08004f28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004f32:	f7fe ff3f 	bl	8003db4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f36:	f107 0308 	add.w	r3, r7, #8
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 f866 	bl	800500c <prvSampleTimeNow>
 8004f40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d130      	bne.n	8004faa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10a      	bne.n	8004f64 <prvProcessTimerOrBlockTask+0x3c>
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	429a      	cmp	r2, r3
 8004f54:	d806      	bhi.n	8004f64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004f56:	f7fe ff3b 	bl	8003dd0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004f5a:	68f9      	ldr	r1, [r7, #12]
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f7ff ff91 	bl	8004e84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f62:	e024      	b.n	8004fae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d008      	beq.n	8004f7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f6a:	4b13      	ldr	r3, [pc, #76]	; (8004fb8 <prvProcessTimerOrBlockTask+0x90>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	bf0c      	ite	eq
 8004f74:	2301      	moveq	r3, #1
 8004f76:	2300      	movne	r3, #0
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f7c:	4b0f      	ldr	r3, [pc, #60]	; (8004fbc <prvProcessTimerOrBlockTask+0x94>)
 8004f7e:	6818      	ldr	r0, [r3, #0]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	683a      	ldr	r2, [r7, #0]
 8004f88:	4619      	mov	r1, r3
 8004f8a:	f7fe fcb3 	bl	80038f4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f8e:	f7fe ff1f 	bl	8003dd0 <xTaskResumeAll>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10a      	bne.n	8004fae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f98:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <prvProcessTimerOrBlockTask+0x98>)
 8004f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f9e:	601a      	str	r2, [r3, #0]
 8004fa0:	f3bf 8f4f 	dsb	sy
 8004fa4:	f3bf 8f6f 	isb	sy
}
 8004fa8:	e001      	b.n	8004fae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004faa:	f7fe ff11 	bl	8003dd0 <xTaskResumeAll>
}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}
 8004fb6:	bf00      	nop
 8004fb8:	20000c14 	.word	0x20000c14
 8004fbc:	20000c18 	.word	0x20000c18
 8004fc0:	e000ed04 	.word	0xe000ed04

08004fc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004fcc:	4b0e      	ldr	r3, [pc, #56]	; (8005008 <prvGetNextExpireTime+0x44>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	bf0c      	ite	eq
 8004fd6:	2301      	moveq	r3, #1
 8004fd8:	2300      	movne	r3, #0
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	461a      	mov	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d105      	bne.n	8004ff6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004fea:	4b07      	ldr	r3, [pc, #28]	; (8005008 <prvGetNextExpireTime+0x44>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	60fb      	str	r3, [r7, #12]
 8004ff4:	e001      	b.n	8004ffa <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3714      	adds	r7, #20
 8005000:	46bd      	mov	sp, r7
 8005002:	bc80      	pop	{r7}
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	20000c10 	.word	0x20000c10

0800500c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b084      	sub	sp, #16
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005014:	f7fe ff78 	bl	8003f08 <xTaskGetTickCount>
 8005018:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800501a:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <prvSampleTimeNow+0x3c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68fa      	ldr	r2, [r7, #12]
 8005020:	429a      	cmp	r2, r3
 8005022:	d205      	bcs.n	8005030 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005024:	f000 f904 	bl	8005230 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	e002      	b.n	8005036 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005036:	4a04      	ldr	r2, [pc, #16]	; (8005048 <prvSampleTimeNow+0x3c>)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800503c:	68fb      	ldr	r3, [r7, #12]
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	20000c20 	.word	0x20000c20

0800504c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b086      	sub	sp, #24
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	607a      	str	r2, [r7, #4]
 8005058:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800505a:	2300      	movs	r3, #0
 800505c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	429a      	cmp	r2, r3
 8005070:	d812      	bhi.n	8005098 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	1ad2      	subs	r2, r2, r3
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	699b      	ldr	r3, [r3, #24]
 800507c:	429a      	cmp	r2, r3
 800507e:	d302      	bcc.n	8005086 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005080:	2301      	movs	r3, #1
 8005082:	617b      	str	r3, [r7, #20]
 8005084:	e01b      	b.n	80050be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005086:	4b10      	ldr	r3, [pc, #64]	; (80050c8 <prvInsertTimerInActiveList+0x7c>)
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	3304      	adds	r3, #4
 800508e:	4619      	mov	r1, r3
 8005090:	4610      	mov	r0, r2
 8005092:	f7fd fd05 	bl	8002aa0 <vListInsert>
 8005096:	e012      	b.n	80050be <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	429a      	cmp	r2, r3
 800509e:	d206      	bcs.n	80050ae <prvInsertTimerInActiveList+0x62>
 80050a0:	68ba      	ldr	r2, [r7, #8]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d302      	bcc.n	80050ae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80050a8:	2301      	movs	r3, #1
 80050aa:	617b      	str	r3, [r7, #20]
 80050ac:	e007      	b.n	80050be <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050ae:	4b07      	ldr	r3, [pc, #28]	; (80050cc <prvInsertTimerInActiveList+0x80>)
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	3304      	adds	r3, #4
 80050b6:	4619      	mov	r1, r3
 80050b8:	4610      	mov	r0, r2
 80050ba:	f7fd fcf1 	bl	8002aa0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80050be:	697b      	ldr	r3, [r7, #20]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3718      	adds	r7, #24
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	20000c14 	.word	0x20000c14
 80050cc:	20000c10 	.word	0x20000c10

080050d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08e      	sub	sp, #56	; 0x38
 80050d4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80050d6:	e099      	b.n	800520c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	da17      	bge.n	800510e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80050de:	1d3b      	adds	r3, r7, #4
 80050e0:	3304      	adds	r3, #4
 80050e2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80050e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d109      	bne.n	80050fe <prvProcessReceivedCommands+0x2e>
 80050ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	61fb      	str	r3, [r7, #28]
 80050fc:	e7fe      	b.n	80050fc <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005104:	6850      	ldr	r0, [r2, #4]
 8005106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005108:	6892      	ldr	r2, [r2, #8]
 800510a:	4611      	mov	r1, r2
 800510c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2b00      	cmp	r3, #0
 8005112:	db7a      	blt.n	800520a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d004      	beq.n	800512a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005122:	3304      	adds	r3, #4
 8005124:	4618      	mov	r0, r3
 8005126:	f7fd fcf3 	bl	8002b10 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800512a:	463b      	mov	r3, r7
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff ff6d 	bl	800500c <prvSampleTimeNow>
 8005132:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2b09      	cmp	r3, #9
 8005138:	d868      	bhi.n	800520c <prvProcessReceivedCommands+0x13c>
 800513a:	a201      	add	r2, pc, #4	; (adr r2, 8005140 <prvProcessReceivedCommands+0x70>)
 800513c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005140:	08005169 	.word	0x08005169
 8005144:	08005169 	.word	0x08005169
 8005148:	08005169 	.word	0x08005169
 800514c:	0800520d 	.word	0x0800520d
 8005150:	080051c3 	.word	0x080051c3
 8005154:	080051f9 	.word	0x080051f9
 8005158:	08005169 	.word	0x08005169
 800515c:	08005169 	.word	0x08005169
 8005160:	0800520d 	.word	0x0800520d
 8005164:	080051c3 	.word	0x080051c3
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	18d1      	adds	r1, r2, r3
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005174:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005176:	f7ff ff69 	bl	800504c <prvInsertTimerInActiveList>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d045      	beq.n	800520c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005186:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	69db      	ldr	r3, [r3, #28]
 800518c:	2b01      	cmp	r3, #1
 800518e:	d13d      	bne.n	800520c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	441a      	add	r2, r3
 8005198:	2300      	movs	r3, #0
 800519a:	9300      	str	r3, [sp, #0]
 800519c:	2300      	movs	r3, #0
 800519e:	2100      	movs	r1, #0
 80051a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051a2:	f7ff fe23 	bl	8004dec <xTimerGenericCommand>
 80051a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80051a8:	6a3b      	ldr	r3, [r7, #32]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d12e      	bne.n	800520c <prvProcessReceivedCommands+0x13c>
 80051ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b2:	f383 8811 	msr	BASEPRI, r3
 80051b6:	f3bf 8f6f 	isb	sy
 80051ba:	f3bf 8f4f 	dsb	sy
 80051be:	61bb      	str	r3, [r7, #24]
 80051c0:	e7fe      	b.n	80051c0 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d109      	bne.n	80051e4 <prvProcessReceivedCommands+0x114>
 80051d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	617b      	str	r3, [r7, #20]
 80051e2:	e7fe      	b.n	80051e2 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80051e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e6:	699a      	ldr	r2, [r3, #24]
 80051e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ea:	18d1      	adds	r1, r2, r3
 80051ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051f2:	f7ff ff2b 	bl	800504c <prvInsertTimerInActiveList>
					break;
 80051f6:	e009      	b.n	800520c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d104      	bne.n	800520c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8005202:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005204:	f000 fb58 	bl	80058b8 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005208:	e000      	b.n	800520c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800520a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800520c:	4b07      	ldr	r3, [pc, #28]	; (800522c <prvProcessReceivedCommands+0x15c>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	1d39      	adds	r1, r7, #4
 8005212:	2200      	movs	r2, #0
 8005214:	4618      	mov	r0, r3
 8005216:	f7fd ffd3 	bl	80031c0 <xQueueReceive>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	f47f af5b 	bne.w	80050d8 <prvProcessReceivedCommands+0x8>
	}
}
 8005222:	bf00      	nop
 8005224:	3730      	adds	r7, #48	; 0x30
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	20000c18 	.word	0x20000c18

08005230 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b088      	sub	sp, #32
 8005234:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005236:	e044      	b.n	80052c2 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005238:	4b2b      	ldr	r3, [pc, #172]	; (80052e8 <prvSwitchTimerLists+0xb8>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005242:	4b29      	ldr	r3, [pc, #164]	; (80052e8 <prvSwitchTimerLists+0xb8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	3304      	adds	r3, #4
 8005250:	4618      	mov	r0, r3
 8005252:	f7fd fc5d 	bl	8002b10 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525a:	68f8      	ldr	r0, [r7, #12]
 800525c:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	2b01      	cmp	r3, #1
 8005264:	d12d      	bne.n	80052c2 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4413      	add	r3, r2
 800526e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	429a      	cmp	r2, r3
 8005276:	d90e      	bls.n	8005296 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005284:	4b18      	ldr	r3, [pc, #96]	; (80052e8 <prvSwitchTimerLists+0xb8>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3304      	adds	r3, #4
 800528c:	4619      	mov	r1, r3
 800528e:	4610      	mov	r0, r2
 8005290:	f7fd fc06 	bl	8002aa0 <vListInsert>
 8005294:	e015      	b.n	80052c2 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005296:	2300      	movs	r3, #0
 8005298:	9300      	str	r3, [sp, #0]
 800529a:	2300      	movs	r3, #0
 800529c:	693a      	ldr	r2, [r7, #16]
 800529e:	2100      	movs	r1, #0
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f7ff fda3 	bl	8004dec <xTimerGenericCommand>
 80052a6:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d109      	bne.n	80052c2 <prvSwitchTimerLists+0x92>
 80052ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b2:	f383 8811 	msr	BASEPRI, r3
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	f3bf 8f4f 	dsb	sy
 80052be:	603b      	str	r3, [r7, #0]
 80052c0:	e7fe      	b.n	80052c0 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052c2:	4b09      	ldr	r3, [pc, #36]	; (80052e8 <prvSwitchTimerLists+0xb8>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1b5      	bne.n	8005238 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80052cc:	4b06      	ldr	r3, [pc, #24]	; (80052e8 <prvSwitchTimerLists+0xb8>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80052d2:	4b06      	ldr	r3, [pc, #24]	; (80052ec <prvSwitchTimerLists+0xbc>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a04      	ldr	r2, [pc, #16]	; (80052e8 <prvSwitchTimerLists+0xb8>)
 80052d8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80052da:	4a04      	ldr	r2, [pc, #16]	; (80052ec <prvSwitchTimerLists+0xbc>)
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	6013      	str	r3, [r2, #0]
}
 80052e0:	bf00      	nop
 80052e2:	3718      	adds	r7, #24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	20000c10 	.word	0x20000c10
 80052ec:	20000c14 	.word	0x20000c14

080052f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80052f6:	f000 f927 	bl	8005548 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80052fa:	4b15      	ldr	r3, [pc, #84]	; (8005350 <prvCheckForValidListAndQueue+0x60>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d120      	bne.n	8005344 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005302:	4814      	ldr	r0, [pc, #80]	; (8005354 <prvCheckForValidListAndQueue+0x64>)
 8005304:	f7fd fb7e 	bl	8002a04 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005308:	4813      	ldr	r0, [pc, #76]	; (8005358 <prvCheckForValidListAndQueue+0x68>)
 800530a:	f7fd fb7b 	bl	8002a04 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800530e:	4b13      	ldr	r3, [pc, #76]	; (800535c <prvCheckForValidListAndQueue+0x6c>)
 8005310:	4a10      	ldr	r2, [pc, #64]	; (8005354 <prvCheckForValidListAndQueue+0x64>)
 8005312:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005314:	4b12      	ldr	r3, [pc, #72]	; (8005360 <prvCheckForValidListAndQueue+0x70>)
 8005316:	4a10      	ldr	r2, [pc, #64]	; (8005358 <prvCheckForValidListAndQueue+0x68>)
 8005318:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800531a:	2300      	movs	r3, #0
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	4b11      	ldr	r3, [pc, #68]	; (8005364 <prvCheckForValidListAndQueue+0x74>)
 8005320:	4a11      	ldr	r2, [pc, #68]	; (8005368 <prvCheckForValidListAndQueue+0x78>)
 8005322:	2110      	movs	r1, #16
 8005324:	200a      	movs	r0, #10
 8005326:	f7fd fc85 	bl	8002c34 <xQueueGenericCreateStatic>
 800532a:	4602      	mov	r2, r0
 800532c:	4b08      	ldr	r3, [pc, #32]	; (8005350 <prvCheckForValidListAndQueue+0x60>)
 800532e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005330:	4b07      	ldr	r3, [pc, #28]	; (8005350 <prvCheckForValidListAndQueue+0x60>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d005      	beq.n	8005344 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005338:	4b05      	ldr	r3, [pc, #20]	; (8005350 <prvCheckForValidListAndQueue+0x60>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	490b      	ldr	r1, [pc, #44]	; (800536c <prvCheckForValidListAndQueue+0x7c>)
 800533e:	4618      	mov	r0, r3
 8005340:	f7fe fa88 	bl	8003854 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005344:	f000 f92e 	bl	80055a4 <vPortExitCritical>
}
 8005348:	bf00      	nop
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	20000c18 	.word	0x20000c18
 8005354:	20000be8 	.word	0x20000be8
 8005358:	20000bfc 	.word	0x20000bfc
 800535c:	20000c10 	.word	0x20000c10
 8005360:	20000c14 	.word	0x20000c14
 8005364:	20000cc4 	.word	0x20000cc4
 8005368:	20000c24 	.word	0x20000c24
 800536c:	08007110 	.word	0x08007110

08005370 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005370:	b480      	push	{r7}
 8005372:	b085      	sub	sp, #20
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	3b04      	subs	r3, #4
 8005380:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005388:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3b04      	subs	r3, #4
 800538e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f023 0201 	bic.w	r2, r3, #1
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	3b04      	subs	r3, #4
 800539e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053a0:	4a08      	ldr	r2, [pc, #32]	; (80053c4 <pxPortInitialiseStack+0x54>)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	3b14      	subs	r3, #20
 80053aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053ac:	687a      	ldr	r2, [r7, #4]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3b20      	subs	r3, #32
 80053b6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053b8:	68fb      	ldr	r3, [r7, #12]
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc80      	pop	{r7}
 80053c2:	4770      	bx	lr
 80053c4:	080053c9 	.word	0x080053c9

080053c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053d2:	4b10      	ldr	r3, [pc, #64]	; (8005414 <prvTaskExitError+0x4c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053da:	d009      	beq.n	80053f0 <prvTaskExitError+0x28>
 80053dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	60fb      	str	r3, [r7, #12]
 80053ee:	e7fe      	b.n	80053ee <prvTaskExitError+0x26>
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005402:	bf00      	nop
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0fc      	beq.n	8005404 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800540a:	bf00      	nop
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	bc80      	pop	{r7}
 8005412:	4770      	bx	lr
 8005414:	2000000c 	.word	0x2000000c
	...

08005420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005420:	4b07      	ldr	r3, [pc, #28]	; (8005440 <pxCurrentTCBConst2>)
 8005422:	6819      	ldr	r1, [r3, #0]
 8005424:	6808      	ldr	r0, [r1, #0]
 8005426:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800542a:	f380 8809 	msr	PSP, r0
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f04f 0000 	mov.w	r0, #0
 8005436:	f380 8811 	msr	BASEPRI, r0
 800543a:	f04e 0e0d 	orr.w	lr, lr, #13
 800543e:	4770      	bx	lr

08005440 <pxCurrentTCBConst2>:
 8005440:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005444:	bf00      	nop
 8005446:	bf00      	nop

08005448 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005448:	4806      	ldr	r0, [pc, #24]	; (8005464 <prvPortStartFirstTask+0x1c>)
 800544a:	6800      	ldr	r0, [r0, #0]
 800544c:	6800      	ldr	r0, [r0, #0]
 800544e:	f380 8808 	msr	MSP, r0
 8005452:	b662      	cpsie	i
 8005454:	b661      	cpsie	f
 8005456:	f3bf 8f4f 	dsb	sy
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	df00      	svc	0
 8005460:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005462:	bf00      	nop
 8005464:	e000ed08 	.word	0xe000ed08

08005468 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b084      	sub	sp, #16
 800546c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800546e:	4b31      	ldr	r3, [pc, #196]	; (8005534 <xPortStartScheduler+0xcc>)
 8005470:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	b2db      	uxtb	r3, r3
 8005478:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	22ff      	movs	r2, #255	; 0xff
 800547e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	b2db      	uxtb	r3, r3
 8005486:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	b2db      	uxtb	r3, r3
 800548c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005490:	b2da      	uxtb	r2, r3
 8005492:	4b29      	ldr	r3, [pc, #164]	; (8005538 <xPortStartScheduler+0xd0>)
 8005494:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005496:	4b29      	ldr	r3, [pc, #164]	; (800553c <xPortStartScheduler+0xd4>)
 8005498:	2207      	movs	r2, #7
 800549a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800549c:	e009      	b.n	80054b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800549e:	4b27      	ldr	r3, [pc, #156]	; (800553c <xPortStartScheduler+0xd4>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	4a25      	ldr	r2, [pc, #148]	; (800553c <xPortStartScheduler+0xd4>)
 80054a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054a8:	78fb      	ldrb	r3, [r7, #3]
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054b2:	78fb      	ldrb	r3, [r7, #3]
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ba:	2b80      	cmp	r3, #128	; 0x80
 80054bc:	d0ef      	beq.n	800549e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054be:	4b1f      	ldr	r3, [pc, #124]	; (800553c <xPortStartScheduler+0xd4>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f1c3 0307 	rsb	r3, r3, #7
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d009      	beq.n	80054de <xPortStartScheduler+0x76>
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	60bb      	str	r3, [r7, #8]
 80054dc:	e7fe      	b.n	80054dc <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054de:	4b17      	ldr	r3, [pc, #92]	; (800553c <xPortStartScheduler+0xd4>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	021b      	lsls	r3, r3, #8
 80054e4:	4a15      	ldr	r2, [pc, #84]	; (800553c <xPortStartScheduler+0xd4>)
 80054e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054e8:	4b14      	ldr	r3, [pc, #80]	; (800553c <xPortStartScheduler+0xd4>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054f0:	4a12      	ldr	r2, [pc, #72]	; (800553c <xPortStartScheduler+0xd4>)
 80054f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80054fc:	4b10      	ldr	r3, [pc, #64]	; (8005540 <xPortStartScheduler+0xd8>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a0f      	ldr	r2, [pc, #60]	; (8005540 <xPortStartScheduler+0xd8>)
 8005502:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005506:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005508:	4b0d      	ldr	r3, [pc, #52]	; (8005540 <xPortStartScheduler+0xd8>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a0c      	ldr	r2, [pc, #48]	; (8005540 <xPortStartScheduler+0xd8>)
 800550e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005512:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005514:	f000 f8b0 	bl	8005678 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005518:	4b0a      	ldr	r3, [pc, #40]	; (8005544 <xPortStartScheduler+0xdc>)
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800551e:	f7ff ff93 	bl	8005448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005522:	f7fe fdcf 	bl	80040c4 <vTaskSwitchContext>
	prvTaskExitError();
 8005526:	f7ff ff4f 	bl	80053c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	e000e400 	.word	0xe000e400
 8005538:	20000d14 	.word	0x20000d14
 800553c:	20000d18 	.word	0x20000d18
 8005540:	e000ed20 	.word	0xe000ed20
 8005544:	2000000c 	.word	0x2000000c

08005548 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005552:	f383 8811 	msr	BASEPRI, r3
 8005556:	f3bf 8f6f 	isb	sy
 800555a:	f3bf 8f4f 	dsb	sy
 800555e:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005560:	4b0e      	ldr	r3, [pc, #56]	; (800559c <vPortEnterCritical+0x54>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	3301      	adds	r3, #1
 8005566:	4a0d      	ldr	r2, [pc, #52]	; (800559c <vPortEnterCritical+0x54>)
 8005568:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800556a:	4b0c      	ldr	r3, [pc, #48]	; (800559c <vPortEnterCritical+0x54>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d10e      	bne.n	8005590 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005572:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <vPortEnterCritical+0x58>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	b2db      	uxtb	r3, r3
 8005578:	2b00      	cmp	r3, #0
 800557a:	d009      	beq.n	8005590 <vPortEnterCritical+0x48>
 800557c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005580:	f383 8811 	msr	BASEPRI, r3
 8005584:	f3bf 8f6f 	isb	sy
 8005588:	f3bf 8f4f 	dsb	sy
 800558c:	603b      	str	r3, [r7, #0]
 800558e:	e7fe      	b.n	800558e <vPortEnterCritical+0x46>
	}
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	2000000c 	.word	0x2000000c
 80055a0:	e000ed04 	.word	0xe000ed04

080055a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055aa:	4b10      	ldr	r3, [pc, #64]	; (80055ec <vPortExitCritical+0x48>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d109      	bne.n	80055c6 <vPortExitCritical+0x22>
 80055b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b6:	f383 8811 	msr	BASEPRI, r3
 80055ba:	f3bf 8f6f 	isb	sy
 80055be:	f3bf 8f4f 	dsb	sy
 80055c2:	607b      	str	r3, [r7, #4]
 80055c4:	e7fe      	b.n	80055c4 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80055c6:	4b09      	ldr	r3, [pc, #36]	; (80055ec <vPortExitCritical+0x48>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	3b01      	subs	r3, #1
 80055cc:	4a07      	ldr	r2, [pc, #28]	; (80055ec <vPortExitCritical+0x48>)
 80055ce:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80055d0:	4b06      	ldr	r3, [pc, #24]	; (80055ec <vPortExitCritical+0x48>)
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d104      	bne.n	80055e2 <vPortExitCritical+0x3e>
 80055d8:	2300      	movs	r3, #0
 80055da:	603b      	str	r3, [r7, #0]
	__asm volatile
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bc80      	pop	{r7}
 80055ea:	4770      	bx	lr
 80055ec:	2000000c 	.word	0x2000000c

080055f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80055f0:	f3ef 8009 	mrs	r0, PSP
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	4b0d      	ldr	r3, [pc, #52]	; (8005630 <pxCurrentTCBConst>)
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005600:	6010      	str	r0, [r2, #0]
 8005602:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005606:	f04f 0050 	mov.w	r0, #80	; 0x50
 800560a:	f380 8811 	msr	BASEPRI, r0
 800560e:	f7fe fd59 	bl	80040c4 <vTaskSwitchContext>
 8005612:	f04f 0000 	mov.w	r0, #0
 8005616:	f380 8811 	msr	BASEPRI, r0
 800561a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800561e:	6819      	ldr	r1, [r3, #0]
 8005620:	6808      	ldr	r0, [r1, #0]
 8005622:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005626:	f380 8809 	msr	PSP, r0
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	4770      	bx	lr

08005630 <pxCurrentTCBConst>:
 8005630:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop

08005638 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b082      	sub	sp, #8
 800563c:	af00      	add	r7, sp, #0
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005650:	f7fe fc7a 	bl	8003f48 <xTaskIncrementTick>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800565a:	4b06      	ldr	r3, [pc, #24]	; (8005674 <SysTick_Handler+0x3c>)
 800565c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	2300      	movs	r3, #0
 8005664:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800566c:	bf00      	nop
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	e000ed04 	.word	0xe000ed04

08005678 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005678:	b480      	push	{r7}
 800567a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800567c:	4b0a      	ldr	r3, [pc, #40]	; (80056a8 <vPortSetupTimerInterrupt+0x30>)
 800567e:	2200      	movs	r2, #0
 8005680:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005682:	4b0a      	ldr	r3, [pc, #40]	; (80056ac <vPortSetupTimerInterrupt+0x34>)
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005688:	4b09      	ldr	r3, [pc, #36]	; (80056b0 <vPortSetupTimerInterrupt+0x38>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a09      	ldr	r2, [pc, #36]	; (80056b4 <vPortSetupTimerInterrupt+0x3c>)
 800568e:	fba2 2303 	umull	r2, r3, r2, r3
 8005692:	099b      	lsrs	r3, r3, #6
 8005694:	4a08      	ldr	r2, [pc, #32]	; (80056b8 <vPortSetupTimerInterrupt+0x40>)
 8005696:	3b01      	subs	r3, #1
 8005698:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800569a:	4b03      	ldr	r3, [pc, #12]	; (80056a8 <vPortSetupTimerInterrupt+0x30>)
 800569c:	2207      	movs	r2, #7
 800569e:	601a      	str	r2, [r3, #0]
}
 80056a0:	bf00      	nop
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr
 80056a8:	e000e010 	.word	0xe000e010
 80056ac:	e000e018 	.word	0xe000e018
 80056b0:	20000000 	.word	0x20000000
 80056b4:	10624dd3 	.word	0x10624dd3
 80056b8:	e000e014 	.word	0xe000e014

080056bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80056c2:	f3ef 8305 	mrs	r3, IPSR
 80056c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2b0f      	cmp	r3, #15
 80056cc:	d913      	bls.n	80056f6 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80056ce:	4a15      	ldr	r2, [pc, #84]	; (8005724 <vPortValidateInterruptPriority+0x68>)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	4413      	add	r3, r2
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80056d8:	4b13      	ldr	r3, [pc, #76]	; (8005728 <vPortValidateInterruptPriority+0x6c>)
 80056da:	781b      	ldrb	r3, [r3, #0]
 80056dc:	7afa      	ldrb	r2, [r7, #11]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d209      	bcs.n	80056f6 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	607b      	str	r3, [r7, #4]
 80056f4:	e7fe      	b.n	80056f4 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80056f6:	4b0d      	ldr	r3, [pc, #52]	; (800572c <vPortValidateInterruptPriority+0x70>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056fe:	4b0c      	ldr	r3, [pc, #48]	; (8005730 <vPortValidateInterruptPriority+0x74>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d909      	bls.n	800571a <vPortValidateInterruptPriority+0x5e>
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	603b      	str	r3, [r7, #0]
 8005718:	e7fe      	b.n	8005718 <vPortValidateInterruptPriority+0x5c>
	}
 800571a:	bf00      	nop
 800571c:	3714      	adds	r7, #20
 800571e:	46bd      	mov	sp, r7
 8005720:	bc80      	pop	{r7}
 8005722:	4770      	bx	lr
 8005724:	e000e3f0 	.word	0xe000e3f0
 8005728:	20000d14 	.word	0x20000d14
 800572c:	e000ed0c 	.word	0xe000ed0c
 8005730:	20000d18 	.word	0x20000d18

08005734 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b08a      	sub	sp, #40	; 0x28
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800573c:	2300      	movs	r3, #0
 800573e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005740:	f7fe fb38 	bl	8003db4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005744:	4b57      	ldr	r3, [pc, #348]	; (80058a4 <pvPortMalloc+0x170>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800574c:	f000 f90c 	bl	8005968 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005750:	4b55      	ldr	r3, [pc, #340]	; (80058a8 <pvPortMalloc+0x174>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4013      	ands	r3, r2
 8005758:	2b00      	cmp	r3, #0
 800575a:	f040 808c 	bne.w	8005876 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01c      	beq.n	800579e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005764:	2208      	movs	r2, #8
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4413      	add	r3, r2
 800576a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	2b00      	cmp	r3, #0
 8005774:	d013      	beq.n	800579e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f023 0307 	bic.w	r3, r3, #7
 800577c:	3308      	adds	r3, #8
 800577e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f003 0307 	and.w	r3, r3, #7
 8005786:	2b00      	cmp	r3, #0
 8005788:	d009      	beq.n	800579e <pvPortMalloc+0x6a>
 800578a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578e:	f383 8811 	msr	BASEPRI, r3
 8005792:	f3bf 8f6f 	isb	sy
 8005796:	f3bf 8f4f 	dsb	sy
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	e7fe      	b.n	800579c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d068      	beq.n	8005876 <pvPortMalloc+0x142>
 80057a4:	4b41      	ldr	r3, [pc, #260]	; (80058ac <pvPortMalloc+0x178>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d863      	bhi.n	8005876 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80057ae:	4b40      	ldr	r3, [pc, #256]	; (80058b0 <pvPortMalloc+0x17c>)
 80057b0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80057b2:	4b3f      	ldr	r3, [pc, #252]	; (80058b0 <pvPortMalloc+0x17c>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057b8:	e004      	b.n	80057c4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80057ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057bc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80057c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d903      	bls.n	80057d6 <pvPortMalloc+0xa2>
 80057ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f1      	bne.n	80057ba <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80057d6:	4b33      	ldr	r3, [pc, #204]	; (80058a4 <pvPortMalloc+0x170>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057dc:	429a      	cmp	r2, r3
 80057de:	d04a      	beq.n	8005876 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80057e0:	6a3b      	ldr	r3, [r7, #32]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2208      	movs	r2, #8
 80057e6:	4413      	add	r3, r2
 80057e8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	1ad2      	subs	r2, r2, r3
 80057fa:	2308      	movs	r3, #8
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	429a      	cmp	r2, r3
 8005800:	d91e      	bls.n	8005840 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4413      	add	r3, r2
 8005808:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	2b00      	cmp	r3, #0
 8005812:	d009      	beq.n	8005828 <pvPortMalloc+0xf4>
 8005814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005818:	f383 8811 	msr	BASEPRI, r3
 800581c:	f3bf 8f6f 	isb	sy
 8005820:	f3bf 8f4f 	dsb	sy
 8005824:	613b      	str	r3, [r7, #16]
 8005826:	e7fe      	b.n	8005826 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	1ad2      	subs	r2, r2, r3
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800583a:	69b8      	ldr	r0, [r7, #24]
 800583c:	f000 f8f6 	bl	8005a2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005840:	4b1a      	ldr	r3, [pc, #104]	; (80058ac <pvPortMalloc+0x178>)
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	4a18      	ldr	r2, [pc, #96]	; (80058ac <pvPortMalloc+0x178>)
 800584c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800584e:	4b17      	ldr	r3, [pc, #92]	; (80058ac <pvPortMalloc+0x178>)
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	4b18      	ldr	r3, [pc, #96]	; (80058b4 <pvPortMalloc+0x180>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	429a      	cmp	r2, r3
 8005858:	d203      	bcs.n	8005862 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800585a:	4b14      	ldr	r3, [pc, #80]	; (80058ac <pvPortMalloc+0x178>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a15      	ldr	r2, [pc, #84]	; (80058b4 <pvPortMalloc+0x180>)
 8005860:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	4b10      	ldr	r3, [pc, #64]	; (80058a8 <pvPortMalloc+0x174>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	431a      	orrs	r2, r3
 800586c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005876:	f7fe faab 	bl	8003dd0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	f003 0307 	and.w	r3, r3, #7
 8005880:	2b00      	cmp	r3, #0
 8005882:	d009      	beq.n	8005898 <pvPortMalloc+0x164>
 8005884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	e7fe      	b.n	8005896 <pvPortMalloc+0x162>
	return pvReturn;
 8005898:	69fb      	ldr	r3, [r7, #28]
}
 800589a:	4618      	mov	r0, r3
 800589c:	3728      	adds	r7, #40	; 0x28
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	200024dc 	.word	0x200024dc
 80058a8:	200024e8 	.word	0x200024e8
 80058ac:	200024e0 	.word	0x200024e0
 80058b0:	200024d4 	.word	0x200024d4
 80058b4:	200024e4 	.word	0x200024e4

080058b8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d046      	beq.n	8005958 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80058ca:	2308      	movs	r3, #8
 80058cc:	425b      	negs	r3, r3
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	4413      	add	r3, r2
 80058d2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	685a      	ldr	r2, [r3, #4]
 80058dc:	4b20      	ldr	r3, [pc, #128]	; (8005960 <vPortFree+0xa8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4013      	ands	r3, r2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d109      	bne.n	80058fa <vPortFree+0x42>
 80058e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ea:	f383 8811 	msr	BASEPRI, r3
 80058ee:	f3bf 8f6f 	isb	sy
 80058f2:	f3bf 8f4f 	dsb	sy
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	e7fe      	b.n	80058f8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <vPortFree+0x5e>
 8005902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005906:	f383 8811 	msr	BASEPRI, r3
 800590a:	f3bf 8f6f 	isb	sy
 800590e:	f3bf 8f4f 	dsb	sy
 8005912:	60bb      	str	r3, [r7, #8]
 8005914:	e7fe      	b.n	8005914 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	4b11      	ldr	r3, [pc, #68]	; (8005960 <vPortFree+0xa8>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4013      	ands	r3, r2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d019      	beq.n	8005958 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d115      	bne.n	8005958 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	685a      	ldr	r2, [r3, #4]
 8005930:	4b0b      	ldr	r3, [pc, #44]	; (8005960 <vPortFree+0xa8>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	43db      	mvns	r3, r3
 8005936:	401a      	ands	r2, r3
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800593c:	f7fe fa3a 	bl	8003db4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	4b07      	ldr	r3, [pc, #28]	; (8005964 <vPortFree+0xac>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4413      	add	r3, r2
 800594a:	4a06      	ldr	r2, [pc, #24]	; (8005964 <vPortFree+0xac>)
 800594c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800594e:	6938      	ldr	r0, [r7, #16]
 8005950:	f000 f86c 	bl	8005a2c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005954:	f7fe fa3c 	bl	8003dd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005958:	bf00      	nop
 800595a:	3718      	adds	r7, #24
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	200024e8 	.word	0x200024e8
 8005964:	200024e0 	.word	0x200024e0

08005968 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800596e:	f241 73b8 	movw	r3, #6072	; 0x17b8
 8005972:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005974:	4b27      	ldr	r3, [pc, #156]	; (8005a14 <prvHeapInit+0xac>)
 8005976:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00c      	beq.n	800599c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	3307      	adds	r3, #7
 8005986:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f023 0307 	bic.w	r3, r3, #7
 800598e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	4a1f      	ldr	r2, [pc, #124]	; (8005a14 <prvHeapInit+0xac>)
 8005998:	4413      	add	r3, r2
 800599a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80059a0:	4a1d      	ldr	r2, [pc, #116]	; (8005a18 <prvHeapInit+0xb0>)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80059a6:	4b1c      	ldr	r3, [pc, #112]	; (8005a18 <prvHeapInit+0xb0>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	68ba      	ldr	r2, [r7, #8]
 80059b0:	4413      	add	r3, r2
 80059b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80059b4:	2208      	movs	r2, #8
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	1a9b      	subs	r3, r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0307 	bic.w	r3, r3, #7
 80059c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	4a15      	ldr	r2, [pc, #84]	; (8005a1c <prvHeapInit+0xb4>)
 80059c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80059ca:	4b14      	ldr	r3, [pc, #80]	; (8005a1c <prvHeapInit+0xb4>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2200      	movs	r2, #0
 80059d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80059d2:	4b12      	ldr	r3, [pc, #72]	; (8005a1c <prvHeapInit+0xb4>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2200      	movs	r2, #0
 80059d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68fa      	ldr	r2, [r7, #12]
 80059e2:	1ad2      	subs	r2, r2, r3
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80059e8:	4b0c      	ldr	r3, [pc, #48]	; (8005a1c <prvHeapInit+0xb4>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	4a0a      	ldr	r2, [pc, #40]	; (8005a20 <prvHeapInit+0xb8>)
 80059f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	4a09      	ldr	r2, [pc, #36]	; (8005a24 <prvHeapInit+0xbc>)
 80059fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005a00:	4b09      	ldr	r3, [pc, #36]	; (8005a28 <prvHeapInit+0xc0>)
 8005a02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005a06:	601a      	str	r2, [r3, #0]
}
 8005a08:	bf00      	nop
 8005a0a:	3714      	adds	r7, #20
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bc80      	pop	{r7}
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	20000d1c 	.word	0x20000d1c
 8005a18:	200024d4 	.word	0x200024d4
 8005a1c:	200024dc 	.word	0x200024dc
 8005a20:	200024e4 	.word	0x200024e4
 8005a24:	200024e0 	.word	0x200024e0
 8005a28:	200024e8 	.word	0x200024e8

08005a2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005a34:	4b27      	ldr	r3, [pc, #156]	; (8005ad4 <prvInsertBlockIntoFreeList+0xa8>)
 8005a36:	60fb      	str	r3, [r7, #12]
 8005a38:	e002      	b.n	8005a40 <prvInsertBlockIntoFreeList+0x14>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	60fb      	str	r3, [r7, #12]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d8f7      	bhi.n	8005a3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	4413      	add	r3, r2
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d108      	bne.n	8005a6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	685a      	ldr	r2, [r3, #4]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	441a      	add	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	68ba      	ldr	r2, [r7, #8]
 8005a78:	441a      	add	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d118      	bne.n	8005ab4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	4b14      	ldr	r3, [pc, #80]	; (8005ad8 <prvInsertBlockIntoFreeList+0xac>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d00d      	beq.n	8005aaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	441a      	add	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	681a      	ldr	r2, [r3, #0]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	601a      	str	r2, [r3, #0]
 8005aa8:	e008      	b.n	8005abc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005aaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ad8 <prvInsertBlockIntoFreeList+0xac>)
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	601a      	str	r2, [r3, #0]
 8005ab2:	e003      	b.n	8005abc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005abc:	68fa      	ldr	r2, [r7, #12]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d002      	beq.n	8005aca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005aca:	bf00      	nop
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bc80      	pop	{r7}
 8005ad2:	4770      	bx	lr
 8005ad4:	200024d4 	.word	0x200024d4
 8005ad8:	200024dc 	.word	0x200024dc

08005adc <ModbusInit>:
 * @param EN_Port_v port for txen RS-485
 * @param EN_Pin_v pin for txen RS-485 (NULL means RS232C mode)
 * @ingroup setup
 */
void ModbusInit(modbusHandler_t * modH)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af02      	add	r7, sp, #8
 8005ae2:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8005ae4:	4b35      	ldr	r3, [pc, #212]	; (8005bbc <ModbusInit+0xe0>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d862      	bhi.n	8005bb2 <ModbusInit+0xd6>
  {
	  //Create QueueModbus
	  modH->QueueModbusHandle = osMessageQueueNew (MAX_BUFFER, sizeof(uint8_t), &QueueModbus_attributes);
 8005aec:	4a34      	ldr	r2, [pc, #208]	; (8005bc0 <ModbusInit+0xe4>)
 8005aee:	2101      	movs	r1, #1
 8005af0:	2040      	movs	r0, #64	; 0x40
 8005af2:	f7fc fecf 	bl	8002894 <osMessageQueueNew>
 8005af6:	4602      	mov	r2, r0
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	675a      	str	r2, [r3, #116]	; 0x74

	  if(modH->uiModbusType == SLAVE_RTU)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	2b03      	cmp	r3, #3
 8005b02:	d108      	bne.n	8005b16 <ModbusInit+0x3a>
	  {
		  //Create Modbus task slave
	  	  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8005b04:	4a2f      	ldr	r2, [pc, #188]	; (8005bc4 <ModbusInit+0xe8>)
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	482f      	ldr	r0, [pc, #188]	; (8005bc8 <ModbusInit+0xec>)
 8005b0a:	f7fc fd4d 	bl	80025a8 <osThreadNew>
 8005b0e:	4602      	mov	r2, r0
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	67da      	str	r2, [r3, #124]	; 0x7c
 8005b14:	e027      	b.n	8005b66 <ModbusInit+0x8a>
	  }
	  else if (modH->uiModbusType == MASTER_RTU)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d122      	bne.n	8005b64 <ModbusInit+0x88>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8005b1e:	4a2b      	ldr	r2, [pc, #172]	; (8005bcc <ModbusInit+0xf0>)
 8005b20:	6879      	ldr	r1, [r7, #4]
 8005b22:	482b      	ldr	r0, [pc, #172]	; (8005bd0 <ModbusInit+0xf4>)
 8005b24:	f7fc fd40 	bl	80025a8 <osThreadNew>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	67da      	str	r2, [r3, #124]	; 0x7c
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8005b34:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8005b3c:	4b25      	ldr	r3, [pc, #148]	; (8005bd4 <ModbusInit+0xf8>)
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	4613      	mov	r3, r2
 8005b42:	2200      	movs	r2, #0
 8005b44:	4824      	ldr	r0, [pc, #144]	; (8005bd8 <ModbusInit+0xfc>)
 8005b46:	f7ff f8ff 	bl	8004d48 <xTimerCreate>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8005b52:	4a22      	ldr	r2, [pc, #136]	; (8005bdc <ModbusInit+0x100>)
 8005b54:	210c      	movs	r1, #12
 8005b56:	2002      	movs	r0, #2
 8005b58:	f7fc fe9c 	bl	8002894 <osMessageQueueNew>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	679a      	str	r2, [r3, #120]	; 0x78
 8005b62:	e000      	b.n	8005b66 <ModbusInit+0x8a>
	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8005b64:	e7fe      	b.n	8005b64 <ModbusInit+0x88>
	  //Create timer T35

	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	5 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8005b6c:	4b1c      	ldr	r3, [pc, #112]	; (8005be0 <ModbusInit+0x104>)
 8005b6e:	9300      	str	r3, [sp, #0]
 8005b70:	4613      	mov	r3, r2
 8005b72:	2200      	movs	r2, #0
 8005b74:	2105      	movs	r1, #5
 8005b76:	481b      	ldr	r0, [pc, #108]	; (8005be4 <ModbusInit+0x108>)
 8005b78:	f7ff f8e6 	bl	8004d48 <xTimerCreate>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );

	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8005b84:	4a18      	ldr	r2, [pc, #96]	; (8005be8 <ModbusInit+0x10c>)
 8005b86:	2101      	movs	r1, #1
 8005b88:	2001      	movs	r0, #1
 8005b8a:	f7fc fde5 	bl	8002758 <osSemaphoreNew>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  mHandlers[numberHandlers] = modH;
 8005b96:	4b09      	ldr	r3, [pc, #36]	; (8005bbc <ModbusInit+0xe0>)
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4a13      	ldr	r2, [pc, #76]	; (8005bec <ModbusInit+0x110>)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <ModbusInit+0xe0>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	b2da      	uxtb	r2, r3
 8005bac:	4b03      	ldr	r3, [pc, #12]	; (8005bbc <ModbusInit+0xe0>)
 8005bae:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8005bb0:	e000      	b.n	8005bb4 <ModbusInit+0xd8>
	  while(1); //error no more Modbus handlers supported
 8005bb2:	e7fe      	b.n	8005bb2 <ModbusInit+0xd6>
}
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	200024ec 	.word	0x200024ec
 8005bc0:	08007200 	.word	0x08007200
 8005bc4:	08007230 	.word	0x08007230
 8005bc8:	08005d61 	.word	0x08005d61
 8005bcc:	08007254 	.word	0x08007254
 8005bd0:	080061f9 	.word	0x080061f9
 8005bd4:	08005d09 	.word	0x08005d09
 8005bd8:	08007160 	.word	0x08007160
 8005bdc:	08007218 	.word	0x08007218
 8005be0:	08005c89 	.word	0x08005c89
 8005be4:	08007170 	.word	0x08007170
 8005be8:	08007278 	.word	0x08007278
 8005bec:	200024f4 	.word	0x200024f4

08005bf0 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b082      	sub	sp, #8
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
    if (modH->EN_Port != NULL )
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d007      	beq.n	8005c10 <ModbusStart+0x20>
    {
        // return RS485 transceiver to transmit mode
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	68d8      	ldr	r0, [r3, #12]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	8a1b      	ldrh	r3, [r3, #16]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	f7fb f9e4 	bl	8000fd8 <HAL_GPIO_WritePin>
    }

    if (modH->uiModbusType == SLAVE_RTU &&  modH->au16regs == NULL )
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b03      	cmp	r3, #3
 8005c16:	d104      	bne.n	8005c22 <ModbusStart+0x32>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d100      	bne.n	8005c22 <ModbusStart+0x32>
    {
    	while(1); //ERROR define the DATA pointer shared through Modbus
 8005c20:	e7fe      	b.n	8005c20 <ModbusStart+0x30>
    }

    //check that port is initialized
    while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8005c22:	bf00      	nop
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fc fa94 	bl	8002156 <HAL_UART_GetState>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	d1f7      	bne.n	8005c24 <ModbusStart+0x34>
    {
    }

    // Receive data from serial port for Modbus using interrupt
    if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6858      	ldr	r0, [r3, #4]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	3371      	adds	r3, #113	; 0x71
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	4619      	mov	r1, r3
 8005c40:	f7fc f92b 	bl	8001e9a <HAL_UART_Receive_IT>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d000      	beq.n	8005c4c <ModbusStart+0x5c>
    {
        while(1)
 8005c4a:	e7fe      	b.n	8005c4a <ModbusStart+0x5a>
        {
        }
    }

    modH->u8lastRec = modH->u8BufferSize = 0;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
}
 8005c80:	bf00      	nop
 8005c82:	3708      	adds	r7, #8
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <vTimerCallbackT35>:


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b086      	sub	sp, #24
 8005c8c:	af02      	add	r7, sp, #8
 8005c8e:	6078      	str	r0, [r7, #4]
	//Notify that a steam has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8005c90:	2300      	movs	r3, #0
 8005c92:	60fb      	str	r3, [r7, #12]
 8005c94:	e029      	b.n	8005cea <vTimerCallbackT35+0x62>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8005c96:	4a1a      	ldr	r2, [pc, #104]	; (8005d00 <vTimerCallbackT35+0x78>)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d11d      	bne.n	8005ce4 <vTimerCallbackT35+0x5c>
			if(mHandlers[i]->uiModbusType == MASTER_RTU)
 8005ca8:	4a15      	ldr	r2, [pc, #84]	; (8005d00 <vTimerCallbackT35+0x78>)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	2b04      	cmp	r3, #4
 8005cb4:	d10c      	bne.n	8005cd0 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8005cb6:	4a12      	ldr	r2, [pc, #72]	; (8005d00 <vTimerCallbackT35+0x78>)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cbe:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	2200      	movs	r2, #0
 8005cca:	2103      	movs	r1, #3
 8005ccc:	f7ff f88e 	bl	8004dec <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8005cd0:	4a0b      	ldr	r2, [pc, #44]	; (8005d00 <vTimerCallbackT35+0x78>)
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cd8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005cda:	2300      	movs	r3, #0
 8005cdc:	2203      	movs	r2, #3
 8005cde:	2100      	movs	r1, #0
 8005ce0:	f7fe fe2c 	bl	800493c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	60fb      	str	r3, [r7, #12]
 8005cea:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <vTimerCallbackT35+0x7c>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	461a      	mov	r2, r3
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	dbcf      	blt.n	8005c96 <vTimerCallbackT35+0xe>
		}

	}
}
 8005cf6:	bf00      	nop
 8005cf8:	3710      	adds	r7, #16
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	200024f4 	.word	0x200024f4
 8005d04:	200024ec 	.word	0x200024ec

08005d08 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b084      	sub	sp, #16
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
	//Notify that a steam has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8005d10:	2300      	movs	r3, #0
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	e015      	b.n	8005d42 <vTimerCallbackTimeout+0x3a>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8005d16:	4a10      	ldr	r2, [pc, #64]	; (8005d58 <vTimerCallbackTimeout+0x50>)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d109      	bne.n	8005d3c <vTimerCallbackTimeout+0x34>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, NO_REPLY, eSetValueWithOverwrite);
 8005d28:	4a0b      	ldr	r2, [pc, #44]	; (8005d58 <vTimerCallbackTimeout+0x50>)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d30:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005d32:	2300      	movs	r3, #0
 8005d34:	2203      	movs	r2, #3
 8005d36:	21ff      	movs	r1, #255	; 0xff
 8005d38:	f7fe fe00 	bl	800493c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	60fb      	str	r3, [r7, #12]
 8005d42:	4b06      	ldr	r3, [pc, #24]	; (8005d5c <vTimerCallbackTimeout+0x54>)
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	dbe3      	blt.n	8005d16 <vTimerCallbackTimeout+0xe>
		}

	}

}
 8005d4e:	bf00      	nop
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	200024f4 	.word	0x200024f4
 8005d5c:	200024ec 	.word	0x200024ec

08005d60 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block indefinitely until a Modbus Frame arrives */
 8005d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8005d70:	2001      	movs	r0, #1
 8005d72:	f7fe fd9b 	bl	80048ac <ulTaskNotifyTake>

	  modH->i8lastError = 0;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	749a      	strb	r2, [r3, #18]
	  modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d80:	4618      	mov	r0, r3
 8005d82:	f7fd fc01 	bl	8003588 <uxQueueMessagesWaiting>
 8005d86:	4603      	mov	r3, r0
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	  if (modH->EN_Port != NULL )
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <StartTaskModbusSlave+0x48>
	  {
	     	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET); // is this required?
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	68d8      	ldr	r0, [r3, #12]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	8a1b      	ldrh	r3, [r3, #16]
 8005da0:	2200      	movs	r2, #0
 8005da2:	4619      	mov	r1, r3
 8005da4:	f7fb f918 	bl	8000fd8 <HAL_GPIO_WritePin>
	  }

	  int8_t i8state = getRxBuffer(modH);
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 fbdf 	bl	800656c <getRxBuffer>
 8005dae:	4603      	mov	r3, r0
 8005db0:	72fb      	strb	r3, [r7, #11]

	  if (i8state < 7){
 8005db2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005db6:	2b06      	cmp	r3, #6
 8005db8:	dc09      	bgt.n	8005dce <StartTaskModbusSlave+0x6e>
		  //The size of the frame is invalid
		  modH->i8lastError = ERR_BAD_SIZE;;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	22fa      	movs	r2, #250	; 0xfa
 8005dbe:	749a      	strb	r2, [r3, #18]
		  xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f7fc fecc 	bl	8002b64 <xQueueGenericReset>
		  continue;
 8005dcc:	e093      	b.n	8005ef6 <StartTaskModbusSlave+0x196>
	  }


		// check slave id
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	7cda      	ldrb	r2, [r3, #19]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	7a1b      	ldrb	r3, [r3, #8]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	f040 808c 	bne.w	8005ef4 <StartTaskModbusSlave+0x194>

	  // validate message: CRC, FCT, address and size
	  uint8_t u8exception = validateRequest(modH);
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 fc6b 	bl	80066b8 <validateRequest>
 8005de2:	4603      	mov	r3, r0
 8005de4:	72bb      	strb	r3, [r7, #10]
	  if (u8exception > 0)
 8005de6:	7abb      	ldrb	r3, [r7, #10]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d00f      	beq.n	8005e0c <StartTaskModbusSlave+0xac>
	  {
		  if (u8exception != NO_REPLY)
 8005dec:	7abb      	ldrb	r3, [r7, #10]
 8005dee:	2bff      	cmp	r3, #255	; 0xff
 8005df0:	d007      	beq.n	8005e02 <StartTaskModbusSlave+0xa2>
		  {
			  buildException( u8exception, modH);
 8005df2:	7abb      	ldrb	r3, [r7, #10]
 8005df4:	68f9      	ldr	r1, [r7, #12]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f000 fdb6 	bl	8006968 <buildException>
			  sendTxBuffer(modH);
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 fdd1 	bl	80069a4 <sendTxBuffer>
		  }
		  modH->i8lastError = u8exception;
 8005e02:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	749a      	strb	r2, [r3, #18]
		  //return u8exception
		  continue;
 8005e0a:	e074      	b.n	8005ef6 <StartTaskModbusSlave+0x196>
	  }

	  //u32timeOut = millis(); TODO is this really need?
	  modH->i8lastError = 0;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	749a      	strb	r2, [r3, #18]


	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e18:	f04f 31ff 	mov.w	r1, #4294967295
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7fd faab 	bl	8003378 <xQueueSemaphoreTake>

	  // process message
	    switch(modH->au8Buffer[ FUNC ] )
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	7d1b      	ldrb	r3, [r3, #20]
 8005e26:	3b01      	subs	r3, #1
 8005e28:	2b0f      	cmp	r3, #15
 8005e2a:	d859      	bhi.n	8005ee0 <StartTaskModbusSlave+0x180>
 8005e2c:	a201      	add	r2, pc, #4	; (adr r2, 8005e34 <StartTaskModbusSlave+0xd4>)
 8005e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e32:	bf00      	nop
 8005e34:	08005e75 	.word	0x08005e75
 8005e38:	08005e75 	.word	0x08005e75
 8005e3c:	08005e87 	.word	0x08005e87
 8005e40:	08005e87 	.word	0x08005e87
 8005e44:	08005e99 	.word	0x08005e99
 8005e48:	08005eab 	.word	0x08005eab
 8005e4c:	08005ee1 	.word	0x08005ee1
 8005e50:	08005ee1 	.word	0x08005ee1
 8005e54:	08005ee1 	.word	0x08005ee1
 8005e58:	08005ee1 	.word	0x08005ee1
 8005e5c:	08005ee1 	.word	0x08005ee1
 8005e60:	08005ee1 	.word	0x08005ee1
 8005e64:	08005ee1 	.word	0x08005ee1
 8005e68:	08005ee1 	.word	0x08005ee1
 8005e6c:	08005ebd 	.word	0x08005ebd
 8005e70:	08005ecf 	.word	0x08005ecf
	    {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 fe2d 	bl	8006ad4 <process_FC1>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 8005e84:	e02d      	b.n	8005ee2 <StartTaskModbusSlave+0x182>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 fed9 	bl	8006c3e <process_FC3>
 8005e8c:	4603      	mov	r3, r0
 8005e8e:	461a      	mov	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 8005e96:	e024      	b.n	8005ee2 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 8005e98:	68f8      	ldr	r0, [r7, #12]
 8005e9a:	f000 ff39 	bl	8006d10 <process_FC5>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 8005ea8:	e01b      	b.n	8005ee2 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 ff86 	bl	8006dbc <process_FC6>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 8005eba:	e012      	b.n	8005ee2 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 8005ebc:	68f8      	ldr	r0, [r7, #12]
 8005ebe:	f000 ffae 	bl	8006e1e <process_FC15>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 8005ecc:	e009      	b.n	8005ee2 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	f001 f830 	bl	8006f34 <process_FC16>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 8005ede:	e000      	b.n	8005ee2 <StartTaskModbusSlave+0x182>
			default:
				break;
 8005ee0:	bf00      	nop
	    }

	    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8005ee8:	2300      	movs	r3, #0
 8005eea:	2200      	movs	r2, #0
 8005eec:	2100      	movs	r1, #0
 8005eee:	f7fc ffd9 	bl	8002ea4 <xQueueGenericSend>
	    //return i8state;
	    continue;
 8005ef2:	e000      	b.n	8005ef6 <StartTaskModbusSlave+0x196>
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 8005ef4:	bf00      	nop
  {
 8005ef6:	e739      	b.n	8005d6c <StartTaskModbusSlave+0xc>

08005ef8 <ModbusQuery>:
}



void ModbusQuery(modbusHandler_t * modH, modbus_t telegram )
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	4638      	mov	r0, r7
 8005f02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	//Add the telegram to the TX Queue of Modbus
	xQueueSendToBack(modH->QueueTelegramHandle, &telegram, 0);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8005f0a:	4639      	mov	r1, r7
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f7fc ffc8 	bl	8002ea4 <xQueueGenericSend>
}
 8005f14:	bf00      	nop
 8005f16:	3710      	adds	r7, #16
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	4638      	mov	r0, r7
 8005f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	75bb      	strb	r3, [r7, #22]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f34:	f04f 31ff 	mov.w	r1, #4294967295
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7fd fa1d 	bl	8003378 <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	7a1b      	ldrb	r3, [r3, #8]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d001      	beq.n	8005f4a <SendQuery+0x2e>
 8005f46:	23ff      	movs	r3, #255	; 0xff
 8005f48:	75bb      	strb	r3, [r7, #22]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d001      	beq.n	8005f58 <SendQuery+0x3c>
 8005f54:	23fe      	movs	r3, #254	; 0xfe
 8005f56:	75bb      	strb	r3, [r7, #22]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8005f58:	783b      	ldrb	r3, [r7, #0]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <SendQuery+0x48>
 8005f5e:	783b      	ldrb	r3, [r7, #0]
 8005f60:	2bf7      	cmp	r3, #247	; 0xf7
 8005f62:	d901      	bls.n	8005f68 <SendQuery+0x4c>
 8005f64:	23f7      	movs	r3, #247	; 0xf7
 8005f66:	75bb      	strb	r3, [r7, #22]

	if(error)
 8005f68:	7dbb      	ldrb	r3, [r7, #22]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00e      	beq.n	8005f8c <SendQuery+0x70>
	{
		 modH->i8lastError = error;
 8005f6e:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2100      	movs	r1, #0
 8005f82:	f7fc ff8f 	bl	8002ea4 <xQueueGenericSend>
		 return error;
 8005f86:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8005f8a:	e130      	b.n	80061ee <SendQuery+0x2d2>
	}


	modH->au16regs = telegram.au16reg;
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	659a      	str	r2, [r3, #88]	; 0x58

	// telegram header
	modH->au8Buffer[ ID ]         = telegram.u8id;
 8005f92:	783a      	ldrb	r2, [r7, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	74da      	strb	r2, [r3, #19]
	modH->au8Buffer[ FUNC ]       = telegram.u8fct;
 8005f98:	787a      	ldrb	r2, [r7, #1]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	751a      	strb	r2, [r3, #20]
	modH->au8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8005f9e:	887b      	ldrh	r3, [r7, #2]
 8005fa0:	0a1b      	lsrs	r3, r3, #8
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	755a      	strb	r2, [r3, #21]
	modH->au8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8005faa:	887b      	ldrh	r3, [r7, #2]
 8005fac:	b2da      	uxtb	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8005fb2:	787b      	ldrb	r3, [r7, #1]
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	2b0f      	cmp	r3, #15
 8005fb8:	f200 8106 	bhi.w	80061c8 <SendQuery+0x2ac>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <SendQuery+0xa8>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	08006005 	.word	0x08006005
 8005fc8:	08006005 	.word	0x08006005
 8005fcc:	08006005 	.word	0x08006005
 8005fd0:	08006005 	.word	0x08006005
 8005fd4:	08006023 	.word	0x08006023
 8005fd8:	08006047 	.word	0x08006047
 8005fdc:	080061c9 	.word	0x080061c9
 8005fe0:	080061c9 	.word	0x080061c9
 8005fe4:	080061c9 	.word	0x080061c9
 8005fe8:	080061c9 	.word	0x080061c9
 8005fec:	080061c9 	.word	0x080061c9
 8005ff0:	080061c9 	.word	0x080061c9
 8005ff4:	080061c9 	.word	0x080061c9
 8005ff8:	080061c9 	.word	0x080061c9
 8005ffc:	0800606d 	.word	0x0800606d
 8006000:	0800612f 	.word	0x0800612f
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8006004:	88bb      	ldrh	r3, [r7, #4]
 8006006:	0a1b      	lsrs	r3, r3, #8
 8006008:	b29b      	uxth	r3, r3
 800600a:	b2da      	uxtb	r2, r3
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8006010:	88bb      	ldrh	r3, [r7, #4]
 8006012:	b2da      	uxtb	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2206      	movs	r2, #6
 800601c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 8006020:	e0d2      	b.n	80061c8 <SendQuery+0x2ac>
	case MB_FC_WRITE_COIL:
	    modH->au8Buffer[ NB_HI ]      = ((modH->au16regs[0] > 0) ? 0xff : 0);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d001      	beq.n	8006030 <SendQuery+0x114>
 800602c:	22ff      	movs	r2, #255	; 0xff
 800602e:	e000      	b.n	8006032 <SendQuery+0x116>
 8006030:	2200      	movs	r2, #0
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = 0;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2206      	movs	r2, #6
 8006040:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 8006044:	e0c0      	b.n	80061c8 <SendQuery+0x2ac>
	case MB_FC_WRITE_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte(modH->au16regs[0]);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	0a1b      	lsrs	r3, r3, #8
 800604e:	b29b      	uxth	r3, r3
 8006050:	b2da      	uxtb	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte(modH->au16regs[0]);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800605a:	881b      	ldrh	r3, [r3, #0]
 800605c:	b2da      	uxtb	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2206      	movs	r2, #6
 8006066:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 800606a:	e0ad      	b.n	80061c8 <SendQuery+0x2ac>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 800606c:	88bb      	ldrh	r3, [r7, #4]
 800606e:	091b      	lsrs	r3, r3, #4
 8006070:	b29b      	uxth	r3, r3
 8006072:	747b      	strb	r3, [r7, #17]
	    u8bytesno = u8regsno * 2;
 8006074:	7c7b      	ldrb	r3, [r7, #17]
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	75fb      	strb	r3, [r7, #23]
	    if ((telegram.u16CoilsNo % 16) != 0)
 800607a:	88bb      	ldrh	r3, [r7, #4]
 800607c:	f003 030f 	and.w	r3, r3, #15
 8006080:	b29b      	uxth	r3, r3
 8006082:	2b00      	cmp	r3, #0
 8006084:	d005      	beq.n	8006092 <SendQuery+0x176>
	    {
	        u8bytesno++;
 8006086:	7dfb      	ldrb	r3, [r7, #23]
 8006088:	3301      	adds	r3, #1
 800608a:	75fb      	strb	r3, [r7, #23]
	        u8regsno++;
 800608c:	7c7b      	ldrb	r3, [r7, #17]
 800608e:	3301      	adds	r3, #1
 8006090:	747b      	strb	r3, [r7, #17]
	    }

	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8006092:	88bb      	ldrh	r3, [r7, #4]
 8006094:	0a1b      	lsrs	r3, r3, #8
 8006096:	b29b      	uxth	r3, r3
 8006098:	b2da      	uxtb	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800609e:	88bb      	ldrh	r3, [r7, #4]
 80060a0:	b2da      	uxtb	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = u8bytesno;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	7dfa      	ldrb	r2, [r7, #23]
 80060aa:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2207      	movs	r2, #7
 80060b0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	    for (uint16_t i = 0; i < u8bytesno; i++)
 80060b4:	2300      	movs	r3, #0
 80060b6:	82bb      	strh	r3, [r7, #20]
 80060b8:	e033      	b.n	8006122 <SendQuery+0x206>
	    {
	        if(i%2)
 80060ba:	8abb      	ldrh	r3, [r7, #20]
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	b29b      	uxth	r3, r3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d010      	beq.n	80060e8 <SendQuery+0x1cc>
	        {
	            modH->au8Buffer[ modH->u8BufferSize ] = lowByte( modH->au16regs[ i/2 ] );
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80060ca:	8abb      	ldrh	r3, [r7, #20]
 80060cc:	085b      	lsrs	r3, r3, #1
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	4413      	add	r3, r2
 80060d4:	881a      	ldrh	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80060dc:	4619      	mov	r1, r3
 80060de:	b2d2      	uxtb	r2, r2
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	440b      	add	r3, r1
 80060e4:	74da      	strb	r2, [r3, #19]
 80060e6:	e011      	b.n	800610c <SendQuery+0x1f0>
	        }
	        else
	        {
	        	 modH->au8Buffer[  modH->u8BufferSize ] = highByte(  modH->au16regs[ i/2] );
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80060ec:	8abb      	ldrh	r3, [r7, #20]
 80060ee:	085b      	lsrs	r3, r3, #1
 80060f0:	b29b      	uxth	r3, r3
 80060f2:	005b      	lsls	r3, r3, #1
 80060f4:	4413      	add	r3, r2
 80060f6:	881b      	ldrh	r3, [r3, #0]
 80060f8:	0a1b      	lsrs	r3, r3, #8
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006102:	4619      	mov	r1, r3
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	440b      	add	r3, r1
 800610a:	74da      	strb	r2, [r3, #19]
	        }
	        modH->u8BufferSize++;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006112:	3301      	adds	r3, #1
 8006114:	b2da      	uxtb	r2, r3
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    for (uint16_t i = 0; i < u8bytesno; i++)
 800611c:	8abb      	ldrh	r3, [r7, #20]
 800611e:	3301      	adds	r3, #1
 8006120:	82bb      	strh	r3, [r7, #20]
 8006122:	7dfb      	ldrb	r3, [r7, #23]
 8006124:	b29b      	uxth	r3, r3
 8006126:	8aba      	ldrh	r2, [r7, #20]
 8006128:	429a      	cmp	r2, r3
 800612a:	d3c6      	bcc.n	80060ba <SendQuery+0x19e>
	    }
	    break;
 800612c:	e04c      	b.n	80061c8 <SendQuery+0x2ac>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800612e:	88bb      	ldrh	r3, [r7, #4]
 8006130:	0a1b      	lsrs	r3, r3, #8
 8006132:	b29b      	uxth	r3, r3
 8006134:	b2da      	uxtb	r2, r3
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800613a:	88bb      	ldrh	r3, [r7, #4]
 800613c:	b2da      	uxtb	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8006142:	88bb      	ldrh	r3, [r7, #4]
 8006144:	b2db      	uxtb	r3, r3
 8006146:	005b      	lsls	r3, r3, #1
 8006148:	b2da      	uxtb	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2207      	movs	r2, #7
 8006152:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8006156:	2300      	movs	r3, #0
 8006158:	827b      	strh	r3, [r7, #18]
 800615a:	e030      	b.n	80061be <SendQuery+0x2a2>
	    {
	        modH->au8Buffer[  modH->u8BufferSize ] = highByte(  modH->au16regs[ i ] );
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006160:	8a7b      	ldrh	r3, [r7, #18]
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	4413      	add	r3, r2
 8006166:	881b      	ldrh	r3, [r3, #0]
 8006168:	0a1b      	lsrs	r3, r3, #8
 800616a:	b29a      	uxth	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006172:	4619      	mov	r1, r3
 8006174:	b2d2      	uxtb	r2, r2
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	440b      	add	r3, r1
 800617a:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006182:	3301      	adds	r3, #1
 8006184:	b2da      	uxtb	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	        modH->au8Buffer[  modH->u8BufferSize ] = lowByte(  modH->au16regs[ i ] );
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006190:	8a7b      	ldrh	r3, [r7, #18]
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	4413      	add	r3, r2
 8006196:	881a      	ldrh	r2, [r3, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800619e:	4619      	mov	r1, r3
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	440b      	add	r3, r1
 80061a6:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80061ae:	3301      	adds	r3, #1
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80061b8:	8a7b      	ldrh	r3, [r7, #18]
 80061ba:	3301      	adds	r3, #1
 80061bc:	827b      	strh	r3, [r7, #18]
 80061be:	88bb      	ldrh	r3, [r7, #4]
 80061c0:	8a7a      	ldrh	r2, [r7, #18]
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d3ca      	bcc.n	800615c <SendQuery+0x240>
	    }
	    break;
 80061c6:	bf00      	nop
	}

	xSemaphoreGive(modH->ModBusSphrHandle);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80061ce:	2300      	movs	r3, #0
 80061d0:	2200      	movs	r2, #0
 80061d2:	2100      	movs	r1, #0
 80061d4:	f7fc fe66 	bl	8002ea4 <xQueueGenericSend>

	sendTxBuffer(modH);
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 fbe3 	bl	80069a4 <sendTxBuffer>
	modH->i8state = COM_WAITING;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	modH->i8lastError = 0;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2200      	movs	r2, #0
 80061ea:	749a      	strb	r2, [r3, #18]
	return 0;
 80061ec:	2300      	movs	r3, #0


}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3718      	adds	r7, #24
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop

080061f8 <StartTaskModbusMaster>:




void StartTaskModbusMaster(void *argument)
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b08a      	sub	sp, #40	; 0x28
 80061fc:	af02      	add	r7, sp, #8
 80061fe:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	61fb      	str	r3, [r7, #28]
  modbus_t telegram;

  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006208:	f107 0108 	add.w	r1, r7, #8
 800620c:	f04f 32ff 	mov.w	r2, #4294967295
 8006210:	4618      	mov	r0, r3
 8006212:	f7fc ffd5 	bl	80031c0 <xQueueReceive>

	  /*Format and Send query */
	  SendQuery(modH, telegram);
 8006216:	f107 0308 	add.w	r3, r7, #8
 800621a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800621c:	69f8      	ldr	r0, [r7, #28]
 800621e:	f7ff fe7d 	bl	8005f1c <SendQuery>

	  /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
	  ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8006222:	f04f 31ff 	mov.w	r1, #4294967295
 8006226:	2001      	movs	r0, #1
 8006228:	f7fe fb40 	bl	80048ac <ulTaskNotifyTake>
 800622c:	61b8      	str	r0, [r7, #24]
	  modH->i8lastError = 0;
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	2200      	movs	r2, #0
 8006232:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue == NO_REPLY)
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	2bff      	cmp	r3, #255	; 0xff
 8006238:	d10f      	bne.n	800625a <StartTaskModbusMaster+0x62>
      {
    	  modH->i8state = COM_IDLE;
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	2200      	movs	r2, #0
 800623e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
    	  modH->i8lastError = NO_REPLY;
 8006242:	69fb      	ldr	r3, [r7, #28]
 8006244:	22ff      	movs	r2, #255	; 0xff
 8006246:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800624e:	3301      	adds	r3, #1
 8006250:	b29a      	uxth	r2, r3
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    	  continue;
 8006258:	e09a      	b.n	8006390 <StartTaskModbusMaster+0x198>
      }

	  modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800625e:	4618      	mov	r0, r3
 8006260:	f7fd f992 	bl	8003588 <uxQueueMessagesWaiting>
 8006264:	4603      	mov	r3, r0
 8006266:	b2da      	uxtb	r2, r3
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	  int8_t i8state = getRxBuffer(modH);
 800626e:	69f8      	ldr	r0, [r7, #28]
 8006270:	f000 f97c 	bl	800656c <getRxBuffer>
 8006274:	4603      	mov	r3, r0
 8006276:	75fb      	strb	r3, [r7, #23]
	  //modH->u8lastError = i8state;

	  if (i8state < 6){
 8006278:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800627c:	2b05      	cmp	r3, #5
 800627e:	dc1d      	bgt.n	80062bc <StartTaskModbusMaster+0xc4>
		  //The size of the frame is invalid
		  xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006284:	2100      	movs	r1, #0
 8006286:	4618      	mov	r0, r3
 8006288:	f7fc fc6c 	bl	8002b64 <xQueueGenericReset>
		  modH->i8state = COM_IDLE;
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		  modH->i8lastError = ERR_BAD_SIZE;
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	22fa      	movs	r2, #250	; 0xfa
 8006298:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 800629a:	69fb      	ldr	r3, [r7, #28]
 800629c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80062a0:	3301      	adds	r3, #1
 80062a2:	b29a      	uxth	r2, r3
 80062a4:	69fb      	ldr	r3, [r7, #28]
 80062a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		  xSemaphoreGive(modH->ModBusSphrHandle);
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80062b0:	2300      	movs	r3, #0
 80062b2:	2200      	movs	r2, #0
 80062b4:	2100      	movs	r1, #0
 80062b6:	f7fc fdf5 	bl	8002ea4 <xQueueGenericSend>
		  continue;
 80062ba:	e069      	b.n	8006390 <StartTaskModbusMaster+0x198>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80062c2:	2300      	movs	r3, #0
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	2300      	movs	r3, #0
 80062c8:	2200      	movs	r2, #0
 80062ca:	2103      	movs	r1, #3
 80062cc:	f7fe fd8e 	bl	8004dec <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  uint8_t u8exception = validateAnswer(modH);
 80062d0:	69f8      	ldr	r0, [r7, #28]
 80062d2:	f000 f8dd 	bl	8006490 <validateAnswer>
 80062d6:	4603      	mov	r3, r0
 80062d8:	75bb      	strb	r3, [r7, #22]
	  if (u8exception != 0)
 80062da:	7dbb      	ldrb	r3, [r7, #22]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d00c      	beq.n	80062fa <StartTaskModbusMaster+0x102>
	  {
		 modH->i8state = COM_IDLE;
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		 xSemaphoreGive(modH->ModBusSphrHandle);
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80062ee:	2300      	movs	r3, #0
 80062f0:	2200      	movs	r2, #0
 80062f2:	2100      	movs	r1, #0
 80062f4:	f7fc fdd6 	bl	8002ea4 <xQueueGenericSend>
	     continue;
 80062f8:	e04a      	b.n	8006390 <StartTaskModbusMaster+0x198>
	  }



	  modH->i8lastError = u8exception;
 80062fa:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006308:	f04f 31ff 	mov.w	r1, #4294967295
 800630c:	4618      	mov	r0, r3
 800630e:	f7fd f833 	bl	8003378 <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->au8Buffer[ FUNC ] )
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	7d1b      	ldrb	r3, [r3, #20]
 8006316:	3b01      	subs	r3, #1
 8006318:	2b0f      	cmp	r3, #15
 800631a:	d82b      	bhi.n	8006374 <StartTaskModbusMaster+0x17c>
 800631c:	a201      	add	r2, pc, #4	; (adr r2, 8006324 <StartTaskModbusMaster+0x12c>)
 800631e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006322:	bf00      	nop
 8006324:	08006365 	.word	0x08006365
 8006328:	08006365 	.word	0x08006365
 800632c:	0800636d 	.word	0x0800636d
 8006330:	0800636d 	.word	0x0800636d
 8006334:	08006375 	.word	0x08006375
 8006338:	08006375 	.word	0x08006375
 800633c:	08006375 	.word	0x08006375
 8006340:	08006375 	.word	0x08006375
 8006344:	08006375 	.word	0x08006375
 8006348:	08006375 	.word	0x08006375
 800634c:	08006375 	.word	0x08006375
 8006350:	08006375 	.word	0x08006375
 8006354:	08006375 	.word	0x08006375
 8006358:	08006375 	.word	0x08006375
 800635c:	08006375 	.word	0x08006375
 8006360:	08006375 	.word	0x08006375
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to au16regs buffer
	      get_FC1(modH);
 8006364:	69f8      	ldr	r0, [r7, #28]
 8006366:	f000 f815 	bl	8006394 <get_FC1>
	      break;
 800636a:	e004      	b.n	8006376 <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to au16regs buffer
	      get_FC3(modH);
 800636c:	69f8      	ldr	r0, [r7, #28]
 800636e:	f000 f863 	bl	8006438 <get_FC3>
	      break;
 8006372:	e000      	b.n	8006376 <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8006374:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	2200      	movs	r2, #0
 800637a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8006384:	2300      	movs	r3, #0
 8006386:	2200      	movs	r2, #0
 8006388:	2100      	movs	r1, #0
 800638a:	f7fc fd8b 	bl	8002ea4 <xQueueGenericSend>
	  //return i8state;
	  continue;
 800638e:	bf00      	nop
  {
 8006390:	e738      	b.n	8006204 <StartTaskModbusMaster+0xc>
 8006392:	bf00      	nop

08006394 <get_FC1>:
 *
 * @ingroup register
 * TODO: finish its implementation
 */
void get_FC1(modbusHandler_t *modH)
{
 8006394:	b590      	push	{r4, r7, lr}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800639c:	2303      	movs	r3, #3
 800639e:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 80063a0:	2300      	movs	r3, #0
 80063a2:	73fb      	strb	r3, [r7, #15]
 80063a4:	e03f      	b.n	8006426 <get_FC1+0x92>

        if(i%2)
 80063a6:	7bfb      	ldrb	r3, [r7, #15]
 80063a8:	f003 0301 	and.w	r3, r3, #1
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d01a      	beq.n	80063e8 <get_FC1+0x54>
        {
        	modH->au16regs[i/2]= word(modH->au8Buffer[i+u8byte], lowByte(modH->au16regs[i/2]));
 80063b2:	7bfa      	ldrb	r2, [r7, #15]
 80063b4:	7bbb      	ldrb	r3, [r7, #14]
 80063b6:	4413      	add	r3, r2
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	4413      	add	r3, r2
 80063bc:	7cd8      	ldrb	r0, [r3, #19]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
 80063c4:	085b      	lsrs	r3, r3, #1
 80063c6:	b2db      	uxtb	r3, r3
 80063c8:	005b      	lsls	r3, r3, #1
 80063ca:	4413      	add	r3, r2
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	b2d9      	uxtb	r1, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	085b      	lsrs	r3, r3, #1
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	005b      	lsls	r3, r3, #1
 80063dc:	18d4      	adds	r4, r2, r3
 80063de:	f000 fa6b 	bl	80068b8 <word>
 80063e2:	4603      	mov	r3, r0
 80063e4:	8023      	strh	r3, [r4, #0]
 80063e6:	e01b      	b.n	8006420 <get_FC1+0x8c>
        }
        else
        {

        	modH->au16regs[i/2]= word(highByte(modH->au16regs[i/2]), modH->au8Buffer[i+u8byte]);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
 80063ee:	085b      	lsrs	r3, r3, #1
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	005b      	lsls	r3, r3, #1
 80063f4:	4413      	add	r3, r2
 80063f6:	881b      	ldrh	r3, [r3, #0]
 80063f8:	0a1b      	lsrs	r3, r3, #8
 80063fa:	b29b      	uxth	r3, r3
 80063fc:	b2d8      	uxtb	r0, r3
 80063fe:	7bfa      	ldrb	r2, [r7, #15]
 8006400:	7bbb      	ldrb	r3, [r7, #14]
 8006402:	4413      	add	r3, r2
 8006404:	687a      	ldr	r2, [r7, #4]
 8006406:	4413      	add	r3, r2
 8006408:	7cd9      	ldrb	r1, [r3, #19]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	085b      	lsrs	r3, r3, #1
 8006412:	b2db      	uxtb	r3, r3
 8006414:	005b      	lsls	r3, r3, #1
 8006416:	18d4      	adds	r4, r2, r3
 8006418:	f000 fa4e 	bl	80068b8 <word>
 800641c:	4603      	mov	r3, r0
 800641e:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	3301      	adds	r3, #1
 8006424:	73fb      	strb	r3, [r7, #15]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	7d5b      	ldrb	r3, [r3, #21]
 800642a:	7bfa      	ldrb	r2, [r7, #15]
 800642c:	429a      	cmp	r2, r3
 800642e:	d3ba      	bcc.n	80063a6 <get_FC1+0x12>
        }

     }
}
 8006430:	bf00      	nop
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	bd90      	pop	{r4, r7, pc}

08006438 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8006438:	b590      	push	{r4, r7, lr}
 800643a:	b085      	sub	sp, #20
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8006440:	2303      	movs	r3, #3
 8006442:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8006444:	2300      	movs	r3, #0
 8006446:	73bb      	strb	r3, [r7, #14]
 8006448:	e017      	b.n	800647a <get_FC3+0x42>
    {
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 800644a:	7bfb      	ldrb	r3, [r7, #15]
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	4413      	add	r3, r2
 8006450:	7cd8      	ldrb	r0, [r3, #19]
 8006452:	7bfb      	ldrb	r3, [r7, #15]
 8006454:	3301      	adds	r3, #1
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	4413      	add	r3, r2
 800645a:	7cd9      	ldrb	r1, [r3, #19]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006460:	7bbb      	ldrb	r3, [r7, #14]
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	18d4      	adds	r4, r2, r3
 8006466:	f000 fa27 	bl	80068b8 <word>
 800646a:	4603      	mov	r3, r0
 800646c:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 800646e:	7bfb      	ldrb	r3, [r7, #15]
 8006470:	3302      	adds	r3, #2
 8006472:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8006474:	7bbb      	ldrb	r3, [r7, #14]
 8006476:	3301      	adds	r3, #1
 8006478:	73bb      	strb	r3, [r7, #14]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	7d5b      	ldrb	r3, [r3, #21]
 800647e:	085b      	lsrs	r3, r3, #1
 8006480:	b2db      	uxtb	r3, r3
 8006482:	7bba      	ldrb	r2, [r7, #14]
 8006484:	429a      	cmp	r2, r3
 8006486:	d3e0      	bcc.n	800644a <get_FC3+0x12>
    }
}
 8006488:	bf00      	nop
 800648a:	3714      	adds	r7, #20
 800648c:	46bd      	mov	sp, r7
 800648e:	bd90      	pop	{r4, r7, pc}

08006490 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc
    uint16_t u16MsgCRC =
        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800649e:	3b02      	subs	r3, #2
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	4413      	add	r3, r2
 80064a4:	7cdb      	ldrb	r3, [r3, #19]
 80064a6:	021b      	lsls	r3, r3, #8
         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80064a8:	b21a      	sxth	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80064b0:	3b01      	subs	r3, #1
 80064b2:	6879      	ldr	r1, [r7, #4]
 80064b4:	440b      	add	r3, r1
 80064b6:	7cdb      	ldrb	r3, [r3, #19]
 80064b8:	b21b      	sxth	r3, r3
 80064ba:	4313      	orrs	r3, r2
 80064bc:	b21b      	sxth	r3, r3
    uint16_t u16MsgCRC =
 80064be:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->au8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f103 0213 	add.w	r2, r3, #19
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80064cc:	3b02      	subs	r3, #2
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	4619      	mov	r1, r3
 80064d2:	4610      	mov	r0, r2
 80064d4:	f000 fa02 	bl	80068dc <calcCRC>
 80064d8:	4603      	mov	r3, r0
 80064da:	461a      	mov	r2, r3
 80064dc:	89bb      	ldrh	r3, [r7, #12]
 80064de:	4293      	cmp	r3, r2
 80064e0:	d009      	beq.n	80064f6 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80064e8:	3301      	adds	r3, #1
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return NO_REPLY;
 80064f2:	23ff      	movs	r3, #255	; 0xff
 80064f4:	e034      	b.n	8006560 <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->au8Buffer[ FUNC ] & 0x80) != 0)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	7d1b      	ldrb	r3, [r3, #20]
 80064fa:	b25b      	sxtb	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	da09      	bge.n	8006514 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006506:	3301      	adds	r3, #1
 8006508:	b29a      	uxth	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return ERR_EXCEPTION;
 8006510:	23fb      	movs	r3, #251	; 0xfb
 8006512:	e025      	b.n	8006560 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 8006514:	2300      	movs	r3, #0
 8006516:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8006518:	2300      	movs	r3, #0
 800651a:	73bb      	strb	r3, [r7, #14]
 800651c:	e00c      	b.n	8006538 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->au8Buffer[FUNC])
 800651e:	7bbb      	ldrb	r3, [r7, #14]
 8006520:	4a11      	ldr	r2, [pc, #68]	; (8006568 <validateAnswer+0xd8>)
 8006522:	5cd2      	ldrb	r2, [r2, r3]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	7d1b      	ldrb	r3, [r3, #20]
 8006528:	429a      	cmp	r2, r3
 800652a:	d102      	bne.n	8006532 <validateAnswer+0xa2>
        {
            isSupported = 1;
 800652c:	2301      	movs	r3, #1
 800652e:	73fb      	strb	r3, [r7, #15]
            break;
 8006530:	e005      	b.n	800653e <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8006532:	7bbb      	ldrb	r3, [r7, #14]
 8006534:	3301      	adds	r3, #1
 8006536:	73bb      	strb	r3, [r7, #14]
 8006538:	7bbb      	ldrb	r3, [r7, #14]
 800653a:	2b07      	cmp	r3, #7
 800653c:	d9ef      	bls.n	800651e <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800653e:	7bfb      	ldrb	r3, [r7, #15]
 8006540:	f083 0301 	eor.w	r3, r3, #1
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d009      	beq.n	800655e <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006550:	3301      	adds	r3, #1
 8006552:	b29a      	uxth	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return EXC_FUNC_CODE;
 800655a:	2301      	movs	r3, #1
 800655c:	e000      	b.n	8006560 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3710      	adds	r7, #16
 8006564:	46bd      	mov	sp, r7
 8006566:	bd80      	pop	{r7, pc}
 8006568:	08007288 	.word	0x08007288

0800656c <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int8_t getRxBuffer(modbusHandler_t *modH)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b084      	sub	sp, #16
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
    bool bBuffOverflow = false;
 8006574:	2300      	movs	r3, #0
 8006576:	72fb      	strb	r3, [r7, #11]
    int i;
    if (modH->EN_Port)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d007      	beq.n	8006590 <getRxBuffer+0x24>
    {
    	//digitalWrite( u8txenpin, LOW );
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	68d8      	ldr	r0, [r3, #12]
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	8a1b      	ldrh	r3, [r3, #16]
 8006588:	2200      	movs	r2, #0
 800658a:	4619      	mov	r1, r3
 800658c:	f7fa fd24 	bl	8000fd8 <HAL_GPIO_WritePin>
    }


    modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006594:	4618      	mov	r0, r3
 8006596:	f7fc fff7 	bl	8003588 <uxQueueMessagesWaiting>
 800659a:	4603      	mov	r3, r0
 800659c:	b2da      	uxtb	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    for(i = 0; i<  modH->u8BufferSize; i++ )
 80065a4:	2300      	movs	r3, #0
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	e00d      	b.n	80065c6 <getRxBuffer+0x5a>
   	{
   		  xQueueReceive(modH->QueueModbusHandle, &modH->au8Buffer[i], 0);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	3310      	adds	r3, #16
 80065b2:	687a      	ldr	r2, [r7, #4]
 80065b4:	4413      	add	r3, r2
 80065b6:	3303      	adds	r3, #3
 80065b8:	2200      	movs	r2, #0
 80065ba:	4619      	mov	r1, r3
 80065bc:	f7fc fe00 	bl	80031c0 <xQueueReceive>
    for(i = 0; i<  modH->u8BufferSize; i++ )
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3301      	adds	r3, #1
 80065c4:	60fb      	str	r3, [r7, #12]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80065cc:	461a      	mov	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	4293      	cmp	r3, r2
 80065d2:	dbea      	blt.n	80065aa <getRxBuffer+0x3e>
   	}

    modH->u16InCnt++;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065da:	3301      	adds	r3, #1
 80065dc:	b29a      	uxth	r2, r3
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c


    if (bBuffOverflow)
 80065e4:	7afb      	ldrb	r3, [r7, #11]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <getRxBuffer+0x94>
    {
    	modH->u16errCnt++;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80065f0:	3301      	adds	r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return ERR_BUFF_OVERFLOW;  //using queues this will not happen
 80065fa:	f06f 0302 	mvn.w	r3, #2
 80065fe:	e003      	b.n	8006608 <getRxBuffer+0x9c>
    }
    return modH->u8BufferSize;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006606:	b25b      	sxtb	r3, r3
}
 8006608:	4618      	mov	r0, r3
 800660a:	3710      	adds	r7, #16
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}

08006610 <HAL_UART_RxCpltCallback>:
 * This is the callback for HAL interrupt of UART RX
 *
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8006610:	b590      	push	{r4, r7, lr}
 8006612:	b087      	sub	sp, #28
 8006614:	af02      	add	r7, sp, #8
 8006616:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006618:	2300      	movs	r3, #0
 800661a:	60bb      	str	r3, [r7, #8]

    int i;
    for (i = 0; i < numberHandlers; i++ )
 800661c:	2300      	movs	r3, #0
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	e03b      	b.n	800669a <HAL_UART_RxCpltCallback+0x8a>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8006622:	4a23      	ldr	r2, [pc, #140]	; (80066b0 <HAL_UART_RxCpltCallback+0xa0>)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	687a      	ldr	r2, [r7, #4]
 800662e:	429a      	cmp	r2, r3
 8006630:	d130      	bne.n	8006694 <HAL_UART_RxCpltCallback+0x84>
    	{
    		xQueueSendToBackFromISR( mHandlers[i]->QueueModbusHandle, &mHandlers[i]->dataRX, pdFALSE);
 8006632:	4a1f      	ldr	r2, [pc, #124]	; (80066b0 <HAL_UART_RxCpltCallback+0xa0>)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800663a:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800663c:	4a1c      	ldr	r2, [pc, #112]	; (80066b0 <HAL_UART_RxCpltCallback+0xa0>)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006644:	f103 0171 	add.w	r1, r3, #113	; 0x71
 8006648:	2300      	movs	r3, #0
 800664a:	2200      	movs	r2, #0
 800664c:	f7fc fd24 	bl	8003098 <xQueueGenericSendFromISR>
    		HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8006650:	4a17      	ldr	r2, [pc, #92]	; (80066b0 <HAL_UART_RxCpltCallback+0xa0>)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006658:	6858      	ldr	r0, [r3, #4]
 800665a:	4a15      	ldr	r2, [pc, #84]	; (80066b0 <HAL_UART_RxCpltCallback+0xa0>)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006662:	3371      	adds	r3, #113	; 0x71
 8006664:	2201      	movs	r2, #1
 8006666:	4619      	mov	r1, r3
 8006668:	f7fb fc17 	bl	8001e9a <HAL_UART_Receive_IT>
    		xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800666c:	4a10      	ldr	r2, [pc, #64]	; (80066b0 <HAL_UART_RxCpltCallback+0xa0>)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006674:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8006678:	f7fd fc54 	bl	8003f24 <xTaskGetTickCountFromISR>
 800667c:	4601      	mov	r1, r0
 800667e:	f107 0208 	add.w	r2, r7, #8
 8006682:	2300      	movs	r3, #0
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	4613      	mov	r3, r2
 8006688:	460a      	mov	r2, r1
 800668a:	2107      	movs	r1, #7
 800668c:	4620      	mov	r0, r4
 800668e:	f7fe fbad 	bl	8004dec <xTimerGenericCommand>
    		break;
 8006692:	e008      	b.n	80066a6 <HAL_UART_RxCpltCallback+0x96>
    for (i = 0; i < numberHandlers; i++ )
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	3301      	adds	r3, #1
 8006698:	60fb      	str	r3, [r7, #12]
 800669a:	4b06      	ldr	r3, [pc, #24]	; (80066b4 <HAL_UART_RxCpltCallback+0xa4>)
 800669c:	781b      	ldrb	r3, [r3, #0]
 800669e:	461a      	mov	r2, r3
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	4293      	cmp	r3, r2
 80066a4:	dbbd      	blt.n	8006622 <HAL_UART_RxCpltCallback+0x12>
    	}
    }


}
 80066a6:	bf00      	nop
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd90      	pop	{r4, r7, pc}
 80066ae:	bf00      	nop
 80066b0:	200024f4 	.word	0x200024f4
 80066b4:	200024ec 	.word	0x200024ec

080066b8 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc
	    uint16_t u16MsgCRC =
	        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80066c6:	3b02      	subs	r3, #2
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	4413      	add	r3, r2
 80066cc:	7cdb      	ldrb	r3, [r3, #19]
 80066ce:	021b      	lsls	r3, r3, #8
	         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80066d0:	b21a      	sxth	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80066d8:	3b01      	subs	r3, #1
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	440b      	add	r3, r1
 80066de:	7cdb      	ldrb	r3, [r3, #19]
 80066e0:	b21b      	sxth	r3, r3
 80066e2:	4313      	orrs	r3, r2
 80066e4:	b21b      	sxth	r3, r3
	    uint16_t u16MsgCRC =
 80066e6:	81bb      	strh	r3, [r7, #12]
	    if ( calcCRC( modH->au8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	f103 0213 	add.w	r2, r3, #19
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80066f4:	3b02      	subs	r3, #2
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	4619      	mov	r1, r3
 80066fa:	4610      	mov	r0, r2
 80066fc:	f000 f8ee 	bl	80068dc <calcCRC>
 8006700:	4603      	mov	r3, r0
 8006702:	461a      	mov	r2, r3
 8006704:	89bb      	ldrh	r3, [r7, #12]
 8006706:	4293      	cmp	r3, r2
 8006708:	d009      	beq.n	800671e <validateRequest+0x66>
	    {
	    	modH->u16errCnt ++;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006710:	3301      	adds	r3, #1
 8006712:	b29a      	uxth	r2, r3
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	        return NO_REPLY;
 800671a:	23ff      	movs	r3, #255	; 0xff
 800671c:	e0c6      	b.n	80068ac <validateRequest+0x1f4>
	    }

	    // check fct code
	    bool isSupported = false;
 800671e:	2300      	movs	r3, #0
 8006720:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8006722:	2300      	movs	r3, #0
 8006724:	73bb      	strb	r3, [r7, #14]
 8006726:	e00c      	b.n	8006742 <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->au8Buffer[FUNC])
 8006728:	7bbb      	ldrb	r3, [r7, #14]
 800672a:	4a62      	ldr	r2, [pc, #392]	; (80068b4 <validateRequest+0x1fc>)
 800672c:	5cd2      	ldrb	r2, [r2, r3]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	7d1b      	ldrb	r3, [r3, #20]
 8006732:	429a      	cmp	r2, r3
 8006734:	d102      	bne.n	800673c <validateRequest+0x84>
	        {
	            isSupported = 1;
 8006736:	2301      	movs	r3, #1
 8006738:	73fb      	strb	r3, [r7, #15]
	            break;
 800673a:	e005      	b.n	8006748 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800673c:	7bbb      	ldrb	r3, [r7, #14]
 800673e:	3301      	adds	r3, #1
 8006740:	73bb      	strb	r3, [r7, #14]
 8006742:	7bbb      	ldrb	r3, [r7, #14]
 8006744:	2b07      	cmp	r3, #7
 8006746:	d9ef      	bls.n	8006728 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	f083 0301 	eor.w	r3, r3, #1
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d009      	beq.n	8006768 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800675a:	3301      	adds	r3, #1
 800675c:	b29a      	uxth	r2, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	        return EXC_FUNC_CODE;
 8006764:	2301      	movs	r3, #1
 8006766:	e0a1      	b.n	80068ac <validateRequest+0x1f4>
	    }

	    // check start address & nb range
	    uint16_t u16regs = 0;
 8006768:	2300      	movs	r3, #0
 800676a:	817b      	strh	r3, [r7, #10]
	    uint8_t u8regs;
	    switch ( modH->au8Buffer[ FUNC ] )
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	7d1b      	ldrb	r3, [r3, #20]
 8006770:	3b01      	subs	r3, #1
 8006772:	2b0f      	cmp	r3, #15
 8006774:	f200 8099 	bhi.w	80068aa <validateRequest+0x1f2>
 8006778:	a201      	add	r2, pc, #4	; (adr r2, 8006780 <validateRequest+0xc8>)
 800677a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677e:	bf00      	nop
 8006780:	080067c1 	.word	0x080067c1
 8006784:	080067c1 	.word	0x080067c1
 8006788:	0800685b 	.word	0x0800685b
 800678c:	0800685b 	.word	0x0800685b
 8006790:	08006809 	.word	0x08006809
 8006794:	08006833 	.word	0x08006833
 8006798:	080068ab 	.word	0x080068ab
 800679c:	080068ab 	.word	0x080068ab
 80067a0:	080068ab 	.word	0x080068ab
 80067a4:	080068ab 	.word	0x080068ab
 80067a8:	080068ab 	.word	0x080068ab
 80067ac:	080068ab 	.word	0x080068ab
 80067b0:	080068ab 	.word	0x080068ab
 80067b4:	080068ab 	.word	0x080068ab
 80067b8:	080067c1 	.word	0x080067c1
 80067bc:	0800685b 	.word	0x0800685b
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	7d5a      	ldrb	r2, [r3, #21]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	7d9b      	ldrb	r3, [r3, #22]
 80067c8:	4619      	mov	r1, r3
 80067ca:	4610      	mov	r0, r2
 80067cc:	f000 f874 	bl	80068b8 <word>
 80067d0:	4603      	mov	r3, r0
 80067d2:	091b      	lsrs	r3, r3, #4
 80067d4:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]) /16;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	7dda      	ldrb	r2, [r3, #23]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	7e1b      	ldrb	r3, [r3, #24]
 80067de:	4619      	mov	r1, r3
 80067e0:	4610      	mov	r0, r2
 80067e2:	f000 f869 	bl	80068b8 <word>
 80067e6:	4603      	mov	r3, r0
 80067e8:	091b      	lsrs	r3, r3, #4
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	897b      	ldrh	r3, [r7, #10]
 80067f0:	4413      	add	r3, r2
 80067f2:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 80067f4:	897b      	ldrh	r3, [r7, #10]
 80067f6:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80067fe:	7a7a      	ldrb	r2, [r7, #9]
 8006800:	429a      	cmp	r2, r3
 8006802:	d94b      	bls.n	800689c <validateRequest+0x1e4>
 8006804:	2302      	movs	r3, #2
 8006806:	e051      	b.n	80068ac <validateRequest+0x1f4>
	        break;
	    case MB_FC_WRITE_COIL:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	7d5a      	ldrb	r2, [r3, #21]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	7d9b      	ldrb	r3, [r3, #22]
 8006810:	4619      	mov	r1, r3
 8006812:	4610      	mov	r0, r2
 8006814:	f000 f850 	bl	80068b8 <word>
 8006818:	4603      	mov	r3, r0
 800681a:	091b      	lsrs	r3, r3, #4
 800681c:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 800681e:	897b      	ldrh	r3, [r7, #10]
 8006820:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006828:	7a7a      	ldrb	r2, [r7, #9]
 800682a:	429a      	cmp	r2, r3
 800682c:	d938      	bls.n	80068a0 <validateRequest+0x1e8>
 800682e:	2302      	movs	r3, #2
 8006830:	e03c      	b.n	80068ac <validateRequest+0x1f4>
	        break;
	    case MB_FC_WRITE_REGISTER :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	7d5a      	ldrb	r2, [r3, #21]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	7d9b      	ldrb	r3, [r3, #22]
 800683a:	4619      	mov	r1, r3
 800683c:	4610      	mov	r0, r2
 800683e:	f000 f83b 	bl	80068b8 <word>
 8006842:	4603      	mov	r3, r0
 8006844:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8006846:	897b      	ldrh	r3, [r7, #10]
 8006848:	727b      	strb	r3, [r7, #9]
	        if (u8regs >modH-> u8regsize) return EXC_ADDR_RANGE;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006850:	7a7a      	ldrb	r2, [r7, #9]
 8006852:	429a      	cmp	r2, r3
 8006854:	d926      	bls.n	80068a4 <validateRequest+0x1ec>
 8006856:	2302      	movs	r3, #2
 8006858:	e028      	b.n	80068ac <validateRequest+0x1f4>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	7d5a      	ldrb	r2, [r3, #21]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	7d9b      	ldrb	r3, [r3, #22]
 8006862:	4619      	mov	r1, r3
 8006864:	4610      	mov	r0, r2
 8006866:	f000 f827 	bl	80068b8 <word>
 800686a:	4603      	mov	r3, r0
 800686c:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	7dda      	ldrb	r2, [r3, #23]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	7e1b      	ldrb	r3, [r3, #24]
 8006876:	4619      	mov	r1, r3
 8006878:	4610      	mov	r0, r2
 800687a:	f000 f81d 	bl	80068b8 <word>
 800687e:	4603      	mov	r3, r0
 8006880:	461a      	mov	r2, r3
 8006882:	897b      	ldrh	r3, [r7, #10]
 8006884:	4413      	add	r3, r2
 8006886:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8006888:	897b      	ldrh	r3, [r7, #10]
 800688a:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8006892:	7a7a      	ldrb	r2, [r7, #9]
 8006894:	429a      	cmp	r2, r3
 8006896:	d907      	bls.n	80068a8 <validateRequest+0x1f0>
 8006898:	2302      	movs	r3, #2
 800689a:	e007      	b.n	80068ac <validateRequest+0x1f4>
	        break;
 800689c:	bf00      	nop
 800689e:	e004      	b.n	80068aa <validateRequest+0x1f2>
	        break;
 80068a0:	bf00      	nop
 80068a2:	e002      	b.n	80068aa <validateRequest+0x1f2>
	        break;
 80068a4:	bf00      	nop
 80068a6:	e000      	b.n	80068aa <validateRequest+0x1f2>
	        break;
 80068a8:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 80068aa:	2300      	movs	r3, #0

}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	08007288 	.word	0x08007288

080068b8 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b085      	sub	sp, #20
 80068bc:	af00      	add	r7, sp, #0
 80068be:	4603      	mov	r3, r0
 80068c0:	460a      	mov	r2, r1
 80068c2:	71fb      	strb	r3, [r7, #7]
 80068c4:	4613      	mov	r3, r2
 80068c6:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 80068c8:	79bb      	ldrb	r3, [r7, #6]
 80068ca:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 80068cc:	79fb      	ldrb	r3, [r7, #7]
 80068ce:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 80068d0:	89bb      	ldrh	r3, [r7, #12]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3714      	adds	r7, #20
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bc80      	pop	{r7}
 80068da:	4770      	bx	lr

080068dc <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 80068dc:	b480      	push	{r7}
 80068de:	b087      	sub	sp, #28
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	460b      	mov	r3, r1
 80068e6:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 80068e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068ec:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 80068ee:	2300      	movs	r3, #0
 80068f0:	74fb      	strb	r3, [r7, #19]
 80068f2:	e023      	b.n	800693c <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 80068f4:	7cfb      	ldrb	r3, [r7, #19]
 80068f6:	687a      	ldr	r2, [r7, #4]
 80068f8:	4413      	add	r3, r2
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	461a      	mov	r2, r3
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	4053      	eors	r3, r2
 8006902:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8006904:	2301      	movs	r3, #1
 8006906:	74bb      	strb	r3, [r7, #18]
 8006908:	e012      	b.n	8006930 <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	085b      	lsrs	r3, r3, #1
 8006916:	617b      	str	r3, [r7, #20]
            if (flag)
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <calcCRC+0x4e>
                temp ^= 0xA001;
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8006924:	f083 0301 	eor.w	r3, r3, #1
 8006928:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 800692a:	7cbb      	ldrb	r3, [r7, #18]
 800692c:	3301      	adds	r3, #1
 800692e:	74bb      	strb	r3, [r7, #18]
 8006930:	7cbb      	ldrb	r3, [r7, #18]
 8006932:	2b08      	cmp	r3, #8
 8006934:	d9e9      	bls.n	800690a <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8006936:	7cfb      	ldrb	r3, [r7, #19]
 8006938:	3301      	adds	r3, #1
 800693a:	74fb      	strb	r3, [r7, #19]
 800693c:	7cfa      	ldrb	r2, [r7, #19]
 800693e:	78fb      	ldrb	r3, [r7, #3]
 8006940:	429a      	cmp	r2, r3
 8006942:	d3d7      	bcc.n	80068f4 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	0a1b      	lsrs	r3, r3, #8
 8006948:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 800694a:	697b      	ldr	r3, [r7, #20]
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4313      	orrs	r3, r2
 8006952:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	b29b      	uxth	r3, r3
 8006958:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	b29b      	uxth	r3, r3

}
 800695e:	4618      	mov	r0, r3
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr

08006968 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	4603      	mov	r3, r0
 8006970:	6039      	str	r1, [r7, #0]
 8006972:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->au8Buffer[ FUNC ];  // get the original FUNC code
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	7d1b      	ldrb	r3, [r3, #20]
 8006978:	73fb      	strb	r3, [r7, #15]

    modH->au8Buffer[ ID ]      = modH->u8id;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	7a1a      	ldrb	r2, [r3, #8]
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	74da      	strb	r2, [r3, #19]
    modH->au8Buffer[ FUNC ]    = u8func + 0x80;
 8006982:	7bfb      	ldrb	r3, [r7, #15]
 8006984:	3b80      	subs	r3, #128	; 0x80
 8006986:	b2da      	uxtb	r2, r3
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	751a      	strb	r2, [r3, #20]
    modH->au8Buffer[ 2 ]       = u8exception;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	79fa      	ldrb	r2, [r7, #7]
 8006990:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	2203      	movs	r2, #3
 8006996:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 800699a:	bf00      	nop
 800699c:	3714      	adds	r7, #20
 800699e:	46bd      	mov	sp, r7
 80069a0:	bc80      	pop	{r7}
 80069a2:	4770      	bx	lr

080069a4 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
void sendTxBuffer(modbusHandler_t *modH)
{
 80069a4:	b590      	push	{r4, r7, lr}
 80069a6:	b087      	sub	sp, #28
 80069a8:	af02      	add	r7, sp, #8
 80069aa:	6078      	str	r0, [r7, #4]
    // append CRC to message
    uint16_t u16crc = calcCRC(modH->au8Buffer, modH->u8BufferSize);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f103 0213 	add.w	r2, r3, #19
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80069b8:	4619      	mov	r1, r3
 80069ba:	4610      	mov	r0, r2
 80069bc:	f7ff ff8e 	bl	80068dc <calcCRC>
 80069c0:	4603      	mov	r3, r0
 80069c2:	81fb      	strh	r3, [r7, #14]
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 80069c4:	89fb      	ldrh	r3, [r7, #14]
 80069c6:	0a1b      	lsrs	r3, r3, #8
 80069c8:	b29a      	uxth	r2, r3
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80069d0:	4619      	mov	r1, r3
 80069d2:	b2d2      	uxtb	r2, r2
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	440b      	add	r3, r1
 80069d8:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80069e0:	3301      	adds	r3, #1
 80069e2:	b2da      	uxtb	r2, r3
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80069f0:	4619      	mov	r1, r3
 80069f2:	89fb      	ldrh	r3, [r7, #14]
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	440b      	add	r3, r1
 80069fa:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006a02:	3301      	adds	r3, #1
 8006a04:	b2da      	uxtb	r2, r3
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    if (modH->EN_Port != NULL)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d007      	beq.n	8006a24 <sendTxBuffer+0x80>
    {
        // set RS485 transceiver to transmit mode
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	68d8      	ldr	r0, [r3, #12]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	8a1b      	ldrh	r3, [r3, #16]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	4619      	mov	r1, r3
 8006a20:	f7fa fada 	bl	8000fd8 <HAL_GPIO_WritePin>
    }

    // transfer buffer to serial line
    //port->write( au8Buffer, u8BufferSize );
    //HAL_UART_Transmit(modH->port, modH->au8Buffer , modH->u8BufferSize, 100);
    HAL_UART_Transmit_IT(modH->port, modH->au8Buffer,  modH->u8BufferSize);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6858      	ldr	r0, [r3, #4]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f103 0113 	add.w	r1, r3, #19
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	461a      	mov	r2, r3
 8006a38:	f7fb f9eb 	bl	8001e12 <HAL_UART_Transmit_IT>

    ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //wait notification from TXE interrupt
 8006a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8006a40:	2001      	movs	r0, #1
 8006a42:	f7fd ff33 	bl	80048ac <ulTaskNotifyTake>


     if (modH->EN_Port != NULL)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d018      	beq.n	8006a80 <sendTxBuffer+0xdc>
         //return RS485 transceiver to receive mode

    	 #if defined(STM32H745xx) || defined(STM32H743xx)
    	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
         #else
    	 while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8006a4e:	e007      	b.n	8006a60 <sendTxBuffer+0xbc>
		 #endif
    	 {
    		taskYIELD();
 8006a50:	4b1f      	ldr	r3, [pc, #124]	; (8006ad0 <sendTxBuffer+0x12c>)
 8006a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a56:	601a      	str	r2, [r3, #0]
 8006a58:	f3bf 8f4f 	dsb	sy
 8006a5c:	f3bf 8f6f 	isb	sy
    	 while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d0ef      	beq.n	8006a50 <sendTxBuffer+0xac>
    	 }
    	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	68d8      	ldr	r0, [r3, #12]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	8a1b      	ldrh	r3, [r3, #16]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	f7fa faac 	bl	8000fd8 <HAL_GPIO_WritePin>
     }

     xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a84:	2100      	movs	r1, #0
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7fc f86c 	bl	8002b64 <xQueueGenericReset>

     modH->u8BufferSize = 0;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2200      	movs	r2, #0
 8006a90:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

     // set timeout for master query
     if(modH->uiModbusType == MASTER_RTU )
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	2b04      	cmp	r3, #4
 8006a9a:	d10c      	bne.n	8006ab6 <sendTxBuffer+0x112>
     {
 		xTimerReset(modH->xTimerTimeout,0);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006aa2:	f7fd fa31 	bl	8003f08 <xTaskGetTickCount>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	2300      	movs	r3, #0
 8006aae:	2102      	movs	r1, #2
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	f7fe f99b 	bl	8004dec <xTimerGenericCommand>
     }

     // increase message counter
     modH->u16OutCnt++;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006abc:	3301      	adds	r3, #1
 8006abe:	b29a      	uxth	r2, r3
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

}
 8006ac6:	bf00      	nop
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd90      	pop	{r4, r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	e000ed04 	.word	0xe000ed04

08006ad4 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	7d5a      	ldrb	r2, [r3, #21]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	7d9b      	ldrb	r3, [r3, #22]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	f7ff fee6 	bl	80068b8 <word>
 8006aec:	4603      	mov	r3, r0
 8006aee:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	7dda      	ldrb	r2, [r3, #23]
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	7e1b      	ldrb	r3, [r3, #24]
 8006af8:	4619      	mov	r1, r3
 8006afa:	4610      	mov	r0, r2
 8006afc:	f7ff fedc 	bl	80068b8 <word>
 8006b00:	4603      	mov	r3, r0
 8006b02:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8006b04:	8a3b      	ldrh	r3, [r7, #16]
 8006b06:	08db      	lsrs	r3, r3, #3
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8006b0c:	8a3b      	ldrh	r3, [r7, #16]
 8006b0e:	f003 0307 	and.w	r3, r3, #7
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d002      	beq.n	8006b1e <process_FC1+0x4a>
 8006b18:	7dfb      	ldrb	r3, [r7, #23]
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	75fb      	strb	r3, [r7, #23]
    modH->au8Buffer[ ADD_HI ]  = u8bytesno;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	7dfa      	ldrb	r2, [r7, #23]
 8006b22:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2203      	movs	r2, #3
 8006b28:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    modH->au8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006b32:	461a      	mov	r2, r3
 8006b34:	7dfb      	ldrb	r3, [r7, #23]
 8006b36:	4413      	add	r3, r2
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	687a      	ldr	r2, [r7, #4]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	2200      	movs	r2, #0
 8006b40:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8006b42:	2300      	movs	r3, #0
 8006b44:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8006b46:	2300      	movs	r3, #0
 8006b48:	82bb      	strh	r3, [r7, #20]
 8006b4a:	e058      	b.n	8006bfe <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8006b4c:	8a7a      	ldrh	r2, [r7, #18]
 8006b4e:	8abb      	ldrh	r3, [r7, #20]
 8006b50:	4413      	add	r3, r2
 8006b52:	81bb      	strh	r3, [r7, #12]
        u8currentRegister = (uint8_t) (u16coil / 16);
 8006b54:	89bb      	ldrh	r3, [r7, #12]
 8006b56:	091b      	lsrs	r3, r3, #4
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	72fb      	strb	r3, [r7, #11]
        u8currentBit = (uint8_t) (u16coil % 16);
 8006b5c:	89bb      	ldrh	r3, [r7, #12]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	f003 030f 	and.w	r3, r3, #15
 8006b64:	72bb      	strb	r3, [r7, #10]

        bitWrite(
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006b6a:	7afb      	ldrb	r3, [r7, #11]
 8006b6c:	005b      	lsls	r3, r3, #1
 8006b6e:	4413      	add	r3, r2
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	461a      	mov	r2, r3
 8006b74:	7abb      	ldrb	r3, [r7, #10]
 8006b76:	fa42 f303 	asr.w	r3, r2, r3
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d014      	beq.n	8006bac <process_FC1+0xd8>
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006b88:	461a      	mov	r2, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	7cda      	ldrb	r2, [r3, #19]
 8006b90:	7dbb      	ldrb	r3, [r7, #22]
 8006b92:	2101      	movs	r1, #1
 8006b94:	fa01 f303 	lsl.w	r3, r1, r3
 8006b98:	b2db      	uxtb	r3, r3
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	f891 1053 	ldrb.w	r1, [r1, #83]	; 0x53
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	b2da      	uxtb	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	440b      	add	r3, r1
 8006ba8:	74da      	strb	r2, [r3, #19]
 8006baa:	e015      	b.n	8006bd8 <process_FC1+0x104>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	7cda      	ldrb	r2, [r3, #19]
 8006bba:	7dbb      	ldrb	r3, [r7, #22]
 8006bbc:	2101      	movs	r1, #1
 8006bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8006bc2:	b2db      	uxtb	r3, r3
 8006bc4:	43db      	mvns	r3, r3
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	6879      	ldr	r1, [r7, #4]
 8006bca:	f891 1053 	ldrb.w	r1, [r1, #83]	; 0x53
 8006bce:	4013      	ands	r3, r2
 8006bd0:	b2da      	uxtb	r2, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	440b      	add	r3, r1
 8006bd6:	74da      	strb	r2, [r3, #19]
        	modH->au8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->au16regs[ u8currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8006bd8:	7dbb      	ldrb	r3, [r7, #22]
 8006bda:	3301      	adds	r3, #1
 8006bdc:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8006bde:	7dbb      	ldrb	r3, [r7, #22]
 8006be0:	2b07      	cmp	r3, #7
 8006be2:	d909      	bls.n	8006bf8 <process_FC1+0x124>
        {
            u8bitsno = 0;
 8006be4:	2300      	movs	r3, #0
 8006be6:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006bee:	3301      	adds	r3, #1
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8006bf8:	8abb      	ldrh	r3, [r7, #20]
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	82bb      	strh	r3, [r7, #20]
 8006bfe:	8aba      	ldrh	r2, [r7, #20]
 8006c00:	8a3b      	ldrh	r3, [r7, #16]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d3a2      	bcc.n	8006b4c <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 8006c06:	8a3b      	ldrh	r3, [r7, #16]
 8006c08:	f003 0307 	and.w	r3, r3, #7
 8006c0c:	b29b      	uxth	r3, r3
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d007      	beq.n	8006c22 <process_FC1+0x14e>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006c18:	3301      	adds	r3, #1
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize = modH->u8BufferSize +2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006c28:	3302      	adds	r3, #2
 8006c2a:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f7ff feb9 	bl	80069a4 <sendTxBuffer>
    return u8CopyBufferSize;
 8006c32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}

08006c3e <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 8006c3e:	b580      	push	{r7, lr}
 8006c40:	b084      	sub	sp, #16
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]

    uint8_t u8StartAdd = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	7d5a      	ldrb	r2, [r3, #21]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	7d9b      	ldrb	r3, [r3, #22]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	4610      	mov	r0, r2
 8006c52:	f7ff fe31 	bl	80068b8 <word>
 8006c56:	4603      	mov	r3, r0
 8006c58:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	7dda      	ldrb	r2, [r3, #23]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	7e1b      	ldrb	r3, [r3, #24]
 8006c62:	4619      	mov	r1, r3
 8006c64:	4610      	mov	r0, r2
 8006c66:	f7ff fe27 	bl	80068b8 <word>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;

    modH->au8Buffer[ 2 ]       = u8regsno * 2;
 8006c6e:	7b7b      	ldrb	r3, [r7, #13]
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	b2da      	uxtb	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2203      	movs	r2, #3
 8006c7c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8006c80:	7bbb      	ldrb	r3, [r7, #14]
 8006c82:	73fb      	strb	r3, [r7, #15]
 8006c84:	e030      	b.n	8006ce8 <process_FC3+0xaa>
    {
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	005b      	lsls	r3, r3, #1
 8006c8e:	4413      	add	r3, r2
 8006c90:	881b      	ldrh	r3, [r3, #0]
 8006c92:	0a1b      	lsrs	r3, r3, #8
 8006c94:	b29a      	uxth	r2, r3
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	b2d2      	uxtb	r2, r2
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	440b      	add	r3, r1
 8006ca4:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006cac:	3301      	adds	r3, #1
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    	modH->au8Buffer[ modH->u8BufferSize ] = lowByte(modH->au16regs[i]);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006cba:	7bfb      	ldrb	r3, [r7, #15]
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	4413      	add	r3, r2
 8006cc0:	881a      	ldrh	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006cc8:	4619      	mov	r1, r3
 8006cca:	b2d2      	uxtb	r2, r2
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	440b      	add	r3, r1
 8006cd0:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006cd8:	3301      	adds	r3, #1
 8006cda:	b2da      	uxtb	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	73fb      	strb	r3, [r7, #15]
 8006ce8:	7bfa      	ldrb	r2, [r7, #15]
 8006cea:	7bb9      	ldrb	r1, [r7, #14]
 8006cec:	7b7b      	ldrb	r3, [r7, #13]
 8006cee:	440b      	add	r3, r1
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	dbc8      	blt.n	8006c86 <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006cfa:	3302      	adds	r3, #2
 8006cfc:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	f7ff fe50 	bl	80069a4 <sendTxBuffer>

    return u8CopyBufferSize;
 8006d04:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3710      	adds	r7, #16
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	7d5a      	ldrb	r2, [r3, #21]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	7d9b      	ldrb	r3, [r3, #22]
 8006d20:	4619      	mov	r1, r3
 8006d22:	4610      	mov	r0, r2
 8006d24:	f7ff fdc8 	bl	80068b8 <word>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u8currentRegister = (uint8_t) (u16coil / 16);
 8006d2c:	89fb      	ldrh	r3, [r7, #14]
 8006d2e:	091b      	lsrs	r3, r3, #4
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	737b      	strb	r3, [r7, #13]
    u8currentBit = (uint8_t) (u16coil % 16);
 8006d34:	89fb      	ldrh	r3, [r7, #14]
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	f003 030f 	and.w	r3, r3, #15
 8006d3c:	733b      	strb	r3, [r7, #12]

    // write to coil
    bitWrite(
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	7ddb      	ldrb	r3, [r3, #23]
 8006d42:	2bff      	cmp	r3, #255	; 0xff
 8006d44:	d113      	bne.n	8006d6e <process_FC5+0x5e>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d4a:	7b7b      	ldrb	r3, [r7, #13]
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	4413      	add	r3, r2
 8006d50:	8819      	ldrh	r1, [r3, #0]
 8006d52:	7b3b      	ldrb	r3, [r7, #12]
 8006d54:	2201      	movs	r2, #1
 8006d56:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5a:	b29a      	uxth	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006d60:	7b7b      	ldrb	r3, [r7, #13]
 8006d62:	005b      	lsls	r3, r3, #1
 8006d64:	4403      	add	r3, r0
 8006d66:	430a      	orrs	r2, r1
 8006d68:	b292      	uxth	r2, r2
 8006d6a:	801a      	strh	r2, [r3, #0]
 8006d6c:	e014      	b.n	8006d98 <process_FC5+0x88>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006d72:	7b7b      	ldrb	r3, [r7, #13]
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	4413      	add	r3, r2
 8006d78:	8819      	ldrh	r1, [r3, #0]
 8006d7a:	7b3b      	ldrb	r3, [r7, #12]
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	43db      	mvns	r3, r3
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006d8c:	7b7b      	ldrb	r3, [r7, #13]
 8006d8e:	005b      	lsls	r3, r3, #1
 8006d90:	4403      	add	r3, r0
 8006d92:	400a      	ands	r2, r1
 8006d94:	b292      	uxth	r2, r2
 8006d96:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->au8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2206      	movs	r2, #6
 8006d9c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006da6:	3302      	adds	r3, #2
 8006da8:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff fdfa 	bl	80069a4 <sendTxBuffer>

    return u8CopyBufferSize;
 8006db0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]

    uint8_t u8add = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	7d5a      	ldrb	r2, [r3, #21]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	7d9b      	ldrb	r3, [r3, #22]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4610      	mov	r0, r2
 8006dd0:	f7ff fd72 	bl	80068b8 <word>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	73fb      	strb	r3, [r7, #15]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	7dda      	ldrb	r2, [r3, #23]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	7e1b      	ldrb	r3, [r3, #24]
 8006de0:	4619      	mov	r1, r3
 8006de2:	4610      	mov	r0, r2
 8006de4:	f7ff fd68 	bl	80068b8 <word>
 8006de8:	4603      	mov	r3, r0
 8006dea:	81bb      	strh	r3, [r7, #12]

    modH->au16regs[ u8add ] = u16val;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	4413      	add	r3, r2
 8006df6:	89ba      	ldrh	r2, [r7, #12]
 8006df8:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2206      	movs	r2, #6
 8006dfe:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    u8CopyBufferSize = modH->u8BufferSize +2;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006e08:	3302      	adds	r3, #2
 8006e0a:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff fdc9 	bl	80069a4 <sendTxBuffer>

    return u8CopyBufferSize;
 8006e12:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3710      	adds	r7, #16
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}

08006e1e <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 8006e1e:	b580      	push	{r7, lr}
 8006e20:	b086      	sub	sp, #24
 8006e22:	af00      	add	r7, sp, #0
 8006e24:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	7d5a      	ldrb	r2, [r3, #21]
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	7d9b      	ldrb	r3, [r3, #22]
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4610      	mov	r0, r2
 8006e32:	f7ff fd41 	bl	80068b8 <word>
 8006e36:	4603      	mov	r3, r0
 8006e38:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	7dda      	ldrb	r2, [r3, #23]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	7e1b      	ldrb	r3, [r3, #24]
 8006e42:	4619      	mov	r1, r3
 8006e44:	4610      	mov	r0, r2
 8006e46:	f7ff fd37 	bl	80068b8 <word>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 8006e52:	2307      	movs	r3, #7
 8006e54:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8006e56:	2300      	movs	r3, #0
 8006e58:	82bb      	strh	r3, [r7, #20]
 8006e5a:	e055      	b.n	8006f08 <process_FC15+0xea>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8006e5c:	8a7a      	ldrh	r2, [r7, #18]
 8006e5e:	8abb      	ldrh	r3, [r7, #20]
 8006e60:	4413      	add	r3, r2
 8006e62:	81bb      	strh	r3, [r7, #12]
        u8currentRegister = (uint8_t) (u16coil / 16);
 8006e64:	89bb      	ldrh	r3, [r7, #12]
 8006e66:	091b      	lsrs	r3, r3, #4
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	72fb      	strb	r3, [r7, #11]
        u8currentBit = (uint8_t) (u16coil % 16);
 8006e6c:	89bb      	ldrh	r3, [r7, #12]
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	f003 030f 	and.w	r3, r3, #15
 8006e74:	72bb      	strb	r3, [r7, #10]

        bTemp = bitRead(
 8006e76:	7dfb      	ldrb	r3, [r7, #23]
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	7cdb      	ldrb	r3, [r3, #19]
 8006e7e:	461a      	mov	r2, r3
 8006e80:	7dbb      	ldrb	r3, [r7, #22]
 8006e82:	fa42 f303 	asr.w	r3, r2, r3
 8006e86:	f003 0301 	and.w	r3, r3, #1
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	bf14      	ite	ne
 8006e8e:	2301      	movne	r3, #1
 8006e90:	2300      	moveq	r3, #0
 8006e92:	727b      	strb	r3, [r7, #9]
        			modH->au8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 8006e94:	7a7b      	ldrb	r3, [r7, #9]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d013      	beq.n	8006ec2 <process_FC15+0xa4>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006e9e:	7afb      	ldrb	r3, [r7, #11]
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	4413      	add	r3, r2
 8006ea4:	8819      	ldrh	r1, [r3, #0]
 8006ea6:	7abb      	ldrb	r3, [r7, #10]
 8006ea8:	2201      	movs	r2, #1
 8006eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006eae:	b29a      	uxth	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006eb4:	7afb      	ldrb	r3, [r7, #11]
 8006eb6:	005b      	lsls	r3, r3, #1
 8006eb8:	4403      	add	r3, r0
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	b292      	uxth	r2, r2
 8006ebe:	801a      	strh	r2, [r3, #0]
 8006ec0:	e014      	b.n	8006eec <process_FC15+0xce>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006ec6:	7afb      	ldrb	r3, [r7, #11]
 8006ec8:	005b      	lsls	r3, r3, #1
 8006eca:	4413      	add	r3, r2
 8006ecc:	8819      	ldrh	r1, [r3, #0]
 8006ece:	7abb      	ldrb	r3, [r7, #10]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	43db      	mvns	r3, r3
 8006eda:	b29a      	uxth	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006ee0:	7afb      	ldrb	r3, [r7, #11]
 8006ee2:	005b      	lsls	r3, r3, #1
 8006ee4:	4403      	add	r3, r0
 8006ee6:	400a      	ands	r2, r1
 8006ee8:	b292      	uxth	r2, r2
 8006eea:	801a      	strh	r2, [r3, #0]
            modH->au16regs[ u8currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8006eec:	7dbb      	ldrb	r3, [r7, #22]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8006ef2:	7dbb      	ldrb	r3, [r7, #22]
 8006ef4:	2b07      	cmp	r3, #7
 8006ef6:	d904      	bls.n	8006f02 <process_FC15+0xe4>
        {
            u8bitsno = 0;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8006efc:	7dfb      	ldrb	r3, [r7, #23]
 8006efe:	3301      	adds	r3, #1
 8006f00:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8006f02:	8abb      	ldrh	r3, [r7, #20]
 8006f04:	3301      	adds	r3, #1
 8006f06:	82bb      	strh	r3, [r7, #20]
 8006f08:	8aba      	ldrh	r2, [r7, #20]
 8006f0a:	8a3b      	ldrh	r3, [r7, #16]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d3a5      	bcc.n	8006e5c <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2206      	movs	r2, #6
 8006f14:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize = modH->u8BufferSize +2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006f1e:	3302      	adds	r3, #2
 8006f20:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f7ff fd3e 	bl	80069a4 <sendTxBuffer>
    return u8CopyBufferSize;
 8006f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}

08006f34 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b084      	sub	sp, #16
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
    uint8_t u8StartAdd = modH->au8Buffer[ ADD_HI ] << 8 | modH->au8Buffer[ ADD_LO ];
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	7d5b      	ldrb	r3, [r3, #21]
 8006f40:	021b      	lsls	r3, r3, #8
 8006f42:	b25a      	sxtb	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	7d9b      	ldrb	r3, [r3, #22]
 8006f48:	b25b      	sxtb	r3, r3
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	b25b      	sxtb	r3, r3
 8006f4e:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = modH->au8Buffer[ NB_HI ] << 8 | modH->au8Buffer[ NB_LO ];
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	7ddb      	ldrb	r3, [r3, #23]
 8006f54:	021b      	lsls	r3, r3, #8
 8006f56:	b25a      	sxtb	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	7e1b      	ldrb	r3, [r3, #24]
 8006f5c:	b25b      	sxtb	r3, r3
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	b25b      	sxtb	r3, r3
 8006f62:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;
    uint16_t temp;

    // build header
    modH->au8Buffer[ NB_HI ]   = 0;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2200      	movs	r2, #0
 8006f68:	75da      	strb	r2, [r3, #23]
    modH->au8Buffer[ NB_LO ]   = u8regsno;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	7b7a      	ldrb	r2, [r7, #13]
 8006f6e:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2206      	movs	r2, #6
 8006f74:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    // write registers
    for (i = 0; i < u8regsno; i++)
 8006f78:	2300      	movs	r3, #0
 8006f7a:	73fb      	strb	r3, [r7, #15]
 8006f7c:	e01c      	b.n	8006fb8 <process_FC16+0x84>
    {
        temp = word(
        		modH->au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8006f7e:	7bfb      	ldrb	r3, [r7, #15]
 8006f80:	005b      	lsls	r3, r3, #1
 8006f82:	3307      	adds	r3, #7
        temp = word(
 8006f84:	687a      	ldr	r2, [r7, #4]
 8006f86:	4413      	add	r3, r2
 8006f88:	7cd8      	ldrb	r0, [r3, #19]
				modH->au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 8006f8a:	7bfb      	ldrb	r3, [r7, #15]
 8006f8c:	3304      	adds	r3, #4
 8006f8e:	005b      	lsls	r3, r3, #1
        temp = word(
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	4413      	add	r3, r2
 8006f94:	7cdb      	ldrb	r3, [r3, #19]
 8006f96:	4619      	mov	r1, r3
 8006f98:	f7ff fc8e 	bl	80068b8 <word>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	817b      	strh	r3, [r7, #10]

        modH->au16regs[ u8StartAdd + i ] = temp;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006fa4:	7bb9      	ldrb	r1, [r7, #14]
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
 8006fa8:	440b      	add	r3, r1
 8006faa:	005b      	lsls	r3, r3, #1
 8006fac:	4413      	add	r3, r2
 8006fae:	897a      	ldrh	r2, [r7, #10]
 8006fb0:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u8regsno; i++)
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	73fb      	strb	r3, [r7, #15]
 8006fb8:	7bfa      	ldrb	r2, [r7, #15]
 8006fba:	7b7b      	ldrb	r3, [r7, #13]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d3de      	bcc.n	8006f7e <process_FC16+0x4a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8006fc6:	3302      	adds	r3, #2
 8006fc8:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7ff fcea 	bl	80069a4 <sendTxBuffer>

    return u8CopyBufferSize;
 8006fd0:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af02      	add	r7, sp, #8
 8006fe2:	6078      	str	r0, [r7, #4]
	/* Modbus RTU callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8006fe8:	2300      	movs	r3, #0
 8006fea:	60fb      	str	r3, [r7, #12]
 8006fec:	e018      	b.n	8007020 <HAL_UART_TxCpltCallback+0x44>
	{
	   	if (mHandlers[i]->port == huart )
 8006fee:	4a11      	ldr	r2, [pc, #68]	; (8007034 <HAL_UART_TxCpltCallback+0x58>)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d10d      	bne.n	800701a <HAL_UART_TxCpltCallback+0x3e>
	   	{
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8006ffe:	4a0d      	ldr	r2, [pc, #52]	; (8007034 <HAL_UART_TxCpltCallback+0x58>)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007006:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007008:	f107 0308 	add.w	r3, r7, #8
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	2300      	movs	r3, #0
 8007010:	2200      	movs	r2, #0
 8007012:	2100      	movs	r1, #0
 8007014:	f7fd fd34 	bl	8004a80 <xTaskGenericNotifyFromISR>
	   		break;
 8007018:	e008      	b.n	800702c <HAL_UART_TxCpltCallback+0x50>
	for (i = 0; i < numberHandlers; i++ )
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	3301      	adds	r3, #1
 800701e:	60fb      	str	r3, [r7, #12]
 8007020:	4b05      	ldr	r3, [pc, #20]	; (8007038 <HAL_UART_TxCpltCallback+0x5c>)
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	461a      	mov	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	4293      	cmp	r3, r2
 800702a:	dbe0      	blt.n	8006fee <HAL_UART_TxCpltCallback+0x12>
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 800702c:	bf00      	nop
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	200024f4 	.word	0x200024f4
 8007038:	200024ec 	.word	0x200024ec

0800703c <__libc_init_array>:
 800703c:	b570      	push	{r4, r5, r6, lr}
 800703e:	2500      	movs	r5, #0
 8007040:	4e0c      	ldr	r6, [pc, #48]	; (8007074 <__libc_init_array+0x38>)
 8007042:	4c0d      	ldr	r4, [pc, #52]	; (8007078 <__libc_init_array+0x3c>)
 8007044:	1ba4      	subs	r4, r4, r6
 8007046:	10a4      	asrs	r4, r4, #2
 8007048:	42a5      	cmp	r5, r4
 800704a:	d109      	bne.n	8007060 <__libc_init_array+0x24>
 800704c:	f000 f82e 	bl	80070ac <_init>
 8007050:	2500      	movs	r5, #0
 8007052:	4e0a      	ldr	r6, [pc, #40]	; (800707c <__libc_init_array+0x40>)
 8007054:	4c0a      	ldr	r4, [pc, #40]	; (8007080 <__libc_init_array+0x44>)
 8007056:	1ba4      	subs	r4, r4, r6
 8007058:	10a4      	asrs	r4, r4, #2
 800705a:	42a5      	cmp	r5, r4
 800705c:	d105      	bne.n	800706a <__libc_init_array+0x2e>
 800705e:	bd70      	pop	{r4, r5, r6, pc}
 8007060:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007064:	4798      	blx	r3
 8007066:	3501      	adds	r5, #1
 8007068:	e7ee      	b.n	8007048 <__libc_init_array+0xc>
 800706a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800706e:	4798      	blx	r3
 8007070:	3501      	adds	r5, #1
 8007072:	e7f2      	b.n	800705a <__libc_init_array+0x1e>
 8007074:	08007290 	.word	0x08007290
 8007078:	08007290 	.word	0x08007290
 800707c:	08007290 	.word	0x08007290
 8007080:	08007294 	.word	0x08007294

08007084 <memcpy>:
 8007084:	b510      	push	{r4, lr}
 8007086:	1e43      	subs	r3, r0, #1
 8007088:	440a      	add	r2, r1
 800708a:	4291      	cmp	r1, r2
 800708c:	d100      	bne.n	8007090 <memcpy+0xc>
 800708e:	bd10      	pop	{r4, pc}
 8007090:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007094:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007098:	e7f7      	b.n	800708a <memcpy+0x6>

0800709a <memset>:
 800709a:	4603      	mov	r3, r0
 800709c:	4402      	add	r2, r0
 800709e:	4293      	cmp	r3, r2
 80070a0:	d100      	bne.n	80070a4 <memset+0xa>
 80070a2:	4770      	bx	lr
 80070a4:	f803 1b01 	strb.w	r1, [r3], #1
 80070a8:	e7f9      	b.n	800709e <memset+0x4>
	...

080070ac <_init>:
 80070ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ae:	bf00      	nop
 80070b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070b2:	bc08      	pop	{r3}
 80070b4:	469e      	mov	lr, r3
 80070b6:	4770      	bx	lr

080070b8 <_fini>:
 80070b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ba:	bf00      	nop
 80070bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070be:	bc08      	pop	{r3}
 80070c0:	469e      	mov	lr, r3
 80070c2:	4770      	bx	lr
