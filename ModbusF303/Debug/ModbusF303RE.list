
ModbusF303RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008348  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  080084e8  080084e8  000184e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800865c  0800865c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800865c  0800865c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800865c  0800865c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800865c  0800865c  0001865c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008660  08008660  00018660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad4  20000010  08008674  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001ae4  08008674  00021ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d6c4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003940  00000000  00000000  0003d704  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001528  00000000  00000000  00041048  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001370  00000000  00000000  00042570  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020023  00000000  00000000  000438e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013d23  00000000  00000000  00063903  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ba292  00000000  00000000  00077626  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001318b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005730  00000000  00000000  00131934  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080084d0 	.word	0x080084d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080084d0 	.word	0x080084d0

080001e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001e4:	4a04      	ldr	r2, [pc, #16]	; (80001f8 <MX_FREERTOS_Init+0x18>)
 80001e6:	2100      	movs	r1, #0
 80001e8:	4804      	ldr	r0, [pc, #16]	; (80001fc <MX_FREERTOS_Init+0x1c>)
 80001ea:	f003 fb91 	bl	8003910 <osThreadNew>
 80001ee:	4602      	mov	r2, r0
 80001f0:	4b03      	ldr	r3, [pc, #12]	; (8000200 <MX_FREERTOS_Init+0x20>)
 80001f2:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80001f4:	bf00      	nop
 80001f6:	bd80      	pop	{r7, pc}
 80001f8:	08008570 	.word	0x08008570
 80001fc:	08000205 	.word	0x08000205
 8000200:	20001938 	.word	0x20001938

08000204 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800020c:	2001      	movs	r0, #1
 800020e:	f003 fc29 	bl	8003a64 <osDelay>
 8000212:	e7fb      	b.n	800020c <StartDefaultTask+0x8>

08000214 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b08a      	sub	sp, #40	; 0x28
 8000218:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800021a:	f107 0314 	add.w	r3, r7, #20
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800022a:	4b2b      	ldr	r3, [pc, #172]	; (80002d8 <MX_GPIO_Init+0xc4>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	4a2a      	ldr	r2, [pc, #168]	; (80002d8 <MX_GPIO_Init+0xc4>)
 8000230:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000234:	6153      	str	r3, [r2, #20]
 8000236:	4b28      	ldr	r3, [pc, #160]	; (80002d8 <MX_GPIO_Init+0xc4>)
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800023e:	613b      	str	r3, [r7, #16]
 8000240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000242:	4b25      	ldr	r3, [pc, #148]	; (80002d8 <MX_GPIO_Init+0xc4>)
 8000244:	695b      	ldr	r3, [r3, #20]
 8000246:	4a24      	ldr	r2, [pc, #144]	; (80002d8 <MX_GPIO_Init+0xc4>)
 8000248:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800024c:	6153      	str	r3, [r2, #20]
 800024e:	4b22      	ldr	r3, [pc, #136]	; (80002d8 <MX_GPIO_Init+0xc4>)
 8000250:	695b      	ldr	r3, [r3, #20]
 8000252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000256:	60fb      	str	r3, [r7, #12]
 8000258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800025a:	4b1f      	ldr	r3, [pc, #124]	; (80002d8 <MX_GPIO_Init+0xc4>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	4a1e      	ldr	r2, [pc, #120]	; (80002d8 <MX_GPIO_Init+0xc4>)
 8000260:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000264:	6153      	str	r3, [r2, #20]
 8000266:	4b1c      	ldr	r3, [pc, #112]	; (80002d8 <MX_GPIO_Init+0xc4>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800026e:	60bb      	str	r3, [r7, #8]
 8000270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000272:	4b19      	ldr	r3, [pc, #100]	; (80002d8 <MX_GPIO_Init+0xc4>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	4a18      	ldr	r2, [pc, #96]	; (80002d8 <MX_GPIO_Init+0xc4>)
 8000278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800027c:	6153      	str	r3, [r2, #20]
 800027e:	4b16      	ldr	r3, [pc, #88]	; (80002d8 <MX_GPIO_Init+0xc4>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000286:	607b      	str	r3, [r7, #4]
 8000288:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2120      	movs	r1, #32
 800028e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000292:	f000 fd19 	bl	8000cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000296:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800029a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800029c:	4b0f      	ldr	r3, [pc, #60]	; (80002dc <MX_GPIO_Init+0xc8>)
 800029e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a0:	2300      	movs	r3, #0
 80002a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002a4:	f107 0314 	add.w	r3, r7, #20
 80002a8:	4619      	mov	r1, r3
 80002aa:	480d      	ldr	r0, [pc, #52]	; (80002e0 <MX_GPIO_Init+0xcc>)
 80002ac:	f000 fb82 	bl	80009b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80002b0:	2320      	movs	r3, #32
 80002b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b4:	2301      	movs	r3, #1
 80002b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b8:	2300      	movs	r3, #0
 80002ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002bc:	2300      	movs	r3, #0
 80002be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80002c0:	f107 0314 	add.w	r3, r7, #20
 80002c4:	4619      	mov	r1, r3
 80002c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002ca:	f000 fb73 	bl	80009b4 <HAL_GPIO_Init>

}
 80002ce:	bf00      	nop
 80002d0:	3728      	adds	r7, #40	; 0x28
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
 80002d6:	bf00      	nop
 80002d8:	40021000 	.word	0x40021000
 80002dc:	10210000 	.word	0x10210000
 80002e0:	48000800 	.word	0x48000800

080002e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e8:	f000 fa0e 	bl	8000708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ec:	f000 f832 	bl	8000354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f0:	f7ff ff90 	bl	8000214 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80002f4:	f000 f964 	bl	80005c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Slave initialization */

  ModbusH.uiModbusType = SLAVE_RTU;
 80002f8:	4b13      	ldr	r3, [pc, #76]	; (8000348 <main+0x64>)
 80002fa:	2203      	movs	r2, #3
 80002fc:	701a      	strb	r2, [r3, #0]
  ModbusH.port =  &huart2;
 80002fe:	4b12      	ldr	r3, [pc, #72]	; (8000348 <main+0x64>)
 8000300:	4a12      	ldr	r2, [pc, #72]	; (800034c <main+0x68>)
 8000302:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 1;
 8000304:	4b10      	ldr	r3, [pc, #64]	; (8000348 <main+0x64>)
 8000306:	2201      	movs	r2, #1
 8000308:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 800030a:	4b0f      	ldr	r3, [pc, #60]	; (8000348 <main+0x64>)
 800030c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000310:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  ModbusH.EN_Port = NULL;
 8000314:	4b0c      	ldr	r3, [pc, #48]	; (8000348 <main+0x64>)
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]
  ModbusH.u32overTime = 0;
 800031a:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <main+0x64>)
 800031c:	2200      	movs	r2, #0
 800031e:	66da      	str	r2, [r3, #108]	; 0x6c
  ModbusH.au16regs = ModbusDATA;
 8000320:	4b09      	ldr	r3, [pc, #36]	; (8000348 <main+0x64>)
 8000322:	4a0b      	ldr	r2, [pc, #44]	; (8000350 <main+0x6c>)
 8000324:	659a      	str	r2, [r3, #88]	; 0x58
  ModbusH.u8regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8000326:	4b08      	ldr	r3, [pc, #32]	; (8000348 <main+0x64>)
 8000328:	2208      	movs	r2, #8
 800032a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
  //Initialize Modbus library
  ModbusInit(&ModbusH);
 800032e:	4806      	ldr	r0, [pc, #24]	; (8000348 <main+0x64>)
 8000330:	f006 fdf4 	bl	8006f1c <ModbusInit>
  //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 8000334:	4804      	ldr	r0, [pc, #16]	; (8000348 <main+0x64>)
 8000336:	f006 fe7b 	bl	8007030 <ModbusStart>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800033a:	f003 fa81 	bl	8003840 <osKernelInitialize>
  MX_FREERTOS_Init();
 800033e:	f7ff ff4f 	bl	80001e0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000342:	f003 fab1 	bl	80038a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000346:	e7fe      	b.n	8000346 <main+0x62>
 8000348:	20001944 	.word	0x20001944
 800034c:	20001a20 	.word	0x20001a20
 8000350:	200019d0 	.word	0x200019d0

08000354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b0a6      	sub	sp, #152	; 0x98
 8000358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800035a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800035e:	2228      	movs	r2, #40	; 0x28
 8000360:	2100      	movs	r1, #0
 8000362:	4618      	mov	r0, r3
 8000364:	f008 f8ab 	bl	80084be <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000368:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	605a      	str	r2, [r3, #4]
 8000372:	609a      	str	r2, [r3, #8]
 8000374:	60da      	str	r2, [r3, #12]
 8000376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000378:	1d3b      	adds	r3, r7, #4
 800037a:	2258      	movs	r2, #88	; 0x58
 800037c:	2100      	movs	r1, #0
 800037e:	4618      	mov	r0, r3
 8000380:	f008 f89d 	bl	80084be <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000384:	2302      	movs	r3, #2
 8000386:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000388:	2301      	movs	r3, #1
 800038a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800038c:	2310      	movs	r3, #16
 800038e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000392:	2302      	movs	r3, #2
 8000394:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000398:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800039c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80003a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80003a4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80003a8:	2300      	movs	r3, #0
 80003aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80003b2:	4618      	mov	r0, r3
 80003b4:	f000 fca0 	bl	8000cf8 <HAL_RCC_OscConfig>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003be:	f000 f839 	bl	8000434 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003c2:	230f      	movs	r3, #15
 80003c4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003c6:	2302      	movs	r3, #2
 80003c8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003d2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003d4:	2300      	movs	r3, #0
 80003d6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003d8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80003dc:	2102      	movs	r1, #2
 80003de:	4618      	mov	r0, r3
 80003e0:	f001 fba0 	bl	8001b24 <HAL_RCC_ClockConfig>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d001      	beq.n	80003ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80003ea:	f000 f823 	bl	8000434 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80003ee:	2302      	movs	r3, #2
 80003f0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80003f2:	2300      	movs	r3, #0
 80003f4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	4618      	mov	r0, r3
 80003fa:	f001 fdfb 	bl	8001ff4 <HAL_RCCEx_PeriphCLKConfig>
 80003fe:	4603      	mov	r3, r0
 8000400:	2b00      	cmp	r3, #0
 8000402:	d001      	beq.n	8000408 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000404:	f000 f816 	bl	8000434 <Error_Handler>
  }
}
 8000408:	bf00      	nop
 800040a:	3798      	adds	r7, #152	; 0x98
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}

08000410 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a04      	ldr	r2, [pc, #16]	; (8000430 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d101      	bne.n	8000426 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000422:	f000 f987 	bl	8000734 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40014800 	.word	0x40014800

08000434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000438:	bf00      	nop
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr
	...

08000444 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800044a:	4b0f      	ldr	r3, [pc, #60]	; (8000488 <HAL_MspInit+0x44>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	4a0e      	ldr	r2, [pc, #56]	; (8000488 <HAL_MspInit+0x44>)
 8000450:	f043 0301 	orr.w	r3, r3, #1
 8000454:	6193      	str	r3, [r2, #24]
 8000456:	4b0c      	ldr	r3, [pc, #48]	; (8000488 <HAL_MspInit+0x44>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	f003 0301 	and.w	r3, r3, #1
 800045e:	607b      	str	r3, [r7, #4]
 8000460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000462:	4b09      	ldr	r3, [pc, #36]	; (8000488 <HAL_MspInit+0x44>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	4a08      	ldr	r2, [pc, #32]	; (8000488 <HAL_MspInit+0x44>)
 8000468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800046c:	61d3      	str	r3, [r2, #28]
 800046e:	4b06      	ldr	r3, [pc, #24]	; (8000488 <HAL_MspInit+0x44>)
 8000470:	69db      	ldr	r3, [r3, #28]
 8000472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000476:	603b      	str	r3, [r7, #0]
 8000478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000

0800048c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b08c      	sub	sp, #48	; 0x30
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000494:	2300      	movs	r3, #0
 8000496:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000498:	2300      	movs	r3, #0
 800049a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, TickPriority ,0);
 800049c:	2200      	movs	r2, #0
 800049e:	6879      	ldr	r1, [r7, #4]
 80004a0:	201a      	movs	r0, #26
 80004a2:	f000 fa1f 	bl	80008e4 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80004a6:	201a      	movs	r0, #26
 80004a8:	f000 fa38 	bl	800091c <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 80004ac:	4b1e      	ldr	r3, [pc, #120]	; (8000528 <HAL_InitTick+0x9c>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	4a1d      	ldr	r2, [pc, #116]	; (8000528 <HAL_InitTick+0x9c>)
 80004b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004b6:	6193      	str	r3, [r2, #24]
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <HAL_InitTick+0x9c>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004c4:	f107 0210 	add.w	r2, r7, #16
 80004c8:	f107 0314 	add.w	r3, r7, #20
 80004cc:	4611      	mov	r1, r2
 80004ce:	4618      	mov	r0, r3
 80004d0:	f001 fd5e 	bl	8001f90 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80004d4:	f001 fd3a 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 80004d8:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80004da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004dc:	4a13      	ldr	r2, [pc, #76]	; (800052c <HAL_InitTick+0xa0>)
 80004de:	fba2 2303 	umull	r2, r3, r2, r3
 80004e2:	0c9b      	lsrs	r3, r3, #18
 80004e4:	3b01      	subs	r3, #1
 80004e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <HAL_InitTick+0xa4>)
 80004ea:	4a12      	ldr	r2, [pc, #72]	; (8000534 <HAL_InitTick+0xa8>)
 80004ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000 / 1000) - 1;
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <HAL_InitTick+0xa4>)
 80004f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80004f4:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 80004f6:	4a0e      	ldr	r2, [pc, #56]	; (8000530 <HAL_InitTick+0xa4>)
 80004f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80004fa:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <HAL_InitTick+0xa4>)
 80004fe:	2200      	movs	r2, #0
 8000500:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000502:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <HAL_InitTick+0xa4>)
 8000504:	2200      	movs	r2, #0
 8000506:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8000508:	4809      	ldr	r0, [pc, #36]	; (8000530 <HAL_InitTick+0xa4>)
 800050a:	f001 ff91 	bl	8002430 <HAL_TIM_Base_Init>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d104      	bne.n	800051e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 8000514:	4806      	ldr	r0, [pc, #24]	; (8000530 <HAL_InitTick+0xa4>)
 8000516:	f001 ffc1 	bl	800249c <HAL_TIM_Base_Start_IT>
 800051a:	4603      	mov	r3, r0
 800051c:	e000      	b.n	8000520 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 800051e:	2301      	movs	r3, #1
}
 8000520:	4618      	mov	r0, r3
 8000522:	3730      	adds	r7, #48	; 0x30
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40021000 	.word	0x40021000
 800052c:	431bde83 	.word	0x431bde83
 8000530:	200019e0 	.word	0x200019e0
 8000534:	40014800 	.word	0x40014800

08000538 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054a:	e7fe      	b.n	800054a <HardFault_Handler+0x4>

0800054c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800054c:	b480      	push	{r7}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000550:	e7fe      	b.n	8000550 <MemManage_Handler+0x4>

08000552 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000552:	b480      	push	{r7}
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000556:	e7fe      	b.n	8000556 <BusFault_Handler+0x4>

08000558 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800055c:	e7fe      	b.n	800055c <UsageFault_Handler+0x4>

0800055e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800055e:	b480      	push	{r7}
 8000560:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000562:	bf00      	nop
 8000564:	46bd      	mov	sp, r7
 8000566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056a:	4770      	bx	lr

0800056c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000570:	4802      	ldr	r0, [pc, #8]	; (800057c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000572:	f001 ffbd 	bl	80024f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000576:	bf00      	nop
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	200019e0 	.word	0x200019e0

08000580 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000584:	4802      	ldr	r0, [pc, #8]	; (8000590 <USART2_IRQHandler+0x10>)
 8000586:	f002 fb03 	bl	8002b90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20001a20 	.word	0x20001a20

08000594 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <SystemInit+0x28>)
 800059a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800059e:	4a07      	ldr	r2, [pc, #28]	; (80005bc <SystemInit+0x28>)
 80005a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <SystemInit+0x28>)
 80005aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005ae:	609a      	str	r2, [r3, #8]
#endif
}
 80005b0:	bf00      	nop
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80005c4:	4b14      	ldr	r3, [pc, #80]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005c6:	4a15      	ldr	r2, [pc, #84]	; (800061c <MX_USART2_UART_Init+0x5c>)
 80005c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005ca:	4b13      	ldr	r3, [pc, #76]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005d2:	4b11      	ldr	r3, [pc, #68]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005d8:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005de:	4b0e      	ldr	r3, [pc, #56]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005e6:	220c      	movs	r2, #12
 80005e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005f0:	4b09      	ldr	r3, [pc, #36]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005f6:	4b08      	ldr	r3, [pc, #32]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005fc:	4b06      	ldr	r3, [pc, #24]	; (8000618 <MX_USART2_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000602:	4805      	ldr	r0, [pc, #20]	; (8000618 <MX_USART2_UART_Init+0x58>)
 8000604:	f002 f978 	bl	80028f8 <HAL_UART_Init>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800060e:	f7ff ff11 	bl	8000434 <Error_Handler>
  }

}
 8000612:	bf00      	nop
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	20001a20 	.word	0x20001a20
 800061c:	40004400 	.word	0x40004400

08000620 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a1b      	ldr	r2, [pc, #108]	; (80006ac <HAL_UART_MspInit+0x8c>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d130      	bne.n	80006a4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000642:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <HAL_UART_MspInit+0x90>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a1a      	ldr	r2, [pc, #104]	; (80006b0 <HAL_UART_MspInit+0x90>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <HAL_UART_MspInit+0x90>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <HAL_UART_MspInit+0x90>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a14      	ldr	r2, [pc, #80]	; (80006b0 <HAL_UART_MspInit+0x90>)
 8000660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b12      	ldr	r3, [pc, #72]	; (80006b0 <HAL_UART_MspInit+0x90>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000672:	230c      	movs	r3, #12
 8000674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000676:	2302      	movs	r3, #2
 8000678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000682:	2307      	movs	r3, #7
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f000 f990 	bl	80009b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000694:	2200      	movs	r2, #0
 8000696:	2105      	movs	r1, #5
 8000698:	2026      	movs	r0, #38	; 0x26
 800069a:	f000 f923 	bl	80008e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800069e:	2026      	movs	r0, #38	; 0x26
 80006a0:	f000 f93c 	bl	800091c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80006a4:	bf00      	nop
 80006a6:	3728      	adds	r7, #40	; 0x28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40004400 	.word	0x40004400
 80006b0:	40021000 	.word	0x40021000

080006b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006ec <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80006b8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80006ba:	e003      	b.n	80006c4 <LoopCopyDataInit>

080006bc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80006be:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80006c0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80006c2:	3104      	adds	r1, #4

080006c4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80006c4:	480b      	ldr	r0, [pc, #44]	; (80006f4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80006c8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80006ca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80006cc:	d3f6      	bcc.n	80006bc <CopyDataInit>
	ldr	r2, =_sbss
 80006ce:	4a0b      	ldr	r2, [pc, #44]	; (80006fc <LoopForever+0x12>)
	b	LoopFillZerobss
 80006d0:	e002      	b.n	80006d8 <LoopFillZerobss>

080006d2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80006d2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80006d4:	f842 3b04 	str.w	r3, [r2], #4

080006d8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <LoopForever+0x16>)
	cmp	r2, r3
 80006da:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80006dc:	d3f9      	bcc.n	80006d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80006de:	f7ff ff59 	bl	8000594 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006e2:	f007 febd 	bl	8008460 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006e6:	f7ff fdfd 	bl	80002e4 <main>

080006ea <LoopForever>:

LoopForever:
    b LoopForever
 80006ea:	e7fe      	b.n	80006ea <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006ec:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 80006f0:	08008664 	.word	0x08008664
	ldr	r0, =_sdata
 80006f4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80006f8:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80006fc:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000700:	20001ae4 	.word	0x20001ae4

08000704 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000704:	e7fe      	b.n	8000704 <ADC1_2_IRQHandler>
	...

08000708 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800070c:	4b08      	ldr	r3, [pc, #32]	; (8000730 <HAL_Init+0x28>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a07      	ldr	r2, [pc, #28]	; (8000730 <HAL_Init+0x28>)
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000718:	2003      	movs	r0, #3
 800071a:	f000 f8d8 	bl	80008ce <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800071e:	2000      	movs	r0, #0
 8000720:	f7ff feb4 	bl	800048c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000724:	f7ff fe8e 	bl	8000444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000728:	2300      	movs	r3, #0
}
 800072a:	4618      	mov	r0, r3
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40022000 	.word	0x40022000

08000734 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000734:	b480      	push	{r7}
 8000736:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000738:	4b06      	ldr	r3, [pc, #24]	; (8000754 <HAL_IncTick+0x20>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	461a      	mov	r2, r3
 800073e:	4b06      	ldr	r3, [pc, #24]	; (8000758 <HAL_IncTick+0x24>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4413      	add	r3, r2
 8000744:	4a04      	ldr	r2, [pc, #16]	; (8000758 <HAL_IncTick+0x24>)
 8000746:	6013      	str	r3, [r2, #0]
}
 8000748:	bf00      	nop
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	20000008 	.word	0x20000008
 8000758:	20001aa0 	.word	0x20001aa0

0800075c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000760:	4b03      	ldr	r3, [pc, #12]	; (8000770 <HAL_GetTick+0x14>)
 8000762:	681b      	ldr	r3, [r3, #0]
}
 8000764:	4618      	mov	r0, r3
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	20001aa0 	.word	0x20001aa0

08000774 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000774:	b480      	push	{r7}
 8000776:	b085      	sub	sp, #20
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800078a:	68ba      	ldr	r2, [r7, #8]
 800078c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000790:	4013      	ands	r3, r2
 8000792:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000798:	68bb      	ldr	r3, [r7, #8]
 800079a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800079c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007a6:	4a04      	ldr	r2, [pc, #16]	; (80007b8 <__NVIC_SetPriorityGrouping+0x44>)
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	60d3      	str	r3, [r2, #12]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	e000ed00 	.word	0xe000ed00

080007bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <__NVIC_GetPriorityGrouping+0x18>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	0a1b      	lsrs	r3, r3, #8
 80007c6:	f003 0307 	and.w	r3, r3, #7
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	46bd      	mov	sp, r7
 80007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d2:	4770      	bx	lr
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	db0b      	blt.n	8000802 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ea:	79fb      	ldrb	r3, [r7, #7]
 80007ec:	f003 021f 	and.w	r2, r3, #31
 80007f0:	4907      	ldr	r1, [pc, #28]	; (8000810 <__NVIC_EnableIRQ+0x38>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	095b      	lsrs	r3, r3, #5
 80007f8:	2001      	movs	r0, #1
 80007fa:	fa00 f202 	lsl.w	r2, r0, r2
 80007fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000e100 	.word	0xe000e100

08000814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	db0a      	blt.n	800083e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	b2da      	uxtb	r2, r3
 800082c:	490c      	ldr	r1, [pc, #48]	; (8000860 <__NVIC_SetPriority+0x4c>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	0112      	lsls	r2, r2, #4
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	440b      	add	r3, r1
 8000838:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800083c:	e00a      	b.n	8000854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4908      	ldr	r1, [pc, #32]	; (8000864 <__NVIC_SetPriority+0x50>)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	f003 030f 	and.w	r3, r3, #15
 800084a:	3b04      	subs	r3, #4
 800084c:	0112      	lsls	r2, r2, #4
 800084e:	b2d2      	uxtb	r2, r2
 8000850:	440b      	add	r3, r1
 8000852:	761a      	strb	r2, [r3, #24]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	e000e100 	.word	0xe000e100
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000868:	b480      	push	{r7}
 800086a:	b089      	sub	sp, #36	; 0x24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	f1c3 0307 	rsb	r3, r3, #7
 8000882:	2b04      	cmp	r3, #4
 8000884:	bf28      	it	cs
 8000886:	2304      	movcs	r3, #4
 8000888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3304      	adds	r3, #4
 800088e:	2b06      	cmp	r3, #6
 8000890:	d902      	bls.n	8000898 <NVIC_EncodePriority+0x30>
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3b03      	subs	r3, #3
 8000896:	e000      	b.n	800089a <NVIC_EncodePriority+0x32>
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43da      	mvns	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	401a      	ands	r2, r3
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	43d9      	mvns	r1, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	4313      	orrs	r3, r2
         );
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3724      	adds	r7, #36	; 0x24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d6:	6878      	ldr	r0, [r7, #4]
 80008d8:	f7ff ff4c 	bl	8000774 <__NVIC_SetPriorityGrouping>
}
 80008dc:	bf00      	nop
 80008de:	3708      	adds	r7, #8
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
 80008f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008f6:	f7ff ff61 	bl	80007bc <__NVIC_GetPriorityGrouping>
 80008fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	68b9      	ldr	r1, [r7, #8]
 8000900:	6978      	ldr	r0, [r7, #20]
 8000902:	f7ff ffb1 	bl	8000868 <NVIC_EncodePriority>
 8000906:	4602      	mov	r2, r0
 8000908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090c:	4611      	mov	r1, r2
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff80 	bl	8000814 <__NVIC_SetPriority>
}
 8000914:	bf00      	nop
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ff54 	bl	80007d8 <__NVIC_EnableIRQ>
}
 8000930:	bf00      	nop
 8000932:	3708      	adds	r7, #8
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}

08000938 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000938:	b580      	push	{r7, lr}
 800093a:	b084      	sub	sp, #16
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000940:	2300      	movs	r3, #0
 8000942:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800094a:	2b02      	cmp	r3, #2
 800094c:	d005      	beq.n	800095a <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2204      	movs	r2, #4
 8000952:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000954:	2301      	movs	r3, #1
 8000956:	73fb      	strb	r3, [r7, #15]
 8000958:	e027      	b.n	80009aa <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	f022 020e 	bic.w	r2, r2, #14
 8000968:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f022 0201 	bic.w	r2, r2, #1
 8000978:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000982:	2101      	movs	r1, #1
 8000984:	fa01 f202 	lsl.w	r2, r1, r2
 8000988:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	2201      	movs	r2, #1
 800098e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	2200      	movs	r2, #0
 8000996:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d003      	beq.n	80009aa <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	4798      	blx	r3
    } 
  }
  return status;
 80009aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b087      	sub	sp, #28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009be:	2300      	movs	r3, #0
 80009c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009c2:	e160      	b.n	8000c86 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	2101      	movs	r1, #1
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	fa01 f303 	lsl.w	r3, r1, r3
 80009d0:	4013      	ands	r3, r2
 80009d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f000 8152 	beq.w	8000c80 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	685b      	ldr	r3, [r3, #4]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d00b      	beq.n	80009fc <HAL_GPIO_Init+0x48>
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	2b02      	cmp	r3, #2
 80009ea:	d007      	beq.n	80009fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009f0:	2b11      	cmp	r3, #17
 80009f2:	d003      	beq.n	80009fc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685b      	ldr	r3, [r3, #4]
 80009f8:	2b12      	cmp	r3, #18
 80009fa:	d130      	bne.n	8000a5e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	005b      	lsls	r3, r3, #1
 8000a06:	2203      	movs	r2, #3
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	693a      	ldr	r2, [r7, #16]
 8000a10:	4013      	ands	r3, r2
 8000a12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	68da      	ldr	r2, [r3, #12]
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	693a      	ldr	r2, [r7, #16]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	693a      	ldr	r2, [r7, #16]
 8000a2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a32:	2201      	movs	r2, #1
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	fa02 f303 	lsl.w	r3, r2, r3
 8000a3a:	43db      	mvns	r3, r3
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	4013      	ands	r3, r2
 8000a40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	091b      	lsrs	r3, r3, #4
 8000a48:	f003 0201 	and.w	r2, r3, #1
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4313      	orrs	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	693a      	ldr	r2, [r7, #16]
 8000a5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	005b      	lsls	r3, r3, #1
 8000a68:	2203      	movs	r2, #3
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43db      	mvns	r3, r3
 8000a70:	693a      	ldr	r2, [r7, #16]
 8000a72:	4013      	ands	r3, r2
 8000a74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	689a      	ldr	r2, [r3, #8]
 8000a7a:	697b      	ldr	r3, [r7, #20]
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	685b      	ldr	r3, [r3, #4]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d003      	beq.n	8000a9e <HAL_GPIO_Init+0xea>
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	2b12      	cmp	r3, #18
 8000a9c:	d123      	bne.n	8000ae6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	08da      	lsrs	r2, r3, #3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	3208      	adds	r2, #8
 8000aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aaa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	220f      	movs	r2, #15
 8000ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aba:	43db      	mvns	r3, r3
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	4013      	ands	r3, r2
 8000ac0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	691a      	ldr	r2, [r3, #16]
 8000ac6:	697b      	ldr	r3, [r7, #20]
 8000ac8:	f003 0307 	and.w	r3, r3, #7
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	08da      	lsrs	r2, r3, #3
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	3208      	adds	r2, #8
 8000ae0:	6939      	ldr	r1, [r7, #16]
 8000ae2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	2203      	movs	r2, #3
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43db      	mvns	r3, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4013      	ands	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	685b      	ldr	r3, [r3, #4]
 8000b02:	f003 0203 	and.w	r2, r3, #3
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	005b      	lsls	r3, r3, #1
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4313      	orrs	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	693a      	ldr	r2, [r7, #16]
 8000b18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	f000 80ac 	beq.w	8000c80 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b28:	4b5e      	ldr	r3, [pc, #376]	; (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a5d      	ldr	r2, [pc, #372]	; (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000b2e:	f043 0301 	orr.w	r3, r3, #1
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b5b      	ldr	r3, [pc, #364]	; (8000ca4 <HAL_GPIO_Init+0x2f0>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0301 	and.w	r3, r3, #1
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b40:	4a59      	ldr	r2, [pc, #356]	; (8000ca8 <HAL_GPIO_Init+0x2f4>)
 8000b42:	697b      	ldr	r3, [r7, #20]
 8000b44:	089b      	lsrs	r3, r3, #2
 8000b46:	3302      	adds	r3, #2
 8000b48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b4e:	697b      	ldr	r3, [r7, #20]
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	220f      	movs	r2, #15
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	693a      	ldr	r2, [r7, #16]
 8000b60:	4013      	ands	r3, r2
 8000b62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b6a:	d025      	beq.n	8000bb8 <HAL_GPIO_Init+0x204>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4a4f      	ldr	r2, [pc, #316]	; (8000cac <HAL_GPIO_Init+0x2f8>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d01f      	beq.n	8000bb4 <HAL_GPIO_Init+0x200>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	4a4e      	ldr	r2, [pc, #312]	; (8000cb0 <HAL_GPIO_Init+0x2fc>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d019      	beq.n	8000bb0 <HAL_GPIO_Init+0x1fc>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	4a4d      	ldr	r2, [pc, #308]	; (8000cb4 <HAL_GPIO_Init+0x300>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d013      	beq.n	8000bac <HAL_GPIO_Init+0x1f8>
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	4a4c      	ldr	r2, [pc, #304]	; (8000cb8 <HAL_GPIO_Init+0x304>)
 8000b88:	4293      	cmp	r3, r2
 8000b8a:	d00d      	beq.n	8000ba8 <HAL_GPIO_Init+0x1f4>
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a4b      	ldr	r2, [pc, #300]	; (8000cbc <HAL_GPIO_Init+0x308>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d007      	beq.n	8000ba4 <HAL_GPIO_Init+0x1f0>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	4a4a      	ldr	r2, [pc, #296]	; (8000cc0 <HAL_GPIO_Init+0x30c>)
 8000b98:	4293      	cmp	r3, r2
 8000b9a:	d101      	bne.n	8000ba0 <HAL_GPIO_Init+0x1ec>
 8000b9c:	2306      	movs	r3, #6
 8000b9e:	e00c      	b.n	8000bba <HAL_GPIO_Init+0x206>
 8000ba0:	2307      	movs	r3, #7
 8000ba2:	e00a      	b.n	8000bba <HAL_GPIO_Init+0x206>
 8000ba4:	2305      	movs	r3, #5
 8000ba6:	e008      	b.n	8000bba <HAL_GPIO_Init+0x206>
 8000ba8:	2304      	movs	r3, #4
 8000baa:	e006      	b.n	8000bba <HAL_GPIO_Init+0x206>
 8000bac:	2303      	movs	r3, #3
 8000bae:	e004      	b.n	8000bba <HAL_GPIO_Init+0x206>
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	e002      	b.n	8000bba <HAL_GPIO_Init+0x206>
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	e000      	b.n	8000bba <HAL_GPIO_Init+0x206>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	697a      	ldr	r2, [r7, #20]
 8000bbc:	f002 0203 	and.w	r2, r2, #3
 8000bc0:	0092      	lsls	r2, r2, #2
 8000bc2:	4093      	lsls	r3, r2
 8000bc4:	693a      	ldr	r2, [r7, #16]
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000bca:	4937      	ldr	r1, [pc, #220]	; (8000ca8 <HAL_GPIO_Init+0x2f4>)
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	3302      	adds	r3, #2
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bd8:	4b3a      	ldr	r3, [pc, #232]	; (8000cc4 <HAL_GPIO_Init+0x310>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	43db      	mvns	r3, r3
 8000be2:	693a      	ldr	r2, [r7, #16]
 8000be4:	4013      	ands	r3, r2
 8000be6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d003      	beq.n	8000bfc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000bf4:	693a      	ldr	r2, [r7, #16]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000bfc:	4a31      	ldr	r2, [pc, #196]	; (8000cc4 <HAL_GPIO_Init+0x310>)
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c02:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <HAL_GPIO_Init+0x310>)
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	43db      	mvns	r3, r3
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d003      	beq.n	8000c26 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c26:	4a27      	ldr	r2, [pc, #156]	; (8000cc4 <HAL_GPIO_Init+0x310>)
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c2c:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <HAL_GPIO_Init+0x310>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	43db      	mvns	r3, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d003      	beq.n	8000c50 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000c48:	693a      	ldr	r2, [r7, #16]
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c50:	4a1c      	ldr	r2, [pc, #112]	; (8000cc4 <HAL_GPIO_Init+0x310>)
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <HAL_GPIO_Init+0x310>)
 8000c58:	68db      	ldr	r3, [r3, #12]
 8000c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	4013      	ands	r3, r2
 8000c64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <HAL_GPIO_Init+0x310>)
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	3301      	adds	r3, #1
 8000c84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f47f ae97 	bne.w	80009c4 <HAL_GPIO_Init+0x10>
  }
}
 8000c96:	bf00      	nop
 8000c98:	371c      	adds	r7, #28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	40010000 	.word	0x40010000
 8000cac:	48000400 	.word	0x48000400
 8000cb0:	48000800 	.word	0x48000800
 8000cb4:	48000c00 	.word	0x48000c00
 8000cb8:	48001000 	.word	0x48001000
 8000cbc:	48001400 	.word	0x48001400
 8000cc0:	48001800 	.word	0x48001800
 8000cc4:	40010400 	.word	0x40010400

08000cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
 8000cd0:	460b      	mov	r3, r1
 8000cd2:	807b      	strh	r3, [r7, #2]
 8000cd4:	4613      	mov	r3, r2
 8000cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000cd8:	787b      	ldrb	r3, [r7, #1]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cde:	887a      	ldrh	r2, [r7, #2]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ce4:	e002      	b.n	8000cec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ce6:	887a      	ldrh	r2, [r7, #2]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cec:	bf00      	nop
 8000cee:	370c      	adds	r7, #12
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr

08000cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d102      	bne.n	8000d12 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	f000 bf01 	b.w	8001b14 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d12:	1d3b      	adds	r3, r7, #4
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f003 0301 	and.w	r3, r3, #1
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	f000 8160 	beq.w	8000fe2 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d22:	4bae      	ldr	r3, [pc, #696]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	f003 030c 	and.w	r3, r3, #12
 8000d2a:	2b04      	cmp	r3, #4
 8000d2c:	d00c      	beq.n	8000d48 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d2e:	4bab      	ldr	r3, [pc, #684]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f003 030c 	and.w	r3, r3, #12
 8000d36:	2b08      	cmp	r3, #8
 8000d38:	d159      	bne.n	8000dee <HAL_RCC_OscConfig+0xf6>
 8000d3a:	4ba8      	ldr	r3, [pc, #672]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d46:	d152      	bne.n	8000dee <HAL_RCC_OscConfig+0xf6>
 8000d48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d4c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d50:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000d54:	fa93 f3a3 	rbit	r3, r3
 8000d58:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d5c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d60:	fab3 f383 	clz	r3, r3
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	095b      	lsrs	r3, r3, #5
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	b2db      	uxtb	r3, r3
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d102      	bne.n	8000d7a <HAL_RCC_OscConfig+0x82>
 8000d74:	4b99      	ldr	r3, [pc, #612]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	e015      	b.n	8000da6 <HAL_RCC_OscConfig+0xae>
 8000d7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d7e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d82:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000d86:	fa93 f3a3 	rbit	r3, r3
 8000d8a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000d8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d92:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d96:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000d9a:	fa93 f3a3 	rbit	r3, r3
 8000d9e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000da2:	4b8e      	ldr	r3, [pc, #568]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000daa:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000dae:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000db2:	fa92 f2a2 	rbit	r2, r2
 8000db6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000dba:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000dbe:	fab2 f282 	clz	r2, r2
 8000dc2:	b2d2      	uxtb	r2, r2
 8000dc4:	f042 0220 	orr.w	r2, r2, #32
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	f002 021f 	and.w	r2, r2, #31
 8000dce:	2101      	movs	r1, #1
 8000dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 8102 	beq.w	8000fe0 <HAL_RCC_OscConfig+0x2e8>
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 80fc 	bne.w	8000fe0 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8000de8:	2301      	movs	r3, #1
 8000dea:	f000 be93 	b.w	8001b14 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df8:	d106      	bne.n	8000e08 <HAL_RCC_OscConfig+0x110>
 8000dfa:	4b78      	ldr	r3, [pc, #480]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4a77      	ldr	r2, [pc, #476]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e04:	6013      	str	r3, [r2, #0]
 8000e06:	e030      	b.n	8000e6a <HAL_RCC_OscConfig+0x172>
 8000e08:	1d3b      	adds	r3, r7, #4
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10c      	bne.n	8000e2c <HAL_RCC_OscConfig+0x134>
 8000e12:	4b72      	ldr	r3, [pc, #456]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a71      	ldr	r2, [pc, #452]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	4b6f      	ldr	r3, [pc, #444]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a6e      	ldr	r2, [pc, #440]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	e01e      	b.n	8000e6a <HAL_RCC_OscConfig+0x172>
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e36:	d10c      	bne.n	8000e52 <HAL_RCC_OscConfig+0x15a>
 8000e38:	4b68      	ldr	r3, [pc, #416]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a67      	ldr	r2, [pc, #412]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000e3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e42:	6013      	str	r3, [r2, #0]
 8000e44:	4b65      	ldr	r3, [pc, #404]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a64      	ldr	r2, [pc, #400]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	e00b      	b.n	8000e6a <HAL_RCC_OscConfig+0x172>
 8000e52:	4b62      	ldr	r3, [pc, #392]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	4a61      	ldr	r2, [pc, #388]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000e58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e5c:	6013      	str	r3, [r2, #0]
 8000e5e:	4b5f      	ldr	r3, [pc, #380]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a5e      	ldr	r2, [pc, #376]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000e64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e68:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e6a:	1d3b      	adds	r3, r7, #4
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d059      	beq.n	8000f28 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e74:	f7ff fc72 	bl	800075c <HAL_GetTick>
 8000e78:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7c:	e00a      	b.n	8000e94 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e7e:	f7ff fc6d 	bl	800075c <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b64      	cmp	r3, #100	; 0x64
 8000e8c:	d902      	bls.n	8000e94 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	f000 be40 	b.w	8001b14 <HAL_RCC_OscConfig+0xe1c>
 8000e94:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e98:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e9c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000ea0:	fa93 f3a3 	rbit	r3, r3
 8000ea4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000ea8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eac:	fab3 f383 	clz	r3, r3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	095b      	lsrs	r3, r3, #5
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	f043 0301 	orr.w	r3, r3, #1
 8000eba:	b2db      	uxtb	r3, r3
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d102      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x1ce>
 8000ec0:	4b46      	ldr	r3, [pc, #280]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	e015      	b.n	8000ef2 <HAL_RCC_OscConfig+0x1fa>
 8000ec6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eca:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ece:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000ed2:	fa93 f3a3 	rbit	r3, r3
 8000ed6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000eda:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ede:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ee2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000ee6:	fa93 f3a3 	rbit	r3, r3
 8000eea:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000eee:	4b3b      	ldr	r3, [pc, #236]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ef6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000efa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000efe:	fa92 f2a2 	rbit	r2, r2
 8000f02:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000f06:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f0a:	fab2 f282 	clz	r2, r2
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	f042 0220 	orr.w	r2, r2, #32
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	f002 021f 	and.w	r2, r2, #31
 8000f1a:	2101      	movs	r1, #1
 8000f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f20:	4013      	ands	r3, r2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0ab      	beq.n	8000e7e <HAL_RCC_OscConfig+0x186>
 8000f26:	e05c      	b.n	8000fe2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f28:	f7ff fc18 	bl	800075c <HAL_GetTick>
 8000f2c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f30:	e00a      	b.n	8000f48 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f32:	f7ff fc13 	bl	800075c <HAL_GetTick>
 8000f36:	4602      	mov	r2, r0
 8000f38:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b64      	cmp	r3, #100	; 0x64
 8000f40:	d902      	bls.n	8000f48 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	f000 bde6 	b.w	8001b14 <HAL_RCC_OscConfig+0xe1c>
 8000f48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f4c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f54:	fa93 f3a3 	rbit	r3, r3
 8000f58:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000f5c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f60:	fab3 f383 	clz	r3, r3
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	f043 0301 	orr.w	r3, r3, #1
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d102      	bne.n	8000f7a <HAL_RCC_OscConfig+0x282>
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	e015      	b.n	8000fa6 <HAL_RCC_OscConfig+0x2ae>
 8000f7a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f7e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f82:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000f86:	fa93 f3a3 	rbit	r3, r3
 8000f8a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000f8e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f92:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f96:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000f9a:	fa93 f3a3 	rbit	r3, r3
 8000f9e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_RCC_OscConfig+0x2e4>)
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fa6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000faa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000fae:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000fb2:	fa92 f2a2 	rbit	r2, r2
 8000fb6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000fba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000fbe:	fab2 f282 	clz	r2, r2
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	f042 0220 	orr.w	r2, r2, #32
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	f002 021f 	and.w	r2, r2, #31
 8000fce:	2101      	movs	r1, #1
 8000fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1ab      	bne.n	8000f32 <HAL_RCC_OscConfig+0x23a>
 8000fda:	e002      	b.n	8000fe2 <HAL_RCC_OscConfig+0x2ea>
 8000fdc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	f000 8170 	beq.w	80012d2 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ff2:	4bd0      	ldr	r3, [pc, #832]	; (8001334 <HAL_RCC_OscConfig+0x63c>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 030c 	and.w	r3, r3, #12
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00c      	beq.n	8001018 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ffe:	4bcd      	ldr	r3, [pc, #820]	; (8001334 <HAL_RCC_OscConfig+0x63c>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 030c 	and.w	r3, r3, #12
 8001006:	2b08      	cmp	r3, #8
 8001008:	d16d      	bne.n	80010e6 <HAL_RCC_OscConfig+0x3ee>
 800100a:	4bca      	ldr	r3, [pc, #808]	; (8001334 <HAL_RCC_OscConfig+0x63c>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001016:	d166      	bne.n	80010e6 <HAL_RCC_OscConfig+0x3ee>
 8001018:	2302      	movs	r3, #2
 800101a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800101e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001022:	fa93 f3a3 	rbit	r3, r3
 8001026:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800102a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800102e:	fab3 f383 	clz	r3, r3
 8001032:	b2db      	uxtb	r3, r3
 8001034:	095b      	lsrs	r3, r3, #5
 8001036:	b2db      	uxtb	r3, r3
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b01      	cmp	r3, #1
 8001040:	d102      	bne.n	8001048 <HAL_RCC_OscConfig+0x350>
 8001042:	4bbc      	ldr	r3, [pc, #752]	; (8001334 <HAL_RCC_OscConfig+0x63c>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	e013      	b.n	8001070 <HAL_RCC_OscConfig+0x378>
 8001048:	2302      	movs	r3, #2
 800104a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800104e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001052:	fa93 f3a3 	rbit	r3, r3
 8001056:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800105a:	2302      	movs	r3, #2
 800105c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001060:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001064:	fa93 f3a3 	rbit	r3, r3
 8001068:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800106c:	4bb1      	ldr	r3, [pc, #708]	; (8001334 <HAL_RCC_OscConfig+0x63c>)
 800106e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001070:	2202      	movs	r2, #2
 8001072:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001076:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800107a:	fa92 f2a2 	rbit	r2, r2
 800107e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001082:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001086:	fab2 f282 	clz	r2, r2
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	f042 0220 	orr.w	r2, r2, #32
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	f002 021f 	and.w	r2, r2, #31
 8001096:	2101      	movs	r1, #1
 8001098:	fa01 f202 	lsl.w	r2, r1, r2
 800109c:	4013      	ands	r3, r2
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d007      	beq.n	80010b2 <HAL_RCC_OscConfig+0x3ba>
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d002      	beq.n	80010b2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	f000 bd31 	b.w	8001b14 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b2:	4ba0      	ldr	r3, [pc, #640]	; (8001334 <HAL_RCC_OscConfig+0x63c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ba:	1d3b      	adds	r3, r7, #4
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	21f8      	movs	r1, #248	; 0xf8
 80010c2:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010c6:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80010ca:	fa91 f1a1 	rbit	r1, r1
 80010ce:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80010d2:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010d6:	fab1 f181 	clz	r1, r1
 80010da:	b2c9      	uxtb	r1, r1
 80010dc:	408b      	lsls	r3, r1
 80010de:	4995      	ldr	r1, [pc, #596]	; (8001334 <HAL_RCC_OscConfig+0x63c>)
 80010e0:	4313      	orrs	r3, r2
 80010e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e4:	e0f5      	b.n	80012d2 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	f000 8085 	beq.w	80011fc <HAL_RCC_OscConfig+0x504>
 80010f2:	2301      	movs	r3, #1
 80010f4:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80010fc:	fa93 f3a3 	rbit	r3, r3
 8001100:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001104:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001108:	fab3 f383 	clz	r3, r3
 800110c:	b2db      	uxtb	r3, r3
 800110e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001112:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	461a      	mov	r2, r3
 800111a:	2301      	movs	r3, #1
 800111c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800111e:	f7ff fb1d 	bl	800075c <HAL_GetTick>
 8001122:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001126:	e00a      	b.n	800113e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001128:	f7ff fb18 	bl	800075c <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b02      	cmp	r3, #2
 8001136:	d902      	bls.n	800113e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	f000 bceb 	b.w	8001b14 <HAL_RCC_OscConfig+0xe1c>
 800113e:	2302      	movs	r3, #2
 8001140:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001144:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001148:	fa93 f3a3 	rbit	r3, r3
 800114c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001150:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001154:	fab3 f383 	clz	r3, r3
 8001158:	b2db      	uxtb	r3, r3
 800115a:	095b      	lsrs	r3, r3, #5
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f043 0301 	orr.w	r3, r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	2b01      	cmp	r3, #1
 8001166:	d102      	bne.n	800116e <HAL_RCC_OscConfig+0x476>
 8001168:	4b72      	ldr	r3, [pc, #456]	; (8001334 <HAL_RCC_OscConfig+0x63c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	e013      	b.n	8001196 <HAL_RCC_OscConfig+0x49e>
 800116e:	2302      	movs	r3, #2
 8001170:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001174:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001178:	fa93 f3a3 	rbit	r3, r3
 800117c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001180:	2302      	movs	r3, #2
 8001182:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001186:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800118a:	fa93 f3a3 	rbit	r3, r3
 800118e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001192:	4b68      	ldr	r3, [pc, #416]	; (8001334 <HAL_RCC_OscConfig+0x63c>)
 8001194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001196:	2202      	movs	r2, #2
 8001198:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800119c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80011a0:	fa92 f2a2 	rbit	r2, r2
 80011a4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80011a8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011ac:	fab2 f282 	clz	r2, r2
 80011b0:	b2d2      	uxtb	r2, r2
 80011b2:	f042 0220 	orr.w	r2, r2, #32
 80011b6:	b2d2      	uxtb	r2, r2
 80011b8:	f002 021f 	and.w	r2, r2, #31
 80011bc:	2101      	movs	r1, #1
 80011be:	fa01 f202 	lsl.w	r2, r1, r2
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d0af      	beq.n	8001128 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c8:	4b5a      	ldr	r3, [pc, #360]	; (8001334 <HAL_RCC_OscConfig+0x63c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011d0:	1d3b      	adds	r3, r7, #4
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	691b      	ldr	r3, [r3, #16]
 80011d6:	21f8      	movs	r1, #248	; 0xf8
 80011d8:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011dc:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80011e0:	fa91 f1a1 	rbit	r1, r1
 80011e4:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80011e8:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011ec:	fab1 f181 	clz	r1, r1
 80011f0:	b2c9      	uxtb	r1, r1
 80011f2:	408b      	lsls	r3, r1
 80011f4:	494f      	ldr	r1, [pc, #316]	; (8001334 <HAL_RCC_OscConfig+0x63c>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	600b      	str	r3, [r1, #0]
 80011fa:	e06a      	b.n	80012d2 <HAL_RCC_OscConfig+0x5da>
 80011fc:	2301      	movs	r3, #1
 80011fe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001202:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001206:	fa93 f3a3 	rbit	r3, r3
 800120a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800120e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001212:	fab3 f383 	clz	r3, r3
 8001216:	b2db      	uxtb	r3, r3
 8001218:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800121c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	461a      	mov	r2, r3
 8001224:	2300      	movs	r3, #0
 8001226:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001228:	f7ff fa98 	bl	800075c <HAL_GetTick>
 800122c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001230:	e00a      	b.n	8001248 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001232:	f7ff fa93 	bl	800075c <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d902      	bls.n	8001248 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	f000 bc66 	b.w	8001b14 <HAL_RCC_OscConfig+0xe1c>
 8001248:	2302      	movs	r3, #2
 800124a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001252:	fa93 f3a3 	rbit	r3, r3
 8001256:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800125a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125e:	fab3 f383 	clz	r3, r3
 8001262:	b2db      	uxtb	r3, r3
 8001264:	095b      	lsrs	r3, r3, #5
 8001266:	b2db      	uxtb	r3, r3
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b01      	cmp	r3, #1
 8001270:	d102      	bne.n	8001278 <HAL_RCC_OscConfig+0x580>
 8001272:	4b30      	ldr	r3, [pc, #192]	; (8001334 <HAL_RCC_OscConfig+0x63c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	e013      	b.n	80012a0 <HAL_RCC_OscConfig+0x5a8>
 8001278:	2302      	movs	r3, #2
 800127a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001282:	fa93 f3a3 	rbit	r3, r3
 8001286:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800128a:	2302      	movs	r3, #2
 800128c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001290:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001294:	fa93 f3a3 	rbit	r3, r3
 8001298:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800129c:	4b25      	ldr	r3, [pc, #148]	; (8001334 <HAL_RCC_OscConfig+0x63c>)
 800129e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a0:	2202      	movs	r2, #2
 80012a2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80012a6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80012aa:	fa92 f2a2 	rbit	r2, r2
 80012ae:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80012b2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012b6:	fab2 f282 	clz	r2, r2
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	f042 0220 	orr.w	r2, r2, #32
 80012c0:	b2d2      	uxtb	r2, r2
 80012c2:	f002 021f 	and.w	r2, r2, #31
 80012c6:	2101      	movs	r1, #1
 80012c8:	fa01 f202 	lsl.w	r2, r1, r2
 80012cc:	4013      	ands	r3, r2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1af      	bne.n	8001232 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0308 	and.w	r3, r3, #8
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80da 	beq.w	8001496 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d069      	beq.n	80013c0 <HAL_RCC_OscConfig+0x6c8>
 80012ec:	2301      	movs	r3, #1
 80012ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80012f6:	fa93 f3a3 	rbit	r3, r3
 80012fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80012fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001302:	fab3 f383 	clz	r3, r3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	461a      	mov	r2, r3
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_RCC_OscConfig+0x640>)
 800130c:	4413      	add	r3, r2
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	461a      	mov	r2, r3
 8001312:	2301      	movs	r3, #1
 8001314:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fa21 	bl	800075c <HAL_GetTick>
 800131a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800131e:	e00d      	b.n	800133c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001320:	f7ff fa1c 	bl	800075c <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d905      	bls.n	800133c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e3ef      	b.n	8001b14 <HAL_RCC_OscConfig+0xe1c>
 8001334:	40021000 	.word	0x40021000
 8001338:	10908120 	.word	0x10908120
 800133c:	2302      	movs	r3, #2
 800133e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001346:	fa93 f2a3 	rbit	r2, r3
 800134a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001354:	2202      	movs	r2, #2
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	fa93 f2a3 	rbit	r2, r3
 8001362:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800136c:	2202      	movs	r2, #2
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	fa93 f2a3 	rbit	r2, r3
 800137a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800137e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001380:	4ba4      	ldr	r3, [pc, #656]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 8001382:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001384:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001388:	2102      	movs	r1, #2
 800138a:	6019      	str	r1, [r3, #0]
 800138c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	fa93 f1a3 	rbit	r1, r3
 8001396:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800139a:	6019      	str	r1, [r3, #0]
  return result;
 800139c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	fab3 f383 	clz	r3, r3
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	f003 031f 	and.w	r3, r3, #31
 80013b2:	2101      	movs	r1, #1
 80013b4:	fa01 f303 	lsl.w	r3, r1, r3
 80013b8:	4013      	ands	r3, r2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d0b0      	beq.n	8001320 <HAL_RCC_OscConfig+0x628>
 80013be:	e06a      	b.n	8001496 <HAL_RCC_OscConfig+0x79e>
 80013c0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013c8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	fa93 f2a3 	rbit	r2, r3
 80013d2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80013d6:	601a      	str	r2, [r3, #0]
  return result;
 80013d8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80013dc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013de:	fab3 f383 	clz	r3, r3
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b8c      	ldr	r3, [pc, #560]	; (8001618 <HAL_RCC_OscConfig+0x920>)
 80013e8:	4413      	add	r3, r2
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	461a      	mov	r2, r3
 80013ee:	2300      	movs	r3, #0
 80013f0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013f2:	f7ff f9b3 	bl	800075c <HAL_GetTick>
 80013f6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013fa:	e009      	b.n	8001410 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013fc:	f7ff f9ae 	bl	800075c <HAL_GetTick>
 8001400:	4602      	mov	r2, r0
 8001402:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e381      	b.n	8001b14 <HAL_RCC_OscConfig+0xe1c>
 8001410:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001414:	2202      	movs	r2, #2
 8001416:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001418:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	fa93 f2a3 	rbit	r2, r3
 8001422:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800142c:	2202      	movs	r2, #2
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	fa93 f2a3 	rbit	r2, r3
 800143a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001444:	2202      	movs	r2, #2
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	fa93 f2a3 	rbit	r2, r3
 8001452:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001456:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001458:	4b6e      	ldr	r3, [pc, #440]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 800145a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800145c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001460:	2102      	movs	r1, #2
 8001462:	6019      	str	r1, [r3, #0]
 8001464:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	fa93 f1a3 	rbit	r1, r3
 800146e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001472:	6019      	str	r1, [r3, #0]
  return result;
 8001474:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	fab3 f383 	clz	r3, r3
 800147e:	b2db      	uxtb	r3, r3
 8001480:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001484:	b2db      	uxtb	r3, r3
 8001486:	f003 031f 	and.w	r3, r3, #31
 800148a:	2101      	movs	r1, #1
 800148c:	fa01 f303 	lsl.w	r3, r1, r3
 8001490:	4013      	ands	r3, r2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1b2      	bne.n	80013fc <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	f000 8157 	beq.w	8001754 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014a6:	2300      	movs	r3, #0
 80014a8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ac:	4b59      	ldr	r3, [pc, #356]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d112      	bne.n	80014de <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014b8:	4b56      	ldr	r3, [pc, #344]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 80014ba:	69db      	ldr	r3, [r3, #28]
 80014bc:	4a55      	ldr	r2, [pc, #340]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 80014be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c2:	61d3      	str	r3, [r2, #28]
 80014c4:	4b53      	ldr	r3, [pc, #332]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 80014c6:	69db      	ldr	r3, [r3, #28]
 80014c8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80014cc:	f107 030c 	add.w	r3, r7, #12
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80014d8:	2301      	movs	r3, #1
 80014da:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014de:	4b4f      	ldr	r3, [pc, #316]	; (800161c <HAL_RCC_OscConfig+0x924>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d11a      	bne.n	8001520 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ea:	4b4c      	ldr	r3, [pc, #304]	; (800161c <HAL_RCC_OscConfig+0x924>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a4b      	ldr	r2, [pc, #300]	; (800161c <HAL_RCC_OscConfig+0x924>)
 80014f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f6:	f7ff f931 	bl	800075c <HAL_GetTick>
 80014fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014fe:	e009      	b.n	8001514 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001500:	f7ff f92c 	bl	800075c <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b64      	cmp	r3, #100	; 0x64
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e2ff      	b.n	8001b14 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001514:	4b41      	ldr	r3, [pc, #260]	; (800161c <HAL_RCC_OscConfig+0x924>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0ef      	beq.n	8001500 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d106      	bne.n	8001538 <HAL_RCC_OscConfig+0x840>
 800152a:	4b3a      	ldr	r3, [pc, #232]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 800152c:	6a1b      	ldr	r3, [r3, #32]
 800152e:	4a39      	ldr	r2, [pc, #228]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6213      	str	r3, [r2, #32]
 8001536:	e02f      	b.n	8001598 <HAL_RCC_OscConfig+0x8a0>
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10c      	bne.n	800155c <HAL_RCC_OscConfig+0x864>
 8001542:	4b34      	ldr	r3, [pc, #208]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	4a33      	ldr	r2, [pc, #204]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	6213      	str	r3, [r2, #32]
 800154e:	4b31      	ldr	r3, [pc, #196]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 8001550:	6a1b      	ldr	r3, [r3, #32]
 8001552:	4a30      	ldr	r2, [pc, #192]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 8001554:	f023 0304 	bic.w	r3, r3, #4
 8001558:	6213      	str	r3, [r2, #32]
 800155a:	e01d      	b.n	8001598 <HAL_RCC_OscConfig+0x8a0>
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	2b05      	cmp	r3, #5
 8001564:	d10c      	bne.n	8001580 <HAL_RCC_OscConfig+0x888>
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	4a2a      	ldr	r2, [pc, #168]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 800156c:	f043 0304 	orr.w	r3, r3, #4
 8001570:	6213      	str	r3, [r2, #32]
 8001572:	4b28      	ldr	r3, [pc, #160]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	4a27      	ldr	r2, [pc, #156]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	6213      	str	r3, [r2, #32]
 800157e:	e00b      	b.n	8001598 <HAL_RCC_OscConfig+0x8a0>
 8001580:	4b24      	ldr	r3, [pc, #144]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 8001582:	6a1b      	ldr	r3, [r3, #32]
 8001584:	4a23      	ldr	r2, [pc, #140]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	6213      	str	r3, [r2, #32]
 800158c:	4b21      	ldr	r3, [pc, #132]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 800158e:	6a1b      	ldr	r3, [r3, #32]
 8001590:	4a20      	ldr	r2, [pc, #128]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 8001592:	f023 0304 	bic.w	r3, r3, #4
 8001596:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d06a      	beq.n	8001678 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a2:	f7ff f8db 	bl	800075c <HAL_GetTick>
 80015a6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015aa:	e00b      	b.n	80015c4 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015ac:	f7ff f8d6 	bl	800075c <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80015bc:	4293      	cmp	r3, r2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e2a7      	b.n	8001b14 <HAL_RCC_OscConfig+0xe1c>
 80015c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015c8:	2202      	movs	r2, #2
 80015ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	fa93 f2a3 	rbit	r2, r3
 80015d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015e0:	2202      	movs	r2, #2
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	fa93 f2a3 	rbit	r2, r3
 80015ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015f2:	601a      	str	r2, [r3, #0]
  return result;
 80015f4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80015f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fa:	fab3 f383 	clz	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	095b      	lsrs	r3, r3, #5
 8001602:	b2db      	uxtb	r3, r3
 8001604:	f043 0302 	orr.w	r3, r3, #2
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d108      	bne.n	8001620 <HAL_RCC_OscConfig+0x928>
 800160e:	4b01      	ldr	r3, [pc, #4]	; (8001614 <HAL_RCC_OscConfig+0x91c>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	e013      	b.n	800163c <HAL_RCC_OscConfig+0x944>
 8001614:	40021000 	.word	0x40021000
 8001618:	10908120 	.word	0x10908120
 800161c:	40007000 	.word	0x40007000
 8001620:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001624:	2202      	movs	r2, #2
 8001626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001628:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	fa93 f2a3 	rbit	r2, r3
 8001632:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	4bc0      	ldr	r3, [pc, #768]	; (800193c <HAL_RCC_OscConfig+0xc44>)
 800163a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001640:	2102      	movs	r1, #2
 8001642:	6011      	str	r1, [r2, #0]
 8001644:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	fa92 f1a2 	rbit	r1, r2
 800164e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001652:	6011      	str	r1, [r2, #0]
  return result;
 8001654:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	fab2 f282 	clz	r2, r2
 800165e:	b2d2      	uxtb	r2, r2
 8001660:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	f002 021f 	and.w	r2, r2, #31
 800166a:	2101      	movs	r1, #1
 800166c:	fa01 f202 	lsl.w	r2, r1, r2
 8001670:	4013      	ands	r3, r2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d09a      	beq.n	80015ac <HAL_RCC_OscConfig+0x8b4>
 8001676:	e063      	b.n	8001740 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001678:	f7ff f870 	bl	800075c <HAL_GetTick>
 800167c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001680:	e00b      	b.n	800169a <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001682:	f7ff f86b 	bl	800075c <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001692:	4293      	cmp	r3, r2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e23c      	b.n	8001b14 <HAL_RCC_OscConfig+0xe1c>
 800169a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800169e:	2202      	movs	r2, #2
 80016a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	fa93 f2a3 	rbit	r2, r3
 80016ac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016b6:	2202      	movs	r2, #2
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	fa93 f2a3 	rbit	r2, r3
 80016c4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016c8:	601a      	str	r2, [r3, #0]
  return result;
 80016ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80016ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016d0:	fab3 f383 	clz	r3, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d102      	bne.n	80016ea <HAL_RCC_OscConfig+0x9f2>
 80016e4:	4b95      	ldr	r3, [pc, #596]	; (800193c <HAL_RCC_OscConfig+0xc44>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	e00d      	b.n	8001706 <HAL_RCC_OscConfig+0xa0e>
 80016ea:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016ee:	2202      	movs	r2, #2
 80016f0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	fa93 f2a3 	rbit	r2, r3
 80016fc:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	4b8e      	ldr	r3, [pc, #568]	; (800193c <HAL_RCC_OscConfig+0xc44>)
 8001704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001706:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800170a:	2102      	movs	r1, #2
 800170c:	6011      	str	r1, [r2, #0]
 800170e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	fa92 f1a2 	rbit	r1, r2
 8001718:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800171c:	6011      	str	r1, [r2, #0]
  return result;
 800171e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001722:	6812      	ldr	r2, [r2, #0]
 8001724:	fab2 f282 	clz	r2, r2
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800172e:	b2d2      	uxtb	r2, r2
 8001730:	f002 021f 	and.w	r2, r2, #31
 8001734:	2101      	movs	r1, #1
 8001736:	fa01 f202 	lsl.w	r2, r1, r2
 800173a:	4013      	ands	r3, r2
 800173c:	2b00      	cmp	r3, #0
 800173e:	d1a0      	bne.n	8001682 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001740:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001744:	2b01      	cmp	r3, #1
 8001746:	d105      	bne.n	8001754 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001748:	4b7c      	ldr	r3, [pc, #496]	; (800193c <HAL_RCC_OscConfig+0xc44>)
 800174a:	69db      	ldr	r3, [r3, #28]
 800174c:	4a7b      	ldr	r2, [pc, #492]	; (800193c <HAL_RCC_OscConfig+0xc44>)
 800174e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001752:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 81d9 	beq.w	8001b12 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001760:	4b76      	ldr	r3, [pc, #472]	; (800193c <HAL_RCC_OscConfig+0xc44>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 030c 	and.w	r3, r3, #12
 8001768:	2b08      	cmp	r3, #8
 800176a:	f000 81a6 	beq.w	8001aba <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800176e:	1d3b      	adds	r3, r7, #4
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	2b02      	cmp	r3, #2
 8001776:	f040 811e 	bne.w	80019b6 <HAL_RCC_OscConfig+0xcbe>
 800177a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800177e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	fa93 f2a3 	rbit	r2, r3
 800178e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001792:	601a      	str	r2, [r3, #0]
  return result;
 8001794:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001798:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	fab3 f383 	clz	r3, r3
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	461a      	mov	r2, r3
 80017ac:	2300      	movs	r3, #0
 80017ae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7fe ffd4 	bl	800075c <HAL_GetTick>
 80017b4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017b8:	e009      	b.n	80017ce <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ba:	f7fe ffcf 	bl	800075c <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e1a2      	b.n	8001b14 <HAL_RCC_OscConfig+0xe1c>
 80017ce:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017d2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80017d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	fa93 f2a3 	rbit	r2, r3
 80017e2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017e6:	601a      	str	r2, [r3, #0]
  return result;
 80017e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80017ec:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ee:	fab3 f383 	clz	r3, r3
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	095b      	lsrs	r3, r3, #5
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d102      	bne.n	8001808 <HAL_RCC_OscConfig+0xb10>
 8001802:	4b4e      	ldr	r3, [pc, #312]	; (800193c <HAL_RCC_OscConfig+0xc44>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	e01b      	b.n	8001840 <HAL_RCC_OscConfig+0xb48>
 8001808:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800180c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001810:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001812:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	fa93 f2a3 	rbit	r2, r3
 800181c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001826:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	fa93 f2a3 	rbit	r2, r3
 8001836:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	4b3f      	ldr	r3, [pc, #252]	; (800193c <HAL_RCC_OscConfig+0xc44>)
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001844:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001848:	6011      	str	r1, [r2, #0]
 800184a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800184e:	6812      	ldr	r2, [r2, #0]
 8001850:	fa92 f1a2 	rbit	r1, r2
 8001854:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001858:	6011      	str	r1, [r2, #0]
  return result;
 800185a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800185e:	6812      	ldr	r2, [r2, #0]
 8001860:	fab2 f282 	clz	r2, r2
 8001864:	b2d2      	uxtb	r2, r2
 8001866:	f042 0220 	orr.w	r2, r2, #32
 800186a:	b2d2      	uxtb	r2, r2
 800186c:	f002 021f 	and.w	r2, r2, #31
 8001870:	2101      	movs	r1, #1
 8001872:	fa01 f202 	lsl.w	r2, r1, r2
 8001876:	4013      	ands	r3, r2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d19e      	bne.n	80017ba <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800187c:	4b2f      	ldr	r3, [pc, #188]	; (800193c <HAL_RCC_OscConfig+0xc44>)
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	f023 020f 	bic.w	r2, r3, #15
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800188a:	492c      	ldr	r1, [pc, #176]	; (800193c <HAL_RCC_OscConfig+0xc44>)
 800188c:	4313      	orrs	r3, r2
 800188e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001890:	4b2a      	ldr	r3, [pc, #168]	; (800193c <HAL_RCC_OscConfig+0xc44>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001898:	1d3b      	adds	r3, r7, #4
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6a19      	ldr	r1, [r3, #32]
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	69db      	ldr	r3, [r3, #28]
 80018a4:	430b      	orrs	r3, r1
 80018a6:	4925      	ldr	r1, [pc, #148]	; (800193c <HAL_RCC_OscConfig+0xc44>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
 80018ac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018b0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018b4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	fa93 f2a3 	rbit	r2, r3
 80018c0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018c4:	601a      	str	r2, [r3, #0]
  return result;
 80018c6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018ca:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018cc:	fab3 f383 	clz	r3, r3
 80018d0:	b2db      	uxtb	r3, r3
 80018d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	461a      	mov	r2, r3
 80018de:	2301      	movs	r3, #1
 80018e0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018e2:	f7fe ff3b 	bl	800075c <HAL_GetTick>
 80018e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ea:	e009      	b.n	8001900 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ec:	f7fe ff36 	bl	800075c <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018f6:	1ad3      	subs	r3, r2, r3
 80018f8:	2b02      	cmp	r3, #2
 80018fa:	d901      	bls.n	8001900 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 80018fc:	2303      	movs	r3, #3
 80018fe:	e109      	b.n	8001b14 <HAL_RCC_OscConfig+0xe1c>
 8001900:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001904:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	fa93 f2a3 	rbit	r2, r3
 8001914:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001918:	601a      	str	r2, [r3, #0]
  return result;
 800191a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800191e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001920:	fab3 f383 	clz	r3, r3
 8001924:	b2db      	uxtb	r3, r3
 8001926:	095b      	lsrs	r3, r3, #5
 8001928:	b2db      	uxtb	r3, r3
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	b2db      	uxtb	r3, r3
 8001930:	2b01      	cmp	r3, #1
 8001932:	d105      	bne.n	8001940 <HAL_RCC_OscConfig+0xc48>
 8001934:	4b01      	ldr	r3, [pc, #4]	; (800193c <HAL_RCC_OscConfig+0xc44>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	e01e      	b.n	8001978 <HAL_RCC_OscConfig+0xc80>
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001944:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001948:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800194a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	fa93 f2a3 	rbit	r2, r3
 8001954:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800195e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	fa93 f2a3 	rbit	r2, r3
 800196e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001972:	601a      	str	r2, [r3, #0]
 8001974:	4b6a      	ldr	r3, [pc, #424]	; (8001b20 <HAL_RCC_OscConfig+0xe28>)
 8001976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001978:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800197c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001980:	6011      	str	r1, [r2, #0]
 8001982:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	fa92 f1a2 	rbit	r1, r2
 800198c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001990:	6011      	str	r1, [r2, #0]
  return result;
 8001992:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001996:	6812      	ldr	r2, [r2, #0]
 8001998:	fab2 f282 	clz	r2, r2
 800199c:	b2d2      	uxtb	r2, r2
 800199e:	f042 0220 	orr.w	r2, r2, #32
 80019a2:	b2d2      	uxtb	r2, r2
 80019a4:	f002 021f 	and.w	r2, r2, #31
 80019a8:	2101      	movs	r1, #1
 80019aa:	fa01 f202 	lsl.w	r2, r1, r2
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d09b      	beq.n	80018ec <HAL_RCC_OscConfig+0xbf4>
 80019b4:	e0ad      	b.n	8001b12 <HAL_RCC_OscConfig+0xe1a>
 80019b6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019ba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	fa93 f2a3 	rbit	r2, r3
 80019ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019ce:	601a      	str	r2, [r3, #0]
  return result;
 80019d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019d4:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d6:	fab3 f383 	clz	r3, r3
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019e0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	461a      	mov	r2, r3
 80019e8:	2300      	movs	r3, #0
 80019ea:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7fe feb6 	bl	800075c <HAL_GetTick>
 80019f0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f4:	e009      	b.n	8001a0a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f6:	f7fe feb1 	bl	800075c <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b02      	cmp	r3, #2
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e084      	b.n	8001b14 <HAL_RCC_OscConfig+0xe1c>
 8001a0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	fa93 f2a3 	rbit	r2, r3
 8001a1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a22:	601a      	str	r2, [r3, #0]
  return result;
 8001a24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a28:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a2a:	fab3 f383 	clz	r3, r3
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	095b      	lsrs	r3, r3, #5
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f043 0301 	orr.w	r3, r3, #1
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d102      	bne.n	8001a44 <HAL_RCC_OscConfig+0xd4c>
 8001a3e:	4b38      	ldr	r3, [pc, #224]	; (8001b20 <HAL_RCC_OscConfig+0xe28>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	e01b      	b.n	8001a7c <HAL_RCC_OscConfig+0xd84>
 8001a44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	fa93 f2a3 	rbit	r2, r3
 8001a58:	f107 0320 	add.w	r3, r7, #32
 8001a5c:	601a      	str	r2, [r3, #0]
 8001a5e:	f107 031c 	add.w	r3, r7, #28
 8001a62:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	f107 031c 	add.w	r3, r7, #28
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	fa93 f2a3 	rbit	r2, r3
 8001a72:	f107 0318 	add.w	r3, r7, #24
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	4b29      	ldr	r3, [pc, #164]	; (8001b20 <HAL_RCC_OscConfig+0xe28>)
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	f107 0214 	add.w	r2, r7, #20
 8001a80:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a84:	6011      	str	r1, [r2, #0]
 8001a86:	f107 0214 	add.w	r2, r7, #20
 8001a8a:	6812      	ldr	r2, [r2, #0]
 8001a8c:	fa92 f1a2 	rbit	r1, r2
 8001a90:	f107 0210 	add.w	r2, r7, #16
 8001a94:	6011      	str	r1, [r2, #0]
  return result;
 8001a96:	f107 0210 	add.w	r2, r7, #16
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	fab2 f282 	clz	r2, r2
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	f042 0220 	orr.w	r2, r2, #32
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	f002 021f 	and.w	r2, r2, #31
 8001aac:	2101      	movs	r1, #1
 8001aae:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d19e      	bne.n	80019f6 <HAL_RCC_OscConfig+0xcfe>
 8001ab8:	e02b      	b.n	8001b12 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aba:	1d3b      	adds	r3, r7, #4
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d101      	bne.n	8001ac8 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e025      	b.n	8001b14 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_RCC_OscConfig+0xe28>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001ad0:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <HAL_RCC_OscConfig+0xe28>)
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001ad8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001adc:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	429a      	cmp	r2, r3
 8001ae8:	d111      	bne.n	8001b0e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001aea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001aee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001af2:	1d3b      	adds	r3, r7, #4
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d108      	bne.n	8001b0e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001afc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b00:	f003 020f 	and.w	r2, r3, #15
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40021000 	.word	0x40021000

08001b24 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b09e      	sub	sp, #120	; 0x78
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e162      	b.n	8001e02 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b3c:	4b90      	ldr	r3, [pc, #576]	; (8001d80 <HAL_RCC_ClockConfig+0x25c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0307 	and.w	r3, r3, #7
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d910      	bls.n	8001b6c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4a:	4b8d      	ldr	r3, [pc, #564]	; (8001d80 <HAL_RCC_ClockConfig+0x25c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f023 0207 	bic.w	r2, r3, #7
 8001b52:	498b      	ldr	r1, [pc, #556]	; (8001d80 <HAL_RCC_ClockConfig+0x25c>)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5a:	4b89      	ldr	r3, [pc, #548]	; (8001d80 <HAL_RCC_ClockConfig+0x25c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	683a      	ldr	r2, [r7, #0]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d001      	beq.n	8001b6c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e14a      	b.n	8001e02 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d008      	beq.n	8001b8a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b78:	4b82      	ldr	r3, [pc, #520]	; (8001d84 <HAL_RCC_ClockConfig+0x260>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	497f      	ldr	r1, [pc, #508]	; (8001d84 <HAL_RCC_ClockConfig+0x260>)
 8001b86:	4313      	orrs	r3, r2
 8001b88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 80dc 	beq.w	8001d50 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d13c      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xf6>
 8001ba0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ba6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ba8:	fa93 f3a3 	rbit	r3, r3
 8001bac:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001bae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb0:	fab3 f383 	clz	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	095b      	lsrs	r3, r3, #5
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d102      	bne.n	8001bca <HAL_RCC_ClockConfig+0xa6>
 8001bc4:	4b6f      	ldr	r3, [pc, #444]	; (8001d84 <HAL_RCC_ClockConfig+0x260>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	e00f      	b.n	8001bea <HAL_RCC_ClockConfig+0xc6>
 8001bca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bce:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bd2:	fa93 f3a3 	rbit	r3, r3
 8001bd6:	667b      	str	r3, [r7, #100]	; 0x64
 8001bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bdc:	663b      	str	r3, [r7, #96]	; 0x60
 8001bde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001be0:	fa93 f3a3 	rbit	r3, r3
 8001be4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001be6:	4b67      	ldr	r3, [pc, #412]	; (8001d84 <HAL_RCC_ClockConfig+0x260>)
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bee:	65ba      	str	r2, [r7, #88]	; 0x58
 8001bf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001bf2:	fa92 f2a2 	rbit	r2, r2
 8001bf6:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001bf8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001bfa:	fab2 f282 	clz	r2, r2
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	f042 0220 	orr.w	r2, r2, #32
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	f002 021f 	and.w	r2, r2, #31
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d17b      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e0f3      	b.n	8001e02 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d13c      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x178>
 8001c22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c26:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001c2a:	fa93 f3a3 	rbit	r3, r3
 8001c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c32:	fab3 f383 	clz	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	095b      	lsrs	r3, r3, #5
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	f043 0301 	orr.w	r3, r3, #1
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d102      	bne.n	8001c4c <HAL_RCC_ClockConfig+0x128>
 8001c46:	4b4f      	ldr	r3, [pc, #316]	; (8001d84 <HAL_RCC_ClockConfig+0x260>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	e00f      	b.n	8001c6c <HAL_RCC_ClockConfig+0x148>
 8001c4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c50:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c54:	fa93 f3a3 	rbit	r3, r3
 8001c58:	647b      	str	r3, [r7, #68]	; 0x44
 8001c5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c5e:	643b      	str	r3, [r7, #64]	; 0x40
 8001c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c62:	fa93 f3a3 	rbit	r3, r3
 8001c66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c68:	4b46      	ldr	r3, [pc, #280]	; (8001d84 <HAL_RCC_ClockConfig+0x260>)
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c70:	63ba      	str	r2, [r7, #56]	; 0x38
 8001c72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c74:	fa92 f2a2 	rbit	r2, r2
 8001c78:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001c7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c7c:	fab2 f282 	clz	r2, r2
 8001c80:	b2d2      	uxtb	r2, r2
 8001c82:	f042 0220 	orr.w	r2, r2, #32
 8001c86:	b2d2      	uxtb	r2, r2
 8001c88:	f002 021f 	and.w	r2, r2, #31
 8001c8c:	2101      	movs	r1, #1
 8001c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001c92:	4013      	ands	r3, r2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d13a      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e0b2      	b.n	8001e02 <HAL_RCC_ClockConfig+0x2de>
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca2:	fa93 f3a3 	rbit	r3, r3
 8001ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	095b      	lsrs	r3, r3, #5
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d102      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0x1a0>
 8001cbe:	4b31      	ldr	r3, [pc, #196]	; (8001d84 <HAL_RCC_ClockConfig+0x260>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	e00d      	b.n	8001ce0 <HAL_RCC_ClockConfig+0x1bc>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cca:	fa93 f3a3 	rbit	r3, r3
 8001cce:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	623b      	str	r3, [r7, #32]
 8001cd4:	6a3b      	ldr	r3, [r7, #32]
 8001cd6:	fa93 f3a3 	rbit	r3, r3
 8001cda:	61fb      	str	r3, [r7, #28]
 8001cdc:	4b29      	ldr	r3, [pc, #164]	; (8001d84 <HAL_RCC_ClockConfig+0x260>)
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	61ba      	str	r2, [r7, #24]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	fa92 f2a2 	rbit	r2, r2
 8001cea:	617a      	str	r2, [r7, #20]
  return result;
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	fab2 f282 	clz	r2, r2
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	f042 0220 	orr.w	r2, r2, #32
 8001cf8:	b2d2      	uxtb	r2, r2
 8001cfa:	f002 021f 	and.w	r2, r2, #31
 8001cfe:	2101      	movs	r1, #1
 8001d00:	fa01 f202 	lsl.w	r2, r1, r2
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e079      	b.n	8001e02 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d0e:	4b1d      	ldr	r3, [pc, #116]	; (8001d84 <HAL_RCC_ClockConfig+0x260>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f023 0203 	bic.w	r2, r3, #3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	491a      	ldr	r1, [pc, #104]	; (8001d84 <HAL_RCC_ClockConfig+0x260>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d20:	f7fe fd1c 	bl	800075c <HAL_GetTick>
 8001d24:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d26:	e00a      	b.n	8001d3e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d28:	f7fe fd18 	bl	800075c <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e061      	b.n	8001e02 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d3e:	4b11      	ldr	r3, [pc, #68]	; (8001d84 <HAL_RCC_ClockConfig+0x260>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f003 020c 	and.w	r2, r3, #12
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d1eb      	bne.n	8001d28 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d50:	4b0b      	ldr	r3, [pc, #44]	; (8001d80 <HAL_RCC_ClockConfig+0x25c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d214      	bcs.n	8001d88 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <HAL_RCC_ClockConfig+0x25c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 0207 	bic.w	r2, r3, #7
 8001d66:	4906      	ldr	r1, [pc, #24]	; (8001d80 <HAL_RCC_ClockConfig+0x25c>)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <HAL_RCC_ClockConfig+0x25c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d005      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e040      	b.n	8001e02 <HAL_RCC_ClockConfig+0x2de>
 8001d80:	40022000 	.word	0x40022000
 8001d84:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d94:	4b1d      	ldr	r3, [pc, #116]	; (8001e0c <HAL_RCC_ClockConfig+0x2e8>)
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	491a      	ldr	r1, [pc, #104]	; (8001e0c <HAL_RCC_ClockConfig+0x2e8>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d009      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <HAL_RCC_ClockConfig+0x2e8>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4912      	ldr	r1, [pc, #72]	; (8001e0c <HAL_RCC_ClockConfig+0x2e8>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001dc6:	f000 f829 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8001dca:	4601      	mov	r1, r0
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <HAL_RCC_ClockConfig+0x2e8>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dd4:	22f0      	movs	r2, #240	; 0xf0
 8001dd6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	fa92 f2a2 	rbit	r2, r2
 8001dde:	60fa      	str	r2, [r7, #12]
  return result;
 8001de0:	68fa      	ldr	r2, [r7, #12]
 8001de2:	fab2 f282 	clz	r2, r2
 8001de6:	b2d2      	uxtb	r2, r2
 8001de8:	40d3      	lsrs	r3, r2
 8001dea:	4a09      	ldr	r2, [pc, #36]	; (8001e10 <HAL_RCC_ClockConfig+0x2ec>)
 8001dec:	5cd3      	ldrb	r3, [r2, r3]
 8001dee:	fa21 f303 	lsr.w	r3, r1, r3
 8001df2:	4a08      	ldr	r2, [pc, #32]	; (8001e14 <HAL_RCC_ClockConfig+0x2f0>)
 8001df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <HAL_RCC_ClockConfig+0x2f4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7fe fb46 	bl	800048c <HAL_InitTick>
  
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3778      	adds	r7, #120	; 0x78
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	08008594 	.word	0x08008594
 8001e14:	20000000 	.word	0x20000000
 8001e18:	20000004 	.word	0x20000004

08001e1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b08b      	sub	sp, #44	; 0x2c
 8001e20:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	61fb      	str	r3, [r7, #28]
 8001e26:	2300      	movs	r3, #0
 8001e28:	61bb      	str	r3, [r7, #24]
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2e:	2300      	movs	r3, #0
 8001e30:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001e32:	2300      	movs	r3, #0
 8001e34:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001e36:	4b2a      	ldr	r3, [pc, #168]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 030c 	and.w	r3, r3, #12
 8001e42:	2b04      	cmp	r3, #4
 8001e44:	d002      	beq.n	8001e4c <HAL_RCC_GetSysClockFreq+0x30>
 8001e46:	2b08      	cmp	r3, #8
 8001e48:	d003      	beq.n	8001e52 <HAL_RCC_GetSysClockFreq+0x36>
 8001e4a:	e03f      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e4c:	4b25      	ldr	r3, [pc, #148]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001e4e:	623b      	str	r3, [r7, #32]
      break;
 8001e50:	e03f      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001e58:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001e5c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e5e:	68ba      	ldr	r2, [r7, #8]
 8001e60:	fa92 f2a2 	rbit	r2, r2
 8001e64:	607a      	str	r2, [r7, #4]
  return result;
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	fab2 f282 	clz	r2, r2
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	40d3      	lsrs	r3, r2
 8001e70:	4a1d      	ldr	r2, [pc, #116]	; (8001ee8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001e72:	5cd3      	ldrb	r3, [r2, r3]
 8001e74:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001e76:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7a:	f003 030f 	and.w	r3, r3, #15
 8001e7e:	220f      	movs	r2, #15
 8001e80:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	fa92 f2a2 	rbit	r2, r2
 8001e88:	60fa      	str	r2, [r7, #12]
  return result;
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	fab2 f282 	clz	r2, r2
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	40d3      	lsrs	r3, r2
 8001e94:	4a15      	ldr	r2, [pc, #84]	; (8001eec <HAL_RCC_GetSysClockFreq+0xd0>)
 8001e96:	5cd3      	ldrb	r3, [r2, r3]
 8001e98:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d008      	beq.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001ea4:	4a0f      	ldr	r2, [pc, #60]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001eb4:	e007      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001eb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	fb02 f303 	mul.w	r3, r2, r3
 8001ec4:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec8:	623b      	str	r3, [r7, #32]
      break;
 8001eca:	e002      	b.n	8001ed2 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ecc:	4b05      	ldr	r3, [pc, #20]	; (8001ee4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001ece:	623b      	str	r3, [r7, #32]
      break;
 8001ed0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ed2:	6a3b      	ldr	r3, [r7, #32]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	372c      	adds	r7, #44	; 0x2c
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	40021000 	.word	0x40021000
 8001ee4:	007a1200 	.word	0x007a1200
 8001ee8:	080085ac 	.word	0x080085ac
 8001eec:	080085bc 	.word	0x080085bc

08001ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ef4:	4b03      	ldr	r3, [pc, #12]	; (8001f04 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f00:	4770      	bx	lr
 8001f02:	bf00      	nop
 8001f04:	20000000 	.word	0x20000000

08001f08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001f0e:	f7ff ffef 	bl	8001ef0 <HAL_RCC_GetHCLKFreq>
 8001f12:	4601      	mov	r1, r0
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f1c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001f20:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	fa92 f2a2 	rbit	r2, r2
 8001f28:	603a      	str	r2, [r7, #0]
  return result;
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	fab2 f282 	clz	r2, r2
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	40d3      	lsrs	r3, r2
 8001f34:	4a04      	ldr	r2, [pc, #16]	; (8001f48 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001f36:	5cd3      	ldrb	r3, [r2, r3]
 8001f38:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	40021000 	.word	0x40021000
 8001f48:	080085a4 	.word	0x080085a4

08001f4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001f52:	f7ff ffcd 	bl	8001ef0 <HAL_RCC_GetHCLKFreq>
 8001f56:	4601      	mov	r1, r0
 8001f58:	4b0b      	ldr	r3, [pc, #44]	; (8001f88 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001f60:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001f64:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	fa92 f2a2 	rbit	r2, r2
 8001f6c:	603a      	str	r2, [r7, #0]
  return result;
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	fab2 f282 	clz	r2, r2
 8001f74:	b2d2      	uxtb	r2, r2
 8001f76:	40d3      	lsrs	r3, r2
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <HAL_RCC_GetPCLK2Freq+0x40>)
 8001f7a:	5cd3      	ldrb	r3, [r2, r3]
 8001f7c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001f80:	4618      	mov	r0, r3
 8001f82:	3708      	adds	r7, #8
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	080085a4 	.word	0x080085a4

08001f90 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	220f      	movs	r2, #15
 8001f9e:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fa0:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_RCC_GetClockConfig+0x5c>)
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f003 0203 	and.w	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8001fac:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_RCC_GetClockConfig+0x5c>)
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <HAL_RCC_GetClockConfig+0x5c>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fc4:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_RCC_GetClockConfig+0x5c>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	08db      	lsrs	r3, r3, #3
 8001fca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8001fd2:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <HAL_RCC_GetClockConfig+0x60>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0207 	and.w	r2, r3, #7
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	601a      	str	r2, [r3, #0]
}
 8001fde:	bf00      	nop
 8001fe0:	370c      	adds	r7, #12
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40022000 	.word	0x40022000

08001ff4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b092      	sub	sp, #72	; 0x48
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002000:	2300      	movs	r3, #0
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 80d7 	beq.w	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002018:	4b4e      	ldr	r3, [pc, #312]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800201a:	69db      	ldr	r3, [r3, #28]
 800201c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10e      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002024:	4b4b      	ldr	r3, [pc, #300]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	4a4a      	ldr	r2, [pc, #296]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800202a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202e:	61d3      	str	r3, [r2, #28]
 8002030:	4b48      	ldr	r3, [pc, #288]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800203c:	2301      	movs	r3, #1
 800203e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002042:	4b45      	ldr	r3, [pc, #276]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204a:	2b00      	cmp	r3, #0
 800204c:	d118      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800204e:	4b42      	ldr	r3, [pc, #264]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a41      	ldr	r2, [pc, #260]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002054:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002058:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205a:	f7fe fb7f 	bl	800075c <HAL_GetTick>
 800205e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002060:	e008      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002062:	f7fe fb7b 	bl	800075c <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b64      	cmp	r3, #100	; 0x64
 800206e:	d901      	bls.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e1d6      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002074:	4b38      	ldr	r3, [pc, #224]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002080:	4b34      	ldr	r3, [pc, #208]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002088:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800208a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800208c:	2b00      	cmp	r3, #0
 800208e:	f000 8084 	beq.w	800219a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800209a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800209c:	429a      	cmp	r2, r3
 800209e:	d07c      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020a0:	4b2c      	ldr	r3, [pc, #176]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020ae:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020b2:	fa93 f3a3 	rbit	r3, r3
 80020b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80020b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80020ba:	fab3 f383 	clz	r3, r3
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	461a      	mov	r2, r3
 80020c2:	4b26      	ldr	r3, [pc, #152]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	461a      	mov	r2, r3
 80020ca:	2301      	movs	r3, #1
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020d6:	fa93 f3a3 	rbit	r3, r3
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80020dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	4b1d      	ldr	r3, [pc, #116]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	461a      	mov	r2, r3
 80020ee:	2300      	movs	r3, #0
 80020f0:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80020f2:	4a18      	ldr	r2, [pc, #96]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80020f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020f6:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80020f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d04b      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002102:	f7fe fb2b 	bl	800075c <HAL_GetTick>
 8002106:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002108:	e00a      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210a:	f7fe fb27 	bl	800075c <HAL_GetTick>
 800210e:	4602      	mov	r2, r0
 8002110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	f241 3288 	movw	r2, #5000	; 0x1388
 8002118:	4293      	cmp	r3, r2
 800211a:	d901      	bls.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e180      	b.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002120:	2302      	movs	r3, #2
 8002122:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
 800212c:	2302      	movs	r3, #2
 800212e:	623b      	str	r3, [r7, #32]
 8002130:	6a3b      	ldr	r3, [r7, #32]
 8002132:	fa93 f3a3 	rbit	r3, r3
 8002136:	61fb      	str	r3, [r7, #28]
  return result;
 8002138:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213a:	fab3 f383 	clz	r3, r3
 800213e:	b2db      	uxtb	r3, r3
 8002140:	095b      	lsrs	r3, r3, #5
 8002142:	b2db      	uxtb	r3, r3
 8002144:	f043 0302 	orr.w	r3, r3, #2
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d108      	bne.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800214e:	4b01      	ldr	r3, [pc, #4]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002150:	6a1b      	ldr	r3, [r3, #32]
 8002152:	e00d      	b.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8002154:	40021000 	.word	0x40021000
 8002158:	40007000 	.word	0x40007000
 800215c:	10908100 	.word	0x10908100
 8002160:	2302      	movs	r3, #2
 8002162:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	617b      	str	r3, [r7, #20]
 800216c:	4ba0      	ldr	r3, [pc, #640]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	2202      	movs	r2, #2
 8002172:	613a      	str	r2, [r7, #16]
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	fa92 f2a2 	rbit	r2, r2
 800217a:	60fa      	str	r2, [r7, #12]
  return result;
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	fab2 f282 	clz	r2, r2
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002188:	b2d2      	uxtb	r2, r2
 800218a:	f002 021f 	and.w	r2, r2, #31
 800218e:	2101      	movs	r1, #1
 8002190:	fa01 f202 	lsl.w	r2, r1, r2
 8002194:	4013      	ands	r3, r2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0b7      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800219a:	4b95      	ldr	r3, [pc, #596]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4992      	ldr	r1, [pc, #584]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d105      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b4:	4b8e      	ldr	r3, [pc, #568]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	4a8d      	ldr	r2, [pc, #564]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021be:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d008      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021cc:	4b88      	ldr	r3, [pc, #544]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	f023 0203 	bic.w	r2, r3, #3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4985      	ldr	r1, [pc, #532]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d008      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80021ea:	4b81      	ldr	r3, [pc, #516]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	497e      	ldr	r1, [pc, #504]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d008      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002208:	4b79      	ldr	r3, [pc, #484]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800220a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	4976      	ldr	r1, [pc, #472]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002216:	4313      	orrs	r3, r2
 8002218:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0320 	and.w	r3, r3, #32
 8002222:	2b00      	cmp	r3, #0
 8002224:	d008      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002226:	4b72      	ldr	r3, [pc, #456]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	f023 0210 	bic.w	r2, r3, #16
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	69db      	ldr	r3, [r3, #28]
 8002232:	496f      	ldr	r1, [pc, #444]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002234:	4313      	orrs	r3, r2
 8002236:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d008      	beq.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002244:	4b6a      	ldr	r3, [pc, #424]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002250:	4967      	ldr	r1, [pc, #412]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002252:	4313      	orrs	r3, r2
 8002254:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800225e:	2b00      	cmp	r3, #0
 8002260:	d008      	beq.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002262:	4b63      	ldr	r3, [pc, #396]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002266:	f023 0220 	bic.w	r2, r3, #32
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	4960      	ldr	r1, [pc, #384]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002270:	4313      	orrs	r3, r2
 8002272:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d008      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002280:	4b5b      	ldr	r3, [pc, #364]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800228c:	4958      	ldr	r1, [pc, #352]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800228e:	4313      	orrs	r3, r2
 8002290:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d008      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800229e:	4b54      	ldr	r3, [pc, #336]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	4951      	ldr	r1, [pc, #324]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022bc:	4b4c      	ldr	r3, [pc, #304]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	4949      	ldr	r1, [pc, #292]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d008      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022da:	4b45      	ldr	r3, [pc, #276]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4942      	ldr	r1, [pc, #264]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022e8:	4313      	orrs	r3, r2
 80022ea:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d008      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80022f8:	4b3d      	ldr	r3, [pc, #244]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80022fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002304:	493a      	ldr	r1, [pc, #232]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002306:	4313      	orrs	r3, r2
 8002308:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d008      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002316:	4b36      	ldr	r3, [pc, #216]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002322:	4933      	ldr	r1, [pc, #204]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002324:	4313      	orrs	r3, r2
 8002326:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d008      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002334:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002340:	492b      	ldr	r1, [pc, #172]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002342:	4313      	orrs	r3, r2
 8002344:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d008      	beq.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002352:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	4924      	ldr	r1, [pc, #144]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002360:	4313      	orrs	r3, r2
 8002362:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002370:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002374:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800237c:	491c      	ldr	r1, [pc, #112]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800237e:	4313      	orrs	r3, r2
 8002380:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d008      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800238e:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239a:	4915      	ldr	r1, [pc, #84]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800239c:	4313      	orrs	r3, r2
 800239e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80023ac:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b8:	490d      	ldr	r1, [pc, #52]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d008      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023d6:	4906      	ldr	r1, [pc, #24]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00c      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80023e8:	4b01      	ldr	r3, [pc, #4]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80023ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ec:	e002      	b.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fc:	490b      	ldr	r1, [pc, #44]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d008      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800240e:	4b07      	ldr	r3, [pc, #28]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800241a:	4904      	ldr	r1, [pc, #16]	; (800242c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800241c:	4313      	orrs	r3, r2
 800241e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3748      	adds	r7, #72	; 0x48
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000

08002430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d101      	bne.n	8002442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e01d      	b.n	800247e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f000 f815 	bl	8002486 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3304      	adds	r3, #4
 800246c:	4619      	mov	r1, r3
 800246e:	4610      	mov	r0, r2
 8002470:	f000 f986 	bl	8002780 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2201      	movs	r2, #1
 8002478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68da      	ldr	r2, [r3, #12]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f042 0201 	orr.w	r2, r2, #1
 80024b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	689a      	ldr	r2, [r3, #8]
 80024ba:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <HAL_TIM_Base_Start_IT+0x50>)
 80024bc:	4013      	ands	r3, r2
 80024be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b06      	cmp	r3, #6
 80024c4:	d00b      	beq.n	80024de <HAL_TIM_Base_Start_IT+0x42>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024cc:	d007      	beq.n	80024de <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0201 	orr.w	r2, r2, #1
 80024dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024de:	2300      	movs	r3, #0
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	00010007 	.word	0x00010007

080024f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b02      	cmp	r3, #2
 8002504:	d122      	bne.n	800254c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b02      	cmp	r3, #2
 8002512:	d11b      	bne.n	800254c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0202 	mvn.w	r2, #2
 800251c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f905 	bl	8002742 <HAL_TIM_IC_CaptureCallback>
 8002538:	e005      	b.n	8002546 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f000 f8f7 	bl	800272e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f908 	bl	8002756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b04      	cmp	r3, #4
 8002558:	d122      	bne.n	80025a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	f003 0304 	and.w	r3, r3, #4
 8002564:	2b04      	cmp	r3, #4
 8002566:	d11b      	bne.n	80025a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f06f 0204 	mvn.w	r2, #4
 8002570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2202      	movs	r2, #2
 8002576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f8db 	bl	8002742 <HAL_TIM_IC_CaptureCallback>
 800258c:	e005      	b.n	800259a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f8cd 	bl	800272e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f8de 	bl	8002756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d122      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d11b      	bne.n	80025f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f06f 0208 	mvn.w	r2, #8
 80025c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2204      	movs	r2, #4
 80025ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f003 0303 	and.w	r3, r3, #3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f8b1 	bl	8002742 <HAL_TIM_IC_CaptureCallback>
 80025e0:	e005      	b.n	80025ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f8a3 	bl	800272e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f8b4 	bl	8002756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f003 0310 	and.w	r3, r3, #16
 80025fe:	2b10      	cmp	r3, #16
 8002600:	d122      	bne.n	8002648 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	f003 0310 	and.w	r3, r3, #16
 800260c:	2b10      	cmp	r3, #16
 800260e:	d11b      	bne.n	8002648 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0210 	mvn.w	r2, #16
 8002618:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2208      	movs	r2, #8
 800261e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 f887 	bl	8002742 <HAL_TIM_IC_CaptureCallback>
 8002634:	e005      	b.n	8002642 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f879 	bl	800272e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f88a 	bl	8002756 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b01      	cmp	r3, #1
 8002654:	d10e      	bne.n	8002674 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b01      	cmp	r3, #1
 8002662:	d107      	bne.n	8002674 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f06f 0201 	mvn.w	r2, #1
 800266c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fd fece 	bl	8000410 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800267e:	2b80      	cmp	r3, #128	; 0x80
 8002680:	d10e      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268c:	2b80      	cmp	r3, #128	; 0x80
 800268e:	d107      	bne.n	80026a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002698:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f918 	bl	80028d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026ae:	d10e      	bne.n	80026ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026ba:	2b80      	cmp	r3, #128	; 0x80
 80026bc:	d107      	bne.n	80026ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80026c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f000 f90b 	bl	80028e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d8:	2b40      	cmp	r3, #64	; 0x40
 80026da:	d10e      	bne.n	80026fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026e6:	2b40      	cmp	r3, #64	; 0x40
 80026e8:	d107      	bne.n	80026fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f838 	bl	800276a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	f003 0320 	and.w	r3, r3, #32
 8002704:	2b20      	cmp	r3, #32
 8002706:	d10e      	bne.n	8002726 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	2b20      	cmp	r3, #32
 8002714:	d107      	bne.n	8002726 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f06f 0220 	mvn.w	r2, #32
 800271e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f8cb 	bl	80028bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002726:	bf00      	nop
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800272e:	b480      	push	{r7}
 8002730:	b083      	sub	sp, #12
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002736:	bf00      	nop
 8002738:	370c      	adds	r7, #12
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr

08002742 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
	...

08002780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002780:	b480      	push	{r7}
 8002782:	b085      	sub	sp, #20
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a42      	ldr	r2, [pc, #264]	; (800289c <TIM_Base_SetConfig+0x11c>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d013      	beq.n	80027c0 <TIM_Base_SetConfig+0x40>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279e:	d00f      	beq.n	80027c0 <TIM_Base_SetConfig+0x40>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a3f      	ldr	r2, [pc, #252]	; (80028a0 <TIM_Base_SetConfig+0x120>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d00b      	beq.n	80027c0 <TIM_Base_SetConfig+0x40>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	4a3e      	ldr	r2, [pc, #248]	; (80028a4 <TIM_Base_SetConfig+0x124>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d007      	beq.n	80027c0 <TIM_Base_SetConfig+0x40>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a3d      	ldr	r2, [pc, #244]	; (80028a8 <TIM_Base_SetConfig+0x128>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d003      	beq.n	80027c0 <TIM_Base_SetConfig+0x40>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a3c      	ldr	r2, [pc, #240]	; (80028ac <TIM_Base_SetConfig+0x12c>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d108      	bne.n	80027d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a31      	ldr	r2, [pc, #196]	; (800289c <TIM_Base_SetConfig+0x11c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d01f      	beq.n	800281a <TIM_Base_SetConfig+0x9a>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e0:	d01b      	beq.n	800281a <TIM_Base_SetConfig+0x9a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a2e      	ldr	r2, [pc, #184]	; (80028a0 <TIM_Base_SetConfig+0x120>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d017      	beq.n	800281a <TIM_Base_SetConfig+0x9a>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a2d      	ldr	r2, [pc, #180]	; (80028a4 <TIM_Base_SetConfig+0x124>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d013      	beq.n	800281a <TIM_Base_SetConfig+0x9a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a2c      	ldr	r2, [pc, #176]	; (80028a8 <TIM_Base_SetConfig+0x128>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00f      	beq.n	800281a <TIM_Base_SetConfig+0x9a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a2c      	ldr	r2, [pc, #176]	; (80028b0 <TIM_Base_SetConfig+0x130>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d00b      	beq.n	800281a <TIM_Base_SetConfig+0x9a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a2b      	ldr	r2, [pc, #172]	; (80028b4 <TIM_Base_SetConfig+0x134>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d007      	beq.n	800281a <TIM_Base_SetConfig+0x9a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a2a      	ldr	r2, [pc, #168]	; (80028b8 <TIM_Base_SetConfig+0x138>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d003      	beq.n	800281a <TIM_Base_SetConfig+0x9a>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a25      	ldr	r2, [pc, #148]	; (80028ac <TIM_Base_SetConfig+0x12c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d108      	bne.n	800282c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a12      	ldr	r2, [pc, #72]	; (800289c <TIM_Base_SetConfig+0x11c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d013      	beq.n	8002880 <TIM_Base_SetConfig+0x100>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a13      	ldr	r2, [pc, #76]	; (80028a8 <TIM_Base_SetConfig+0x128>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d00f      	beq.n	8002880 <TIM_Base_SetConfig+0x100>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a13      	ldr	r2, [pc, #76]	; (80028b0 <TIM_Base_SetConfig+0x130>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d00b      	beq.n	8002880 <TIM_Base_SetConfig+0x100>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a12      	ldr	r2, [pc, #72]	; (80028b4 <TIM_Base_SetConfig+0x134>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d007      	beq.n	8002880 <TIM_Base_SetConfig+0x100>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a11      	ldr	r2, [pc, #68]	; (80028b8 <TIM_Base_SetConfig+0x138>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d003      	beq.n	8002880 <TIM_Base_SetConfig+0x100>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a0c      	ldr	r2, [pc, #48]	; (80028ac <TIM_Base_SetConfig+0x12c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d103      	bne.n	8002888 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	691a      	ldr	r2, [r3, #16]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	615a      	str	r2, [r3, #20]
}
 800288e:	bf00      	nop
 8002890:	3714      	adds	r7, #20
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	40012c00 	.word	0x40012c00
 80028a0:	40000400 	.word	0x40000400
 80028a4:	40000800 	.word	0x40000800
 80028a8:	40013400 	.word	0x40013400
 80028ac:	40015000 	.word	0x40015000
 80028b0:	40014000 	.word	0x40014000
 80028b4:	40014400 	.word	0x40014400
 80028b8:	40014800 	.word	0x40014800

080028bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028c4:	bf00      	nop
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr

080028d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e040      	b.n	800298c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800290e:	2b00      	cmp	r3, #0
 8002910:	d106      	bne.n	8002920 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f7fd fe80 	bl	8000620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2224      	movs	r2, #36	; 0x24
 8002924:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f022 0201 	bic.w	r2, r2, #1
 8002934:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 fa8e 	bl	8002e58 <UART_SetConfig>
 800293c:	4603      	mov	r3, r0
 800293e:	2b01      	cmp	r3, #1
 8002940:	d101      	bne.n	8002946 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e022      	b.n	800298c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	2b00      	cmp	r3, #0
 800294c:	d002      	beq.n	8002954 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 fc9c 	bl	800328c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002962:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002972:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 fd23 	bl	80033d0 <UART_CheckIdleState>
 800298a:	4603      	mov	r3, r0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3708      	adds	r7, #8
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}

08002994 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	60f8      	str	r0, [r7, #12]
 800299c:	60b9      	str	r1, [r7, #8]
 800299e:	4613      	mov	r3, r2
 80029a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	d144      	bne.n	8002a34 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d002      	beq.n	80029b6 <HAL_UART_Transmit_IT+0x22>
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e03d      	b.n	8002a36 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	d101      	bne.n	80029c8 <HAL_UART_Transmit_IT+0x34>
 80029c4:	2302      	movs	r3, #2
 80029c6:	e036      	b.n	8002a36 <HAL_UART_Transmit_IT+0xa2>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	88fa      	ldrh	r2, [r7, #6]
 80029da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	88fa      	ldrh	r2, [r7, #6]
 80029e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	2200      	movs	r2, #0
 80029ea:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2200      	movs	r2, #0
 80029f0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2221      	movs	r2, #33	; 0x21
 80029f6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a00:	d107      	bne.n	8002a12 <HAL_UART_Transmit_IT+0x7e>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d103      	bne.n	8002a12 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4a0d      	ldr	r2, [pc, #52]	; (8002a44 <HAL_UART_Transmit_IT+0xb0>)
 8002a0e:	665a      	str	r2, [r3, #100]	; 0x64
 8002a10:	e002      	b.n	8002a18 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4a0c      	ldr	r2, [pc, #48]	; (8002a48 <HAL_UART_Transmit_IT+0xb4>)
 8002a16:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002a2e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e000      	b.n	8002a36 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 8002a34:	2302      	movs	r3, #2
  }
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	08003631 	.word	0x08003631
 8002a48:	080035bd 	.word	0x080035bd

08002a4c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	4613      	mov	r3, r2
 8002a58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a5e:	2b20      	cmp	r3, #32
 8002a60:	f040 808a 	bne.w	8002b78 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d002      	beq.n	8002a70 <HAL_UART_Receive_IT+0x24>
 8002a6a:	88fb      	ldrh	r3, [r7, #6]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e082      	b.n	8002b7a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <HAL_UART_Receive_IT+0x36>
 8002a7e:	2302      	movs	r3, #2
 8002a80:	e07b      	b.n	8002b7a <HAL_UART_Receive_IT+0x12e>
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2201      	movs	r2, #1
 8002a86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	88fa      	ldrh	r2, [r7, #6]
 8002a94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	88fa      	ldrh	r2, [r7, #6]
 8002a9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aae:	d10e      	bne.n	8002ace <HAL_UART_Receive_IT+0x82>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d105      	bne.n	8002ac4 <HAL_UART_Receive_IT+0x78>
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002abe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ac2:	e02d      	b.n	8002b20 <HAL_UART_Receive_IT+0xd4>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	22ff      	movs	r2, #255	; 0xff
 8002ac8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002acc:	e028      	b.n	8002b20 <HAL_UART_Receive_IT+0xd4>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d10d      	bne.n	8002af2 <HAL_UART_Receive_IT+0xa6>
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d104      	bne.n	8002ae8 <HAL_UART_Receive_IT+0x9c>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	22ff      	movs	r2, #255	; 0xff
 8002ae2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ae6:	e01b      	b.n	8002b20 <HAL_UART_Receive_IT+0xd4>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	227f      	movs	r2, #127	; 0x7f
 8002aec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002af0:	e016      	b.n	8002b20 <HAL_UART_Receive_IT+0xd4>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002afa:	d10d      	bne.n	8002b18 <HAL_UART_Receive_IT+0xcc>
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d104      	bne.n	8002b0e <HAL_UART_Receive_IT+0xc2>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	227f      	movs	r2, #127	; 0x7f
 8002b08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b0c:	e008      	b.n	8002b20 <HAL_UART_Receive_IT+0xd4>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	223f      	movs	r2, #63	; 0x3f
 8002b12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002b16:	e003      	b.n	8002b20 <HAL_UART_Receive_IT+0xd4>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2222      	movs	r2, #34	; 0x22
 8002b2a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 0201 	orr.w	r2, r2, #1
 8002b3a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b44:	d107      	bne.n	8002b56 <HAL_UART_Receive_IT+0x10a>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d103      	bne.n	8002b56 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a0d      	ldr	r2, [pc, #52]	; (8002b88 <HAL_UART_Receive_IT+0x13c>)
 8002b52:	661a      	str	r2, [r3, #96]	; 0x60
 8002b54:	e002      	b.n	8002b5c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4a0c      	ldr	r2, [pc, #48]	; (8002b8c <HAL_UART_Receive_IT+0x140>)
 8002b5a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8002b72:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	e000      	b.n	8002b7a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 8002b78:	2302      	movs	r3, #2
  }
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	08003785 	.word	0x08003785
 8002b8c:	080036df 	.word	0x080036df

08002b90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b088      	sub	sp, #32
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002bb0:	69fa      	ldr	r2, [r7, #28]
 8002bb2:	f640 030f 	movw	r3, #2063	; 0x80f
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d113      	bne.n	8002be8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	f003 0320 	and.w	r3, r3, #32
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d00e      	beq.n	8002be8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d009      	beq.n	8002be8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 8114 	beq.w	8002e06 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
      }
      return;
 8002be6:	e10e      	b.n	8002e06 <HAL_UART_IRQHandler+0x276>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	f000 80d6 	beq.w	8002d9c <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d105      	bne.n	8002c06 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80cb 	beq.w	8002d9c <HAL_UART_IRQHandler+0x20c>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00e      	beq.n	8002c2e <HAL_UART_IRQHandler+0x9e>
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d009      	beq.n	8002c2e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c26:	f043 0201 	orr.w	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f003 0302 	and.w	r3, r3, #2
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00e      	beq.n	8002c56 <HAL_UART_IRQHandler+0xc6>
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2202      	movs	r2, #2
 8002c48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c4e:	f043 0204 	orr.w	r2, r3, #4
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	f003 0304 	and.w	r3, r3, #4
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00e      	beq.n	8002c7e <HAL_UART_IRQHandler+0xee>
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d009      	beq.n	8002c7e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2204      	movs	r2, #4
 8002c70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c76:	f043 0202 	orr.w	r2, r3, #2
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f003 0308 	and.w	r3, r3, #8
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	f003 0320 	and.w	r3, r3, #32
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d104      	bne.n	8002c9c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d009      	beq.n	8002cb0 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ca8:	f043 0208 	orr.w	r2, r3, #8
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00f      	beq.n	8002cda <HAL_UART_IRQHandler+0x14a>
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ccc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cd2:	f043 0220 	orr.w	r2, r3, #32
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 8093 	beq.w	8002e0a <HAL_UART_IRQHandler+0x27a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00c      	beq.n	8002d08 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d007      	beq.n	8002d08 <HAL_UART_IRQHandler+0x178>
      {
        if (huart->RxISR != NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d003      	beq.n	8002d08 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d0c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d18:	2b40      	cmp	r3, #64	; 0x40
 8002d1a:	d004      	beq.n	8002d26 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d031      	beq.n	8002d8a <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 fc12 	bl	8003550 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d36:	2b40      	cmp	r3, #64	; 0x40
 8002d38:	d123      	bne.n	8002d82 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d48:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d013      	beq.n	8002d7a <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d56:	4a30      	ldr	r2, [pc, #192]	; (8002e18 <HAL_UART_IRQHandler+0x288>)
 8002d58:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fd fdea 	bl	8000938 <HAL_DMA_Abort_IT>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d016      	beq.n	8002d98 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002d74:	4610      	mov	r0, r2
 8002d76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d78:	e00e      	b.n	8002d98 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f84e 	bl	8002e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d80:	e00a      	b.n	8002d98 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f000 f84a 	bl	8002e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d88:	e006      	b.n	8002d98 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f846 	bl	8002e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 8002d96:	e038      	b.n	8002e0a <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d98:	bf00      	nop
    return;
 8002d9a:	e036      	b.n	8002e0a <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00d      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x232>
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002db8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 fd35 	bl	800382a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002dc0:	e026      	b.n	8002e10 <HAL_UART_IRQHandler+0x280>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00d      	beq.n	8002de8 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002dcc:	69bb      	ldr	r3, [r7, #24]
 8002dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d008      	beq.n	8002de8 <HAL_UART_IRQHandler+0x258>
  {
    if (huart->TxISR != NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d017      	beq.n	8002e0e <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	4798      	blx	r3
    }
    return;
 8002de6:	e012      	b.n	8002e0e <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d00e      	beq.n	8002e10 <HAL_UART_IRQHandler+0x280>
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d009      	beq.n	8002e10 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 fc55 	bl	80036ac <UART_EndTransmit_IT>
    return;
 8002e02:	bf00      	nop
 8002e04:	e004      	b.n	8002e10 <HAL_UART_IRQHandler+0x280>
      return;
 8002e06:	bf00      	nop
 8002e08:	e002      	b.n	8002e10 <HAL_UART_IRQHandler+0x280>
    return;
 8002e0a:	bf00      	nop
 8002e0c:	e000      	b.n	8002e10 <HAL_UART_IRQHandler+0x280>
    return;
 8002e0e:	bf00      	nop
  }

}
 8002e10:	3720      	adds	r7, #32
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	08003591 	.word	0x08003591

08002e1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e3c:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e42:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	4313      	orrs	r3, r2
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3714      	adds	r7, #20
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b088      	sub	sp, #32
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	431a      	orrs	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	431a      	orrs	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	4bac      	ldr	r3, [pc, #688]	; (8003138 <UART_SetConfig+0x2e0>)
 8002e88:	4013      	ands	r3, r2
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6812      	ldr	r2, [r2, #0]
 8002e8e:	6939      	ldr	r1, [r7, #16]
 8002e90:	430b      	orrs	r3, r1
 8002e92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a9a      	ldr	r2, [pc, #616]	; (800313c <UART_SetConfig+0x2e4>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d121      	bne.n	8002f1c <UART_SetConfig+0xc4>
 8002ed8:	4b99      	ldr	r3, [pc, #612]	; (8003140 <UART_SetConfig+0x2e8>)
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	f003 0303 	and.w	r3, r3, #3
 8002ee0:	2b03      	cmp	r3, #3
 8002ee2:	d817      	bhi.n	8002f14 <UART_SetConfig+0xbc>
 8002ee4:	a201      	add	r2, pc, #4	; (adr r2, 8002eec <UART_SetConfig+0x94>)
 8002ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eea:	bf00      	nop
 8002eec:	08002efd 	.word	0x08002efd
 8002ef0:	08002f09 	.word	0x08002f09
 8002ef4:	08002f0f 	.word	0x08002f0f
 8002ef8:	08002f03 	.word	0x08002f03
 8002efc:	2301      	movs	r3, #1
 8002efe:	77fb      	strb	r3, [r7, #31]
 8002f00:	e0b2      	b.n	8003068 <UART_SetConfig+0x210>
 8002f02:	2302      	movs	r3, #2
 8002f04:	77fb      	strb	r3, [r7, #31]
 8002f06:	e0af      	b.n	8003068 <UART_SetConfig+0x210>
 8002f08:	2304      	movs	r3, #4
 8002f0a:	77fb      	strb	r3, [r7, #31]
 8002f0c:	e0ac      	b.n	8003068 <UART_SetConfig+0x210>
 8002f0e:	2308      	movs	r3, #8
 8002f10:	77fb      	strb	r3, [r7, #31]
 8002f12:	e0a9      	b.n	8003068 <UART_SetConfig+0x210>
 8002f14:	2310      	movs	r3, #16
 8002f16:	77fb      	strb	r3, [r7, #31]
 8002f18:	bf00      	nop
 8002f1a:	e0a5      	b.n	8003068 <UART_SetConfig+0x210>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a88      	ldr	r2, [pc, #544]	; (8003144 <UART_SetConfig+0x2ec>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d123      	bne.n	8002f6e <UART_SetConfig+0x116>
 8002f26:	4b86      	ldr	r3, [pc, #536]	; (8003140 <UART_SetConfig+0x2e8>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f32:	d012      	beq.n	8002f5a <UART_SetConfig+0x102>
 8002f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f38:	d802      	bhi.n	8002f40 <UART_SetConfig+0xe8>
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d007      	beq.n	8002f4e <UART_SetConfig+0xf6>
 8002f3e:	e012      	b.n	8002f66 <UART_SetConfig+0x10e>
 8002f40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f44:	d00c      	beq.n	8002f60 <UART_SetConfig+0x108>
 8002f46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002f4a:	d003      	beq.n	8002f54 <UART_SetConfig+0xfc>
 8002f4c:	e00b      	b.n	8002f66 <UART_SetConfig+0x10e>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	77fb      	strb	r3, [r7, #31]
 8002f52:	e089      	b.n	8003068 <UART_SetConfig+0x210>
 8002f54:	2302      	movs	r3, #2
 8002f56:	77fb      	strb	r3, [r7, #31]
 8002f58:	e086      	b.n	8003068 <UART_SetConfig+0x210>
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	77fb      	strb	r3, [r7, #31]
 8002f5e:	e083      	b.n	8003068 <UART_SetConfig+0x210>
 8002f60:	2308      	movs	r3, #8
 8002f62:	77fb      	strb	r3, [r7, #31]
 8002f64:	e080      	b.n	8003068 <UART_SetConfig+0x210>
 8002f66:	2310      	movs	r3, #16
 8002f68:	77fb      	strb	r3, [r7, #31]
 8002f6a:	bf00      	nop
 8002f6c:	e07c      	b.n	8003068 <UART_SetConfig+0x210>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a75      	ldr	r2, [pc, #468]	; (8003148 <UART_SetConfig+0x2f0>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d123      	bne.n	8002fc0 <UART_SetConfig+0x168>
 8002f78:	4b71      	ldr	r3, [pc, #452]	; (8003140 <UART_SetConfig+0x2e8>)
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8002f80:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f84:	d012      	beq.n	8002fac <UART_SetConfig+0x154>
 8002f86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f8a:	d802      	bhi.n	8002f92 <UART_SetConfig+0x13a>
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d007      	beq.n	8002fa0 <UART_SetConfig+0x148>
 8002f90:	e012      	b.n	8002fb8 <UART_SetConfig+0x160>
 8002f92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f96:	d00c      	beq.n	8002fb2 <UART_SetConfig+0x15a>
 8002f98:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002f9c:	d003      	beq.n	8002fa6 <UART_SetConfig+0x14e>
 8002f9e:	e00b      	b.n	8002fb8 <UART_SetConfig+0x160>
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	77fb      	strb	r3, [r7, #31]
 8002fa4:	e060      	b.n	8003068 <UART_SetConfig+0x210>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	77fb      	strb	r3, [r7, #31]
 8002faa:	e05d      	b.n	8003068 <UART_SetConfig+0x210>
 8002fac:	2304      	movs	r3, #4
 8002fae:	77fb      	strb	r3, [r7, #31]
 8002fb0:	e05a      	b.n	8003068 <UART_SetConfig+0x210>
 8002fb2:	2308      	movs	r3, #8
 8002fb4:	77fb      	strb	r3, [r7, #31]
 8002fb6:	e057      	b.n	8003068 <UART_SetConfig+0x210>
 8002fb8:	2310      	movs	r3, #16
 8002fba:	77fb      	strb	r3, [r7, #31]
 8002fbc:	bf00      	nop
 8002fbe:	e053      	b.n	8003068 <UART_SetConfig+0x210>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a61      	ldr	r2, [pc, #388]	; (800314c <UART_SetConfig+0x2f4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d123      	bne.n	8003012 <UART_SetConfig+0x1ba>
 8002fca:	4b5d      	ldr	r3, [pc, #372]	; (8003140 <UART_SetConfig+0x2e8>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fd6:	d012      	beq.n	8002ffe <UART_SetConfig+0x1a6>
 8002fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fdc:	d802      	bhi.n	8002fe4 <UART_SetConfig+0x18c>
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d007      	beq.n	8002ff2 <UART_SetConfig+0x19a>
 8002fe2:	e012      	b.n	800300a <UART_SetConfig+0x1b2>
 8002fe4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fe8:	d00c      	beq.n	8003004 <UART_SetConfig+0x1ac>
 8002fea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002fee:	d003      	beq.n	8002ff8 <UART_SetConfig+0x1a0>
 8002ff0:	e00b      	b.n	800300a <UART_SetConfig+0x1b2>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	77fb      	strb	r3, [r7, #31]
 8002ff6:	e037      	b.n	8003068 <UART_SetConfig+0x210>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e034      	b.n	8003068 <UART_SetConfig+0x210>
 8002ffe:	2304      	movs	r3, #4
 8003000:	77fb      	strb	r3, [r7, #31]
 8003002:	e031      	b.n	8003068 <UART_SetConfig+0x210>
 8003004:	2308      	movs	r3, #8
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	e02e      	b.n	8003068 <UART_SetConfig+0x210>
 800300a:	2310      	movs	r3, #16
 800300c:	77fb      	strb	r3, [r7, #31]
 800300e:	bf00      	nop
 8003010:	e02a      	b.n	8003068 <UART_SetConfig+0x210>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a4e      	ldr	r2, [pc, #312]	; (8003150 <UART_SetConfig+0x2f8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d123      	bne.n	8003064 <UART_SetConfig+0x20c>
 800301c:	4b48      	ldr	r3, [pc, #288]	; (8003140 <UART_SetConfig+0x2e8>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003028:	d012      	beq.n	8003050 <UART_SetConfig+0x1f8>
 800302a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800302e:	d802      	bhi.n	8003036 <UART_SetConfig+0x1de>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <UART_SetConfig+0x1ec>
 8003034:	e012      	b.n	800305c <UART_SetConfig+0x204>
 8003036:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800303a:	d00c      	beq.n	8003056 <UART_SetConfig+0x1fe>
 800303c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003040:	d003      	beq.n	800304a <UART_SetConfig+0x1f2>
 8003042:	e00b      	b.n	800305c <UART_SetConfig+0x204>
 8003044:	2300      	movs	r3, #0
 8003046:	77fb      	strb	r3, [r7, #31]
 8003048:	e00e      	b.n	8003068 <UART_SetConfig+0x210>
 800304a:	2302      	movs	r3, #2
 800304c:	77fb      	strb	r3, [r7, #31]
 800304e:	e00b      	b.n	8003068 <UART_SetConfig+0x210>
 8003050:	2304      	movs	r3, #4
 8003052:	77fb      	strb	r3, [r7, #31]
 8003054:	e008      	b.n	8003068 <UART_SetConfig+0x210>
 8003056:	2308      	movs	r3, #8
 8003058:	77fb      	strb	r3, [r7, #31]
 800305a:	e005      	b.n	8003068 <UART_SetConfig+0x210>
 800305c:	2310      	movs	r3, #16
 800305e:	77fb      	strb	r3, [r7, #31]
 8003060:	bf00      	nop
 8003062:	e001      	b.n	8003068 <UART_SetConfig+0x210>
 8003064:	2310      	movs	r3, #16
 8003066:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69db      	ldr	r3, [r3, #28]
 800306c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003070:	f040 8090 	bne.w	8003194 <UART_SetConfig+0x33c>
  {
    switch (clocksource)
 8003074:	7ffb      	ldrb	r3, [r7, #31]
 8003076:	2b08      	cmp	r3, #8
 8003078:	d86c      	bhi.n	8003154 <UART_SetConfig+0x2fc>
 800307a:	a201      	add	r2, pc, #4	; (adr r2, 8003080 <UART_SetConfig+0x228>)
 800307c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003080:	080030a5 	.word	0x080030a5
 8003084:	080030c5 	.word	0x080030c5
 8003088:	080030e5 	.word	0x080030e5
 800308c:	08003155 	.word	0x08003155
 8003090:	08003101 	.word	0x08003101
 8003094:	08003155 	.word	0x08003155
 8003098:	08003155 	.word	0x08003155
 800309c:	08003155 	.word	0x08003155
 80030a0:	08003121 	.word	0x08003121
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030a4:	f7fe ff30 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 80030a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	005a      	lsls	r2, r3, #1
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	085b      	lsrs	r3, r3, #1
 80030b4:	441a      	add	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80030be:	b29b      	uxth	r3, r3
 80030c0:	61bb      	str	r3, [r7, #24]
        break;
 80030c2:	e04a      	b.n	800315a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030c4:	f7fe ff42 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 80030c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	005a      	lsls	r2, r3, #1
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	085b      	lsrs	r3, r3, #1
 80030d4:	441a      	add	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	fbb2 f3f3 	udiv	r3, r2, r3
 80030de:	b29b      	uxth	r3, r3
 80030e0:	61bb      	str	r3, [r7, #24]
        break;
 80030e2:	e03a      	b.n	800315a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	085b      	lsrs	r3, r3, #1
 80030ea:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80030ee:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	6852      	ldr	r2, [r2, #4]
 80030f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	61bb      	str	r3, [r7, #24]
        break;
 80030fe:	e02c      	b.n	800315a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003100:	f7fe fe8c 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8003104:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	005a      	lsls	r2, r3, #1
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	085b      	lsrs	r3, r3, #1
 8003110:	441a      	add	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	fbb2 f3f3 	udiv	r3, r2, r3
 800311a:	b29b      	uxth	r3, r3
 800311c:	61bb      	str	r3, [r7, #24]
        break;
 800311e:	e01c      	b.n	800315a <UART_SetConfig+0x302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	085b      	lsrs	r3, r3, #1
 8003126:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003132:	b29b      	uxth	r3, r3
 8003134:	61bb      	str	r3, [r7, #24]
        break;
 8003136:	e010      	b.n	800315a <UART_SetConfig+0x302>
 8003138:	efff69f3 	.word	0xefff69f3
 800313c:	40013800 	.word	0x40013800
 8003140:	40021000 	.word	0x40021000
 8003144:	40004400 	.word	0x40004400
 8003148:	40004800 	.word	0x40004800
 800314c:	40004c00 	.word	0x40004c00
 8003150:	40005000 	.word	0x40005000
      default:
        ret = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	75fb      	strb	r3, [r7, #23]
        break;
 8003158:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	2b0f      	cmp	r3, #15
 800315e:	d916      	bls.n	800318e <UART_SetConfig+0x336>
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003166:	d212      	bcs.n	800318e <UART_SetConfig+0x336>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	b29b      	uxth	r3, r3
 800316c:	f023 030f 	bic.w	r3, r3, #15
 8003170:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	085b      	lsrs	r3, r3, #1
 8003176:	b29b      	uxth	r3, r3
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	b29a      	uxth	r2, r3
 800317e:	897b      	ldrh	r3, [r7, #10]
 8003180:	4313      	orrs	r3, r2
 8003182:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	897a      	ldrh	r2, [r7, #10]
 800318a:	60da      	str	r2, [r3, #12]
 800318c:	e072      	b.n	8003274 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	75fb      	strb	r3, [r7, #23]
 8003192:	e06f      	b.n	8003274 <UART_SetConfig+0x41c>
    }
  }
  else
  {
    switch (clocksource)
 8003194:	7ffb      	ldrb	r3, [r7, #31]
 8003196:	2b08      	cmp	r3, #8
 8003198:	d85b      	bhi.n	8003252 <UART_SetConfig+0x3fa>
 800319a:	a201      	add	r2, pc, #4	; (adr r2, 80031a0 <UART_SetConfig+0x348>)
 800319c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a0:	080031c5 	.word	0x080031c5
 80031a4:	080031e3 	.word	0x080031e3
 80031a8:	08003201 	.word	0x08003201
 80031ac:	08003253 	.word	0x08003253
 80031b0:	0800321d 	.word	0x0800321d
 80031b4:	08003253 	.word	0x08003253
 80031b8:	08003253 	.word	0x08003253
 80031bc:	08003253 	.word	0x08003253
 80031c0:	0800323b 	.word	0x0800323b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031c4:	f7fe fea0 	bl	8001f08 <HAL_RCC_GetPCLK1Freq>
 80031c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	085a      	lsrs	r2, r3, #1
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	441a      	add	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031dc:	b29b      	uxth	r3, r3
 80031de:	61bb      	str	r3, [r7, #24]
        break;
 80031e0:	e03a      	b.n	8003258 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031e2:	f7fe feb3 	bl	8001f4c <HAL_RCC_GetPCLK2Freq>
 80031e6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	085a      	lsrs	r2, r3, #1
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	441a      	add	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	61bb      	str	r3, [r7, #24]
        break;
 80031fe:	e02b      	b.n	8003258 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	085b      	lsrs	r3, r3, #1
 8003206:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800320a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6852      	ldr	r2, [r2, #4]
 8003212:	fbb3 f3f2 	udiv	r3, r3, r2
 8003216:	b29b      	uxth	r3, r3
 8003218:	61bb      	str	r3, [r7, #24]
        break;
 800321a:	e01d      	b.n	8003258 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800321c:	f7fe fdfe 	bl	8001e1c <HAL_RCC_GetSysClockFreq>
 8003220:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	085a      	lsrs	r2, r3, #1
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	441a      	add	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	fbb2 f3f3 	udiv	r3, r2, r3
 8003234:	b29b      	uxth	r3, r3
 8003236:	61bb      	str	r3, [r7, #24]
        break;
 8003238:	e00e      	b.n	8003258 <UART_SetConfig+0x400>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	085b      	lsrs	r3, r3, #1
 8003240:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	fbb2 f3f3 	udiv	r3, r2, r3
 800324c:	b29b      	uxth	r3, r3
 800324e:	61bb      	str	r3, [r7, #24]
        break;
 8003250:	e002      	b.n	8003258 <UART_SetConfig+0x400>
      default:
        ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	75fb      	strb	r3, [r7, #23]
        break;
 8003256:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003258:	69bb      	ldr	r3, [r7, #24]
 800325a:	2b0f      	cmp	r3, #15
 800325c:	d908      	bls.n	8003270 <UART_SetConfig+0x418>
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003264:	d204      	bcs.n	8003270 <UART_SetConfig+0x418>
    {
      huart->Instance->BRR = usartdiv;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	e001      	b.n	8003274 <UART_SetConfig+0x41c>
    }
    else
    {
      ret = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003280:	7dfb      	ldrb	r3, [r7, #23]
}
 8003282:	4618      	mov	r0, r3
 8003284:	3720      	adds	r7, #32
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop

0800328c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	f003 0301 	and.w	r3, r3, #1
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00a      	beq.n	80032b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	430a      	orrs	r2, r1
 80032d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	f003 0304 	and.w	r3, r3, #4
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fe:	f003 0308 	and.w	r3, r3, #8
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003320:	f003 0310 	and.w	r3, r3, #16
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	f003 0320 	and.w	r3, r3, #32
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003368:	2b00      	cmp	r3, #0
 800336a:	d01a      	beq.n	80033a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800338a:	d10a      	bne.n	80033a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	605a      	str	r2, [r3, #4]
  }
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af02      	add	r7, sp, #8
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80033de:	f7fd f9bd 	bl	800075c <HAL_GetTick>
 80033e2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b08      	cmp	r3, #8
 80033f0:	d10e      	bne.n	8003410 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033f2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033f6:	9300      	str	r3, [sp, #0]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f000 f82a 	bl	800345a <UART_WaitOnFlagUntilTimeout>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e020      	b.n	8003452 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	2b04      	cmp	r3, #4
 800341c:	d10e      	bne.n	800343c <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800341e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	f000 f814 	bl	800345a <UART_WaitOnFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	e00a      	b.n	8003452 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3710      	adds	r7, #16
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b084      	sub	sp, #16
 800345e:	af00      	add	r7, sp, #0
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	60b9      	str	r1, [r7, #8]
 8003464:	603b      	str	r3, [r7, #0]
 8003466:	4613      	mov	r3, r2
 8003468:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800346a:	e05d      	b.n	8003528 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003472:	d059      	beq.n	8003528 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003474:	f7fd f972 	bl	800075c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	429a      	cmp	r2, r3
 8003482:	d302      	bcc.n	800348a <UART_WaitOnFlagUntilTimeout+0x30>
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d11b      	bne.n	80034c2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003498:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689a      	ldr	r2, [r3, #8]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f022 0201 	bic.w	r2, r2, #1
 80034a8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2220      	movs	r2, #32
 80034ae:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2220      	movs	r2, #32
 80034b4:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80034be:	2303      	movs	r3, #3
 80034c0:	e042      	b.n	8003548 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d02b      	beq.n	8003528 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034de:	d123      	bne.n	8003528 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034e8:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80034f8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f022 0201 	bic.w	r2, r2, #1
 8003508:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2220      	movs	r2, #32
 800350e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2220      	movs	r2, #32
 800351a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e00f      	b.n	8003548 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	69da      	ldr	r2, [r3, #28]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	4013      	ands	r3, r2
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	429a      	cmp	r2, r3
 8003536:	bf0c      	ite	eq
 8003538:	2301      	moveq	r3, #1
 800353a:	2300      	movne	r3, #0
 800353c:	b2db      	uxtb	r3, r3
 800353e:	461a      	mov	r2, r3
 8003540:	79fb      	ldrb	r3, [r7, #7]
 8003542:	429a      	cmp	r2, r3
 8003544:	d092      	beq.n	800346c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003550:	b480      	push	{r7}
 8003552:	b083      	sub	sp, #12
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003566:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	689a      	ldr	r2, [r3, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0201 	bic.w	r2, r2, #1
 8003576:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2220      	movs	r2, #32
 800357c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003584:	bf00      	nop
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr

08003590 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f7ff fc34 	bl	8002e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035b4:	bf00      	nop
 80035b6:	3710      	adds	r7, #16
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035c8:	2b21      	cmp	r3, #33	; 0x21
 80035ca:	d12b      	bne.n	8003624 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d110      	bne.n	80035fa <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035e6:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035f6:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80035f8:	e014      	b.n	8003624 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035fe:	781a      	ldrb	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	b292      	uxth	r2, r2
 8003606:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003618:	b29b      	uxth	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b29a      	uxth	r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003624:	bf00      	nop
 8003626:	370c      	adds	r7, #12
 8003628:	46bd      	mov	sp, r7
 800362a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362e:	4770      	bx	lr

08003630 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363c:	2b21      	cmp	r3, #33	; 0x21
 800363e:	d12f      	bne.n	80036a0 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d110      	bne.n	800366e <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800365a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800366a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800366c:	e018      	b.n	80036a0 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003672:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	881a      	ldrh	r2, [r3, #0]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003680:	b292      	uxth	r2, r2
 8003682:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003688:	1c9a      	adds	r2, r3, #2
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003694:	b29b      	uxth	r3, r3
 8003696:	3b01      	subs	r3, #1
 8003698:	b29a      	uxth	r2, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80036a0:	bf00      	nop
 80036a2:	3714      	adds	r7, #20
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr

080036ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036c2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2220      	movs	r2, #32
 80036c8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f004 fe95 	bl	8008400 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80036de:	b580      	push	{r7, lr}
 80036e0:	b084      	sub	sp, #16
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80036ec:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036f2:	2b22      	cmp	r3, #34	; 0x22
 80036f4:	d13a      	bne.n	800376c <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80036fc:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80036fe:	89bb      	ldrh	r3, [r7, #12]
 8003700:	b2d9      	uxtb	r1, r3
 8003702:	89fb      	ldrh	r3, [r7, #14]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370a:	400a      	ands	r2, r1
 800370c:	b2d2      	uxtb	r2, r2
 800370e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003714:	1c5a      	adds	r2, r3, #1
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003720:	b29b      	uxth	r3, r3
 8003722:	3b01      	subs	r3, #1
 8003724:	b29a      	uxth	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	d121      	bne.n	800377c <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003746:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0201 	bic.w	r2, r2, #1
 8003756:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2220      	movs	r2, #32
 800375c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003764:	6878      	ldr	r0, [r7, #4]
 8003766:	f004 f961 	bl	8007a2c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800376a:	e007      	b.n	800377c <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	699a      	ldr	r2, [r3, #24]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0208 	orr.w	r2, r2, #8
 800377a:	619a      	str	r2, [r3, #24]
}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003792:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003798:	2b22      	cmp	r3, #34	; 0x22
 800379a:	d13a      	bne.n	8003812 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80037a2:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a8:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80037aa:	89ba      	ldrh	r2, [r7, #12]
 80037ac:	89fb      	ldrh	r3, [r7, #14]
 80037ae:	4013      	ands	r3, r2
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ba:	1c9a      	adds	r2, r3, #2
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	3b01      	subs	r3, #1
 80037ca:	b29a      	uxth	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d121      	bne.n	8003822 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80037ec:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 0201 	bic.w	r2, r2, #1
 80037fc:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2220      	movs	r2, #32
 8003802:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f004 f90e 	bl	8007a2c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003810:	e007      	b.n	8003822 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	699a      	ldr	r2, [r3, #24]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f042 0208 	orr.w	r2, r2, #8
 8003820:	619a      	str	r2, [r3, #24]
}
 8003822:	bf00      	nop
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003840:	b480      	push	{r7}
 8003842:	b085      	sub	sp, #20
 8003844:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003846:	f3ef 8305 	mrs	r3, IPSR
 800384a:	60bb      	str	r3, [r7, #8]
  return(result);
 800384c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10f      	bne.n	8003872 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003852:	f3ef 8310 	mrs	r3, PRIMASK
 8003856:	607b      	str	r3, [r7, #4]
  return(result);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <osKernelInitialize+0x32>
 800385e:	4b11      	ldr	r3, [pc, #68]	; (80038a4 <osKernelInitialize+0x64>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b02      	cmp	r3, #2
 8003864:	d109      	bne.n	800387a <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003866:	f3ef 8311 	mrs	r3, BASEPRI
 800386a:	603b      	str	r3, [r7, #0]
  return(result);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d003      	beq.n	800387a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003872:	f06f 0305 	mvn.w	r3, #5
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	e00c      	b.n	8003894 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800387a:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <osKernelInitialize+0x64>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d105      	bne.n	800388e <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003882:	4b08      	ldr	r3, [pc, #32]	; (80038a4 <osKernelInitialize+0x64>)
 8003884:	2201      	movs	r2, #1
 8003886:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e002      	b.n	8003894 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800388e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003892:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003894:	68fb      	ldr	r3, [r7, #12]
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	2000002c 	.word	0x2000002c

080038a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038ae:	f3ef 8305 	mrs	r3, IPSR
 80038b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80038b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10f      	bne.n	80038da <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038ba:	f3ef 8310 	mrs	r3, PRIMASK
 80038be:	607b      	str	r3, [r7, #4]
  return(result);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <osKernelStart+0x32>
 80038c6:	4b11      	ldr	r3, [pc, #68]	; (800390c <osKernelStart+0x64>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d109      	bne.n	80038e2 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038ce:	f3ef 8311 	mrs	r3, BASEPRI
 80038d2:	603b      	str	r3, [r7, #0]
  return(result);
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80038da:	f06f 0305 	mvn.w	r3, #5
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	e00e      	b.n	8003900 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <osKernelStart+0x64>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d107      	bne.n	80038fa <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80038ea:	4b08      	ldr	r3, [pc, #32]	; (800390c <osKernelStart+0x64>)
 80038ec:	2202      	movs	r2, #2
 80038ee:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80038f0:	f001 fbba 	bl	8005068 <vTaskStartScheduler>
      stat = osOK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]
 80038f8:	e002      	b.n	8003900 <osKernelStart+0x58>
    } else {
      stat = osError;
 80038fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038fe:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003900:	68fb      	ldr	r3, [r7, #12]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	2000002c 	.word	0x2000002c

08003910 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b092      	sub	sp, #72	; 0x48
 8003914:	af04      	add	r7, sp, #16
 8003916:	60f8      	str	r0, [r7, #12]
 8003918:	60b9      	str	r1, [r7, #8]
 800391a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003920:	f3ef 8305 	mrs	r3, IPSR
 8003924:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003928:	2b00      	cmp	r3, #0
 800392a:	f040 8094 	bne.w	8003a56 <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800392e:	f3ef 8310 	mrs	r3, PRIMASK
 8003932:	623b      	str	r3, [r7, #32]
  return(result);
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	2b00      	cmp	r3, #0
 8003938:	f040 808d 	bne.w	8003a56 <osThreadNew+0x146>
 800393c:	4b48      	ldr	r3, [pc, #288]	; (8003a60 <osThreadNew+0x150>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d106      	bne.n	8003952 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003944:	f3ef 8311 	mrs	r3, BASEPRI
 8003948:	61fb      	str	r3, [r7, #28]
  return(result);
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	2b00      	cmp	r3, #0
 800394e:	f040 8082 	bne.w	8003a56 <osThreadNew+0x146>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d07e      	beq.n	8003a56 <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 800395c:	2318      	movs	r3, #24
 800395e:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8003960:	2300      	movs	r3, #0
 8003962:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003964:	f107 031b 	add.w	r3, r7, #27
 8003968:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800396a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800396e:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d045      	beq.n	8003a02 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <osThreadNew+0x74>
        name = attr->name;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d002      	beq.n	8003992 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d008      	beq.n	80039aa <osThreadNew+0x9a>
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	2b38      	cmp	r3, #56	; 0x38
 800399c:	d805      	bhi.n	80039aa <osThreadNew+0x9a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <osThreadNew+0x9e>
        return (NULL);
 80039aa:	2300      	movs	r3, #0
 80039ac:	e054      	b.n	8003a58 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	089b      	lsrs	r3, r3, #2
 80039bc:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00e      	beq.n	80039e4 <osThreadNew+0xd4>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	2b5b      	cmp	r3, #91	; 0x5b
 80039cc:	d90a      	bls.n	80039e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d006      	beq.n	80039e4 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <osThreadNew+0xd4>
        mem = 1;
 80039de:	2301      	movs	r3, #1
 80039e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80039e2:	e010      	b.n	8003a06 <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d10c      	bne.n	8003a06 <osThreadNew+0xf6>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d108      	bne.n	8003a06 <osThreadNew+0xf6>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d104      	bne.n	8003a06 <osThreadNew+0xf6>
          mem = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a00:	e001      	b.n	8003a06 <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003a02:	2300      	movs	r3, #0
 8003a04:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8003a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d110      	bne.n	8003a2e <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003a14:	9202      	str	r2, [sp, #8]
 8003a16:	9301      	str	r3, [sp, #4]
 8003a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1a:	9300      	str	r3, [sp, #0]
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a20:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f001 f958 	bl	8004cd8 <xTaskCreateStatic>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	617b      	str	r3, [r7, #20]
 8003a2c:	e013      	b.n	8003a56 <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d110      	bne.n	8003a56 <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	b29a      	uxth	r2, r3
 8003a38:	f107 0314 	add.w	r3, r7, #20
 8003a3c:	9301      	str	r3, [sp, #4]
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f001 f99f 	bl	8004d8a <xTaskCreate>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d001      	beq.n	8003a56 <osThreadNew+0x146>
          hTask = NULL;
 8003a52:	2300      	movs	r3, #0
 8003a54:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003a56:	697b      	ldr	r3, [r7, #20]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3738      	adds	r7, #56	; 0x38
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	2000002c 	.word	0x2000002c

08003a64 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b086      	sub	sp, #24
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a6c:	f3ef 8305 	mrs	r3, IPSR
 8003a70:	613b      	str	r3, [r7, #16]
  return(result);
 8003a72:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10f      	bne.n	8003a98 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a78:	f3ef 8310 	mrs	r3, PRIMASK
 8003a7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d109      	bne.n	8003a98 <osDelay+0x34>
 8003a84:	4b0d      	ldr	r3, [pc, #52]	; (8003abc <osDelay+0x58>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d109      	bne.n	8003aa0 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a8c:	f3ef 8311 	mrs	r3, BASEPRI
 8003a90:	60bb      	str	r3, [r7, #8]
  return(result);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d003      	beq.n	8003aa0 <osDelay+0x3c>
    stat = osErrorISR;
 8003a98:	f06f 0305 	mvn.w	r3, #5
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	e007      	b.n	8003ab0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f001 faa8 	bl	8005000 <vTaskDelay>
    }
  }

  return (stat);
 8003ab0:	697b      	ldr	r3, [r7, #20]
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	2000002c 	.word	0x2000002c

08003ac0 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b08c      	sub	sp, #48	; 0x30
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ad0:	f3ef 8305 	mrs	r3, IPSR
 8003ad4:	61bb      	str	r3, [r7, #24]
  return(result);
 8003ad6:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	f040 8088 	bne.w	8003bee <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ade:	f3ef 8310 	mrs	r3, PRIMASK
 8003ae2:	617b      	str	r3, [r7, #20]
  return(result);
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f040 8081 	bne.w	8003bee <osSemaphoreNew+0x12e>
 8003aec:	4b42      	ldr	r3, [pc, #264]	; (8003bf8 <osSemaphoreNew+0x138>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d105      	bne.n	8003b00 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003af4:	f3ef 8311 	mrs	r3, BASEPRI
 8003af8:	613b      	str	r3, [r7, #16]
  return(result);
 8003afa:	693b      	ldr	r3, [r7, #16]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d176      	bne.n	8003bee <osSemaphoreNew+0x12e>
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d073      	beq.n	8003bee <osSemaphoreNew+0x12e>
 8003b06:	68ba      	ldr	r2, [r7, #8]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d86f      	bhi.n	8003bee <osSemaphoreNew+0x12e>
    mem = -1;
 8003b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b12:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d015      	beq.n	8003b46 <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d006      	beq.n	8003b30 <osSemaphoreNew+0x70>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	2b4f      	cmp	r3, #79	; 0x4f
 8003b28:	d902      	bls.n	8003b30 <osSemaphoreNew+0x70>
        mem = 1;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	623b      	str	r3, [r7, #32]
 8003b2e:	e00c      	b.n	8003b4a <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d108      	bne.n	8003b4a <osSemaphoreNew+0x8a>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d104      	bne.n	8003b4a <osSemaphoreNew+0x8a>
          mem = 0;
 8003b40:	2300      	movs	r3, #0
 8003b42:	623b      	str	r3, [r7, #32]
 8003b44:	e001      	b.n	8003b4a <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8003b46:	2300      	movs	r3, #0
 8003b48:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8003b4a:	6a3b      	ldr	r3, [r7, #32]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b50:	d04d      	beq.n	8003bee <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d129      	bne.n	8003bac <osSemaphoreNew+0xec>
        if (mem == 1) {
 8003b58:	6a3b      	ldr	r3, [r7, #32]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d10b      	bne.n	8003b76 <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	689a      	ldr	r2, [r3, #8]
 8003b62:	2303      	movs	r3, #3
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	4613      	mov	r3, r2
 8003b68:	2200      	movs	r2, #0
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	2001      	movs	r0, #1
 8003b6e:	f000 fa1b 	bl	8003fa8 <xQueueGenericCreateStatic>
 8003b72:	6278      	str	r0, [r7, #36]	; 0x24
 8003b74:	e005      	b.n	8003b82 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8003b76:	2203      	movs	r2, #3
 8003b78:	2100      	movs	r1, #0
 8003b7a:	2001      	movs	r0, #1
 8003b7c:	f000 fa86 	bl	800408c <xQueueGenericCreate>
 8003b80:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d022      	beq.n	8003bce <osSemaphoreNew+0x10e>
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01f      	beq.n	8003bce <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003b8e:	2300      	movs	r3, #0
 8003b90:	2200      	movs	r2, #0
 8003b92:	2100      	movs	r1, #0
 8003b94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b96:	f000 fb3f 	bl	8004218 <xQueueGenericSend>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d016      	beq.n	8003bce <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8003ba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ba2:	f000 fec8 	bl	8004936 <vQueueDelete>
            hSemaphore = NULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	627b      	str	r3, [r7, #36]	; 0x24
 8003baa:	e010      	b.n	8003bce <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8003bac:	6a3b      	ldr	r3, [r7, #32]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d108      	bne.n	8003bc4 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 fac6 	bl	800414c <xQueueCreateCountingSemaphoreStatic>
 8003bc0:	6278      	str	r0, [r7, #36]	; 0x24
 8003bc2:	e004      	b.n	8003bce <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003bc4:	68b9      	ldr	r1, [r7, #8]
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f000 faf5 	bl	80041b6 <xQueueCreateCountingSemaphore>
 8003bcc:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00c      	beq.n	8003bee <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <osSemaphoreNew+0x122>
          name = attr->name;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	61fb      	str	r3, [r7, #28]
 8003be0:	e001      	b.n	8003be6 <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003be6:	69f9      	ldr	r1, [r7, #28]
 8003be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bea:	f000 ffef 	bl	8004bcc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3728      	adds	r7, #40	; 0x28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	2000002c 	.word	0x2000002c

08003bfc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b08c      	sub	sp, #48	; 0x30
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c0c:	f3ef 8305 	mrs	r3, IPSR
 8003c10:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c12:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d170      	bne.n	8003cfa <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c18:	f3ef 8310 	mrs	r3, PRIMASK
 8003c1c:	617b      	str	r3, [r7, #20]
  return(result);
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d16a      	bne.n	8003cfa <osMessageQueueNew+0xfe>
 8003c24:	4b37      	ldr	r3, [pc, #220]	; (8003d04 <osMessageQueueNew+0x108>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d105      	bne.n	8003c38 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c2c:	f3ef 8311 	mrs	r3, BASEPRI
 8003c30:	613b      	str	r3, [r7, #16]
  return(result);
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d160      	bne.n	8003cfa <osMessageQueueNew+0xfe>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d05d      	beq.n	8003cfa <osMessageQueueNew+0xfe>
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d05a      	beq.n	8003cfa <osMessageQueueNew+0xfe>
    mem = -1;
 8003c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c48:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d029      	beq.n	8003ca4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d012      	beq.n	8003c7e <osMessageQueueNew+0x82>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	2b4f      	cmp	r3, #79	; 0x4f
 8003c5e:	d90e      	bls.n	8003c7e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	695a      	ldr	r2, [r3, #20]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	68b9      	ldr	r1, [r7, #8]
 8003c70:	fb01 f303 	mul.w	r3, r1, r3
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d302      	bcc.n	8003c7e <osMessageQueueNew+0x82>
        mem = 1;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	623b      	str	r3, [r7, #32]
 8003c7c:	e014      	b.n	8003ca8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d110      	bne.n	8003ca8 <osMessageQueueNew+0xac>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d10c      	bne.n	8003ca8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d108      	bne.n	8003ca8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d104      	bne.n	8003ca8 <osMessageQueueNew+0xac>
          mem = 0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	623b      	str	r3, [r7, #32]
 8003ca2:	e001      	b.n	8003ca8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003ca8:	6a3b      	ldr	r3, [r7, #32]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d10c      	bne.n	8003cc8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6899      	ldr	r1, [r3, #8]
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	9300      	str	r3, [sp, #0]
 8003cba:	460b      	mov	r3, r1
 8003cbc:	68b9      	ldr	r1, [r7, #8]
 8003cbe:	68f8      	ldr	r0, [r7, #12]
 8003cc0:	f000 f972 	bl	8003fa8 <xQueueGenericCreateStatic>
 8003cc4:	6278      	str	r0, [r7, #36]	; 0x24
 8003cc6:	e008      	b.n	8003cda <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d105      	bne.n	8003cda <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003cce:	2200      	movs	r2, #0
 8003cd0:	68b9      	ldr	r1, [r7, #8]
 8003cd2:	68f8      	ldr	r0, [r7, #12]
 8003cd4:	f000 f9da 	bl	800408c <xQueueGenericCreate>
 8003cd8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00c      	beq.n	8003cfa <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <osMessageQueueNew+0xf2>
        name = attr->name;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	61fb      	str	r3, [r7, #28]
 8003cec:	e001      	b.n	8003cf2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003cf2:	69f9      	ldr	r1, [r7, #28]
 8003cf4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cf6:	f000 ff69 	bl	8004bcc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	3728      	adds	r7, #40	; 0x28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	2000002c 	.word	0x2000002c

08003d08 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	4a07      	ldr	r2, [pc, #28]	; (8003d34 <vApplicationGetIdleTaskMemory+0x2c>)
 8003d18:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4a06      	ldr	r2, [pc, #24]	; (8003d38 <vApplicationGetIdleTaskMemory+0x30>)
 8003d1e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2280      	movs	r2, #128	; 0x80
 8003d24:	601a      	str	r2, [r3, #0]
}
 8003d26:	bf00      	nop
 8003d28:	3714      	adds	r7, #20
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d30:	4770      	bx	lr
 8003d32:	bf00      	nop
 8003d34:	20000030 	.word	0x20000030
 8003d38:	2000008c 	.word	0x2000008c

08003d3c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003d3c:	b480      	push	{r7}
 8003d3e:	b085      	sub	sp, #20
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4a07      	ldr	r2, [pc, #28]	; (8003d68 <vApplicationGetTimerTaskMemory+0x2c>)
 8003d4c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	4a06      	ldr	r2, [pc, #24]	; (8003d6c <vApplicationGetTimerTaskMemory+0x30>)
 8003d52:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d5a:	601a      	str	r2, [r3, #0]
}
 8003d5c:	bf00      	nop
 8003d5e:	3714      	adds	r7, #20
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	2000028c 	.word	0x2000028c
 8003d6c:	200002e8 	.word	0x200002e8

08003d70 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d70:	b480      	push	{r7}
 8003d72:	b083      	sub	sp, #12
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f103 0208 	add.w	r2, r3, #8
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d88:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f103 0208 	add.w	r2, r3, #8
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f103 0208 	add.w	r2, r3, #8
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003da4:	bf00      	nop
 8003da6:	370c      	adds	r7, #12
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b085      	sub	sp, #20
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
 8003dd2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	683a      	ldr	r2, [r7, #0]
 8003df4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	601a      	str	r2, [r3, #0]
}
 8003e06:	bf00      	nop
 8003e08:	3714      	adds	r7, #20
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr

08003e12 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e12:	b480      	push	{r7}
 8003e14:	b085      	sub	sp, #20
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
 8003e1a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e28:	d103      	bne.n	8003e32 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	e00c      	b.n	8003e4c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3308      	adds	r3, #8
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	e002      	b.n	8003e40 <vListInsert+0x2e>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	60fb      	str	r3, [r7, #12]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d2f6      	bcs.n	8003e3a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	601a      	str	r2, [r3, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	6892      	ldr	r2, [r2, #8]
 8003e9a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6852      	ldr	r2, [r2, #4]
 8003ea4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d103      	bne.n	8003eb8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689a      	ldr	r2, [r3, #8]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	1e5a      	subs	r2, r3, #1
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3714      	adds	r7, #20
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d109      	bne.n	8003f00 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	e7fe      	b.n	8003efe <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003f00:	f002 fd1c 	bl	800693c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f0c:	68f9      	ldr	r1, [r7, #12]
 8003f0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	441a      	add	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f30:	3b01      	subs	r3, #1
 8003f32:	68f9      	ldr	r1, [r7, #12]
 8003f34:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003f36:	fb01 f303 	mul.w	r3, r1, r3
 8003f3a:	441a      	add	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	22ff      	movs	r2, #255	; 0xff
 8003f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	22ff      	movs	r2, #255	; 0xff
 8003f4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d114      	bne.n	8003f80 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	691b      	ldr	r3, [r3, #16]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d01a      	beq.n	8003f94 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3310      	adds	r3, #16
 8003f62:	4618      	mov	r0, r3
 8003f64:	f001 fb18 	bl	8005598 <xTaskRemoveFromEventList>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d012      	beq.n	8003f94 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <xQueueGenericReset+0xcc>)
 8003f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f74:	601a      	str	r2, [r3, #0]
 8003f76:	f3bf 8f4f 	dsb	sy
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	e009      	b.n	8003f94 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	3310      	adds	r3, #16
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff fef3 	bl	8003d70 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	3324      	adds	r3, #36	; 0x24
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff feee 	bl	8003d70 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f94:	f002 fd00 	bl	8006998 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f98:	2301      	movs	r3, #1
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	e000ed04 	.word	0xe000ed04

08003fa8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b08e      	sub	sp, #56	; 0x38
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d109      	bne.n	8003fd0 <xQueueGenericCreateStatic+0x28>
 8003fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fce:	e7fe      	b.n	8003fce <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <xQueueGenericCreateStatic+0x42>
 8003fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fda:	f383 8811 	msr	BASEPRI, r3
 8003fde:	f3bf 8f6f 	isb	sy
 8003fe2:	f3bf 8f4f 	dsb	sy
 8003fe6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fe8:	e7fe      	b.n	8003fe8 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <xQueueGenericCreateStatic+0x4e>
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <xQueueGenericCreateStatic+0x52>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <xQueueGenericCreateStatic+0x54>
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d109      	bne.n	8004014 <xQueueGenericCreateStatic+0x6c>
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	623b      	str	r3, [r7, #32]
 8004012:	e7fe      	b.n	8004012 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d102      	bne.n	8004020 <xQueueGenericCreateStatic+0x78>
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <xQueueGenericCreateStatic+0x7c>
 8004020:	2301      	movs	r3, #1
 8004022:	e000      	b.n	8004026 <xQueueGenericCreateStatic+0x7e>
 8004024:	2300      	movs	r3, #0
 8004026:	2b00      	cmp	r3, #0
 8004028:	d109      	bne.n	800403e <xQueueGenericCreateStatic+0x96>
 800402a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800402e:	f383 8811 	msr	BASEPRI, r3
 8004032:	f3bf 8f6f 	isb	sy
 8004036:	f3bf 8f4f 	dsb	sy
 800403a:	61fb      	str	r3, [r7, #28]
 800403c:	e7fe      	b.n	800403c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800403e:	2350      	movs	r3, #80	; 0x50
 8004040:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	2b50      	cmp	r3, #80	; 0x50
 8004046:	d009      	beq.n	800405c <xQueueGenericCreateStatic+0xb4>
 8004048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	61bb      	str	r3, [r7, #24]
 800405a:	e7fe      	b.n	800405a <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00d      	beq.n	8004082 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004068:	2201      	movs	r2, #1
 800406a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800406e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	4613      	mov	r3, r2
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f842 	bl	8004106 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004084:	4618      	mov	r0, r3
 8004086:	3730      	adds	r7, #48	; 0x30
 8004088:	46bd      	mov	sp, r7
 800408a:	bd80      	pop	{r7, pc}

0800408c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800408c:	b580      	push	{r7, lr}
 800408e:	b08a      	sub	sp, #40	; 0x28
 8004090:	af02      	add	r7, sp, #8
 8004092:	60f8      	str	r0, [r7, #12]
 8004094:	60b9      	str	r1, [r7, #8]
 8004096:	4613      	mov	r3, r2
 8004098:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d109      	bne.n	80040b4 <xQueueGenericCreate+0x28>
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	e7fe      	b.n	80040b2 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d102      	bne.n	80040c0 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	61fb      	str	r3, [r7, #28]
 80040be:	e004      	b.n	80040ca <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	fb02 f303 	mul.w	r3, r2, r3
 80040c8:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	3350      	adds	r3, #80	; 0x50
 80040ce:	4618      	mov	r0, r3
 80040d0:	f002 fd4e 	bl	8006b70 <pvPortMalloc>
 80040d4:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80040d6:	69bb      	ldr	r3, [r7, #24]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00f      	beq.n	80040fc <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	3350      	adds	r3, #80	; 0x50
 80040e0:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80040ea:	79fa      	ldrb	r2, [r7, #7]
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	4613      	mov	r3, r2
 80040f2:	697a      	ldr	r2, [r7, #20]
 80040f4:	68b9      	ldr	r1, [r7, #8]
 80040f6:	68f8      	ldr	r0, [r7, #12]
 80040f8:	f000 f805 	bl	8004106 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80040fc:	69bb      	ldr	r3, [r7, #24]
	}
 80040fe:	4618      	mov	r0, r3
 8004100:	3720      	adds	r7, #32
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}

08004106 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004106:	b580      	push	{r7, lr}
 8004108:	b084      	sub	sp, #16
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
 8004112:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004114:	68bb      	ldr	r3, [r7, #8]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d103      	bne.n	8004122 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	e002      	b.n	8004128 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004134:	2101      	movs	r1, #1
 8004136:	69b8      	ldr	r0, [r7, #24]
 8004138:	f7ff fece 	bl	8003ed8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	78fa      	ldrb	r2, [r7, #3]
 8004140:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004144:	bf00      	nop
 8004146:	3710      	adds	r7, #16
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800414c:	b580      	push	{r7, lr}
 800414e:	b08a      	sub	sp, #40	; 0x28
 8004150:	af02      	add	r7, sp, #8
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <xQueueCreateCountingSemaphoreStatic+0x26>
 800415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	61bb      	str	r3, [r7, #24]
 8004170:	e7fe      	b.n	8004170 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	429a      	cmp	r2, r3
 8004178:	d909      	bls.n	800418e <xQueueCreateCountingSemaphoreStatic+0x42>
 800417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	e7fe      	b.n	800418c <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800418e:	2302      	movs	r3, #2
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	2100      	movs	r1, #0
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f7ff ff05 	bl	8003fa8 <xQueueGenericCreateStatic>
 800419e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80041ac:	69fb      	ldr	r3, [r7, #28]
	}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b086      	sub	sp, #24
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d109      	bne.n	80041da <xQueueCreateCountingSemaphore+0x24>
 80041c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ca:	f383 8811 	msr	BASEPRI, r3
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	f3bf 8f4f 	dsb	sy
 80041d6:	613b      	str	r3, [r7, #16]
 80041d8:	e7fe      	b.n	80041d8 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d909      	bls.n	80041f6 <xQueueCreateCountingSemaphore+0x40>
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	e7fe      	b.n	80041f4 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80041f6:	2202      	movs	r2, #2
 80041f8:	2100      	movs	r1, #0
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7ff ff46 	bl	800408c <xQueueGenericCreate>
 8004200:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d002      	beq.n	800420e <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	683a      	ldr	r2, [r7, #0]
 800420c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800420e:	697b      	ldr	r3, [r7, #20]
	}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b08e      	sub	sp, #56	; 0x38
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004226:	2300      	movs	r3, #0
 8004228:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800422e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004230:	2b00      	cmp	r3, #0
 8004232:	d109      	bne.n	8004248 <xQueueGenericSend+0x30>
 8004234:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	62bb      	str	r3, [r7, #40]	; 0x28
 8004246:	e7fe      	b.n	8004246 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d103      	bne.n	8004256 <xQueueGenericSend+0x3e>
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <xQueueGenericSend+0x42>
 8004256:	2301      	movs	r3, #1
 8004258:	e000      	b.n	800425c <xQueueGenericSend+0x44>
 800425a:	2300      	movs	r3, #0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d109      	bne.n	8004274 <xQueueGenericSend+0x5c>
 8004260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004264:	f383 8811 	msr	BASEPRI, r3
 8004268:	f3bf 8f6f 	isb	sy
 800426c:	f3bf 8f4f 	dsb	sy
 8004270:	627b      	str	r3, [r7, #36]	; 0x24
 8004272:	e7fe      	b.n	8004272 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	2b02      	cmp	r3, #2
 8004278:	d103      	bne.n	8004282 <xQueueGenericSend+0x6a>
 800427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800427c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427e:	2b01      	cmp	r3, #1
 8004280:	d101      	bne.n	8004286 <xQueueGenericSend+0x6e>
 8004282:	2301      	movs	r3, #1
 8004284:	e000      	b.n	8004288 <xQueueGenericSend+0x70>
 8004286:	2300      	movs	r3, #0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d109      	bne.n	80042a0 <xQueueGenericSend+0x88>
 800428c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004290:	f383 8811 	msr	BASEPRI, r3
 8004294:	f3bf 8f6f 	isb	sy
 8004298:	f3bf 8f4f 	dsb	sy
 800429c:	623b      	str	r3, [r7, #32]
 800429e:	e7fe      	b.n	800429e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042a0:	f001 fb36 	bl	8005910 <xTaskGetSchedulerState>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d102      	bne.n	80042b0 <xQueueGenericSend+0x98>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d101      	bne.n	80042b4 <xQueueGenericSend+0x9c>
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <xQueueGenericSend+0x9e>
 80042b4:	2300      	movs	r3, #0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d109      	bne.n	80042ce <xQueueGenericSend+0xb6>
 80042ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	61fb      	str	r3, [r7, #28]
 80042cc:	e7fe      	b.n	80042cc <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042ce:	f002 fb35 	bl	800693c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042da:	429a      	cmp	r2, r3
 80042dc:	d302      	bcc.n	80042e4 <xQueueGenericSend+0xcc>
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d129      	bne.n	8004338 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ea:	f000 fb5e 	bl	80049aa <prvCopyDataToQueue>
 80042ee:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80042f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d010      	beq.n	800431a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80042f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fa:	3324      	adds	r3, #36	; 0x24
 80042fc:	4618      	mov	r0, r3
 80042fe:	f001 f94b 	bl	8005598 <xTaskRemoveFromEventList>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d013      	beq.n	8004330 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004308:	4b3f      	ldr	r3, [pc, #252]	; (8004408 <xQueueGenericSend+0x1f0>)
 800430a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	e00a      	b.n	8004330 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431c:	2b00      	cmp	r3, #0
 800431e:	d007      	beq.n	8004330 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004320:	4b39      	ldr	r3, [pc, #228]	; (8004408 <xQueueGenericSend+0x1f0>)
 8004322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004330:	f002 fb32 	bl	8006998 <vPortExitCritical>
				return pdPASS;
 8004334:	2301      	movs	r3, #1
 8004336:	e063      	b.n	8004400 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d103      	bne.n	8004346 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800433e:	f002 fb2b 	bl	8006998 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004342:	2300      	movs	r3, #0
 8004344:	e05c      	b.n	8004400 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004348:	2b00      	cmp	r3, #0
 800434a:	d106      	bne.n	800435a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800434c:	f107 0314 	add.w	r3, r7, #20
 8004350:	4618      	mov	r0, r3
 8004352:	f001 f983 	bl	800565c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004356:	2301      	movs	r3, #1
 8004358:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800435a:	f002 fb1d 	bl	8006998 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800435e:	f000 fee7 	bl	8005130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004362:	f002 faeb 	bl	800693c <vPortEnterCritical>
 8004366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004368:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800436c:	b25b      	sxtb	r3, r3
 800436e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004372:	d103      	bne.n	800437c <xQueueGenericSend+0x164>
 8004374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800437c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004382:	b25b      	sxtb	r3, r3
 8004384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004388:	d103      	bne.n	8004392 <xQueueGenericSend+0x17a>
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	2200      	movs	r2, #0
 800438e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004392:	f002 fb01 	bl	8006998 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004396:	1d3a      	adds	r2, r7, #4
 8004398:	f107 0314 	add.w	r3, r7, #20
 800439c:	4611      	mov	r1, r2
 800439e:	4618      	mov	r0, r3
 80043a0:	f001 f972 	bl	8005688 <xTaskCheckForTimeOut>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d124      	bne.n	80043f4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80043aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043ac:	f000 fbf5 	bl	8004b9a <prvIsQueueFull>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d018      	beq.n	80043e8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	3310      	adds	r3, #16
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	4611      	mov	r1, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	f001 f89c 	bl	80054fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80043c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043c6:	f000 fb80 	bl	8004aca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80043ca:	f000 febf 	bl	800514c <xTaskResumeAll>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f47f af7c 	bne.w	80042ce <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80043d6:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <xQueueGenericSend+0x1f0>)
 80043d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043dc:	601a      	str	r2, [r3, #0]
 80043de:	f3bf 8f4f 	dsb	sy
 80043e2:	f3bf 8f6f 	isb	sy
 80043e6:	e772      	b.n	80042ce <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80043e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043ea:	f000 fb6e 	bl	8004aca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043ee:	f000 fead 	bl	800514c <xTaskResumeAll>
 80043f2:	e76c      	b.n	80042ce <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80043f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043f6:	f000 fb68 	bl	8004aca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043fa:	f000 fea7 	bl	800514c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80043fe:	2300      	movs	r3, #0
		}
	}
}
 8004400:	4618      	mov	r0, r3
 8004402:	3738      	adds	r7, #56	; 0x38
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}
 8004408:	e000ed04 	.word	0xe000ed04

0800440c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08e      	sub	sp, #56	; 0x38
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
 8004418:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800441e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004420:	2b00      	cmp	r3, #0
 8004422:	d109      	bne.n	8004438 <xQueueGenericSendFromISR+0x2c>
 8004424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
 8004436:	e7fe      	b.n	8004436 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d103      	bne.n	8004446 <xQueueGenericSendFromISR+0x3a>
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <xQueueGenericSendFromISR+0x3e>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <xQueueGenericSendFromISR+0x40>
 800444a:	2300      	movs	r3, #0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d109      	bne.n	8004464 <xQueueGenericSendFromISR+0x58>
 8004450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	623b      	str	r3, [r7, #32]
 8004462:	e7fe      	b.n	8004462 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d103      	bne.n	8004472 <xQueueGenericSendFromISR+0x66>
 800446a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	2b01      	cmp	r3, #1
 8004470:	d101      	bne.n	8004476 <xQueueGenericSendFromISR+0x6a>
 8004472:	2301      	movs	r3, #1
 8004474:	e000      	b.n	8004478 <xQueueGenericSendFromISR+0x6c>
 8004476:	2300      	movs	r3, #0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d109      	bne.n	8004490 <xQueueGenericSendFromISR+0x84>
 800447c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004480:	f383 8811 	msr	BASEPRI, r3
 8004484:	f3bf 8f6f 	isb	sy
 8004488:	f3bf 8f4f 	dsb	sy
 800448c:	61fb      	str	r3, [r7, #28]
 800448e:	e7fe      	b.n	800448e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004490:	f002 fb30 	bl	8006af4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004494:	f3ef 8211 	mrs	r2, BASEPRI
 8004498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800449c:	f383 8811 	msr	BASEPRI, r3
 80044a0:	f3bf 8f6f 	isb	sy
 80044a4:	f3bf 8f4f 	dsb	sy
 80044a8:	61ba      	str	r2, [r7, #24]
 80044aa:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80044ac:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d302      	bcc.n	80044c2 <xQueueGenericSendFromISR+0xb6>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d12c      	bne.n	800451c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044cc:	683a      	ldr	r2, [r7, #0]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044d2:	f000 fa6a 	bl	80049aa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044d6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80044da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044de:	d112      	bne.n	8004506 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d016      	beq.n	8004516 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ea:	3324      	adds	r3, #36	; 0x24
 80044ec:	4618      	mov	r0, r3
 80044ee:	f001 f853 	bl	8005598 <xTaskRemoveFromEventList>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00e      	beq.n	8004516 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d00b      	beq.n	8004516 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	e007      	b.n	8004516 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004506:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800450a:	3301      	adds	r3, #1
 800450c:	b2db      	uxtb	r3, r3
 800450e:	b25a      	sxtb	r2, r3
 8004510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004512:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004516:	2301      	movs	r3, #1
 8004518:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800451a:	e001      	b.n	8004520 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800451c:	2300      	movs	r3, #0
 800451e:	637b      	str	r3, [r7, #52]	; 0x34
 8004520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004522:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800452a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800452c:	4618      	mov	r0, r3
 800452e:	3738      	adds	r7, #56	; 0x38
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08c      	sub	sp, #48	; 0x30
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004540:	2300      	movs	r3, #0
 8004542:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	2b00      	cmp	r3, #0
 800454c:	d109      	bne.n	8004562 <xQueueReceive+0x2e>
	__asm volatile
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	f383 8811 	msr	BASEPRI, r3
 8004556:	f3bf 8f6f 	isb	sy
 800455a:	f3bf 8f4f 	dsb	sy
 800455e:	623b      	str	r3, [r7, #32]
 8004560:	e7fe      	b.n	8004560 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d103      	bne.n	8004570 <xQueueReceive+0x3c>
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	2b00      	cmp	r3, #0
 800456e:	d101      	bne.n	8004574 <xQueueReceive+0x40>
 8004570:	2301      	movs	r3, #1
 8004572:	e000      	b.n	8004576 <xQueueReceive+0x42>
 8004574:	2300      	movs	r3, #0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d109      	bne.n	800458e <xQueueReceive+0x5a>
 800457a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457e:	f383 8811 	msr	BASEPRI, r3
 8004582:	f3bf 8f6f 	isb	sy
 8004586:	f3bf 8f4f 	dsb	sy
 800458a:	61fb      	str	r3, [r7, #28]
 800458c:	e7fe      	b.n	800458c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800458e:	f001 f9bf 	bl	8005910 <xTaskGetSchedulerState>
 8004592:	4603      	mov	r3, r0
 8004594:	2b00      	cmp	r3, #0
 8004596:	d102      	bne.n	800459e <xQueueReceive+0x6a>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d101      	bne.n	80045a2 <xQueueReceive+0x6e>
 800459e:	2301      	movs	r3, #1
 80045a0:	e000      	b.n	80045a4 <xQueueReceive+0x70>
 80045a2:	2300      	movs	r3, #0
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d109      	bne.n	80045bc <xQueueReceive+0x88>
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	e7fe      	b.n	80045ba <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80045bc:	f002 f9be 	bl	800693c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d01f      	beq.n	800460c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045d0:	f000 fa55 	bl	8004a7e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d6:	1e5a      	subs	r2, r3, #1
 80045d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045da:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045de:	691b      	ldr	r3, [r3, #16]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00f      	beq.n	8004604 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	3310      	adds	r3, #16
 80045e8:	4618      	mov	r0, r3
 80045ea:	f000 ffd5 	bl	8005598 <xTaskRemoveFromEventList>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d007      	beq.n	8004604 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045f4:	4b3c      	ldr	r3, [pc, #240]	; (80046e8 <xQueueReceive+0x1b4>)
 80045f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004604:	f002 f9c8 	bl	8006998 <vPortExitCritical>
				return pdPASS;
 8004608:	2301      	movs	r3, #1
 800460a:	e069      	b.n	80046e0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d103      	bne.n	800461a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004612:	f002 f9c1 	bl	8006998 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004616:	2300      	movs	r3, #0
 8004618:	e062      	b.n	80046e0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800461a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004620:	f107 0310 	add.w	r3, r7, #16
 8004624:	4618      	mov	r0, r3
 8004626:	f001 f819 	bl	800565c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800462a:	2301      	movs	r3, #1
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800462e:	f002 f9b3 	bl	8006998 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004632:	f000 fd7d 	bl	8005130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004636:	f002 f981 	bl	800693c <vPortEnterCritical>
 800463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004640:	b25b      	sxtb	r3, r3
 8004642:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004646:	d103      	bne.n	8004650 <xQueueReceive+0x11c>
 8004648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464a:	2200      	movs	r2, #0
 800464c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004656:	b25b      	sxtb	r3, r3
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800465c:	d103      	bne.n	8004666 <xQueueReceive+0x132>
 800465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004666:	f002 f997 	bl	8006998 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800466a:	1d3a      	adds	r2, r7, #4
 800466c:	f107 0310 	add.w	r3, r7, #16
 8004670:	4611      	mov	r1, r2
 8004672:	4618      	mov	r0, r3
 8004674:	f001 f808 	bl	8005688 <xTaskCheckForTimeOut>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d123      	bne.n	80046c6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800467e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004680:	f000 fa75 	bl	8004b6e <prvIsQueueEmpty>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d017      	beq.n	80046ba <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800468c:	3324      	adds	r3, #36	; 0x24
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	4611      	mov	r1, r2
 8004692:	4618      	mov	r0, r3
 8004694:	f000 ff32 	bl	80054fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004698:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800469a:	f000 fa16 	bl	8004aca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800469e:	f000 fd55 	bl	800514c <xTaskResumeAll>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d189      	bne.n	80045bc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 80046a8:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <xQueueReceive+0x1b4>)
 80046aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	f3bf 8f4f 	dsb	sy
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	e780      	b.n	80045bc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80046ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046bc:	f000 fa05 	bl	8004aca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046c0:	f000 fd44 	bl	800514c <xTaskResumeAll>
 80046c4:	e77a      	b.n	80045bc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80046c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046c8:	f000 f9ff 	bl	8004aca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046cc:	f000 fd3e 	bl	800514c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046d2:	f000 fa4c 	bl	8004b6e <prvIsQueueEmpty>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f43f af6f 	beq.w	80045bc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3730      	adds	r7, #48	; 0x30
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	e000ed04 	.word	0xe000ed04

080046ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08e      	sub	sp, #56	; 0x38
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80046f6:	2300      	movs	r3, #0
 80046f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80046fe:	2300      	movs	r3, #0
 8004700:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004704:	2b00      	cmp	r3, #0
 8004706:	d109      	bne.n	800471c <xQueueSemaphoreTake+0x30>
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	623b      	str	r3, [r7, #32]
 800471a:	e7fe      	b.n	800471a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800471c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004720:	2b00      	cmp	r3, #0
 8004722:	d009      	beq.n	8004738 <xQueueSemaphoreTake+0x4c>
 8004724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	61fb      	str	r3, [r7, #28]
 8004736:	e7fe      	b.n	8004736 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004738:	f001 f8ea 	bl	8005910 <xTaskGetSchedulerState>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d102      	bne.n	8004748 <xQueueSemaphoreTake+0x5c>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <xQueueSemaphoreTake+0x60>
 8004748:	2301      	movs	r3, #1
 800474a:	e000      	b.n	800474e <xQueueSemaphoreTake+0x62>
 800474c:	2300      	movs	r3, #0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d109      	bne.n	8004766 <xQueueSemaphoreTake+0x7a>
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	61bb      	str	r3, [r7, #24]
 8004764:	e7fe      	b.n	8004764 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004766:	f002 f8e9 	bl	800693c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800476a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800476c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800476e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004772:	2b00      	cmp	r3, #0
 8004774:	d024      	beq.n	80047c0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004778:	1e5a      	subs	r2, r3, #1
 800477a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d104      	bne.n	8004790 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8004786:	f001 fa3f 	bl	8005c08 <pvTaskIncrementMutexHeldCount>
 800478a:	4602      	mov	r2, r0
 800478c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004792:	691b      	ldr	r3, [r3, #16]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00f      	beq.n	80047b8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479a:	3310      	adds	r3, #16
 800479c:	4618      	mov	r0, r3
 800479e:	f000 fefb 	bl	8005598 <xTaskRemoveFromEventList>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047a8:	4b53      	ldr	r3, [pc, #332]	; (80048f8 <xQueueSemaphoreTake+0x20c>)
 80047aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	f3bf 8f4f 	dsb	sy
 80047b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047b8:	f002 f8ee 	bl	8006998 <vPortExitCritical>
				return pdPASS;
 80047bc:	2301      	movs	r3, #1
 80047be:	e096      	b.n	80048ee <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d110      	bne.n	80047e8 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80047c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d009      	beq.n	80047e0 <xQueueSemaphoreTake+0xf4>
 80047cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d0:	f383 8811 	msr	BASEPRI, r3
 80047d4:	f3bf 8f6f 	isb	sy
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	617b      	str	r3, [r7, #20]
 80047de:	e7fe      	b.n	80047de <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80047e0:	f002 f8da 	bl	8006998 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e082      	b.n	80048ee <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d106      	bne.n	80047fc <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047ee:	f107 030c 	add.w	r3, r7, #12
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 ff32 	bl	800565c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047f8:	2301      	movs	r3, #1
 80047fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047fc:	f002 f8cc 	bl	8006998 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004800:	f000 fc96 	bl	8005130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004804:	f002 f89a 	bl	800693c <vPortEnterCritical>
 8004808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800480e:	b25b      	sxtb	r3, r3
 8004810:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004814:	d103      	bne.n	800481e <xQueueSemaphoreTake+0x132>
 8004816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004818:	2200      	movs	r2, #0
 800481a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004820:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004824:	b25b      	sxtb	r3, r3
 8004826:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800482a:	d103      	bne.n	8004834 <xQueueSemaphoreTake+0x148>
 800482c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004834:	f002 f8b0 	bl	8006998 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004838:	463a      	mov	r2, r7
 800483a:	f107 030c 	add.w	r3, r7, #12
 800483e:	4611      	mov	r1, r2
 8004840:	4618      	mov	r0, r3
 8004842:	f000 ff21 	bl	8005688 <xTaskCheckForTimeOut>
 8004846:	4603      	mov	r3, r0
 8004848:	2b00      	cmp	r3, #0
 800484a:	d132      	bne.n	80048b2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800484c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800484e:	f000 f98e 	bl	8004b6e <prvIsQueueEmpty>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d026      	beq.n	80048a6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d109      	bne.n	8004874 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8004860:	f002 f86c 	bl	800693c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8004864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	4618      	mov	r0, r3
 800486a:	f001 f86f 	bl	800594c <xTaskPriorityInherit>
 800486e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004870:	f002 f892 	bl	8006998 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004876:	3324      	adds	r3, #36	; 0x24
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	4611      	mov	r1, r2
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fe3d 	bl	80054fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004882:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004884:	f000 f921 	bl	8004aca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004888:	f000 fc60 	bl	800514c <xTaskResumeAll>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	f47f af69 	bne.w	8004766 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004894:	4b18      	ldr	r3, [pc, #96]	; (80048f8 <xQueueSemaphoreTake+0x20c>)
 8004896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800489a:	601a      	str	r2, [r3, #0]
 800489c:	f3bf 8f4f 	dsb	sy
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	e75f      	b.n	8004766 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80048a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048a8:	f000 f90f 	bl	8004aca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048ac:	f000 fc4e 	bl	800514c <xTaskResumeAll>
 80048b0:	e759      	b.n	8004766 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80048b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048b4:	f000 f909 	bl	8004aca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048b8:	f000 fc48 	bl	800514c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048be:	f000 f956 	bl	8004b6e <prvIsQueueEmpty>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f43f af4e 	beq.w	8004766 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80048ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d00d      	beq.n	80048ec <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 80048d0:	f002 f834 	bl	800693c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80048d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048d6:	f000 f850 	bl	800497a <prvGetDisinheritPriorityAfterTimeout>
 80048da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80048e2:	4618      	mov	r0, r3
 80048e4:	f001 f90c 	bl	8005b00 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80048e8:	f002 f856 	bl	8006998 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3738      	adds	r7, #56	; 0x38
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	e000ed04 	.word	0xe000ed04

080048fc <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d109      	bne.n	800491e <uxQueueMessagesWaiting+0x22>
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	60bb      	str	r3, [r7, #8]
 800491c:	e7fe      	b.n	800491c <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800491e:	f002 f80d 	bl	800693c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004926:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004928:	f002 f836 	bl	8006998 <vPortExitCritical>

	return uxReturn;
 800492c:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b084      	sub	sp, #16
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <vQueueDelete+0x26>
 8004948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494c:	f383 8811 	msr	BASEPRI, r3
 8004950:	f3bf 8f6f 	isb	sy
 8004954:	f3bf 8f4f 	dsb	sy
 8004958:	60bb      	str	r3, [r7, #8]
 800495a:	e7fe      	b.n	800495a <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f000 f95d 	bl	8004c1c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004968:	2b00      	cmp	r3, #0
 800496a:	d102      	bne.n	8004972 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800496c:	68f8      	ldr	r0, [r7, #12]
 800496e:	f002 f9c1 	bl	8006cf4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004972:	bf00      	nop
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800497a:	b480      	push	{r7}
 800497c:	b085      	sub	sp, #20
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004986:	2b00      	cmp	r3, #0
 8004988:	d006      	beq.n	8004998 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004994:	60fb      	str	r3, [r7, #12]
 8004996:	e001      	b.n	800499c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004998:	2300      	movs	r3, #0
 800499a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800499c:	68fb      	ldr	r3, [r7, #12]
	}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b086      	sub	sp, #24
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049be:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d10d      	bne.n	80049e4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d14d      	bne.n	8004a6c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f001 f827 	bl	8005a28 <xTaskPriorityDisinherit>
 80049da:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	605a      	str	r2, [r3, #4]
 80049e2:	e043      	b.n	8004a6c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d119      	bne.n	8004a1e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6898      	ldr	r0, [r3, #8]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	461a      	mov	r2, r3
 80049f4:	68b9      	ldr	r1, [r7, #8]
 80049f6:	f003 fd57 	bl	80084a8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	689a      	ldr	r2, [r3, #8]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	441a      	add	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d32b      	bcc.n	8004a6c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	609a      	str	r2, [r3, #8]
 8004a1c:	e026      	b.n	8004a6c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	68d8      	ldr	r0, [r3, #12]
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	461a      	mov	r2, r3
 8004a28:	68b9      	ldr	r1, [r7, #8]
 8004a2a:	f003 fd3d 	bl	80084a8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	68da      	ldr	r2, [r3, #12]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a36:	425b      	negs	r3, r3
 8004a38:	441a      	add	r2, r3
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d207      	bcs.n	8004a5a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	425b      	negs	r3, r3
 8004a54:	441a      	add	r2, r3
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d105      	bne.n	8004a6c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	1c5a      	adds	r2, r3, #1
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004a74:	697b      	ldr	r3, [r7, #20]
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3718      	adds	r7, #24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b082      	sub	sp, #8
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d018      	beq.n	8004ac2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	68da      	ldr	r2, [r3, #12]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a98:	441a      	add	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d303      	bcc.n	8004ab2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68d9      	ldr	r1, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aba:	461a      	mov	r2, r3
 8004abc:	6838      	ldr	r0, [r7, #0]
 8004abe:	f003 fcf3 	bl	80084a8 <memcpy>
	}
}
 8004ac2:	bf00      	nop
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b084      	sub	sp, #16
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ad2:	f001 ff33 	bl	800693c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004adc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ade:	e011      	b.n	8004b04 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d012      	beq.n	8004b0e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3324      	adds	r3, #36	; 0x24
 8004aec:	4618      	mov	r0, r3
 8004aee:	f000 fd53 	bl	8005598 <xTaskRemoveFromEventList>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004af8:	f000 fe26 	bl	8005748 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	3b01      	subs	r3, #1
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004b04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	dce9      	bgt.n	8004ae0 <prvUnlockQueue+0x16>
 8004b0c:	e000      	b.n	8004b10 <prvUnlockQueue+0x46>
					break;
 8004b0e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	22ff      	movs	r2, #255	; 0xff
 8004b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004b18:	f001 ff3e 	bl	8006998 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004b1c:	f001 ff0e 	bl	800693c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b26:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b28:	e011      	b.n	8004b4e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d012      	beq.n	8004b58 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3310      	adds	r3, #16
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fd2e 	bl	8005598 <xTaskRemoveFromEventList>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004b42:	f000 fe01 	bl	8005748 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004b46:	7bbb      	ldrb	r3, [r7, #14]
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004b4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	dce9      	bgt.n	8004b2a <prvUnlockQueue+0x60>
 8004b56:	e000      	b.n	8004b5a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004b58:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	22ff      	movs	r2, #255	; 0xff
 8004b5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004b62:	f001 ff19 	bl	8006998 <vPortExitCritical>
}
 8004b66:	bf00      	nop
 8004b68:	3710      	adds	r7, #16
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}

08004b6e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004b6e:	b580      	push	{r7, lr}
 8004b70:	b084      	sub	sp, #16
 8004b72:	af00      	add	r7, sp, #0
 8004b74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b76:	f001 fee1 	bl	800693c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d102      	bne.n	8004b88 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b82:	2301      	movs	r3, #1
 8004b84:	60fb      	str	r3, [r7, #12]
 8004b86:	e001      	b.n	8004b8c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b8c:	f001 ff04 	bl	8006998 <vPortExitCritical>

	return xReturn;
 8004b90:	68fb      	ldr	r3, [r7, #12]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ba2:	f001 fecb 	bl	800693c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d102      	bne.n	8004bb8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	60fb      	str	r3, [r7, #12]
 8004bb6:	e001      	b.n	8004bbc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004bbc:	f001 feec 	bl	8006998 <vPortExitCritical>

	return xReturn;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
	...

08004bcc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
 8004bd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	60fb      	str	r3, [r7, #12]
 8004bda:	e014      	b.n	8004c06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004bdc:	4a0e      	ldr	r2, [pc, #56]	; (8004c18 <vQueueAddToRegistry+0x4c>)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d10b      	bne.n	8004c00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004be8:	490b      	ldr	r1, [pc, #44]	; (8004c18 <vQueueAddToRegistry+0x4c>)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004bf2:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <vQueueAddToRegistry+0x4c>)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	4413      	add	r3, r2
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004bfe:	e005      	b.n	8004c0c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3301      	adds	r3, #1
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2b07      	cmp	r3, #7
 8004c0a:	d9e7      	bls.n	8004bdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004c0c:	bf00      	nop
 8004c0e:	3714      	adds	r7, #20
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr
 8004c18:	20001aa4 	.word	0x20001aa4

08004c1c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c24:	2300      	movs	r3, #0
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	e016      	b.n	8004c58 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004c2a:	4a10      	ldr	r2, [pc, #64]	; (8004c6c <vQueueUnregisterQueue+0x50>)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4413      	add	r3, r2
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d10b      	bne.n	8004c52 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004c3a:	4a0c      	ldr	r2, [pc, #48]	; (8004c6c <vQueueUnregisterQueue+0x50>)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2100      	movs	r1, #0
 8004c40:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004c44:	4a09      	ldr	r2, [pc, #36]	; (8004c6c <vQueueUnregisterQueue+0x50>)
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	4413      	add	r3, r2
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	605a      	str	r2, [r3, #4]
				break;
 8004c50:	e005      	b.n	8004c5e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3301      	adds	r3, #1
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2b07      	cmp	r3, #7
 8004c5c:	d9e5      	bls.n	8004c2a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004c5e:	bf00      	nop
 8004c60:	3714      	adds	r7, #20
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
 8004c6a:	bf00      	nop
 8004c6c:	20001aa4 	.word	0x20001aa4

08004c70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004c80:	f001 fe5c 	bl	800693c <vPortEnterCritical>
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c8a:	b25b      	sxtb	r3, r3
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c90:	d103      	bne.n	8004c9a <vQueueWaitForMessageRestricted+0x2a>
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ca0:	b25b      	sxtb	r3, r3
 8004ca2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ca6:	d103      	bne.n	8004cb0 <vQueueWaitForMessageRestricted+0x40>
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cb0:	f001 fe72 	bl	8006998 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d106      	bne.n	8004cca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	3324      	adds	r3, #36	; 0x24
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	68b9      	ldr	r1, [r7, #8]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fc3d 	bl	8005544 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004cca:	6978      	ldr	r0, [r7, #20]
 8004ccc:	f7ff fefd 	bl	8004aca <prvUnlockQueue>
	}
 8004cd0:	bf00      	nop
 8004cd2:	3718      	adds	r7, #24
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b08e      	sub	sp, #56	; 0x38
 8004cdc:	af04      	add	r7, sp, #16
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d109      	bne.n	8004d00 <xTaskCreateStatic+0x28>
 8004cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	623b      	str	r3, [r7, #32]
 8004cfe:	e7fe      	b.n	8004cfe <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d109      	bne.n	8004d1a <xTaskCreateStatic+0x42>
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	61fb      	str	r3, [r7, #28]
 8004d18:	e7fe      	b.n	8004d18 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004d1a:	235c      	movs	r3, #92	; 0x5c
 8004d1c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	2b5c      	cmp	r3, #92	; 0x5c
 8004d22:	d009      	beq.n	8004d38 <xTaskCreateStatic+0x60>
 8004d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d28:	f383 8811 	msr	BASEPRI, r3
 8004d2c:	f3bf 8f6f 	isb	sy
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	61bb      	str	r3, [r7, #24]
 8004d36:	e7fe      	b.n	8004d36 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d01e      	beq.n	8004d7c <xTaskCreateStatic+0xa4>
 8004d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01b      	beq.n	8004d7c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d4c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d50:	2202      	movs	r2, #2
 8004d52:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004d56:	2300      	movs	r3, #0
 8004d58:	9303      	str	r3, [sp, #12]
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	9302      	str	r3, [sp, #8]
 8004d5e:	f107 0314 	add.w	r3, r7, #20
 8004d62:	9301      	str	r3, [sp, #4]
 8004d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	68b9      	ldr	r1, [r7, #8]
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 f850 	bl	8004e14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d76:	f000 f8d3 	bl	8004f20 <prvAddNewTaskToReadyList>
 8004d7a:	e001      	b.n	8004d80 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004d80:	697b      	ldr	r3, [r7, #20]
	}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3728      	adds	r7, #40	; 0x28
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004d8a:	b580      	push	{r7, lr}
 8004d8c:	b08c      	sub	sp, #48	; 0x30
 8004d8e:	af04      	add	r7, sp, #16
 8004d90:	60f8      	str	r0, [r7, #12]
 8004d92:	60b9      	str	r1, [r7, #8]
 8004d94:	603b      	str	r3, [r7, #0]
 8004d96:	4613      	mov	r3, r2
 8004d98:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d9a:	88fb      	ldrh	r3, [r7, #6]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f001 fee6 	bl	8006b70 <pvPortMalloc>
 8004da4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00e      	beq.n	8004dca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004dac:	205c      	movs	r0, #92	; 0x5c
 8004dae:	f001 fedf 	bl	8006b70 <pvPortMalloc>
 8004db2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004db4:	69fb      	ldr	r3, [r7, #28]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d003      	beq.n	8004dc2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8004dc0:	e005      	b.n	8004dce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004dc2:	6978      	ldr	r0, [r7, #20]
 8004dc4:	f001 ff96 	bl	8006cf4 <vPortFree>
 8004dc8:	e001      	b.n	8004dce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004dce:	69fb      	ldr	r3, [r7, #28]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d017      	beq.n	8004e04 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ddc:	88fa      	ldrh	r2, [r7, #6]
 8004dde:	2300      	movs	r3, #0
 8004de0:	9303      	str	r3, [sp, #12]
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	9302      	str	r3, [sp, #8]
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	9301      	str	r3, [sp, #4]
 8004dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f80e 	bl	8004e14 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004df8:	69f8      	ldr	r0, [r7, #28]
 8004dfa:	f000 f891 	bl	8004f20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	61bb      	str	r3, [r7, #24]
 8004e02:	e002      	b.n	8004e0a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e08:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004e0a:	69bb      	ldr	r3, [r7, #24]
	}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b088      	sub	sp, #32
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
 8004e20:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	461a      	mov	r2, r3
 8004e2c:	21a5      	movs	r1, #165	; 0xa5
 8004e2e:	f003 fb46 	bl	80084be <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004e3c:	3b01      	subs	r3, #1
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	f023 0307 	bic.w	r3, r3, #7
 8004e4a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	f003 0307 	and.w	r3, r3, #7
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <prvInitialiseNewTask+0x56>
 8004e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	617b      	str	r3, [r7, #20]
 8004e68:	e7fe      	b.n	8004e68 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	e012      	b.n	8004e96 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004e70:	68ba      	ldr	r2, [r7, #8]
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	4413      	add	r3, r2
 8004e76:	7819      	ldrb	r1, [r3, #0]
 8004e78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3334      	adds	r3, #52	; 0x34
 8004e80:	460a      	mov	r2, r1
 8004e82:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	4413      	add	r3, r2
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d006      	beq.n	8004e9e <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	3301      	adds	r3, #1
 8004e94:	61fb      	str	r3, [r7, #28]
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	2b0f      	cmp	r3, #15
 8004e9a:	d9e9      	bls.n	8004e70 <prvInitialiseNewTask+0x5c>
 8004e9c:	e000      	b.n	8004ea0 <prvInitialiseNewTask+0x8c>
		{
			break;
 8004e9e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eaa:	2b37      	cmp	r3, #55	; 0x37
 8004eac:	d901      	bls.n	8004eb2 <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004eae:	2337      	movs	r3, #55	; 0x37
 8004eb0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eb6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ebc:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fe ff71 	bl	8003db0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed0:	3318      	adds	r3, #24
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f7fe ff6c 	bl	8003db0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004edc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004efc:	683a      	ldr	r2, [r7, #0]
 8004efe:	68f9      	ldr	r1, [r7, #12]
 8004f00:	69b8      	ldr	r0, [r7, #24]
 8004f02:	f001 fbf7 	bl	80066f4 <pxPortInitialiseStack>
 8004f06:	4602      	mov	r2, r0
 8004f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d002      	beq.n	8004f18 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f16:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f18:	bf00      	nop
 8004f1a:	3720      	adds	r7, #32
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b082      	sub	sp, #8
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f28:	f001 fd08 	bl	800693c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f2c:	4b2d      	ldr	r3, [pc, #180]	; (8004fe4 <prvAddNewTaskToReadyList+0xc4>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3301      	adds	r3, #1
 8004f32:	4a2c      	ldr	r2, [pc, #176]	; (8004fe4 <prvAddNewTaskToReadyList+0xc4>)
 8004f34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004f36:	4b2c      	ldr	r3, [pc, #176]	; (8004fe8 <prvAddNewTaskToReadyList+0xc8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d109      	bne.n	8004f52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f3e:	4a2a      	ldr	r2, [pc, #168]	; (8004fe8 <prvAddNewTaskToReadyList+0xc8>)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f44:	4b27      	ldr	r3, [pc, #156]	; (8004fe4 <prvAddNewTaskToReadyList+0xc4>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d110      	bne.n	8004f6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004f4c:	f000 fc20 	bl	8005790 <prvInitialiseTaskLists>
 8004f50:	e00d      	b.n	8004f6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004f52:	4b26      	ldr	r3, [pc, #152]	; (8004fec <prvAddNewTaskToReadyList+0xcc>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d109      	bne.n	8004f6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004f5a:	4b23      	ldr	r3, [pc, #140]	; (8004fe8 <prvAddNewTaskToReadyList+0xc8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f64:	429a      	cmp	r2, r3
 8004f66:	d802      	bhi.n	8004f6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004f68:	4a1f      	ldr	r2, [pc, #124]	; (8004fe8 <prvAddNewTaskToReadyList+0xc8>)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004f6e:	4b20      	ldr	r3, [pc, #128]	; (8004ff0 <prvAddNewTaskToReadyList+0xd0>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3301      	adds	r3, #1
 8004f74:	4a1e      	ldr	r2, [pc, #120]	; (8004ff0 <prvAddNewTaskToReadyList+0xd0>)
 8004f76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004f78:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <prvAddNewTaskToReadyList+0xd0>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f84:	4b1b      	ldr	r3, [pc, #108]	; (8004ff4 <prvAddNewTaskToReadyList+0xd4>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	429a      	cmp	r2, r3
 8004f8a:	d903      	bls.n	8004f94 <prvAddNewTaskToReadyList+0x74>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f90:	4a18      	ldr	r2, [pc, #96]	; (8004ff4 <prvAddNewTaskToReadyList+0xd4>)
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f98:	4613      	mov	r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4413      	add	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4a15      	ldr	r2, [pc, #84]	; (8004ff8 <prvAddNewTaskToReadyList+0xd8>)
 8004fa2:	441a      	add	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	3304      	adds	r3, #4
 8004fa8:	4619      	mov	r1, r3
 8004faa:	4610      	mov	r0, r2
 8004fac:	f7fe ff0d 	bl	8003dca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004fb0:	f001 fcf2 	bl	8006998 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004fb4:	4b0d      	ldr	r3, [pc, #52]	; (8004fec <prvAddNewTaskToReadyList+0xcc>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00e      	beq.n	8004fda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004fbc:	4b0a      	ldr	r3, [pc, #40]	; (8004fe8 <prvAddNewTaskToReadyList+0xc8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d207      	bcs.n	8004fda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004fca:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <prvAddNewTaskToReadyList+0xdc>)
 8004fcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000bbc 	.word	0x20000bbc
 8004fe8:	200006e8 	.word	0x200006e8
 8004fec:	20000bc8 	.word	0x20000bc8
 8004ff0:	20000bd8 	.word	0x20000bd8
 8004ff4:	20000bc4 	.word	0x20000bc4
 8004ff8:	200006ec 	.word	0x200006ec
 8004ffc:	e000ed04 	.word	0xe000ed04

08005000 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d016      	beq.n	8005040 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005012:	4b13      	ldr	r3, [pc, #76]	; (8005060 <vTaskDelay+0x60>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d009      	beq.n	800502e <vTaskDelay+0x2e>
 800501a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800501e:	f383 8811 	msr	BASEPRI, r3
 8005022:	f3bf 8f6f 	isb	sy
 8005026:	f3bf 8f4f 	dsb	sy
 800502a:	60bb      	str	r3, [r7, #8]
 800502c:	e7fe      	b.n	800502c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800502e:	f000 f87f 	bl	8005130 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005032:	2100      	movs	r1, #0
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 ffad 	bl	8005f94 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800503a:	f000 f887 	bl	800514c <xTaskResumeAll>
 800503e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d107      	bne.n	8005056 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005046:	4b07      	ldr	r3, [pc, #28]	; (8005064 <vTaskDelay+0x64>)
 8005048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005056:	bf00      	nop
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
 800505e:	bf00      	nop
 8005060:	20000be4 	.word	0x20000be4
 8005064:	e000ed04 	.word	0xe000ed04

08005068 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	; 0x28
 800506c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800506e:	2300      	movs	r3, #0
 8005070:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005072:	2300      	movs	r3, #0
 8005074:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005076:	463a      	mov	r2, r7
 8005078:	1d39      	adds	r1, r7, #4
 800507a:	f107 0308 	add.w	r3, r7, #8
 800507e:	4618      	mov	r0, r3
 8005080:	f7fe fe42 	bl	8003d08 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005084:	6839      	ldr	r1, [r7, #0]
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	9202      	str	r2, [sp, #8]
 800508c:	9301      	str	r3, [sp, #4]
 800508e:	2300      	movs	r3, #0
 8005090:	9300      	str	r3, [sp, #0]
 8005092:	2300      	movs	r3, #0
 8005094:	460a      	mov	r2, r1
 8005096:	4920      	ldr	r1, [pc, #128]	; (8005118 <vTaskStartScheduler+0xb0>)
 8005098:	4820      	ldr	r0, [pc, #128]	; (800511c <vTaskStartScheduler+0xb4>)
 800509a:	f7ff fe1d 	bl	8004cd8 <xTaskCreateStatic>
 800509e:	4602      	mov	r2, r0
 80050a0:	4b1f      	ldr	r3, [pc, #124]	; (8005120 <vTaskStartScheduler+0xb8>)
 80050a2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80050a4:	4b1e      	ldr	r3, [pc, #120]	; (8005120 <vTaskStartScheduler+0xb8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d002      	beq.n	80050b2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80050ac:	2301      	movs	r3, #1
 80050ae:	617b      	str	r3, [r7, #20]
 80050b0:	e001      	b.n	80050b6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d102      	bne.n	80050c2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80050bc:	f000 ffbe 	bl	800603c <xTimerCreateTimerTask>
 80050c0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d115      	bne.n	80050f4 <vTaskStartScheduler+0x8c>
 80050c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050da:	4b12      	ldr	r3, [pc, #72]	; (8005124 <vTaskStartScheduler+0xbc>)
 80050dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80050e0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050e2:	4b11      	ldr	r3, [pc, #68]	; (8005128 <vTaskStartScheduler+0xc0>)
 80050e4:	2201      	movs	r2, #1
 80050e6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80050e8:	4b10      	ldr	r3, [pc, #64]	; (800512c <vTaskStartScheduler+0xc4>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050ee:	f001 fb87 	bl	8006800 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050f2:	e00d      	b.n	8005110 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050fa:	d109      	bne.n	8005110 <vTaskStartScheduler+0xa8>
 80050fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	60fb      	str	r3, [r7, #12]
 800510e:	e7fe      	b.n	800510e <vTaskStartScheduler+0xa6>
}
 8005110:	bf00      	nop
 8005112:	3718      	adds	r7, #24
 8005114:	46bd      	mov	sp, r7
 8005116:	bd80      	pop	{r7, pc}
 8005118:	080084f4 	.word	0x080084f4
 800511c:	08005761 	.word	0x08005761
 8005120:	20000be0 	.word	0x20000be0
 8005124:	20000bdc 	.word	0x20000bdc
 8005128:	20000bc8 	.word	0x20000bc8
 800512c:	20000bc0 	.word	0x20000bc0

08005130 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005134:	4b04      	ldr	r3, [pc, #16]	; (8005148 <vTaskSuspendAll+0x18>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3301      	adds	r3, #1
 800513a:	4a03      	ldr	r2, [pc, #12]	; (8005148 <vTaskSuspendAll+0x18>)
 800513c:	6013      	str	r3, [r2, #0]
}
 800513e:	bf00      	nop
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr
 8005148:	20000be4 	.word	0x20000be4

0800514c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005156:	2300      	movs	r3, #0
 8005158:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800515a:	4b41      	ldr	r3, [pc, #260]	; (8005260 <xTaskResumeAll+0x114>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <xTaskResumeAll+0x2a>
 8005162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	603b      	str	r3, [r7, #0]
 8005174:	e7fe      	b.n	8005174 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005176:	f001 fbe1 	bl	800693c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800517a:	4b39      	ldr	r3, [pc, #228]	; (8005260 <xTaskResumeAll+0x114>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	3b01      	subs	r3, #1
 8005180:	4a37      	ldr	r2, [pc, #220]	; (8005260 <xTaskResumeAll+0x114>)
 8005182:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005184:	4b36      	ldr	r3, [pc, #216]	; (8005260 <xTaskResumeAll+0x114>)
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d162      	bne.n	8005252 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800518c:	4b35      	ldr	r3, [pc, #212]	; (8005264 <xTaskResumeAll+0x118>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d05e      	beq.n	8005252 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005194:	e02f      	b.n	80051f6 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005196:	4b34      	ldr	r3, [pc, #208]	; (8005268 <xTaskResumeAll+0x11c>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3318      	adds	r3, #24
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fe fe6e 	bl	8003e84 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	3304      	adds	r3, #4
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7fe fe69 	bl	8003e84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051b6:	4b2d      	ldr	r3, [pc, #180]	; (800526c <xTaskResumeAll+0x120>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	429a      	cmp	r2, r3
 80051bc:	d903      	bls.n	80051c6 <xTaskResumeAll+0x7a>
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	4a2a      	ldr	r2, [pc, #168]	; (800526c <xTaskResumeAll+0x120>)
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ca:	4613      	mov	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4413      	add	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4a27      	ldr	r2, [pc, #156]	; (8005270 <xTaskResumeAll+0x124>)
 80051d4:	441a      	add	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3304      	adds	r3, #4
 80051da:	4619      	mov	r1, r3
 80051dc:	4610      	mov	r0, r2
 80051de:	f7fe fdf4 	bl	8003dca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051e6:	4b23      	ldr	r3, [pc, #140]	; (8005274 <xTaskResumeAll+0x128>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d302      	bcc.n	80051f6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80051f0:	4b21      	ldr	r3, [pc, #132]	; (8005278 <xTaskResumeAll+0x12c>)
 80051f2:	2201      	movs	r2, #1
 80051f4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051f6:	4b1c      	ldr	r3, [pc, #112]	; (8005268 <xTaskResumeAll+0x11c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d1cb      	bne.n	8005196 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d001      	beq.n	8005208 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005204:	f000 fb5e 	bl	80058c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005208:	4b1c      	ldr	r3, [pc, #112]	; (800527c <xTaskResumeAll+0x130>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d010      	beq.n	8005236 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005214:	f000 f858 	bl	80052c8 <xTaskIncrementTick>
 8005218:	4603      	mov	r3, r0
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800521e:	4b16      	ldr	r3, [pc, #88]	; (8005278 <xTaskResumeAll+0x12c>)
 8005220:	2201      	movs	r2, #1
 8005222:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3b01      	subs	r3, #1
 8005228:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1f1      	bne.n	8005214 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005230:	4b12      	ldr	r3, [pc, #72]	; (800527c <xTaskResumeAll+0x130>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005236:	4b10      	ldr	r3, [pc, #64]	; (8005278 <xTaskResumeAll+0x12c>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d009      	beq.n	8005252 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800523e:	2301      	movs	r3, #1
 8005240:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005242:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <xTaskResumeAll+0x134>)
 8005244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005252:	f001 fba1 	bl	8006998 <vPortExitCritical>

	return xAlreadyYielded;
 8005256:	68bb      	ldr	r3, [r7, #8]
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}
 8005260:	20000be4 	.word	0x20000be4
 8005264:	20000bbc 	.word	0x20000bbc
 8005268:	20000b7c 	.word	0x20000b7c
 800526c:	20000bc4 	.word	0x20000bc4
 8005270:	200006ec 	.word	0x200006ec
 8005274:	200006e8 	.word	0x200006e8
 8005278:	20000bd0 	.word	0x20000bd0
 800527c:	20000bcc 	.word	0x20000bcc
 8005280:	e000ed04 	.word	0xe000ed04

08005284 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800528a:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <xTaskGetTickCount+0x1c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005290:	687b      	ldr	r3, [r7, #4]
}
 8005292:	4618      	mov	r0, r3
 8005294:	370c      	adds	r7, #12
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	20000bc0 	.word	0x20000bc0

080052a4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052aa:	f001 fc23 	bl	8006af4 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80052ae:	2300      	movs	r3, #0
 80052b0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80052b2:	4b04      	ldr	r3, [pc, #16]	; (80052c4 <xTaskGetTickCountFromISR+0x20>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052b8:	683b      	ldr	r3, [r7, #0]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	20000bc0 	.word	0x20000bc0

080052c8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052d2:	4b51      	ldr	r3, [pc, #324]	; (8005418 <xTaskIncrementTick+0x150>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f040 808d 	bne.w	80053f6 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052dc:	4b4f      	ldr	r3, [pc, #316]	; (800541c <xTaskIncrementTick+0x154>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3301      	adds	r3, #1
 80052e2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052e4:	4a4d      	ldr	r2, [pc, #308]	; (800541c <xTaskIncrementTick+0x154>)
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d11f      	bne.n	8005330 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80052f0:	4b4b      	ldr	r3, [pc, #300]	; (8005420 <xTaskIncrementTick+0x158>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d009      	beq.n	800530e <xTaskIncrementTick+0x46>
 80052fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052fe:	f383 8811 	msr	BASEPRI, r3
 8005302:	f3bf 8f6f 	isb	sy
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	603b      	str	r3, [r7, #0]
 800530c:	e7fe      	b.n	800530c <xTaskIncrementTick+0x44>
 800530e:	4b44      	ldr	r3, [pc, #272]	; (8005420 <xTaskIncrementTick+0x158>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60fb      	str	r3, [r7, #12]
 8005314:	4b43      	ldr	r3, [pc, #268]	; (8005424 <xTaskIncrementTick+0x15c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a41      	ldr	r2, [pc, #260]	; (8005420 <xTaskIncrementTick+0x158>)
 800531a:	6013      	str	r3, [r2, #0]
 800531c:	4a41      	ldr	r2, [pc, #260]	; (8005424 <xTaskIncrementTick+0x15c>)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	4b41      	ldr	r3, [pc, #260]	; (8005428 <xTaskIncrementTick+0x160>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3301      	adds	r3, #1
 8005328:	4a3f      	ldr	r2, [pc, #252]	; (8005428 <xTaskIncrementTick+0x160>)
 800532a:	6013      	str	r3, [r2, #0]
 800532c:	f000 faca 	bl	80058c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005330:	4b3e      	ldr	r3, [pc, #248]	; (800542c <xTaskIncrementTick+0x164>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	429a      	cmp	r2, r3
 8005338:	d34e      	bcc.n	80053d8 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800533a:	4b39      	ldr	r3, [pc, #228]	; (8005420 <xTaskIncrementTick+0x158>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <xTaskIncrementTick+0x80>
 8005344:	2301      	movs	r3, #1
 8005346:	e000      	b.n	800534a <xTaskIncrementTick+0x82>
 8005348:	2300      	movs	r3, #0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d004      	beq.n	8005358 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800534e:	4b37      	ldr	r3, [pc, #220]	; (800542c <xTaskIncrementTick+0x164>)
 8005350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005354:	601a      	str	r2, [r3, #0]
					break;
 8005356:	e03f      	b.n	80053d8 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005358:	4b31      	ldr	r3, [pc, #196]	; (8005420 <xTaskIncrementTick+0x158>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	429a      	cmp	r2, r3
 800536e:	d203      	bcs.n	8005378 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005370:	4a2e      	ldr	r2, [pc, #184]	; (800542c <xTaskIncrementTick+0x164>)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6013      	str	r3, [r2, #0]
						break;
 8005376:	e02f      	b.n	80053d8 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	3304      	adds	r3, #4
 800537c:	4618      	mov	r0, r3
 800537e:	f7fe fd81 	bl	8003e84 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005382:	68bb      	ldr	r3, [r7, #8]
 8005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005386:	2b00      	cmp	r3, #0
 8005388:	d004      	beq.n	8005394 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	3318      	adds	r3, #24
 800538e:	4618      	mov	r0, r3
 8005390:	f7fe fd78 	bl	8003e84 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005398:	4b25      	ldr	r3, [pc, #148]	; (8005430 <xTaskIncrementTick+0x168>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	429a      	cmp	r2, r3
 800539e:	d903      	bls.n	80053a8 <xTaskIncrementTick+0xe0>
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a4:	4a22      	ldr	r2, [pc, #136]	; (8005430 <xTaskIncrementTick+0x168>)
 80053a6:	6013      	str	r3, [r2, #0]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4a1f      	ldr	r2, [pc, #124]	; (8005434 <xTaskIncrementTick+0x16c>)
 80053b6:	441a      	add	r2, r3
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	3304      	adds	r3, #4
 80053bc:	4619      	mov	r1, r3
 80053be:	4610      	mov	r0, r2
 80053c0:	f7fe fd03 	bl	8003dca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c8:	4b1b      	ldr	r3, [pc, #108]	; (8005438 <xTaskIncrementTick+0x170>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d3b3      	bcc.n	800533a <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80053d2:	2301      	movs	r3, #1
 80053d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053d6:	e7b0      	b.n	800533a <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053d8:	4b17      	ldr	r3, [pc, #92]	; (8005438 <xTaskIncrementTick+0x170>)
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053de:	4915      	ldr	r1, [pc, #84]	; (8005434 <xTaskIncrementTick+0x16c>)
 80053e0:	4613      	mov	r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4413      	add	r3, r2
 80053e6:	009b      	lsls	r3, r3, #2
 80053e8:	440b      	add	r3, r1
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d907      	bls.n	8005400 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80053f0:	2301      	movs	r3, #1
 80053f2:	617b      	str	r3, [r7, #20]
 80053f4:	e004      	b.n	8005400 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80053f6:	4b11      	ldr	r3, [pc, #68]	; (800543c <xTaskIncrementTick+0x174>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	3301      	adds	r3, #1
 80053fc:	4a0f      	ldr	r2, [pc, #60]	; (800543c <xTaskIncrementTick+0x174>)
 80053fe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005400:	4b0f      	ldr	r3, [pc, #60]	; (8005440 <xTaskIncrementTick+0x178>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8005408:	2301      	movs	r3, #1
 800540a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800540c:	697b      	ldr	r3, [r7, #20]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3718      	adds	r7, #24
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	20000be4 	.word	0x20000be4
 800541c:	20000bc0 	.word	0x20000bc0
 8005420:	20000b74 	.word	0x20000b74
 8005424:	20000b78 	.word	0x20000b78
 8005428:	20000bd4 	.word	0x20000bd4
 800542c:	20000bdc 	.word	0x20000bdc
 8005430:	20000bc4 	.word	0x20000bc4
 8005434:	200006ec 	.word	0x200006ec
 8005438:	200006e8 	.word	0x200006e8
 800543c:	20000bcc 	.word	0x20000bcc
 8005440:	20000bd0 	.word	0x20000bd0

08005444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005444:	b480      	push	{r7}
 8005446:	b085      	sub	sp, #20
 8005448:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800544a:	4b27      	ldr	r3, [pc, #156]	; (80054e8 <vTaskSwitchContext+0xa4>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d003      	beq.n	800545a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005452:	4b26      	ldr	r3, [pc, #152]	; (80054ec <vTaskSwitchContext+0xa8>)
 8005454:	2201      	movs	r2, #1
 8005456:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005458:	e040      	b.n	80054dc <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800545a:	4b24      	ldr	r3, [pc, #144]	; (80054ec <vTaskSwitchContext+0xa8>)
 800545c:	2200      	movs	r2, #0
 800545e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005460:	4b23      	ldr	r3, [pc, #140]	; (80054f0 <vTaskSwitchContext+0xac>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	e00f      	b.n	8005488 <vTaskSwitchContext+0x44>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d109      	bne.n	8005482 <vTaskSwitchContext+0x3e>
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	607b      	str	r3, [r7, #4]
 8005480:	e7fe      	b.n	8005480 <vTaskSwitchContext+0x3c>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	3b01      	subs	r3, #1
 8005486:	60fb      	str	r3, [r7, #12]
 8005488:	491a      	ldr	r1, [pc, #104]	; (80054f4 <vTaskSwitchContext+0xb0>)
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4613      	mov	r3, r2
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	4413      	add	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	440b      	add	r3, r1
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0e5      	beq.n	8005468 <vTaskSwitchContext+0x24>
 800549c:	68fa      	ldr	r2, [r7, #12]
 800549e:	4613      	mov	r3, r2
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	4413      	add	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	4a13      	ldr	r2, [pc, #76]	; (80054f4 <vTaskSwitchContext+0xb0>)
 80054a8:	4413      	add	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	605a      	str	r2, [r3, #4]
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	3308      	adds	r3, #8
 80054be:	429a      	cmp	r2, r3
 80054c0:	d104      	bne.n	80054cc <vTaskSwitchContext+0x88>
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	685a      	ldr	r2, [r3, #4]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	605a      	str	r2, [r3, #4]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	4a09      	ldr	r2, [pc, #36]	; (80054f8 <vTaskSwitchContext+0xb4>)
 80054d4:	6013      	str	r3, [r2, #0]
 80054d6:	4a06      	ldr	r2, [pc, #24]	; (80054f0 <vTaskSwitchContext+0xac>)
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6013      	str	r3, [r2, #0]
}
 80054dc:	bf00      	nop
 80054de:	3714      	adds	r7, #20
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	20000be4 	.word	0x20000be4
 80054ec:	20000bd0 	.word	0x20000bd0
 80054f0:	20000bc4 	.word	0x20000bc4
 80054f4:	200006ec 	.word	0x200006ec
 80054f8:	200006e8 	.word	0x200006e8

080054fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d109      	bne.n	8005520 <vTaskPlaceOnEventList+0x24>
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	e7fe      	b.n	800551e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005520:	4b07      	ldr	r3, [pc, #28]	; (8005540 <vTaskPlaceOnEventList+0x44>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	3318      	adds	r3, #24
 8005526:	4619      	mov	r1, r3
 8005528:	6878      	ldr	r0, [r7, #4]
 800552a:	f7fe fc72 	bl	8003e12 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800552e:	2101      	movs	r1, #1
 8005530:	6838      	ldr	r0, [r7, #0]
 8005532:	f000 fd2f 	bl	8005f94 <prvAddCurrentTaskToDelayedList>
}
 8005536:	bf00      	nop
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}
 800553e:	bf00      	nop
 8005540:	200006e8 	.word	0x200006e8

08005544 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d109      	bne.n	800556a <vTaskPlaceOnEventListRestricted+0x26>
 8005556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555a:	f383 8811 	msr	BASEPRI, r3
 800555e:	f3bf 8f6f 	isb	sy
 8005562:	f3bf 8f4f 	dsb	sy
 8005566:	617b      	str	r3, [r7, #20]
 8005568:	e7fe      	b.n	8005568 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800556a:	4b0a      	ldr	r3, [pc, #40]	; (8005594 <vTaskPlaceOnEventListRestricted+0x50>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	3318      	adds	r3, #24
 8005570:	4619      	mov	r1, r3
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f7fe fc29 	bl	8003dca <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d002      	beq.n	8005584 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800557e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005582:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005584:	6879      	ldr	r1, [r7, #4]
 8005586:	68b8      	ldr	r0, [r7, #8]
 8005588:	f000 fd04 	bl	8005f94 <prvAddCurrentTaskToDelayedList>
	}
 800558c:	bf00      	nop
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	200006e8 	.word	0x200006e8

08005598 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b086      	sub	sp, #24
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d109      	bne.n	80055c2 <xTaskRemoveFromEventList+0x2a>
 80055ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055b2:	f383 8811 	msr	BASEPRI, r3
 80055b6:	f3bf 8f6f 	isb	sy
 80055ba:	f3bf 8f4f 	dsb	sy
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	e7fe      	b.n	80055c0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055c2:	693b      	ldr	r3, [r7, #16]
 80055c4:	3318      	adds	r3, #24
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fe fc5c 	bl	8003e84 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055cc:	4b1d      	ldr	r3, [pc, #116]	; (8005644 <xTaskRemoveFromEventList+0xac>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d11d      	bne.n	8005610 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	3304      	adds	r3, #4
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fe fc53 	bl	8003e84 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e2:	4b19      	ldr	r3, [pc, #100]	; (8005648 <xTaskRemoveFromEventList+0xb0>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	429a      	cmp	r2, r3
 80055e8:	d903      	bls.n	80055f2 <xTaskRemoveFromEventList+0x5a>
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ee:	4a16      	ldr	r2, [pc, #88]	; (8005648 <xTaskRemoveFromEventList+0xb0>)
 80055f0:	6013      	str	r3, [r2, #0]
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f6:	4613      	mov	r3, r2
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	4413      	add	r3, r2
 80055fc:	009b      	lsls	r3, r3, #2
 80055fe:	4a13      	ldr	r2, [pc, #76]	; (800564c <xTaskRemoveFromEventList+0xb4>)
 8005600:	441a      	add	r2, r3
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	3304      	adds	r3, #4
 8005606:	4619      	mov	r1, r3
 8005608:	4610      	mov	r0, r2
 800560a:	f7fe fbde 	bl	8003dca <vListInsertEnd>
 800560e:	e005      	b.n	800561c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	3318      	adds	r3, #24
 8005614:	4619      	mov	r1, r3
 8005616:	480e      	ldr	r0, [pc, #56]	; (8005650 <xTaskRemoveFromEventList+0xb8>)
 8005618:	f7fe fbd7 	bl	8003dca <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005620:	4b0c      	ldr	r3, [pc, #48]	; (8005654 <xTaskRemoveFromEventList+0xbc>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005626:	429a      	cmp	r2, r3
 8005628:	d905      	bls.n	8005636 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800562a:	2301      	movs	r3, #1
 800562c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800562e:	4b0a      	ldr	r3, [pc, #40]	; (8005658 <xTaskRemoveFromEventList+0xc0>)
 8005630:	2201      	movs	r2, #1
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	e001      	b.n	800563a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800563a:	697b      	ldr	r3, [r7, #20]
}
 800563c:	4618      	mov	r0, r3
 800563e:	3718      	adds	r7, #24
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	20000be4 	.word	0x20000be4
 8005648:	20000bc4 	.word	0x20000bc4
 800564c:	200006ec 	.word	0x200006ec
 8005650:	20000b7c 	.word	0x20000b7c
 8005654:	200006e8 	.word	0x200006e8
 8005658:	20000bd0 	.word	0x20000bd0

0800565c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005664:	4b06      	ldr	r3, [pc, #24]	; (8005680 <vTaskInternalSetTimeOutState+0x24>)
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800566c:	4b05      	ldr	r3, [pc, #20]	; (8005684 <vTaskInternalSetTimeOutState+0x28>)
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	605a      	str	r2, [r3, #4]
}
 8005674:	bf00      	nop
 8005676:	370c      	adds	r7, #12
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr
 8005680:	20000bd4 	.word	0x20000bd4
 8005684:	20000bc0 	.word	0x20000bc0

08005688 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b088      	sub	sp, #32
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d109      	bne.n	80056ac <xTaskCheckForTimeOut+0x24>
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	613b      	str	r3, [r7, #16]
 80056aa:	e7fe      	b.n	80056aa <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d109      	bne.n	80056c6 <xTaskCheckForTimeOut+0x3e>
 80056b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	60fb      	str	r3, [r7, #12]
 80056c4:	e7fe      	b.n	80056c4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80056c6:	f001 f939 	bl	800693c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056ca:	4b1d      	ldr	r3, [pc, #116]	; (8005740 <xTaskCheckForTimeOut+0xb8>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	69ba      	ldr	r2, [r7, #24]
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056e2:	d102      	bne.n	80056ea <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80056e4:	2300      	movs	r3, #0
 80056e6:	61fb      	str	r3, [r7, #28]
 80056e8:	e023      	b.n	8005732 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	4b15      	ldr	r3, [pc, #84]	; (8005744 <xTaskCheckForTimeOut+0xbc>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d007      	beq.n	8005706 <xTaskCheckForTimeOut+0x7e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	69ba      	ldr	r2, [r7, #24]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d302      	bcc.n	8005706 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005700:	2301      	movs	r3, #1
 8005702:	61fb      	str	r3, [r7, #28]
 8005704:	e015      	b.n	8005732 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	429a      	cmp	r2, r3
 800570e:	d20b      	bcs.n	8005728 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	1ad2      	subs	r2, r2, r3
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff ff9d 	bl	800565c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005722:	2300      	movs	r3, #0
 8005724:	61fb      	str	r3, [r7, #28]
 8005726:	e004      	b.n	8005732 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800572e:	2301      	movs	r3, #1
 8005730:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005732:	f001 f931 	bl	8006998 <vPortExitCritical>

	return xReturn;
 8005736:	69fb      	ldr	r3, [r7, #28]
}
 8005738:	4618      	mov	r0, r3
 800573a:	3720      	adds	r7, #32
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	20000bc0 	.word	0x20000bc0
 8005744:	20000bd4 	.word	0x20000bd4

08005748 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005748:	b480      	push	{r7}
 800574a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800574c:	4b03      	ldr	r3, [pc, #12]	; (800575c <vTaskMissedYield+0x14>)
 800574e:	2201      	movs	r2, #1
 8005750:	601a      	str	r2, [r3, #0]
}
 8005752:	bf00      	nop
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr
 800575c:	20000bd0 	.word	0x20000bd0

08005760 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005768:	f000 f852 	bl	8005810 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800576c:	4b06      	ldr	r3, [pc, #24]	; (8005788 <prvIdleTask+0x28>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d9f9      	bls.n	8005768 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005774:	4b05      	ldr	r3, [pc, #20]	; (800578c <prvIdleTask+0x2c>)
 8005776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800577a:	601a      	str	r2, [r3, #0]
 800577c:	f3bf 8f4f 	dsb	sy
 8005780:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005784:	e7f0      	b.n	8005768 <prvIdleTask+0x8>
 8005786:	bf00      	nop
 8005788:	200006ec 	.word	0x200006ec
 800578c:	e000ed04 	.word	0xe000ed04

08005790 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005796:	2300      	movs	r3, #0
 8005798:	607b      	str	r3, [r7, #4]
 800579a:	e00c      	b.n	80057b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	4613      	mov	r3, r2
 80057a0:	009b      	lsls	r3, r3, #2
 80057a2:	4413      	add	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4a12      	ldr	r2, [pc, #72]	; (80057f0 <prvInitialiseTaskLists+0x60>)
 80057a8:	4413      	add	r3, r2
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fe fae0 	bl	8003d70 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	3301      	adds	r3, #1
 80057b4:	607b      	str	r3, [r7, #4]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b37      	cmp	r3, #55	; 0x37
 80057ba:	d9ef      	bls.n	800579c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057bc:	480d      	ldr	r0, [pc, #52]	; (80057f4 <prvInitialiseTaskLists+0x64>)
 80057be:	f7fe fad7 	bl	8003d70 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057c2:	480d      	ldr	r0, [pc, #52]	; (80057f8 <prvInitialiseTaskLists+0x68>)
 80057c4:	f7fe fad4 	bl	8003d70 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057c8:	480c      	ldr	r0, [pc, #48]	; (80057fc <prvInitialiseTaskLists+0x6c>)
 80057ca:	f7fe fad1 	bl	8003d70 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057ce:	480c      	ldr	r0, [pc, #48]	; (8005800 <prvInitialiseTaskLists+0x70>)
 80057d0:	f7fe face 	bl	8003d70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057d4:	480b      	ldr	r0, [pc, #44]	; (8005804 <prvInitialiseTaskLists+0x74>)
 80057d6:	f7fe facb 	bl	8003d70 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057da:	4b0b      	ldr	r3, [pc, #44]	; (8005808 <prvInitialiseTaskLists+0x78>)
 80057dc:	4a05      	ldr	r2, [pc, #20]	; (80057f4 <prvInitialiseTaskLists+0x64>)
 80057de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057e0:	4b0a      	ldr	r3, [pc, #40]	; (800580c <prvInitialiseTaskLists+0x7c>)
 80057e2:	4a05      	ldr	r2, [pc, #20]	; (80057f8 <prvInitialiseTaskLists+0x68>)
 80057e4:	601a      	str	r2, [r3, #0]
}
 80057e6:	bf00      	nop
 80057e8:	3708      	adds	r7, #8
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	200006ec 	.word	0x200006ec
 80057f4:	20000b4c 	.word	0x20000b4c
 80057f8:	20000b60 	.word	0x20000b60
 80057fc:	20000b7c 	.word	0x20000b7c
 8005800:	20000b90 	.word	0x20000b90
 8005804:	20000ba8 	.word	0x20000ba8
 8005808:	20000b74 	.word	0x20000b74
 800580c:	20000b78 	.word	0x20000b78

08005810 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005816:	e019      	b.n	800584c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005818:	f001 f890 	bl	800693c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800581c:	4b0f      	ldr	r3, [pc, #60]	; (800585c <prvCheckTasksWaitingTermination+0x4c>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3304      	adds	r3, #4
 8005828:	4618      	mov	r0, r3
 800582a:	f7fe fb2b 	bl	8003e84 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800582e:	4b0c      	ldr	r3, [pc, #48]	; (8005860 <prvCheckTasksWaitingTermination+0x50>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	3b01      	subs	r3, #1
 8005834:	4a0a      	ldr	r2, [pc, #40]	; (8005860 <prvCheckTasksWaitingTermination+0x50>)
 8005836:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005838:	4b0a      	ldr	r3, [pc, #40]	; (8005864 <prvCheckTasksWaitingTermination+0x54>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3b01      	subs	r3, #1
 800583e:	4a09      	ldr	r2, [pc, #36]	; (8005864 <prvCheckTasksWaitingTermination+0x54>)
 8005840:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005842:	f001 f8a9 	bl	8006998 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f80e 	bl	8005868 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800584c:	4b05      	ldr	r3, [pc, #20]	; (8005864 <prvCheckTasksWaitingTermination+0x54>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1e1      	bne.n	8005818 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005854:	bf00      	nop
 8005856:	3708      	adds	r7, #8
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20000b90 	.word	0x20000b90
 8005860:	20000bbc 	.word	0x20000bbc
 8005864:	20000ba4 	.word	0x20000ba4

08005868 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005876:	2b00      	cmp	r3, #0
 8005878:	d108      	bne.n	800588c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800587e:	4618      	mov	r0, r3
 8005880:	f001 fa38 	bl	8006cf4 <vPortFree>
				vPortFree( pxTCB );
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f001 fa35 	bl	8006cf4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800588a:	e017      	b.n	80058bc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005892:	2b01      	cmp	r3, #1
 8005894:	d103      	bne.n	800589e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f001 fa2c 	bl	8006cf4 <vPortFree>
	}
 800589c:	e00e      	b.n	80058bc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80058a4:	2b02      	cmp	r3, #2
 80058a6:	d009      	beq.n	80058bc <prvDeleteTCB+0x54>
 80058a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ac:	f383 8811 	msr	BASEPRI, r3
 80058b0:	f3bf 8f6f 	isb	sy
 80058b4:	f3bf 8f4f 	dsb	sy
 80058b8:	60fb      	str	r3, [r7, #12]
 80058ba:	e7fe      	b.n	80058ba <prvDeleteTCB+0x52>
	}
 80058bc:	bf00      	nop
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058ca:	4b0f      	ldr	r3, [pc, #60]	; (8005908 <prvResetNextTaskUnblockTime+0x44>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <prvResetNextTaskUnblockTime+0x14>
 80058d4:	2301      	movs	r3, #1
 80058d6:	e000      	b.n	80058da <prvResetNextTaskUnblockTime+0x16>
 80058d8:	2300      	movs	r3, #0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d004      	beq.n	80058e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058de:	4b0b      	ldr	r3, [pc, #44]	; (800590c <prvResetNextTaskUnblockTime+0x48>)
 80058e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058e6:	e008      	b.n	80058fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80058e8:	4b07      	ldr	r3, [pc, #28]	; (8005908 <prvResetNextTaskUnblockTime+0x44>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	4a05      	ldr	r2, [pc, #20]	; (800590c <prvResetNextTaskUnblockTime+0x48>)
 80058f8:	6013      	str	r3, [r2, #0]
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	20000b74 	.word	0x20000b74
 800590c:	20000bdc 	.word	0x20000bdc

08005910 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005916:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <xTaskGetSchedulerState+0x34>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d102      	bne.n	8005924 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800591e:	2301      	movs	r3, #1
 8005920:	607b      	str	r3, [r7, #4]
 8005922:	e008      	b.n	8005936 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005924:	4b08      	ldr	r3, [pc, #32]	; (8005948 <xTaskGetSchedulerState+0x38>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d102      	bne.n	8005932 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800592c:	2302      	movs	r3, #2
 800592e:	607b      	str	r3, [r7, #4]
 8005930:	e001      	b.n	8005936 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005932:	2300      	movs	r3, #0
 8005934:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005936:	687b      	ldr	r3, [r7, #4]
	}
 8005938:	4618      	mov	r0, r3
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr
 8005944:	20000bc8 	.word	0x20000bc8
 8005948:	20000be4 	.word	0x20000be4

0800594c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005958:	2300      	movs	r3, #0
 800595a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d056      	beq.n	8005a10 <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005966:	4b2d      	ldr	r3, [pc, #180]	; (8005a1c <xTaskPriorityInherit+0xd0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596c:	429a      	cmp	r2, r3
 800596e:	d246      	bcs.n	80059fe <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	2b00      	cmp	r3, #0
 8005976:	db06      	blt.n	8005986 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005978:	4b28      	ldr	r3, [pc, #160]	; (8005a1c <xTaskPriorityInherit+0xd0>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800597e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005986:	68bb      	ldr	r3, [r7, #8]
 8005988:	6959      	ldr	r1, [r3, #20]
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	4a22      	ldr	r2, [pc, #136]	; (8005a20 <xTaskPriorityInherit+0xd4>)
 8005998:	4413      	add	r3, r2
 800599a:	4299      	cmp	r1, r3
 800599c:	d101      	bne.n	80059a2 <xTaskPriorityInherit+0x56>
 800599e:	2301      	movs	r3, #1
 80059a0:	e000      	b.n	80059a4 <xTaskPriorityInherit+0x58>
 80059a2:	2300      	movs	r3, #0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d022      	beq.n	80059ee <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	3304      	adds	r3, #4
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fe fa69 	bl	8003e84 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059b2:	4b1a      	ldr	r3, [pc, #104]	; (8005a1c <xTaskPriorityInherit+0xd0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c0:	4b18      	ldr	r3, [pc, #96]	; (8005a24 <xTaskPriorityInherit+0xd8>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d903      	bls.n	80059d0 <xTaskPriorityInherit+0x84>
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	4a15      	ldr	r2, [pc, #84]	; (8005a24 <xTaskPriorityInherit+0xd8>)
 80059ce:	6013      	str	r3, [r2, #0]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d4:	4613      	mov	r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4413      	add	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4a10      	ldr	r2, [pc, #64]	; (8005a20 <xTaskPriorityInherit+0xd4>)
 80059de:	441a      	add	r2, r3
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	3304      	adds	r3, #4
 80059e4:	4619      	mov	r1, r3
 80059e6:	4610      	mov	r0, r2
 80059e8:	f7fe f9ef 	bl	8003dca <vListInsertEnd>
 80059ec:	e004      	b.n	80059f8 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059ee:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <xTaskPriorityInherit+0xd0>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80059f8:	2301      	movs	r3, #1
 80059fa:	60fb      	str	r3, [r7, #12]
 80059fc:	e008      	b.n	8005a10 <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a02:	4b06      	ldr	r3, [pc, #24]	; (8005a1c <xTaskPriorityInherit+0xd0>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d201      	bcs.n	8005a10 <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a10:	68fb      	ldr	r3, [r7, #12]
	}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	200006e8 	.word	0x200006e8
 8005a20:	200006ec 	.word	0x200006ec
 8005a24:	20000bc4 	.word	0x20000bc4

08005a28 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a34:	2300      	movs	r3, #0
 8005a36:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d054      	beq.n	8005ae8 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a3e:	4b2d      	ldr	r3, [pc, #180]	; (8005af4 <xTaskPriorityDisinherit+0xcc>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d009      	beq.n	8005a5c <xTaskPriorityDisinherit+0x34>
 8005a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4c:	f383 8811 	msr	BASEPRI, r3
 8005a50:	f3bf 8f6f 	isb	sy
 8005a54:	f3bf 8f4f 	dsb	sy
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	e7fe      	b.n	8005a5a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d109      	bne.n	8005a78 <xTaskPriorityDisinherit+0x50>
 8005a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	60bb      	str	r3, [r7, #8]
 8005a76:	e7fe      	b.n	8005a76 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a7c:	1e5a      	subs	r2, r3, #1
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d02c      	beq.n	8005ae8 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d128      	bne.n	8005ae8 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	3304      	adds	r3, #4
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fe f9f2 	bl	8003e84 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab8:	4b0f      	ldr	r3, [pc, #60]	; (8005af8 <xTaskPriorityDisinherit+0xd0>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d903      	bls.n	8005ac8 <xTaskPriorityDisinherit+0xa0>
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac4:	4a0c      	ldr	r2, [pc, #48]	; (8005af8 <xTaskPriorityDisinherit+0xd0>)
 8005ac6:	6013      	str	r3, [r2, #0]
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005acc:	4613      	mov	r3, r2
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	4a09      	ldr	r2, [pc, #36]	; (8005afc <xTaskPriorityDisinherit+0xd4>)
 8005ad6:	441a      	add	r2, r3
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	3304      	adds	r3, #4
 8005adc:	4619      	mov	r1, r3
 8005ade:	4610      	mov	r0, r2
 8005ae0:	f7fe f973 	bl	8003dca <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ae8:	697b      	ldr	r3, [r7, #20]
	}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3718      	adds	r7, #24
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	200006e8 	.word	0x200006e8
 8005af8:	20000bc4 	.word	0x20000bc4
 8005afc:	200006ec 	.word	0x200006ec

08005b00 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d06d      	beq.n	8005bf4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005b18:	69bb      	ldr	r3, [r7, #24]
 8005b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d109      	bne.n	8005b34 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8005b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	60fb      	str	r3, [r7, #12]
 8005b32:	e7fe      	b.n	8005b32 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b38:	683a      	ldr	r2, [r7, #0]
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d902      	bls.n	8005b44 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	61fb      	str	r3, [r7, #28]
 8005b42:	e002      	b.n	8005b4a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b48:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4e:	69fa      	ldr	r2, [r7, #28]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d04f      	beq.n	8005bf4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d14a      	bne.n	8005bf4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005b5e:	4b27      	ldr	r3, [pc, #156]	; (8005bfc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d109      	bne.n	8005b7c <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8005b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6c:	f383 8811 	msr	BASEPRI, r3
 8005b70:	f3bf 8f6f 	isb	sy
 8005b74:	f3bf 8f4f 	dsb	sy
 8005b78:	60bb      	str	r3, [r7, #8]
 8005b7a:	e7fe      	b.n	8005b7a <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b80:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	69fa      	ldr	r2, [r7, #28]
 8005b86:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	699b      	ldr	r3, [r3, #24]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	db04      	blt.n	8005b9a <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b9a:	69bb      	ldr	r3, [r7, #24]
 8005b9c:	6959      	ldr	r1, [r3, #20]
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	4413      	add	r3, r2
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4a15      	ldr	r2, [pc, #84]	; (8005c00 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005baa:	4413      	add	r3, r2
 8005bac:	4299      	cmp	r1, r3
 8005bae:	d101      	bne.n	8005bb4 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e000      	b.n	8005bb6 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d01c      	beq.n	8005bf4 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bba:	69bb      	ldr	r3, [r7, #24]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe f960 	bl	8003e84 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bc8:	4b0e      	ldr	r3, [pc, #56]	; (8005c04 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d903      	bls.n	8005bd8 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 8005bd0:	69bb      	ldr	r3, [r7, #24]
 8005bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd4:	4a0b      	ldr	r2, [pc, #44]	; (8005c04 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8005bd6:	6013      	str	r3, [r2, #0]
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bdc:	4613      	mov	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	4413      	add	r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	4a06      	ldr	r2, [pc, #24]	; (8005c00 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005be6:	441a      	add	r2, r3
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	3304      	adds	r3, #4
 8005bec:	4619      	mov	r1, r3
 8005bee:	4610      	mov	r0, r2
 8005bf0:	f7fe f8eb 	bl	8003dca <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bf4:	bf00      	nop
 8005bf6:	3720      	adds	r7, #32
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	200006e8 	.word	0x200006e8
 8005c00:	200006ec 	.word	0x200006ec
 8005c04:	20000bc4 	.word	0x20000bc4

08005c08 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8005c08:	b480      	push	{r7}
 8005c0a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005c0c:	4b07      	ldr	r3, [pc, #28]	; (8005c2c <pvTaskIncrementMutexHeldCount+0x24>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d004      	beq.n	8005c1e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005c14:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <pvTaskIncrementMutexHeldCount+0x24>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005c1a:	3201      	adds	r2, #1
 8005c1c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005c1e:	4b03      	ldr	r3, [pc, #12]	; (8005c2c <pvTaskIncrementMutexHeldCount+0x24>)
 8005c20:	681b      	ldr	r3, [r3, #0]
	}
 8005c22:	4618      	mov	r0, r3
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	200006e8 	.word	0x200006e8

08005c30 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
 8005c38:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8005c3a:	f000 fe7f 	bl	800693c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8005c3e:	4b1e      	ldr	r3, [pc, #120]	; (8005cb8 <ulTaskNotifyTake+0x88>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d113      	bne.n	8005c70 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005c48:	4b1b      	ldr	r3, [pc, #108]	; (8005cb8 <ulTaskNotifyTake+0x88>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d00b      	beq.n	8005c70 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c58:	2101      	movs	r1, #1
 8005c5a:	6838      	ldr	r0, [r7, #0]
 8005c5c:	f000 f99a 	bl	8005f94 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005c60:	4b16      	ldr	r3, [pc, #88]	; (8005cbc <ulTaskNotifyTake+0x8c>)
 8005c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c66:	601a      	str	r2, [r3, #0]
 8005c68:	f3bf 8f4f 	dsb	sy
 8005c6c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005c70:	f000 fe92 	bl	8006998 <vPortExitCritical>

		taskENTER_CRITICAL();
 8005c74:	f000 fe62 	bl	800693c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8005c78:	4b0f      	ldr	r3, [pc, #60]	; (8005cb8 <ulTaskNotifyTake+0x88>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d00c      	beq.n	8005ca0 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d004      	beq.n	8005c96 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8005c8c:	4b0a      	ldr	r3, [pc, #40]	; (8005cb8 <ulTaskNotifyTake+0x88>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2200      	movs	r2, #0
 8005c92:	655a      	str	r2, [r3, #84]	; 0x54
 8005c94:	e004      	b.n	8005ca0 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8005c96:	4b08      	ldr	r3, [pc, #32]	; (8005cb8 <ulTaskNotifyTake+0x88>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	3a01      	subs	r2, #1
 8005c9e:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ca0:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <ulTaskNotifyTake+0x88>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8005caa:	f000 fe75 	bl	8006998 <vPortExitCritical>

		return ulReturn;
 8005cae:	68fb      	ldr	r3, [r7, #12]
	}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	200006e8 	.word	0x200006e8
 8005cbc:	e000ed04 	.word	0xe000ed04

08005cc0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	; 0x28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	603b      	str	r3, [r7, #0]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d109      	bne.n	8005cee <xTaskGenericNotify+0x2e>
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	61bb      	str	r3, [r7, #24]
 8005cec:	e7fe      	b.n	8005cec <xTaskGenericNotify+0x2c>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005cf2:	f000 fe23 	bl	800693c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d003      	beq.n	8005d04 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005cfc:	6a3b      	ldr	r3, [r7, #32]
 8005cfe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005d04:	6a3b      	ldr	r3, [r7, #32]
 8005d06:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005d0a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005d0c:	6a3b      	ldr	r3, [r7, #32]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8005d14:	79fb      	ldrb	r3, [r7, #7]
 8005d16:	2b04      	cmp	r3, #4
 8005d18:	d827      	bhi.n	8005d6a <xTaskGenericNotify+0xaa>
 8005d1a:	a201      	add	r2, pc, #4	; (adr r2, 8005d20 <xTaskGenericNotify+0x60>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d6b 	.word	0x08005d6b
 8005d24:	08005d35 	.word	0x08005d35
 8005d28:	08005d43 	.word	0x08005d43
 8005d2c:	08005d4f 	.word	0x08005d4f
 8005d30:	08005d57 	.word	0x08005d57
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005d40:	e013      	b.n	8005d6a <xTaskGenericNotify+0xaa>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005d42:	6a3b      	ldr	r3, [r7, #32]
 8005d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005d4c:	e00d      	b.n	8005d6a <xTaskGenericNotify+0xaa>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005d54:	e009      	b.n	8005d6a <xTaskGenericNotify+0xaa>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005d56:	7ffb      	ldrb	r3, [r7, #31]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d003      	beq.n	8005d64 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005d5c:	6a3b      	ldr	r3, [r7, #32]
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005d62:	e001      	b.n	8005d68 <xTaskGenericNotify+0xa8>
						xReturn = pdFAIL;
 8005d64:	2300      	movs	r3, #0
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8005d68:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005d6a:	7ffb      	ldrb	r3, [r7, #31]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d139      	bne.n	8005de4 <xTaskGenericNotify+0x124>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d70:	6a3b      	ldr	r3, [r7, #32]
 8005d72:	3304      	adds	r3, #4
 8005d74:	4618      	mov	r0, r3
 8005d76:	f7fe f885 	bl	8003e84 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005d7a:	6a3b      	ldr	r3, [r7, #32]
 8005d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7e:	4b1d      	ldr	r3, [pc, #116]	; (8005df4 <xTaskGenericNotify+0x134>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d903      	bls.n	8005d8e <xTaskGenericNotify+0xce>
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d8a:	4a1a      	ldr	r2, [pc, #104]	; (8005df4 <xTaskGenericNotify+0x134>)
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	6a3b      	ldr	r3, [r7, #32]
 8005d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d92:	4613      	mov	r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	4a17      	ldr	r2, [pc, #92]	; (8005df8 <xTaskGenericNotify+0x138>)
 8005d9c:	441a      	add	r2, r3
 8005d9e:	6a3b      	ldr	r3, [r7, #32]
 8005da0:	3304      	adds	r3, #4
 8005da2:	4619      	mov	r1, r3
 8005da4:	4610      	mov	r0, r2
 8005da6:	f7fe f810 	bl	8003dca <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d009      	beq.n	8005dc6 <xTaskGenericNotify+0x106>
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	617b      	str	r3, [r7, #20]
 8005dc4:	e7fe      	b.n	8005dc4 <xTaskGenericNotify+0x104>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005dc6:	6a3b      	ldr	r3, [r7, #32]
 8005dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dca:	4b0c      	ldr	r3, [pc, #48]	; (8005dfc <xTaskGenericNotify+0x13c>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d907      	bls.n	8005de4 <xTaskGenericNotify+0x124>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005dd4:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <xTaskGenericNotify+0x140>)
 8005dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dda:	601a      	str	r2, [r3, #0]
 8005ddc:	f3bf 8f4f 	dsb	sy
 8005de0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005de4:	f000 fdd8 	bl	8006998 <vPortExitCritical>

		return xReturn;
 8005de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3728      	adds	r7, #40	; 0x28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}
 8005df2:	bf00      	nop
 8005df4:	20000bc4 	.word	0x20000bc4
 8005df8:	200006ec 	.word	0x200006ec
 8005dfc:	200006e8 	.word	0x200006e8
 8005e00:	e000ed04 	.word	0xe000ed04

08005e04 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08e      	sub	sp, #56	; 0x38
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	603b      	str	r3, [r7, #0]
 8005e10:	4613      	mov	r3, r2
 8005e12:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005e14:	2301      	movs	r3, #1
 8005e16:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d109      	bne.n	8005e32 <xTaskGenericNotifyFromISR+0x2e>
 8005e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e30:	e7fe      	b.n	8005e30 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e32:	f000 fe5f 	bl	8006af4 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8005e3a:	f3ef 8211 	mrs	r2, BASEPRI
 8005e3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e42:	f383 8811 	msr	BASEPRI, r3
 8005e46:	f3bf 8f6f 	isb	sy
 8005e4a:	f3bf 8f4f 	dsb	sy
 8005e4e:	623a      	str	r2, [r7, #32]
 8005e50:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005e52:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e54:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e66:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e70:	2202      	movs	r2, #2
 8005e72:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8005e76:	79fb      	ldrb	r3, [r7, #7]
 8005e78:	2b04      	cmp	r3, #4
 8005e7a:	d829      	bhi.n	8005ed0 <xTaskGenericNotifyFromISR+0xcc>
 8005e7c:	a201      	add	r2, pc, #4	; (adr r2, 8005e84 <xTaskGenericNotifyFromISR+0x80>)
 8005e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e82:	bf00      	nop
 8005e84:	08005ed1 	.word	0x08005ed1
 8005e88:	08005e99 	.word	0x08005e99
 8005e8c:	08005ea7 	.word	0x08005ea7
 8005e90:	08005eb3 	.word	0x08005eb3
 8005e94:	08005ebb 	.word	0x08005ebb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea2:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005ea4:	e014      	b.n	8005ed0 <xTaskGenericNotifyFromISR+0xcc>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eae:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005eb0:	e00e      	b.n	8005ed0 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005eb8:	e00a      	b.n	8005ed0 <xTaskGenericNotifyFromISR+0xcc>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005eba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d003      	beq.n	8005eca <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005ec8:	e001      	b.n	8005ece <xTaskGenericNotifyFromISR+0xca>
						xReturn = pdFAIL;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005ece:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005ed0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d146      	bne.n	8005f66 <xTaskGenericNotifyFromISR+0x162>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d009      	beq.n	8005ef4 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	61bb      	str	r3, [r7, #24]
 8005ef2:	e7fe      	b.n	8005ef2 <xTaskGenericNotifyFromISR+0xee>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ef4:	4b21      	ldr	r3, [pc, #132]	; (8005f7c <xTaskGenericNotifyFromISR+0x178>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d11d      	bne.n	8005f38 <xTaskGenericNotifyFromISR+0x134>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005efe:	3304      	adds	r3, #4
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fd ffbf 	bl	8003e84 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f0a:	4b1d      	ldr	r3, [pc, #116]	; (8005f80 <xTaskGenericNotifyFromISR+0x17c>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d903      	bls.n	8005f1a <xTaskGenericNotifyFromISR+0x116>
 8005f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f16:	4a1a      	ldr	r2, [pc, #104]	; (8005f80 <xTaskGenericNotifyFromISR+0x17c>)
 8005f18:	6013      	str	r3, [r2, #0]
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f1e:	4613      	mov	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	4413      	add	r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	4a17      	ldr	r2, [pc, #92]	; (8005f84 <xTaskGenericNotifyFromISR+0x180>)
 8005f28:	441a      	add	r2, r3
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	4619      	mov	r1, r3
 8005f30:	4610      	mov	r0, r2
 8005f32:	f7fd ff4a 	bl	8003dca <vListInsertEnd>
 8005f36:	e005      	b.n	8005f44 <xTaskGenericNotifyFromISR+0x140>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3a:	3318      	adds	r3, #24
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	4812      	ldr	r0, [pc, #72]	; (8005f88 <xTaskGenericNotifyFromISR+0x184>)
 8005f40:	f7fd ff43 	bl	8003dca <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f48:	4b10      	ldr	r3, [pc, #64]	; (8005f8c <xTaskGenericNotifyFromISR+0x188>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d909      	bls.n	8005f66 <xTaskGenericNotifyFromISR+0x162>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005f52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d003      	beq.n	8005f60 <xTaskGenericNotifyFromISR+0x15c>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005f58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]
 8005f5e:	e002      	b.n	8005f66 <xTaskGenericNotifyFromISR+0x162>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter to an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8005f60:	4b0b      	ldr	r3, [pc, #44]	; (8005f90 <xTaskGenericNotifyFromISR+0x18c>)
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f68:	617b      	str	r3, [r7, #20]
	__asm volatile
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3738      	adds	r7, #56	; 0x38
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000be4 	.word	0x20000be4
 8005f80:	20000bc4 	.word	0x20000bc4
 8005f84:	200006ec 	.word	0x200006ec
 8005f88:	20000b7c 	.word	0x20000b7c
 8005f8c:	200006e8 	.word	0x200006e8
 8005f90:	20000bd0 	.word	0x20000bd0

08005f94 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b084      	sub	sp, #16
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f9e:	4b21      	ldr	r3, [pc, #132]	; (8006024 <prvAddCurrentTaskToDelayedList+0x90>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fa4:	4b20      	ldr	r3, [pc, #128]	; (8006028 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	3304      	adds	r3, #4
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fd ff6a 	bl	8003e84 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fb6:	d10a      	bne.n	8005fce <prvAddCurrentTaskToDelayedList+0x3a>
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d007      	beq.n	8005fce <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fbe:	4b1a      	ldr	r3, [pc, #104]	; (8006028 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	3304      	adds	r3, #4
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4819      	ldr	r0, [pc, #100]	; (800602c <prvAddCurrentTaskToDelayedList+0x98>)
 8005fc8:	f7fd feff 	bl	8003dca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005fcc:	e026      	b.n	800601c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005fd6:	4b14      	ldr	r3, [pc, #80]	; (8006028 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d209      	bcs.n	8005ffa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fe6:	4b12      	ldr	r3, [pc, #72]	; (8006030 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	4b0f      	ldr	r3, [pc, #60]	; (8006028 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	3304      	adds	r3, #4
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4610      	mov	r0, r2
 8005ff4:	f7fd ff0d 	bl	8003e12 <vListInsert>
}
 8005ff8:	e010      	b.n	800601c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ffa:	4b0e      	ldr	r3, [pc, #56]	; (8006034 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	4b0a      	ldr	r3, [pc, #40]	; (8006028 <prvAddCurrentTaskToDelayedList+0x94>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3304      	adds	r3, #4
 8006004:	4619      	mov	r1, r3
 8006006:	4610      	mov	r0, r2
 8006008:	f7fd ff03 	bl	8003e12 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800600c:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <prvAddCurrentTaskToDelayedList+0xa4>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	429a      	cmp	r2, r3
 8006014:	d202      	bcs.n	800601c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006016:	4a08      	ldr	r2, [pc, #32]	; (8006038 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	6013      	str	r3, [r2, #0]
}
 800601c:	bf00      	nop
 800601e:	3710      	adds	r7, #16
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20000bc0 	.word	0x20000bc0
 8006028:	200006e8 	.word	0x200006e8
 800602c:	20000ba8 	.word	0x20000ba8
 8006030:	20000b78 	.word	0x20000b78
 8006034:	20000b74 	.word	0x20000b74
 8006038:	20000bdc 	.word	0x20000bdc

0800603c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b08a      	sub	sp, #40	; 0x28
 8006040:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006042:	2300      	movs	r3, #0
 8006044:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006046:	f000 fb15 	bl	8006674 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800604a:	4b1c      	ldr	r3, [pc, #112]	; (80060bc <xTimerCreateTimerTask+0x80>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d021      	beq.n	8006096 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006052:	2300      	movs	r3, #0
 8006054:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006056:	2300      	movs	r3, #0
 8006058:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800605a:	1d3a      	adds	r2, r7, #4
 800605c:	f107 0108 	add.w	r1, r7, #8
 8006060:	f107 030c 	add.w	r3, r7, #12
 8006064:	4618      	mov	r0, r3
 8006066:	f7fd fe69 	bl	8003d3c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800606a:	6879      	ldr	r1, [r7, #4]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	68fa      	ldr	r2, [r7, #12]
 8006070:	9202      	str	r2, [sp, #8]
 8006072:	9301      	str	r3, [sp, #4]
 8006074:	2302      	movs	r3, #2
 8006076:	9300      	str	r3, [sp, #0]
 8006078:	2300      	movs	r3, #0
 800607a:	460a      	mov	r2, r1
 800607c:	4910      	ldr	r1, [pc, #64]	; (80060c0 <xTimerCreateTimerTask+0x84>)
 800607e:	4811      	ldr	r0, [pc, #68]	; (80060c4 <xTimerCreateTimerTask+0x88>)
 8006080:	f7fe fe2a 	bl	8004cd8 <xTaskCreateStatic>
 8006084:	4602      	mov	r2, r0
 8006086:	4b10      	ldr	r3, [pc, #64]	; (80060c8 <xTimerCreateTimerTask+0x8c>)
 8006088:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800608a:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <xTimerCreateTimerTask+0x8c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006092:	2301      	movs	r3, #1
 8006094:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d109      	bne.n	80060b0 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	613b      	str	r3, [r7, #16]
 80060ae:	e7fe      	b.n	80060ae <xTimerCreateTimerTask+0x72>
	return xReturn;
 80060b0:	697b      	ldr	r3, [r7, #20]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3718      	adds	r7, #24
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	20000c18 	.word	0x20000c18
 80060c0:	080084fc 	.word	0x080084fc
 80060c4:	08006289 	.word	0x08006289
 80060c8:	20000c1c 	.word	0x20000c1c

080060cc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b088      	sub	sp, #32
 80060d0:	af02      	add	r7, sp, #8
 80060d2:	60f8      	str	r0, [r7, #12]
 80060d4:	60b9      	str	r1, [r7, #8]
 80060d6:	607a      	str	r2, [r7, #4]
 80060d8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80060da:	2030      	movs	r0, #48	; 0x30
 80060dc:	f000 fd48 	bl	8006b70 <pvPortMalloc>
 80060e0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00d      	beq.n	8006104 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	9301      	str	r3, [sp, #4]
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	687a      	ldr	r2, [r7, #4]
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f000 f809 	bl	800610e <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8006104:	697b      	ldr	r3, [r7, #20]
	}
 8006106:	4618      	mov	r0, r3
 8006108:	3718      	adds	r7, #24
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b086      	sub	sp, #24
 8006112:	af00      	add	r7, sp, #0
 8006114:	60f8      	str	r0, [r7, #12]
 8006116:	60b9      	str	r1, [r7, #8]
 8006118:	607a      	str	r2, [r7, #4]
 800611a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d109      	bne.n	8006136 <prvInitialiseNewTimer+0x28>
 8006122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006126:	f383 8811 	msr	BASEPRI, r3
 800612a:	f3bf 8f6f 	isb	sy
 800612e:	f3bf 8f4f 	dsb	sy
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	e7fe      	b.n	8006134 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 8006136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006138:	2b00      	cmp	r3, #0
 800613a:	d015      	beq.n	8006168 <prvInitialiseNewTimer+0x5a>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800613c:	f000 fa9a 	bl	8006674 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006148:	68ba      	ldr	r2, [r7, #8]
 800614a:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800614c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8006152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006154:	683a      	ldr	r2, [r7, #0]
 8006156:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	6a3a      	ldr	r2, [r7, #32]
 800615c:	625a      	str	r2, [r3, #36]	; 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800615e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006160:	3304      	adds	r3, #4
 8006162:	4618      	mov	r0, r3
 8006164:	f7fd fe24 	bl	8003db0 <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006168:	bf00      	nop
 800616a:	3718      	adds	r7, #24
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b08a      	sub	sp, #40	; 0x28
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
 800617c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800617e:	2300      	movs	r3, #0
 8006180:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d109      	bne.n	800619c <xTimerGenericCommand+0x2c>
 8006188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800618c:	f383 8811 	msr	BASEPRI, r3
 8006190:	f3bf 8f6f 	isb	sy
 8006194:	f3bf 8f4f 	dsb	sy
 8006198:	623b      	str	r3, [r7, #32]
 800619a:	e7fe      	b.n	800619a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800619c:	4b19      	ldr	r3, [pc, #100]	; (8006204 <xTimerGenericCommand+0x94>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d02a      	beq.n	80061fa <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	2b05      	cmp	r3, #5
 80061b4:	dc18      	bgt.n	80061e8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061b6:	f7ff fbab 	bl	8005910 <xTaskGetSchedulerState>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d109      	bne.n	80061d4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061c0:	4b10      	ldr	r3, [pc, #64]	; (8006204 <xTimerGenericCommand+0x94>)
 80061c2:	6818      	ldr	r0, [r3, #0]
 80061c4:	f107 0110 	add.w	r1, r7, #16
 80061c8:	2300      	movs	r3, #0
 80061ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061cc:	f7fe f824 	bl	8004218 <xQueueGenericSend>
 80061d0:	6278      	str	r0, [r7, #36]	; 0x24
 80061d2:	e012      	b.n	80061fa <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061d4:	4b0b      	ldr	r3, [pc, #44]	; (8006204 <xTimerGenericCommand+0x94>)
 80061d6:	6818      	ldr	r0, [r3, #0]
 80061d8:	f107 0110 	add.w	r1, r7, #16
 80061dc:	2300      	movs	r3, #0
 80061de:	2200      	movs	r2, #0
 80061e0:	f7fe f81a 	bl	8004218 <xQueueGenericSend>
 80061e4:	6278      	str	r0, [r7, #36]	; 0x24
 80061e6:	e008      	b.n	80061fa <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061e8:	4b06      	ldr	r3, [pc, #24]	; (8006204 <xTimerGenericCommand+0x94>)
 80061ea:	6818      	ldr	r0, [r3, #0]
 80061ec:	f107 0110 	add.w	r1, r7, #16
 80061f0:	2300      	movs	r3, #0
 80061f2:	683a      	ldr	r2, [r7, #0]
 80061f4:	f7fe f90a 	bl	800440c <xQueueGenericSendFromISR>
 80061f8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3728      	adds	r7, #40	; 0x28
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	20000c18 	.word	0x20000c18

08006208 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b088      	sub	sp, #32
 800620c:	af02      	add	r7, sp, #8
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006212:	4b1c      	ldr	r3, [pc, #112]	; (8006284 <prvProcessExpiredTimer+0x7c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	3304      	adds	r3, #4
 8006220:	4618      	mov	r0, r3
 8006222:	f7fd fe2f 	bl	8003e84 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	69db      	ldr	r3, [r3, #28]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d121      	bne.n	8006272 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	699a      	ldr	r2, [r3, #24]
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	18d1      	adds	r1, r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	683a      	ldr	r2, [r7, #0]
 800623a:	6978      	ldr	r0, [r7, #20]
 800623c:	f000 f8c8 	bl	80063d0 <prvInsertTimerInActiveList>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	d015      	beq.n	8006272 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006246:	2300      	movs	r3, #0
 8006248:	9300      	str	r3, [sp, #0]
 800624a:	2300      	movs	r3, #0
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	2100      	movs	r1, #0
 8006250:	6978      	ldr	r0, [r7, #20]
 8006252:	f7ff ff8d 	bl	8006170 <xTimerGenericCommand>
 8006256:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d109      	bne.n	8006272 <prvProcessExpiredTimer+0x6a>
 800625e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006262:	f383 8811 	msr	BASEPRI, r3
 8006266:	f3bf 8f6f 	isb	sy
 800626a:	f3bf 8f4f 	dsb	sy
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	e7fe      	b.n	8006270 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006276:	6978      	ldr	r0, [r7, #20]
 8006278:	4798      	blx	r3
}
 800627a:	bf00      	nop
 800627c:	3718      	adds	r7, #24
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20000c10 	.word	0x20000c10

08006288 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b084      	sub	sp, #16
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006290:	f107 0308 	add.w	r3, r7, #8
 8006294:	4618      	mov	r0, r3
 8006296:	f000 f857 	bl	8006348 <prvGetNextExpireTime>
 800629a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	4619      	mov	r1, r3
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f000 f803 	bl	80062ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80062a6:	f000 f8d5 	bl	8006454 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062aa:	e7f1      	b.n	8006290 <prvTimerTask+0x8>

080062ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
 80062b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80062b6:	f7fe ff3b 	bl	8005130 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062ba:	f107 0308 	add.w	r3, r7, #8
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 f866 	bl	8006390 <prvSampleTimeNow>
 80062c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d130      	bne.n	800632e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d10a      	bne.n	80062e8 <prvProcessTimerOrBlockTask+0x3c>
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d806      	bhi.n	80062e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062da:	f7fe ff37 	bl	800514c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062de:	68f9      	ldr	r1, [r7, #12]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff ff91 	bl	8006208 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062e6:	e024      	b.n	8006332 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d008      	beq.n	8006300 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062ee:	4b13      	ldr	r3, [pc, #76]	; (800633c <prvProcessTimerOrBlockTask+0x90>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	bf0c      	ite	eq
 80062f8:	2301      	moveq	r3, #1
 80062fa:	2300      	movne	r3, #0
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006300:	4b0f      	ldr	r3, [pc, #60]	; (8006340 <prvProcessTimerOrBlockTask+0x94>)
 8006302:	6818      	ldr	r0, [r3, #0]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	1ad3      	subs	r3, r2, r3
 800630a:	683a      	ldr	r2, [r7, #0]
 800630c:	4619      	mov	r1, r3
 800630e:	f7fe fcaf 	bl	8004c70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006312:	f7fe ff1b 	bl	800514c <xTaskResumeAll>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10a      	bne.n	8006332 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800631c:	4b09      	ldr	r3, [pc, #36]	; (8006344 <prvProcessTimerOrBlockTask+0x98>)
 800631e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006322:	601a      	str	r2, [r3, #0]
 8006324:	f3bf 8f4f 	dsb	sy
 8006328:	f3bf 8f6f 	isb	sy
}
 800632c:	e001      	b.n	8006332 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800632e:	f7fe ff0d 	bl	800514c <xTaskResumeAll>
}
 8006332:	bf00      	nop
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20000c14 	.word	0x20000c14
 8006340:	20000c18 	.word	0x20000c18
 8006344:	e000ed04 	.word	0xe000ed04

08006348 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006350:	4b0e      	ldr	r3, [pc, #56]	; (800638c <prvGetNextExpireTime+0x44>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	bf0c      	ite	eq
 800635a:	2301      	moveq	r3, #1
 800635c:	2300      	movne	r3, #0
 800635e:	b2db      	uxtb	r3, r3
 8006360:	461a      	mov	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d105      	bne.n	800637a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800636e:	4b07      	ldr	r3, [pc, #28]	; (800638c <prvGetNextExpireTime+0x44>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	68db      	ldr	r3, [r3, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	60fb      	str	r3, [r7, #12]
 8006378:	e001      	b.n	800637e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800637a:	2300      	movs	r3, #0
 800637c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800637e:	68fb      	ldr	r3, [r7, #12]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3714      	adds	r7, #20
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	20000c10 	.word	0x20000c10

08006390 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006398:	f7fe ff74 	bl	8005284 <xTaskGetTickCount>
 800639c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800639e:	4b0b      	ldr	r3, [pc, #44]	; (80063cc <prvSampleTimeNow+0x3c>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d205      	bcs.n	80063b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063a8:	f000 f904 	bl	80065b4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	e002      	b.n	80063ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80063ba:	4a04      	ldr	r2, [pc, #16]	; (80063cc <prvSampleTimeNow+0x3c>)
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063c0:	68fb      	ldr	r3, [r7, #12]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}
 80063ca:	bf00      	nop
 80063cc:	20000c20 	.word	0x20000c20

080063d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
 80063dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063de:	2300      	movs	r3, #0
 80063e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	68ba      	ldr	r2, [r7, #8]
 80063e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	68fa      	ldr	r2, [r7, #12]
 80063ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d812      	bhi.n	800641c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	1ad2      	subs	r2, r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	429a      	cmp	r2, r3
 8006402:	d302      	bcc.n	800640a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006404:	2301      	movs	r3, #1
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	e01b      	b.n	8006442 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800640a:	4b10      	ldr	r3, [pc, #64]	; (800644c <prvInsertTimerInActiveList+0x7c>)
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	3304      	adds	r3, #4
 8006412:	4619      	mov	r1, r3
 8006414:	4610      	mov	r0, r2
 8006416:	f7fd fcfc 	bl	8003e12 <vListInsert>
 800641a:	e012      	b.n	8006442 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	429a      	cmp	r2, r3
 8006422:	d206      	bcs.n	8006432 <prvInsertTimerInActiveList+0x62>
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d302      	bcc.n	8006432 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800642c:	2301      	movs	r3, #1
 800642e:	617b      	str	r3, [r7, #20]
 8006430:	e007      	b.n	8006442 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006432:	4b07      	ldr	r3, [pc, #28]	; (8006450 <prvInsertTimerInActiveList+0x80>)
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3304      	adds	r3, #4
 800643a:	4619      	mov	r1, r3
 800643c:	4610      	mov	r0, r2
 800643e:	f7fd fce8 	bl	8003e12 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006442:	697b      	ldr	r3, [r7, #20]
}
 8006444:	4618      	mov	r0, r3
 8006446:	3718      	adds	r7, #24
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}
 800644c:	20000c14 	.word	0x20000c14
 8006450:	20000c10 	.word	0x20000c10

08006454 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08e      	sub	sp, #56	; 0x38
 8006458:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800645a:	e099      	b.n	8006590 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	da17      	bge.n	8006492 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006462:	1d3b      	adds	r3, r7, #4
 8006464:	3304      	adds	r3, #4
 8006466:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800646a:	2b00      	cmp	r3, #0
 800646c:	d109      	bne.n	8006482 <prvProcessReceivedCommands+0x2e>
 800646e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	61fb      	str	r3, [r7, #28]
 8006480:	e7fe      	b.n	8006480 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006488:	6850      	ldr	r0, [r2, #4]
 800648a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800648c:	6892      	ldr	r2, [r2, #8]
 800648e:	4611      	mov	r1, r2
 8006490:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	db7a      	blt.n	800658e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d004      	beq.n	80064ae <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a6:	3304      	adds	r3, #4
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fd fceb 	bl	8003e84 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064ae:	463b      	mov	r3, r7
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff ff6d 	bl	8006390 <prvSampleTimeNow>
 80064b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2b09      	cmp	r3, #9
 80064bc:	d868      	bhi.n	8006590 <prvProcessReceivedCommands+0x13c>
 80064be:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <prvProcessReceivedCommands+0x70>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080064ed 	.word	0x080064ed
 80064c8:	080064ed 	.word	0x080064ed
 80064cc:	080064ed 	.word	0x080064ed
 80064d0:	08006591 	.word	0x08006591
 80064d4:	08006547 	.word	0x08006547
 80064d8:	0800657d 	.word	0x0800657d
 80064dc:	080064ed 	.word	0x080064ed
 80064e0:	080064ed 	.word	0x080064ed
 80064e4:	08006591 	.word	0x08006591
 80064e8:	08006547 	.word	0x08006547
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f0:	699b      	ldr	r3, [r3, #24]
 80064f2:	18d1      	adds	r1, r2, r3
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064fa:	f7ff ff69 	bl	80063d0 <prvInsertTimerInActiveList>
 80064fe:	4603      	mov	r3, r0
 8006500:	2b00      	cmp	r3, #0
 8006502:	d045      	beq.n	8006590 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800650a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d13d      	bne.n	8006590 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	441a      	add	r2, r3
 800651c:	2300      	movs	r3, #0
 800651e:	9300      	str	r3, [sp, #0]
 8006520:	2300      	movs	r3, #0
 8006522:	2100      	movs	r1, #0
 8006524:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006526:	f7ff fe23 	bl	8006170 <xTimerGenericCommand>
 800652a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800652c:	6a3b      	ldr	r3, [r7, #32]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d12e      	bne.n	8006590 <prvProcessReceivedCommands+0x13c>
 8006532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006536:	f383 8811 	msr	BASEPRI, r3
 800653a:	f3bf 8f6f 	isb	sy
 800653e:	f3bf 8f4f 	dsb	sy
 8006542:	61bb      	str	r3, [r7, #24]
 8006544:	e7fe      	b.n	8006544 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006546:	68ba      	ldr	r2, [r7, #8]
 8006548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800654c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800654e:	699b      	ldr	r3, [r3, #24]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d109      	bne.n	8006568 <prvProcessReceivedCommands+0x114>
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	e7fe      	b.n	8006566 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656a:	699a      	ldr	r2, [r3, #24]
 800656c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656e:	18d1      	adds	r1, r2, r3
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006576:	f7ff ff2b 	bl	80063d0 <prvInsertTimerInActiveList>
					break;
 800657a:	e009      	b.n	8006590 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800657c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006582:	2b00      	cmp	r3, #0
 8006584:	d104      	bne.n	8006590 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8006586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006588:	f000 fbb4 	bl	8006cf4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800658c:	e000      	b.n	8006590 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800658e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006590:	4b07      	ldr	r3, [pc, #28]	; (80065b0 <prvProcessReceivedCommands+0x15c>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	1d39      	adds	r1, r7, #4
 8006596:	2200      	movs	r2, #0
 8006598:	4618      	mov	r0, r3
 800659a:	f7fd ffcb 	bl	8004534 <xQueueReceive>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	f47f af5b 	bne.w	800645c <prvProcessReceivedCommands+0x8>
	}
}
 80065a6:	bf00      	nop
 80065a8:	3730      	adds	r7, #48	; 0x30
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20000c18 	.word	0x20000c18

080065b4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065ba:	e044      	b.n	8006646 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065bc:	4b2b      	ldr	r3, [pc, #172]	; (800666c <prvSwitchTimerLists+0xb8>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065c6:	4b29      	ldr	r3, [pc, #164]	; (800666c <prvSwitchTimerLists+0xb8>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68db      	ldr	r3, [r3, #12]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	3304      	adds	r3, #4
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fd fc55 	bl	8003e84 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065de:	68f8      	ldr	r0, [r7, #12]
 80065e0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d12d      	bne.n	8006646 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	699b      	ldr	r3, [r3, #24]
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4413      	add	r3, r2
 80065f2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d90e      	bls.n	800661a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	68fa      	ldr	r2, [r7, #12]
 8006606:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006608:	4b18      	ldr	r3, [pc, #96]	; (800666c <prvSwitchTimerLists+0xb8>)
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	3304      	adds	r3, #4
 8006610:	4619      	mov	r1, r3
 8006612:	4610      	mov	r0, r2
 8006614:	f7fd fbfd 	bl	8003e12 <vListInsert>
 8006618:	e015      	b.n	8006646 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800661a:	2300      	movs	r3, #0
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	2300      	movs	r3, #0
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	2100      	movs	r1, #0
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f7ff fda3 	bl	8006170 <xTimerGenericCommand>
 800662a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d109      	bne.n	8006646 <prvSwitchTimerLists+0x92>
 8006632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	603b      	str	r3, [r7, #0]
 8006644:	e7fe      	b.n	8006644 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006646:	4b09      	ldr	r3, [pc, #36]	; (800666c <prvSwitchTimerLists+0xb8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1b5      	bne.n	80065bc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006650:	4b06      	ldr	r3, [pc, #24]	; (800666c <prvSwitchTimerLists+0xb8>)
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006656:	4b06      	ldr	r3, [pc, #24]	; (8006670 <prvSwitchTimerLists+0xbc>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a04      	ldr	r2, [pc, #16]	; (800666c <prvSwitchTimerLists+0xb8>)
 800665c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800665e:	4a04      	ldr	r2, [pc, #16]	; (8006670 <prvSwitchTimerLists+0xbc>)
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	6013      	str	r3, [r2, #0]
}
 8006664:	bf00      	nop
 8006666:	3718      	adds	r7, #24
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	20000c10 	.word	0x20000c10
 8006670:	20000c14 	.word	0x20000c14

08006674 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800667a:	f000 f95f 	bl	800693c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800667e:	4b15      	ldr	r3, [pc, #84]	; (80066d4 <prvCheckForValidListAndQueue+0x60>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d120      	bne.n	80066c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006686:	4814      	ldr	r0, [pc, #80]	; (80066d8 <prvCheckForValidListAndQueue+0x64>)
 8006688:	f7fd fb72 	bl	8003d70 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800668c:	4813      	ldr	r0, [pc, #76]	; (80066dc <prvCheckForValidListAndQueue+0x68>)
 800668e:	f7fd fb6f 	bl	8003d70 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006692:	4b13      	ldr	r3, [pc, #76]	; (80066e0 <prvCheckForValidListAndQueue+0x6c>)
 8006694:	4a10      	ldr	r2, [pc, #64]	; (80066d8 <prvCheckForValidListAndQueue+0x64>)
 8006696:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006698:	4b12      	ldr	r3, [pc, #72]	; (80066e4 <prvCheckForValidListAndQueue+0x70>)
 800669a:	4a10      	ldr	r2, [pc, #64]	; (80066dc <prvCheckForValidListAndQueue+0x68>)
 800669c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800669e:	2300      	movs	r3, #0
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	4b11      	ldr	r3, [pc, #68]	; (80066e8 <prvCheckForValidListAndQueue+0x74>)
 80066a4:	4a11      	ldr	r2, [pc, #68]	; (80066ec <prvCheckForValidListAndQueue+0x78>)
 80066a6:	2110      	movs	r1, #16
 80066a8:	200a      	movs	r0, #10
 80066aa:	f7fd fc7d 	bl	8003fa8 <xQueueGenericCreateStatic>
 80066ae:	4602      	mov	r2, r0
 80066b0:	4b08      	ldr	r3, [pc, #32]	; (80066d4 <prvCheckForValidListAndQueue+0x60>)
 80066b2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066b4:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <prvCheckForValidListAndQueue+0x60>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d005      	beq.n	80066c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80066bc:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <prvCheckForValidListAndQueue+0x60>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	490b      	ldr	r1, [pc, #44]	; (80066f0 <prvCheckForValidListAndQueue+0x7c>)
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7fe fa82 	bl	8004bcc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066c8:	f000 f966 	bl	8006998 <vPortExitCritical>
}
 80066cc:	bf00      	nop
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000c18 	.word	0x20000c18
 80066d8:	20000be8 	.word	0x20000be8
 80066dc:	20000bfc 	.word	0x20000bfc
 80066e0:	20000c10 	.word	0x20000c10
 80066e4:	20000c14 	.word	0x20000c14
 80066e8:	20000cc4 	.word	0x20000cc4
 80066ec:	20000c24 	.word	0x20000c24
 80066f0:	08008504 	.word	0x08008504

080066f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80066f4:	b480      	push	{r7}
 80066f6:	b085      	sub	sp, #20
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	3b04      	subs	r3, #4
 8006704:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800670c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	3b04      	subs	r3, #4
 8006712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	f023 0201 	bic.w	r2, r3, #1
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3b04      	subs	r3, #4
 8006722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006724:	4a0c      	ldr	r2, [pc, #48]	; (8006758 <pxPortInitialiseStack+0x64>)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3b14      	subs	r3, #20
 800672e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006730:	687a      	ldr	r2, [r7, #4]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	3b04      	subs	r3, #4
 800673a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f06f 0202 	mvn.w	r2, #2
 8006742:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	3b20      	subs	r3, #32
 8006748:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800674a:	68fb      	ldr	r3, [r7, #12]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3714      	adds	r7, #20
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	0800675d 	.word	0x0800675d

0800675c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006762:	2300      	movs	r3, #0
 8006764:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006766:	4b11      	ldr	r3, [pc, #68]	; (80067ac <prvTaskExitError+0x50>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800676e:	d009      	beq.n	8006784 <prvTaskExitError+0x28>
 8006770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006774:	f383 8811 	msr	BASEPRI, r3
 8006778:	f3bf 8f6f 	isb	sy
 800677c:	f3bf 8f4f 	dsb	sy
 8006780:	60fb      	str	r3, [r7, #12]
 8006782:	e7fe      	b.n	8006782 <prvTaskExitError+0x26>
 8006784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006796:	bf00      	nop
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d0fc      	beq.n	8006798 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800679e:	bf00      	nop
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	2000000c 	.word	0x2000000c

080067b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067b0:	4b07      	ldr	r3, [pc, #28]	; (80067d0 <pxCurrentTCBConst2>)
 80067b2:	6819      	ldr	r1, [r3, #0]
 80067b4:	6808      	ldr	r0, [r1, #0]
 80067b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ba:	f380 8809 	msr	PSP, r0
 80067be:	f3bf 8f6f 	isb	sy
 80067c2:	f04f 0000 	mov.w	r0, #0
 80067c6:	f380 8811 	msr	BASEPRI, r0
 80067ca:	4770      	bx	lr
 80067cc:	f3af 8000 	nop.w

080067d0 <pxCurrentTCBConst2>:
 80067d0:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067d4:	bf00      	nop
 80067d6:	bf00      	nop

080067d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067d8:	4808      	ldr	r0, [pc, #32]	; (80067fc <prvPortStartFirstTask+0x24>)
 80067da:	6800      	ldr	r0, [r0, #0]
 80067dc:	6800      	ldr	r0, [r0, #0]
 80067de:	f380 8808 	msr	MSP, r0
 80067e2:	f04f 0000 	mov.w	r0, #0
 80067e6:	f380 8814 	msr	CONTROL, r0
 80067ea:	b662      	cpsie	i
 80067ec:	b661      	cpsie	f
 80067ee:	f3bf 8f4f 	dsb	sy
 80067f2:	f3bf 8f6f 	isb	sy
 80067f6:	df00      	svc	0
 80067f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80067fa:	bf00      	nop
 80067fc:	e000ed08 	.word	0xe000ed08

08006800 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006806:	4b44      	ldr	r3, [pc, #272]	; (8006918 <xPortStartScheduler+0x118>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a44      	ldr	r2, [pc, #272]	; (800691c <xPortStartScheduler+0x11c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d109      	bne.n	8006824 <xPortStartScheduler+0x24>
 8006810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006814:	f383 8811 	msr	BASEPRI, r3
 8006818:	f3bf 8f6f 	isb	sy
 800681c:	f3bf 8f4f 	dsb	sy
 8006820:	613b      	str	r3, [r7, #16]
 8006822:	e7fe      	b.n	8006822 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006824:	4b3c      	ldr	r3, [pc, #240]	; (8006918 <xPortStartScheduler+0x118>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a3d      	ldr	r2, [pc, #244]	; (8006920 <xPortStartScheduler+0x120>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d109      	bne.n	8006842 <xPortStartScheduler+0x42>
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	60fb      	str	r3, [r7, #12]
 8006840:	e7fe      	b.n	8006840 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006842:	4b38      	ldr	r3, [pc, #224]	; (8006924 <xPortStartScheduler+0x124>)
 8006844:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	b2db      	uxtb	r3, r3
 800684c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	22ff      	movs	r2, #255	; 0xff
 8006852:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	b2db      	uxtb	r3, r3
 800685a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800685c:	78fb      	ldrb	r3, [r7, #3]
 800685e:	b2db      	uxtb	r3, r3
 8006860:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006864:	b2da      	uxtb	r2, r3
 8006866:	4b30      	ldr	r3, [pc, #192]	; (8006928 <xPortStartScheduler+0x128>)
 8006868:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800686a:	4b30      	ldr	r3, [pc, #192]	; (800692c <xPortStartScheduler+0x12c>)
 800686c:	2207      	movs	r2, #7
 800686e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006870:	e009      	b.n	8006886 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8006872:	4b2e      	ldr	r3, [pc, #184]	; (800692c <xPortStartScheduler+0x12c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	3b01      	subs	r3, #1
 8006878:	4a2c      	ldr	r2, [pc, #176]	; (800692c <xPortStartScheduler+0x12c>)
 800687a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800687c:	78fb      	ldrb	r3, [r7, #3]
 800687e:	b2db      	uxtb	r3, r3
 8006880:	005b      	lsls	r3, r3, #1
 8006882:	b2db      	uxtb	r3, r3
 8006884:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006886:	78fb      	ldrb	r3, [r7, #3]
 8006888:	b2db      	uxtb	r3, r3
 800688a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800688e:	2b80      	cmp	r3, #128	; 0x80
 8006890:	d0ef      	beq.n	8006872 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006892:	4b26      	ldr	r3, [pc, #152]	; (800692c <xPortStartScheduler+0x12c>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f1c3 0307 	rsb	r3, r3, #7
 800689a:	2b04      	cmp	r3, #4
 800689c:	d009      	beq.n	80068b2 <xPortStartScheduler+0xb2>
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	60bb      	str	r3, [r7, #8]
 80068b0:	e7fe      	b.n	80068b0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068b2:	4b1e      	ldr	r3, [pc, #120]	; (800692c <xPortStartScheduler+0x12c>)
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	021b      	lsls	r3, r3, #8
 80068b8:	4a1c      	ldr	r2, [pc, #112]	; (800692c <xPortStartScheduler+0x12c>)
 80068ba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068bc:	4b1b      	ldr	r3, [pc, #108]	; (800692c <xPortStartScheduler+0x12c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068c4:	4a19      	ldr	r2, [pc, #100]	; (800692c <xPortStartScheduler+0x12c>)
 80068c6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068d0:	4b17      	ldr	r3, [pc, #92]	; (8006930 <xPortStartScheduler+0x130>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a16      	ldr	r2, [pc, #88]	; (8006930 <xPortStartScheduler+0x130>)
 80068d6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068da:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80068dc:	4b14      	ldr	r3, [pc, #80]	; (8006930 <xPortStartScheduler+0x130>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a13      	ldr	r2, [pc, #76]	; (8006930 <xPortStartScheduler+0x130>)
 80068e2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80068e6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80068e8:	f000 f8d6 	bl	8006a98 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80068ec:	4b11      	ldr	r3, [pc, #68]	; (8006934 <xPortStartScheduler+0x134>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80068f2:	f000 f8f5 	bl	8006ae0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80068f6:	4b10      	ldr	r3, [pc, #64]	; (8006938 <xPortStartScheduler+0x138>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a0f      	ldr	r2, [pc, #60]	; (8006938 <xPortStartScheduler+0x138>)
 80068fc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006900:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006902:	f7ff ff69 	bl	80067d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006906:	f7fe fd9d 	bl	8005444 <vTaskSwitchContext>
	prvTaskExitError();
 800690a:	f7ff ff27 	bl	800675c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3718      	adds	r7, #24
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	e000ed00 	.word	0xe000ed00
 800691c:	410fc271 	.word	0x410fc271
 8006920:	410fc270 	.word	0x410fc270
 8006924:	e000e400 	.word	0xe000e400
 8006928:	20000d14 	.word	0x20000d14
 800692c:	20000d18 	.word	0x20000d18
 8006930:	e000ed20 	.word	0xe000ed20
 8006934:	2000000c 	.word	0x2000000c
 8006938:	e000ef34 	.word	0xe000ef34

0800693c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800693c:	b480      	push	{r7}
 800693e:	b083      	sub	sp, #12
 8006940:	af00      	add	r7, sp, #0
 8006942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006954:	4b0e      	ldr	r3, [pc, #56]	; (8006990 <vPortEnterCritical+0x54>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3301      	adds	r3, #1
 800695a:	4a0d      	ldr	r2, [pc, #52]	; (8006990 <vPortEnterCritical+0x54>)
 800695c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800695e:	4b0c      	ldr	r3, [pc, #48]	; (8006990 <vPortEnterCritical+0x54>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d10e      	bne.n	8006984 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006966:	4b0b      	ldr	r3, [pc, #44]	; (8006994 <vPortEnterCritical+0x58>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	b2db      	uxtb	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d009      	beq.n	8006984 <vPortEnterCritical+0x48>
 8006970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006974:	f383 8811 	msr	BASEPRI, r3
 8006978:	f3bf 8f6f 	isb	sy
 800697c:	f3bf 8f4f 	dsb	sy
 8006980:	603b      	str	r3, [r7, #0]
 8006982:	e7fe      	b.n	8006982 <vPortEnterCritical+0x46>
	}
}
 8006984:	bf00      	nop
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	2000000c 	.word	0x2000000c
 8006994:	e000ed04 	.word	0xe000ed04

08006998 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006998:	b480      	push	{r7}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800699e:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <vPortExitCritical+0x4c>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d109      	bne.n	80069ba <vPortExitCritical+0x22>
 80069a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069aa:	f383 8811 	msr	BASEPRI, r3
 80069ae:	f3bf 8f6f 	isb	sy
 80069b2:	f3bf 8f4f 	dsb	sy
 80069b6:	607b      	str	r3, [r7, #4]
 80069b8:	e7fe      	b.n	80069b8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80069ba:	4b0a      	ldr	r3, [pc, #40]	; (80069e4 <vPortExitCritical+0x4c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3b01      	subs	r3, #1
 80069c0:	4a08      	ldr	r2, [pc, #32]	; (80069e4 <vPortExitCritical+0x4c>)
 80069c2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069c4:	4b07      	ldr	r3, [pc, #28]	; (80069e4 <vPortExitCritical+0x4c>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d104      	bne.n	80069d6 <vPortExitCritical+0x3e>
 80069cc:	2300      	movs	r3, #0
 80069ce:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	2000000c 	.word	0x2000000c
	...

080069f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80069f0:	f3ef 8009 	mrs	r0, PSP
 80069f4:	f3bf 8f6f 	isb	sy
 80069f8:	4b15      	ldr	r3, [pc, #84]	; (8006a50 <pxCurrentTCBConst>)
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	f01e 0f10 	tst.w	lr, #16
 8006a00:	bf08      	it	eq
 8006a02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a0a:	6010      	str	r0, [r2, #0]
 8006a0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a10:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a14:	f380 8811 	msr	BASEPRI, r0
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	f3bf 8f6f 	isb	sy
 8006a20:	f7fe fd10 	bl	8005444 <vTaskSwitchContext>
 8006a24:	f04f 0000 	mov.w	r0, #0
 8006a28:	f380 8811 	msr	BASEPRI, r0
 8006a2c:	bc09      	pop	{r0, r3}
 8006a2e:	6819      	ldr	r1, [r3, #0]
 8006a30:	6808      	ldr	r0, [r1, #0]
 8006a32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a36:	f01e 0f10 	tst.w	lr, #16
 8006a3a:	bf08      	it	eq
 8006a3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a40:	f380 8809 	msr	PSP, r0
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	f3af 8000 	nop.w

08006a50 <pxCurrentTCBConst>:
 8006a50:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop

08006a58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b082      	sub	sp, #8
 8006a5c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	f383 8811 	msr	BASEPRI, r3
 8006a66:	f3bf 8f6f 	isb	sy
 8006a6a:	f3bf 8f4f 	dsb	sy
 8006a6e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006a70:	f7fe fc2a 	bl	80052c8 <xTaskIncrementTick>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006a7a:	4b06      	ldr	r3, [pc, #24]	; (8006a94 <SysTick_Handler+0x3c>)
 8006a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a80:	601a      	str	r2, [r3, #0]
 8006a82:	2300      	movs	r3, #0
 8006a84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006a8c:	bf00      	nop
 8006a8e:	3708      	adds	r7, #8
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	e000ed04 	.word	0xe000ed04

08006a98 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006a98:	b480      	push	{r7}
 8006a9a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006a9c:	4b0b      	ldr	r3, [pc, #44]	; (8006acc <vPortSetupTimerInterrupt+0x34>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006aa2:	4b0b      	ldr	r3, [pc, #44]	; (8006ad0 <vPortSetupTimerInterrupt+0x38>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006aa8:	4b0a      	ldr	r3, [pc, #40]	; (8006ad4 <vPortSetupTimerInterrupt+0x3c>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a0a      	ldr	r2, [pc, #40]	; (8006ad8 <vPortSetupTimerInterrupt+0x40>)
 8006aae:	fba2 2303 	umull	r2, r3, r2, r3
 8006ab2:	099b      	lsrs	r3, r3, #6
 8006ab4:	4a09      	ldr	r2, [pc, #36]	; (8006adc <vPortSetupTimerInterrupt+0x44>)
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006aba:	4b04      	ldr	r3, [pc, #16]	; (8006acc <vPortSetupTimerInterrupt+0x34>)
 8006abc:	2207      	movs	r2, #7
 8006abe:	601a      	str	r2, [r3, #0]
}
 8006ac0:	bf00      	nop
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	e000e010 	.word	0xe000e010
 8006ad0:	e000e018 	.word	0xe000e018
 8006ad4:	20000000 	.word	0x20000000
 8006ad8:	10624dd3 	.word	0x10624dd3
 8006adc:	e000e014 	.word	0xe000e014

08006ae0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006ae0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006af0 <vPortEnableVFP+0x10>
 8006ae4:	6801      	ldr	r1, [r0, #0]
 8006ae6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006aea:	6001      	str	r1, [r0, #0]
 8006aec:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006aee:	bf00      	nop
 8006af0:	e000ed88 	.word	0xe000ed88

08006af4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006afa:	f3ef 8305 	mrs	r3, IPSR
 8006afe:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2b0f      	cmp	r3, #15
 8006b04:	d913      	bls.n	8006b2e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b06:	4a16      	ldr	r2, [pc, #88]	; (8006b60 <vPortValidateInterruptPriority+0x6c>)
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b10:	4b14      	ldr	r3, [pc, #80]	; (8006b64 <vPortValidateInterruptPriority+0x70>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	7afa      	ldrb	r2, [r7, #11]
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d209      	bcs.n	8006b2e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	607b      	str	r3, [r7, #4]
 8006b2c:	e7fe      	b.n	8006b2c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b2e:	4b0e      	ldr	r3, [pc, #56]	; (8006b68 <vPortValidateInterruptPriority+0x74>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b36:	4b0d      	ldr	r3, [pc, #52]	; (8006b6c <vPortValidateInterruptPriority+0x78>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d909      	bls.n	8006b52 <vPortValidateInterruptPriority+0x5e>
 8006b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	603b      	str	r3, [r7, #0]
 8006b50:	e7fe      	b.n	8006b50 <vPortValidateInterruptPriority+0x5c>
	}
 8006b52:	bf00      	nop
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	e000e3f0 	.word	0xe000e3f0
 8006b64:	20000d14 	.word	0x20000d14
 8006b68:	e000ed0c 	.word	0xe000ed0c
 8006b6c:	20000d18 	.word	0x20000d18

08006b70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b08a      	sub	sp, #40	; 0x28
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006b7c:	f7fe fad8 	bl	8005130 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006b80:	4b57      	ldr	r3, [pc, #348]	; (8006ce0 <pvPortMalloc+0x170>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006b88:	f000 f90c 	bl	8006da4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006b8c:	4b55      	ldr	r3, [pc, #340]	; (8006ce4 <pvPortMalloc+0x174>)
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4013      	ands	r3, r2
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	f040 808c 	bne.w	8006cb2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d01c      	beq.n	8006bda <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006ba0:	2208      	movs	r2, #8
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d013      	beq.n	8006bda <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f023 0307 	bic.w	r3, r3, #7
 8006bb8:	3308      	adds	r3, #8
 8006bba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f003 0307 	and.w	r3, r3, #7
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d009      	beq.n	8006bda <pvPortMalloc+0x6a>
 8006bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bca:	f383 8811 	msr	BASEPRI, r3
 8006bce:	f3bf 8f6f 	isb	sy
 8006bd2:	f3bf 8f4f 	dsb	sy
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	e7fe      	b.n	8006bd8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d068      	beq.n	8006cb2 <pvPortMalloc+0x142>
 8006be0:	4b41      	ldr	r3, [pc, #260]	; (8006ce8 <pvPortMalloc+0x178>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d863      	bhi.n	8006cb2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006bea:	4b40      	ldr	r3, [pc, #256]	; (8006cec <pvPortMalloc+0x17c>)
 8006bec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006bee:	4b3f      	ldr	r3, [pc, #252]	; (8006cec <pvPortMalloc+0x17c>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006bf4:	e004      	b.n	8006c00 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c02:	685b      	ldr	r3, [r3, #4]
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	429a      	cmp	r2, r3
 8006c08:	d903      	bls.n	8006c12 <pvPortMalloc+0xa2>
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1f1      	bne.n	8006bf6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c12:	4b33      	ldr	r3, [pc, #204]	; (8006ce0 <pvPortMalloc+0x170>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d04a      	beq.n	8006cb2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	2208      	movs	r2, #8
 8006c22:	4413      	add	r3, r2
 8006c24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	6a3b      	ldr	r3, [r7, #32]
 8006c2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	685a      	ldr	r2, [r3, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	1ad2      	subs	r2, r2, r3
 8006c36:	2308      	movs	r3, #8
 8006c38:	005b      	lsls	r3, r3, #1
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d91e      	bls.n	8006c7c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	4413      	add	r3, r2
 8006c44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d009      	beq.n	8006c64 <pvPortMalloc+0xf4>
 8006c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c54:	f383 8811 	msr	BASEPRI, r3
 8006c58:	f3bf 8f6f 	isb	sy
 8006c5c:	f3bf 8f4f 	dsb	sy
 8006c60:	613b      	str	r3, [r7, #16]
 8006c62:	e7fe      	b.n	8006c62 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	685a      	ldr	r2, [r3, #4]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	1ad2      	subs	r2, r2, r3
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006c76:	69b8      	ldr	r0, [r7, #24]
 8006c78:	f000 f8f6 	bl	8006e68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006c7c:	4b1a      	ldr	r3, [pc, #104]	; (8006ce8 <pvPortMalloc+0x178>)
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	1ad3      	subs	r3, r2, r3
 8006c86:	4a18      	ldr	r2, [pc, #96]	; (8006ce8 <pvPortMalloc+0x178>)
 8006c88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006c8a:	4b17      	ldr	r3, [pc, #92]	; (8006ce8 <pvPortMalloc+0x178>)
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4b18      	ldr	r3, [pc, #96]	; (8006cf0 <pvPortMalloc+0x180>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d203      	bcs.n	8006c9e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006c96:	4b14      	ldr	r3, [pc, #80]	; (8006ce8 <pvPortMalloc+0x178>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a15      	ldr	r2, [pc, #84]	; (8006cf0 <pvPortMalloc+0x180>)
 8006c9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	4b10      	ldr	r3, [pc, #64]	; (8006ce4 <pvPortMalloc+0x174>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	2200      	movs	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006cb2:	f7fe fa4b 	bl	800514c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cb6:	69fb      	ldr	r3, [r7, #28]
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d009      	beq.n	8006cd4 <pvPortMalloc+0x164>
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	60fb      	str	r3, [r7, #12]
 8006cd2:	e7fe      	b.n	8006cd2 <pvPortMalloc+0x162>
	return pvReturn;
 8006cd4:	69fb      	ldr	r3, [r7, #28]
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3728      	adds	r7, #40	; 0x28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	20001924 	.word	0x20001924
 8006ce4:	20001930 	.word	0x20001930
 8006ce8:	20001928 	.word	0x20001928
 8006cec:	2000191c 	.word	0x2000191c
 8006cf0:	2000192c 	.word	0x2000192c

08006cf4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d046      	beq.n	8006d94 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d06:	2308      	movs	r3, #8
 8006d08:	425b      	negs	r3, r3
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4413      	add	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	685a      	ldr	r2, [r3, #4]
 8006d18:	4b20      	ldr	r3, [pc, #128]	; (8006d9c <vPortFree+0xa8>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d109      	bne.n	8006d36 <vPortFree+0x42>
 8006d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d26:	f383 8811 	msr	BASEPRI, r3
 8006d2a:	f3bf 8f6f 	isb	sy
 8006d2e:	f3bf 8f4f 	dsb	sy
 8006d32:	60fb      	str	r3, [r7, #12]
 8006d34:	e7fe      	b.n	8006d34 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d009      	beq.n	8006d52 <vPortFree+0x5e>
 8006d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	60bb      	str	r3, [r7, #8]
 8006d50:	e7fe      	b.n	8006d50 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	4b11      	ldr	r3, [pc, #68]	; (8006d9c <vPortFree+0xa8>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d019      	beq.n	8006d94 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d115      	bne.n	8006d94 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	685a      	ldr	r2, [r3, #4]
 8006d6c:	4b0b      	ldr	r3, [pc, #44]	; (8006d9c <vPortFree+0xa8>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	43db      	mvns	r3, r3
 8006d72:	401a      	ands	r2, r3
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006d78:	f7fe f9da 	bl	8005130 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	4b07      	ldr	r3, [pc, #28]	; (8006da0 <vPortFree+0xac>)
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	4413      	add	r3, r2
 8006d86:	4a06      	ldr	r2, [pc, #24]	; (8006da0 <vPortFree+0xac>)
 8006d88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006d8a:	6938      	ldr	r0, [r7, #16]
 8006d8c:	f000 f86c 	bl	8006e68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006d90:	f7fe f9dc 	bl	800514c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006d94:	bf00      	nop
 8006d96:	3718      	adds	r7, #24
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	20001930 	.word	0x20001930
 8006da0:	20001928 	.word	0x20001928

08006da4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006da4:	b480      	push	{r7}
 8006da6:	b085      	sub	sp, #20
 8006da8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006daa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006dae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006db0:	4b27      	ldr	r3, [pc, #156]	; (8006e50 <prvHeapInit+0xac>)
 8006db2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00c      	beq.n	8006dd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3307      	adds	r3, #7
 8006dc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 0307 	bic.w	r3, r3, #7
 8006dca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006dcc:	68ba      	ldr	r2, [r7, #8]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	4a1f      	ldr	r2, [pc, #124]	; (8006e50 <prvHeapInit+0xac>)
 8006dd4:	4413      	add	r3, r2
 8006dd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006ddc:	4a1d      	ldr	r2, [pc, #116]	; (8006e54 <prvHeapInit+0xb0>)
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006de2:	4b1c      	ldr	r3, [pc, #112]	; (8006e54 <prvHeapInit+0xb0>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	4413      	add	r3, r2
 8006dee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006df0:	2208      	movs	r2, #8
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	1a9b      	subs	r3, r3, r2
 8006df6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 0307 	bic.w	r3, r3, #7
 8006dfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	4a15      	ldr	r2, [pc, #84]	; (8006e58 <prvHeapInit+0xb4>)
 8006e04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e06:	4b14      	ldr	r3, [pc, #80]	; (8006e58 <prvHeapInit+0xb4>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e0e:	4b12      	ldr	r3, [pc, #72]	; (8006e58 <prvHeapInit+0xb4>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2200      	movs	r2, #0
 8006e14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	68fa      	ldr	r2, [r7, #12]
 8006e1e:	1ad2      	subs	r2, r2, r3
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e24:	4b0c      	ldr	r3, [pc, #48]	; (8006e58 <prvHeapInit+0xb4>)
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	4a0a      	ldr	r2, [pc, #40]	; (8006e5c <prvHeapInit+0xb8>)
 8006e32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	4a09      	ldr	r2, [pc, #36]	; (8006e60 <prvHeapInit+0xbc>)
 8006e3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e3c:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <prvHeapInit+0xc0>)
 8006e3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e42:	601a      	str	r2, [r3, #0]
}
 8006e44:	bf00      	nop
 8006e46:	3714      	adds	r7, #20
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	20000d1c 	.word	0x20000d1c
 8006e54:	2000191c 	.word	0x2000191c
 8006e58:	20001924 	.word	0x20001924
 8006e5c:	2000192c 	.word	0x2000192c
 8006e60:	20001928 	.word	0x20001928
 8006e64:	20001930 	.word	0x20001930

08006e68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006e70:	4b28      	ldr	r3, [pc, #160]	; (8006f14 <prvInsertBlockIntoFreeList+0xac>)
 8006e72:	60fb      	str	r3, [r7, #12]
 8006e74:	e002      	b.n	8006e7c <prvInsertBlockIntoFreeList+0x14>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	60fb      	str	r3, [r7, #12]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	429a      	cmp	r2, r3
 8006e84:	d8f7      	bhi.n	8006e76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	68ba      	ldr	r2, [r7, #8]
 8006e90:	4413      	add	r3, r2
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	429a      	cmp	r2, r3
 8006e96:	d108      	bne.n	8006eaa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	441a      	add	r2, r3
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	441a      	add	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d118      	bne.n	8006ef0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681a      	ldr	r2, [r3, #0]
 8006ec2:	4b15      	ldr	r3, [pc, #84]	; (8006f18 <prvInsertBlockIntoFreeList+0xb0>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	429a      	cmp	r2, r3
 8006ec8:	d00d      	beq.n	8006ee6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	441a      	add	r2, r3
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	681a      	ldr	r2, [r3, #0]
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	e008      	b.n	8006ef8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ee6:	4b0c      	ldr	r3, [pc, #48]	; (8006f18 <prvInsertBlockIntoFreeList+0xb0>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	601a      	str	r2, [r3, #0]
 8006eee:	e003      	b.n	8006ef8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d002      	beq.n	8006f06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f06:	bf00      	nop
 8006f08:	3714      	adds	r7, #20
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr
 8006f12:	bf00      	nop
 8006f14:	2000191c 	.word	0x2000191c
 8006f18:	20001924 	.word	0x20001924

08006f1c <ModbusInit>:
 * @param EN_Port_v port for txen RS-485
 * @param EN_Pin_v pin for txen RS-485 (NULL means RS232C mode)
 * @ingroup setup
 */
void ModbusInit(modbusHandler_t * modH)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af02      	add	r7, sp, #8
 8006f22:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8006f24:	4b35      	ldr	r3, [pc, #212]	; (8006ffc <ModbusInit+0xe0>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d862      	bhi.n	8006ff2 <ModbusInit+0xd6>
  {
	  //Create QueueModbus
	  modH->QueueModbusHandle = osMessageQueueNew (MAX_BUFFER, sizeof(uint8_t), &QueueModbus_attributes);
 8006f2c:	4a34      	ldr	r2, [pc, #208]	; (8007000 <ModbusInit+0xe4>)
 8006f2e:	2101      	movs	r1, #1
 8006f30:	2040      	movs	r0, #64	; 0x40
 8006f32:	f7fc fe63 	bl	8003bfc <osMessageQueueNew>
 8006f36:	4602      	mov	r2, r0
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	675a      	str	r2, [r3, #116]	; 0x74

	  if(modH->uiModbusType == SLAVE_RTU)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	781b      	ldrb	r3, [r3, #0]
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d108      	bne.n	8006f56 <ModbusInit+0x3a>
	  {
		  //Create Modbus task slave
	  	  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8006f44:	4a2f      	ldr	r2, [pc, #188]	; (8007004 <ModbusInit+0xe8>)
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	482f      	ldr	r0, [pc, #188]	; (8007008 <ModbusInit+0xec>)
 8006f4a:	f7fc fce1 	bl	8003910 <osThreadNew>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	67da      	str	r2, [r3, #124]	; 0x7c
 8006f54:	e027      	b.n	8006fa6 <ModbusInit+0x8a>
	  }
	  else if (modH->uiModbusType == MASTER_RTU)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	2b04      	cmp	r3, #4
 8006f5c:	d122      	bne.n	8006fa4 <ModbusInit+0x88>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8006f5e:	4a2b      	ldr	r2, [pc, #172]	; (800700c <ModbusInit+0xf0>)
 8006f60:	6879      	ldr	r1, [r7, #4]
 8006f62:	482b      	ldr	r0, [pc, #172]	; (8007010 <ModbusInit+0xf4>)
 8006f64:	f7fc fcd4 	bl	8003910 <osThreadNew>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	67da      	str	r2, [r3, #124]	; 0x7c
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8006f74:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8006f7c:	4b25      	ldr	r3, [pc, #148]	; (8007014 <ModbusInit+0xf8>)
 8006f7e:	9300      	str	r3, [sp, #0]
 8006f80:	4613      	mov	r3, r2
 8006f82:	2200      	movs	r2, #0
 8006f84:	4824      	ldr	r0, [pc, #144]	; (8007018 <ModbusInit+0xfc>)
 8006f86:	f7ff f8a1 	bl	80060cc <xTimerCreate>
 8006f8a:	4602      	mov	r2, r0
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8006f92:	4a22      	ldr	r2, [pc, #136]	; (800701c <ModbusInit+0x100>)
 8006f94:	210c      	movs	r1, #12
 8006f96:	2002      	movs	r0, #2
 8006f98:	f7fc fe30 	bl	8003bfc <osMessageQueueNew>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	679a      	str	r2, [r3, #120]	; 0x78
 8006fa2:	e000      	b.n	8006fa6 <ModbusInit+0x8a>
	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8006fa4:	e7fe      	b.n	8006fa4 <ModbusInit+0x88>
	  //Create timer T35

	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	5 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8006fac:	4b1c      	ldr	r3, [pc, #112]	; (8007020 <ModbusInit+0x104>)
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	2105      	movs	r1, #5
 8006fb6:	481b      	ldr	r0, [pc, #108]	; (8007024 <ModbusInit+0x108>)
 8006fb8:	f7ff f888 	bl	80060cc <xTimerCreate>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );

	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8006fc4:	4a18      	ldr	r2, [pc, #96]	; (8007028 <ModbusInit+0x10c>)
 8006fc6:	2101      	movs	r1, #1
 8006fc8:	2001      	movs	r0, #1
 8006fca:	f7fc fd79 	bl	8003ac0 <osSemaphoreNew>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  mHandlers[numberHandlers] = modH;
 8006fd6:	4b09      	ldr	r3, [pc, #36]	; (8006ffc <ModbusInit+0xe0>)
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	4619      	mov	r1, r3
 8006fdc:	4a13      	ldr	r2, [pc, #76]	; (800702c <ModbusInit+0x110>)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8006fe4:	4b05      	ldr	r3, [pc, #20]	; (8006ffc <ModbusInit+0xe0>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	3301      	adds	r3, #1
 8006fea:	b2da      	uxtb	r2, r3
 8006fec:	4b03      	ldr	r3, [pc, #12]	; (8006ffc <ModbusInit+0xe0>)
 8006fee:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8006ff0:	e000      	b.n	8006ff4 <ModbusInit+0xd8>
	  while(1); //error no more Modbus handlers supported
 8006ff2:	e7fe      	b.n	8006ff2 <ModbusInit+0xd6>
}
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	20001934 	.word	0x20001934
 8007000:	080085cc 	.word	0x080085cc
 8007004:	080085fc 	.word	0x080085fc
 8007008:	080071a1 	.word	0x080071a1
 800700c:	08008620 	.word	0x08008620
 8007010:	08007615 	.word	0x08007615
 8007014:	08007149 	.word	0x08007149
 8007018:	08008554 	.word	0x08008554
 800701c:	080085e4 	.word	0x080085e4
 8007020:	080070c9 	.word	0x080070c9
 8007024:	08008564 	.word	0x08008564
 8007028:	08008644 	.word	0x08008644
 800702c:	2000193c 	.word	0x2000193c

08007030 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
    if (modH->EN_Port != NULL )
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	68db      	ldr	r3, [r3, #12]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d007      	beq.n	8007050 <ModbusStart+0x20>
    {
        // return RS485 transceiver to transmit mode
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	68d8      	ldr	r0, [r3, #12]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	8a1b      	ldrh	r3, [r3, #16]
 8007048:	2200      	movs	r2, #0
 800704a:	4619      	mov	r1, r3
 800704c:	f7f9 fe3c 	bl	8000cc8 <HAL_GPIO_WritePin>
    }

    if (modH->uiModbusType == SLAVE_RTU &&  modH->au16regs == NULL )
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b03      	cmp	r3, #3
 8007056:	d104      	bne.n	8007062 <ModbusStart+0x32>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800705c:	2b00      	cmp	r3, #0
 800705e:	d100      	bne.n	8007062 <ModbusStart+0x32>
    {
    	while(1); //ERROR define the DATA pointer shared through Modbus
 8007060:	e7fe      	b.n	8007060 <ModbusStart+0x30>
    }

    //check that port is initialized
    while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8007062:	bf00      	nop
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	4618      	mov	r0, r3
 800706a:	f7fb fee1 	bl	8002e30 <HAL_UART_GetState>
 800706e:	4603      	mov	r3, r0
 8007070:	2b20      	cmp	r3, #32
 8007072:	d1f7      	bne.n	8007064 <ModbusStart+0x34>
    {
    }

    // Receive data from serial port for Modbus using interrupt
    if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6858      	ldr	r0, [r3, #4]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3371      	adds	r3, #113	; 0x71
 800707c:	2201      	movs	r2, #1
 800707e:	4619      	mov	r1, r3
 8007080:	f7fb fce4 	bl	8002a4c <HAL_UART_Receive_IT>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d000      	beq.n	800708c <ModbusStart+0x5c>
    {
        while(1)
 800708a:	e7fe      	b.n	800708a <ModbusStart+0x5a>
        {
        }
    }

    modH->u8lastRec = modH->u8BufferSize = 0;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2200      	movs	r2, #0
 8007090:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
}
 80070c0:	bf00      	nop
 80070c2:	3708      	adds	r7, #8
 80070c4:	46bd      	mov	sp, r7
 80070c6:	bd80      	pop	{r7, pc}

080070c8 <vTimerCallbackT35>:


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b086      	sub	sp, #24
 80070cc:	af02      	add	r7, sp, #8
 80070ce:	6078      	str	r0, [r7, #4]
	//Notify that a steam has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 80070d0:	2300      	movs	r3, #0
 80070d2:	60fb      	str	r3, [r7, #12]
 80070d4:	e029      	b.n	800712a <vTimerCallbackT35+0x62>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 80070d6:	4a1a      	ldr	r2, [pc, #104]	; (8007140 <vTimerCallbackT35+0x78>)
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d11d      	bne.n	8007124 <vTimerCallbackT35+0x5c>
			if(mHandlers[i]->uiModbusType == MASTER_RTU)
 80070e8:	4a15      	ldr	r2, [pc, #84]	; (8007140 <vTimerCallbackT35+0x78>)
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	2b04      	cmp	r3, #4
 80070f4:	d10c      	bne.n	8007110 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 80070f6:	4a12      	ldr	r2, [pc, #72]	; (8007140 <vTimerCallbackT35+0x78>)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80070fe:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8007102:	2300      	movs	r3, #0
 8007104:	9300      	str	r3, [sp, #0]
 8007106:	2300      	movs	r3, #0
 8007108:	2200      	movs	r2, #0
 800710a:	2103      	movs	r1, #3
 800710c:	f7ff f830 	bl	8006170 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8007110:	4a0b      	ldr	r2, [pc, #44]	; (8007140 <vTimerCallbackT35+0x78>)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007118:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800711a:	2300      	movs	r3, #0
 800711c:	2203      	movs	r2, #3
 800711e:	2100      	movs	r1, #0
 8007120:	f7fe fdce 	bl	8005cc0 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	3301      	adds	r3, #1
 8007128:	60fb      	str	r3, [r7, #12]
 800712a:	4b06      	ldr	r3, [pc, #24]	; (8007144 <vTimerCallbackT35+0x7c>)
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	461a      	mov	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4293      	cmp	r3, r2
 8007134:	dbcf      	blt.n	80070d6 <vTimerCallbackT35+0xe>
		}

	}
}
 8007136:	bf00      	nop
 8007138:	3710      	adds	r7, #16
 800713a:	46bd      	mov	sp, r7
 800713c:	bd80      	pop	{r7, pc}
 800713e:	bf00      	nop
 8007140:	2000193c 	.word	0x2000193c
 8007144:	20001934 	.word	0x20001934

08007148 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b084      	sub	sp, #16
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
	//Notify that a steam has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8007150:	2300      	movs	r3, #0
 8007152:	60fb      	str	r3, [r7, #12]
 8007154:	e015      	b.n	8007182 <vTimerCallbackTimeout+0x3a>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8007156:	4a10      	ldr	r2, [pc, #64]	; (8007198 <vTimerCallbackTimeout+0x50>)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800715e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	429a      	cmp	r2, r3
 8007166:	d109      	bne.n	800717c <vTimerCallbackTimeout+0x34>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, NO_REPLY, eSetValueWithOverwrite);
 8007168:	4a0b      	ldr	r2, [pc, #44]	; (8007198 <vTimerCallbackTimeout+0x50>)
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007170:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8007172:	2300      	movs	r3, #0
 8007174:	2203      	movs	r2, #3
 8007176:	21ff      	movs	r1, #255	; 0xff
 8007178:	f7fe fda2 	bl	8005cc0 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	3301      	adds	r3, #1
 8007180:	60fb      	str	r3, [r7, #12]
 8007182:	4b06      	ldr	r3, [pc, #24]	; (800719c <vTimerCallbackTimeout+0x54>)
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	461a      	mov	r2, r3
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4293      	cmp	r3, r2
 800718c:	dbe3      	blt.n	8007156 <vTimerCallbackTimeout+0xe>
		}

	}

}
 800718e:	bf00      	nop
 8007190:	3710      	adds	r7, #16
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	2000193c 	.word	0x2000193c
 800719c:	20001934 	.word	0x20001934

080071a0 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b084      	sub	sp, #16
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block indefinitely until a Modbus Frame arrives */
 80071ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80071b0:	2001      	movs	r0, #1
 80071b2:	f7fe fd3d 	bl	8005c30 <ulTaskNotifyTake>

	  modH->i8lastError = 0;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	749a      	strb	r2, [r3, #18]
	  modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071c0:	4618      	mov	r0, r3
 80071c2:	f7fd fb9b 	bl	80048fc <uxQueueMessagesWaiting>
 80071c6:	4603      	mov	r3, r0
 80071c8:	b2da      	uxtb	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	  if (modH->EN_Port != NULL )
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	68db      	ldr	r3, [r3, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d007      	beq.n	80071e8 <StartTaskModbusSlave+0x48>
	  {
	     	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET); // is this required?
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	68d8      	ldr	r0, [r3, #12]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	8a1b      	ldrh	r3, [r3, #16]
 80071e0:	2200      	movs	r2, #0
 80071e2:	4619      	mov	r1, r3
 80071e4:	f7f9 fd70 	bl	8000cc8 <HAL_GPIO_WritePin>
	  }

	  int8_t i8state = getRxBuffer(modH);
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 fbcd 	bl	8007988 <getRxBuffer>
 80071ee:	4603      	mov	r3, r0
 80071f0:	72fb      	strb	r3, [r7, #11]

	  if (i8state < 7){
 80071f2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80071f6:	2b06      	cmp	r3, #6
 80071f8:	dc09      	bgt.n	800720e <StartTaskModbusSlave+0x6e>
		  //The size of the frame is invalid
		  modH->i8lastError = ERR_BAD_SIZE;;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	22fa      	movs	r2, #250	; 0xfa
 80071fe:	749a      	strb	r2, [r3, #18]
		  xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007204:	2100      	movs	r1, #0
 8007206:	4618      	mov	r0, r3
 8007208:	f7fc fe66 	bl	8003ed8 <xQueueGenericReset>
		  continue;
 800720c:	e093      	b.n	8007336 <StartTaskModbusSlave+0x196>
	  }


		// check slave id
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	7cda      	ldrb	r2, [r3, #19]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	7a1b      	ldrb	r3, [r3, #8]
 8007216:	429a      	cmp	r2, r3
 8007218:	f040 808c 	bne.w	8007334 <StartTaskModbusSlave+0x194>

	  // validate message: CRC, FCT, address and size
	  uint8_t u8exception = validateRequest(modH);
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f000 fc59 	bl	8007ad4 <validateRequest>
 8007222:	4603      	mov	r3, r0
 8007224:	72bb      	strb	r3, [r7, #10]
	  if (u8exception > 0)
 8007226:	7abb      	ldrb	r3, [r7, #10]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00f      	beq.n	800724c <StartTaskModbusSlave+0xac>
	  {
		  if (u8exception != NO_REPLY)
 800722c:	7abb      	ldrb	r3, [r7, #10]
 800722e:	2bff      	cmp	r3, #255	; 0xff
 8007230:	d007      	beq.n	8007242 <StartTaskModbusSlave+0xa2>
		  {
			  buildException( u8exception, modH);
 8007232:	7abb      	ldrb	r3, [r7, #10]
 8007234:	68f9      	ldr	r1, [r7, #12]
 8007236:	4618      	mov	r0, r3
 8007238:	f000 fda6 	bl	8007d88 <buildException>
			  sendTxBuffer(modH);
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	f000 fdc3 	bl	8007dc8 <sendTxBuffer>
		  }
		  modH->i8lastError = u8exception;
 8007242:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	749a      	strb	r2, [r3, #18]
		  //return u8exception
		  continue;
 800724a:	e074      	b.n	8007336 <StartTaskModbusSlave+0x196>
	  }

	  //u32timeOut = millis(); TODO is this really need?
	  modH->i8lastError = 0;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	749a      	strb	r2, [r3, #18]


	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007258:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800725c:	4618      	mov	r0, r3
 800725e:	f7fd fa45 	bl	80046ec <xQueueSemaphoreTake>

	  // process message
	    switch(modH->au8Buffer[ FUNC ] )
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	7d1b      	ldrb	r3, [r3, #20]
 8007266:	3b01      	subs	r3, #1
 8007268:	2b0f      	cmp	r3, #15
 800726a:	d859      	bhi.n	8007320 <StartTaskModbusSlave+0x180>
 800726c:	a201      	add	r2, pc, #4	; (adr r2, 8007274 <StartTaskModbusSlave+0xd4>)
 800726e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007272:	bf00      	nop
 8007274:	080072b5 	.word	0x080072b5
 8007278:	080072b5 	.word	0x080072b5
 800727c:	080072c7 	.word	0x080072c7
 8007280:	080072c7 	.word	0x080072c7
 8007284:	080072d9 	.word	0x080072d9
 8007288:	080072eb 	.word	0x080072eb
 800728c:	08007321 	.word	0x08007321
 8007290:	08007321 	.word	0x08007321
 8007294:	08007321 	.word	0x08007321
 8007298:	08007321 	.word	0x08007321
 800729c:	08007321 	.word	0x08007321
 80072a0:	08007321 	.word	0x08007321
 80072a4:	08007321 	.word	0x08007321
 80072a8:	08007321 	.word	0x08007321
 80072ac:	080072fd 	.word	0x080072fd
 80072b0:	0800730f 	.word	0x0800730f
	    {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 80072b4:	68f8      	ldr	r0, [r7, #12]
 80072b6:	f000 fe1f 	bl	8007ef8 <process_FC1>
 80072ba:	4603      	mov	r3, r0
 80072bc:	461a      	mov	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80072c4:	e02d      	b.n	8007322 <StartTaskModbusSlave+0x182>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 fecb 	bl	8008062 <process_FC3>
 80072cc:	4603      	mov	r3, r0
 80072ce:	461a      	mov	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80072d6:	e024      	b.n	8007322 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 ff2b 	bl	8008134 <process_FC5>
 80072de:	4603      	mov	r3, r0
 80072e0:	461a      	mov	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80072e8:	e01b      	b.n	8007322 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 ff78 	bl	80081e0 <process_FC6>
 80072f0:	4603      	mov	r3, r0
 80072f2:	461a      	mov	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80072fa:	e012      	b.n	8007322 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 80072fc:	68f8      	ldr	r0, [r7, #12]
 80072fe:	f000 ffa0 	bl	8008242 <process_FC15>
 8007302:	4603      	mov	r3, r0
 8007304:	461a      	mov	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 800730c:	e009      	b.n	8007322 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f001 f822 	bl	8008358 <process_FC16>
 8007314:	4603      	mov	r3, r0
 8007316:	461a      	mov	r2, r3
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 800731e:	e000      	b.n	8007322 <StartTaskModbusSlave+0x182>
			default:
				break;
 8007320:	bf00      	nop
	    }

	    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8007328:	2300      	movs	r3, #0
 800732a:	2200      	movs	r2, #0
 800732c:	2100      	movs	r1, #0
 800732e:	f7fc ff73 	bl	8004218 <xQueueGenericSend>
	    //return i8state;
	    continue;
 8007332:	e000      	b.n	8007336 <StartTaskModbusSlave+0x196>
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 8007334:	bf00      	nop
  {
 8007336:	e739      	b.n	80071ac <StartTaskModbusSlave+0xc>

08007338 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	4638      	mov	r0, r7
 8007342:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 8007346:	2300      	movs	r3, #0
 8007348:	75bb      	strb	r3, [r7, #22]
	xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007350:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007354:	4618      	mov	r0, r3
 8007356:	f7fd f9c9 	bl	80046ec <xQueueSemaphoreTake>

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	7a1b      	ldrb	r3, [r3, #8]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <SendQuery+0x2e>
 8007362:	23ff      	movs	r3, #255	; 0xff
 8007364:	75bb      	strb	r3, [r7, #22]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <SendQuery+0x3c>
 8007370:	23fe      	movs	r3, #254	; 0xfe
 8007372:	75bb      	strb	r3, [r7, #22]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8007374:	783b      	ldrb	r3, [r7, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d002      	beq.n	8007380 <SendQuery+0x48>
 800737a:	783b      	ldrb	r3, [r7, #0]
 800737c:	2bf7      	cmp	r3, #247	; 0xf7
 800737e:	d901      	bls.n	8007384 <SendQuery+0x4c>
 8007380:	23f7      	movs	r3, #247	; 0xf7
 8007382:	75bb      	strb	r3, [r7, #22]

	if(error)
 8007384:	7dbb      	ldrb	r3, [r7, #22]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00e      	beq.n	80073a8 <SendQuery+0x70>
	{
		 modH->i8lastError = error;
 800738a:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8007398:	2300      	movs	r3, #0
 800739a:	2200      	movs	r2, #0
 800739c:	2100      	movs	r1, #0
 800739e:	f7fc ff3b 	bl	8004218 <xQueueGenericSend>
		 return error;
 80073a2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80073a6:	e130      	b.n	800760a <SendQuery+0x2d2>
	}


	modH->au16regs = telegram.au16reg;
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	659a      	str	r2, [r3, #88]	; 0x58

	// telegram header
	modH->au8Buffer[ ID ]         = telegram.u8id;
 80073ae:	783a      	ldrb	r2, [r7, #0]
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	74da      	strb	r2, [r3, #19]
	modH->au8Buffer[ FUNC ]       = telegram.u8fct;
 80073b4:	787a      	ldrb	r2, [r7, #1]
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	751a      	strb	r2, [r3, #20]
	modH->au8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 80073ba:	887b      	ldrh	r3, [r7, #2]
 80073bc:	0a1b      	lsrs	r3, r3, #8
 80073be:	b29b      	uxth	r3, r3
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	755a      	strb	r2, [r3, #21]
	modH->au8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 80073c6:	887b      	ldrh	r3, [r7, #2]
 80073c8:	b2da      	uxtb	r2, r3
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 80073ce:	787b      	ldrb	r3, [r7, #1]
 80073d0:	3b01      	subs	r3, #1
 80073d2:	2b0f      	cmp	r3, #15
 80073d4:	f200 8106 	bhi.w	80075e4 <SendQuery+0x2ac>
 80073d8:	a201      	add	r2, pc, #4	; (adr r2, 80073e0 <SendQuery+0xa8>)
 80073da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073de:	bf00      	nop
 80073e0:	08007421 	.word	0x08007421
 80073e4:	08007421 	.word	0x08007421
 80073e8:	08007421 	.word	0x08007421
 80073ec:	08007421 	.word	0x08007421
 80073f0:	0800743f 	.word	0x0800743f
 80073f4:	08007463 	.word	0x08007463
 80073f8:	080075e5 	.word	0x080075e5
 80073fc:	080075e5 	.word	0x080075e5
 8007400:	080075e5 	.word	0x080075e5
 8007404:	080075e5 	.word	0x080075e5
 8007408:	080075e5 	.word	0x080075e5
 800740c:	080075e5 	.word	0x080075e5
 8007410:	080075e5 	.word	0x080075e5
 8007414:	080075e5 	.word	0x080075e5
 8007418:	08007489 	.word	0x08007489
 800741c:	0800754b 	.word	0x0800754b
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8007420:	88bb      	ldrh	r3, [r7, #4]
 8007422:	0a1b      	lsrs	r3, r3, #8
 8007424:	b29b      	uxth	r3, r3
 8007426:	b2da      	uxtb	r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800742c:	88bb      	ldrh	r3, [r7, #4]
 800742e:	b2da      	uxtb	r2, r3
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	2206      	movs	r2, #6
 8007438:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 800743c:	e0d2      	b.n	80075e4 <SendQuery+0x2ac>
	case MB_FC_WRITE_COIL:
	    modH->au8Buffer[ NB_HI ]      = ((modH->au16regs[0] > 0) ? 0xff : 0);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007442:	881b      	ldrh	r3, [r3, #0]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d001      	beq.n	800744c <SendQuery+0x114>
 8007448:	22ff      	movs	r2, #255	; 0xff
 800744a:	e000      	b.n	800744e <SendQuery+0x116>
 800744c:	2200      	movs	r2, #0
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = 0;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2200      	movs	r2, #0
 8007456:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2206      	movs	r2, #6
 800745c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 8007460:	e0c0      	b.n	80075e4 <SendQuery+0x2ac>
	case MB_FC_WRITE_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte(modH->au16regs[0]);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007466:	881b      	ldrh	r3, [r3, #0]
 8007468:	0a1b      	lsrs	r3, r3, #8
 800746a:	b29b      	uxth	r3, r3
 800746c:	b2da      	uxtb	r2, r3
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte(modH->au16regs[0]);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	b2da      	uxtb	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2206      	movs	r2, #6
 8007482:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 8007486:	e0ad      	b.n	80075e4 <SendQuery+0x2ac>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 8007488:	88bb      	ldrh	r3, [r7, #4]
 800748a:	091b      	lsrs	r3, r3, #4
 800748c:	b29b      	uxth	r3, r3
 800748e:	747b      	strb	r3, [r7, #17]
	    u8bytesno = u8regsno * 2;
 8007490:	7c7b      	ldrb	r3, [r7, #17]
 8007492:	005b      	lsls	r3, r3, #1
 8007494:	75fb      	strb	r3, [r7, #23]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8007496:	88bb      	ldrh	r3, [r7, #4]
 8007498:	f003 030f 	and.w	r3, r3, #15
 800749c:	b29b      	uxth	r3, r3
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d005      	beq.n	80074ae <SendQuery+0x176>
	    {
	        u8bytesno++;
 80074a2:	7dfb      	ldrb	r3, [r7, #23]
 80074a4:	3301      	adds	r3, #1
 80074a6:	75fb      	strb	r3, [r7, #23]
	        u8regsno++;
 80074a8:	7c7b      	ldrb	r3, [r7, #17]
 80074aa:	3301      	adds	r3, #1
 80074ac:	747b      	strb	r3, [r7, #17]
	    }

	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80074ae:	88bb      	ldrh	r3, [r7, #4]
 80074b0:	0a1b      	lsrs	r3, r3, #8
 80074b2:	b29b      	uxth	r3, r3
 80074b4:	b2da      	uxtb	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80074ba:	88bb      	ldrh	r3, [r7, #4]
 80074bc:	b2da      	uxtb	r2, r3
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = u8bytesno;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	7dfa      	ldrb	r2, [r7, #23]
 80074c6:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2207      	movs	r2, #7
 80074cc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	    for (uint16_t i = 0; i < u8bytesno; i++)
 80074d0:	2300      	movs	r3, #0
 80074d2:	82bb      	strh	r3, [r7, #20]
 80074d4:	e033      	b.n	800753e <SendQuery+0x206>
	    {
	        if(i%2)
 80074d6:	8abb      	ldrh	r3, [r7, #20]
 80074d8:	f003 0301 	and.w	r3, r3, #1
 80074dc:	b29b      	uxth	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d010      	beq.n	8007504 <SendQuery+0x1cc>
	        {
	            modH->au8Buffer[ modH->u8BufferSize ] = lowByte( modH->au16regs[ i/2 ] );
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80074e6:	8abb      	ldrh	r3, [r7, #20]
 80074e8:	085b      	lsrs	r3, r3, #1
 80074ea:	b29b      	uxth	r3, r3
 80074ec:	005b      	lsls	r3, r3, #1
 80074ee:	4413      	add	r3, r2
 80074f0:	881a      	ldrh	r2, [r3, #0]
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80074f8:	4619      	mov	r1, r3
 80074fa:	b2d2      	uxtb	r2, r2
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	440b      	add	r3, r1
 8007500:	74da      	strb	r2, [r3, #19]
 8007502:	e011      	b.n	8007528 <SendQuery+0x1f0>
	        }
	        else
	        {
	        	 modH->au8Buffer[  modH->u8BufferSize ] = highByte(  modH->au16regs[ i/2] );
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007508:	8abb      	ldrh	r3, [r7, #20]
 800750a:	085b      	lsrs	r3, r3, #1
 800750c:	b29b      	uxth	r3, r3
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	4413      	add	r3, r2
 8007512:	881b      	ldrh	r3, [r3, #0]
 8007514:	0a1b      	lsrs	r3, r3, #8
 8007516:	b29a      	uxth	r2, r3
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800751e:	4619      	mov	r1, r3
 8007520:	b2d2      	uxtb	r2, r2
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	440b      	add	r3, r1
 8007526:	74da      	strb	r2, [r3, #19]
	        }
	        modH->u8BufferSize++;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800752e:	3301      	adds	r3, #1
 8007530:	b2da      	uxtb	r2, r3
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8007538:	8abb      	ldrh	r3, [r7, #20]
 800753a:	3301      	adds	r3, #1
 800753c:	82bb      	strh	r3, [r7, #20]
 800753e:	7dfb      	ldrb	r3, [r7, #23]
 8007540:	b29b      	uxth	r3, r3
 8007542:	8aba      	ldrh	r2, [r7, #20]
 8007544:	429a      	cmp	r2, r3
 8007546:	d3c6      	bcc.n	80074d6 <SendQuery+0x19e>
	    }
	    break;
 8007548:	e04c      	b.n	80075e4 <SendQuery+0x2ac>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800754a:	88bb      	ldrh	r3, [r7, #4]
 800754c:	0a1b      	lsrs	r3, r3, #8
 800754e:	b29b      	uxth	r3, r3
 8007550:	b2da      	uxtb	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8007556:	88bb      	ldrh	r3, [r7, #4]
 8007558:	b2da      	uxtb	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 800755e:	88bb      	ldrh	r3, [r7, #4]
 8007560:	b2db      	uxtb	r3, r3
 8007562:	005b      	lsls	r3, r3, #1
 8007564:	b2da      	uxtb	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2207      	movs	r2, #7
 800756e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8007572:	2300      	movs	r3, #0
 8007574:	827b      	strh	r3, [r7, #18]
 8007576:	e030      	b.n	80075da <SendQuery+0x2a2>
	    {
	        modH->au8Buffer[  modH->u8BufferSize ] = highByte(  modH->au16regs[ i ] );
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800757c:	8a7b      	ldrh	r3, [r7, #18]
 800757e:	005b      	lsls	r3, r3, #1
 8007580:	4413      	add	r3, r2
 8007582:	881b      	ldrh	r3, [r3, #0]
 8007584:	0a1b      	lsrs	r3, r3, #8
 8007586:	b29a      	uxth	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800758e:	4619      	mov	r1, r3
 8007590:	b2d2      	uxtb	r2, r2
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	440b      	add	r3, r1
 8007596:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800759e:	3301      	adds	r3, #1
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	        modH->au8Buffer[  modH->u8BufferSize ] = lowByte(  modH->au16regs[ i ] );
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80075ac:	8a7b      	ldrh	r3, [r7, #18]
 80075ae:	005b      	lsls	r3, r3, #1
 80075b0:	4413      	add	r3, r2
 80075b2:	881a      	ldrh	r2, [r3, #0]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80075ba:	4619      	mov	r1, r3
 80075bc:	b2d2      	uxtb	r2, r2
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	440b      	add	r3, r1
 80075c2:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80075ca:	3301      	adds	r3, #1
 80075cc:	b2da      	uxtb	r2, r3
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80075d4:	8a7b      	ldrh	r3, [r7, #18]
 80075d6:	3301      	adds	r3, #1
 80075d8:	827b      	strh	r3, [r7, #18]
 80075da:	88bb      	ldrh	r3, [r7, #4]
 80075dc:	8a7a      	ldrh	r2, [r7, #18]
 80075de:	429a      	cmp	r2, r3
 80075e0:	d3ca      	bcc.n	8007578 <SendQuery+0x240>
	    }
	    break;
 80075e2:	bf00      	nop
	}

	xSemaphoreGive(modH->ModBusSphrHandle);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80075ea:	2300      	movs	r3, #0
 80075ec:	2200      	movs	r2, #0
 80075ee:	2100      	movs	r1, #0
 80075f0:	f7fc fe12 	bl	8004218 <xQueueGenericSend>

	sendTxBuffer(modH);
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 fbe7 	bl	8007dc8 <sendTxBuffer>
	modH->i8state = COM_WAITING;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	2201      	movs	r2, #1
 80075fe:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	modH->i8lastError = 0;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	749a      	strb	r2, [r3, #18]
	return 0;
 8007608:	2300      	movs	r3, #0


}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop

08007614 <StartTaskModbusMaster>:




void StartTaskModbusMaster(void *argument)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08a      	sub	sp, #40	; 0x28
 8007618:	af02      	add	r7, sp, #8
 800761a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	61fb      	str	r3, [r7, #28]
  modbus_t telegram;

  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007624:	f107 0108 	add.w	r1, r7, #8
 8007628:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800762c:	4618      	mov	r0, r3
 800762e:	f7fc ff81 	bl	8004534 <xQueueReceive>

	  /*Format and Send query */
	  SendQuery(modH, telegram);
 8007632:	f107 0308 	add.w	r3, r7, #8
 8007636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007638:	69f8      	ldr	r0, [r7, #28]
 800763a:	f7ff fe7d 	bl	8007338 <SendQuery>

	  /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
	  ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800763e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007642:	2001      	movs	r0, #1
 8007644:	f7fe faf4 	bl	8005c30 <ulTaskNotifyTake>
 8007648:	61b8      	str	r0, [r7, #24]
	  modH->i8lastError = 0;
 800764a:	69fb      	ldr	r3, [r7, #28]
 800764c:	2200      	movs	r2, #0
 800764e:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue == NO_REPLY)
 8007650:	69bb      	ldr	r3, [r7, #24]
 8007652:	2bff      	cmp	r3, #255	; 0xff
 8007654:	d10f      	bne.n	8007676 <StartTaskModbusMaster+0x62>
      {
    	  modH->i8state = COM_IDLE;
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
    	  modH->i8lastError = NO_REPLY;
 800765e:	69fb      	ldr	r3, [r7, #28]
 8007660:	22ff      	movs	r2, #255	; 0xff
 8007662:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800766a:	3301      	adds	r3, #1
 800766c:	b29a      	uxth	r2, r3
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    	  continue;
 8007674:	e09a      	b.n	80077ac <StartTaskModbusMaster+0x198>
      }

	  modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800767a:	4618      	mov	r0, r3
 800767c:	f7fd f93e 	bl	80048fc <uxQueueMessagesWaiting>
 8007680:	4603      	mov	r3, r0
 8007682:	b2da      	uxtb	r2, r3
 8007684:	69fb      	ldr	r3, [r7, #28]
 8007686:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	  int8_t i8state = getRxBuffer(modH);
 800768a:	69f8      	ldr	r0, [r7, #28]
 800768c:	f000 f97c 	bl	8007988 <getRxBuffer>
 8007690:	4603      	mov	r3, r0
 8007692:	75fb      	strb	r3, [r7, #23]
	  //modH->u8lastError = i8state;

	  if (i8state < 6){
 8007694:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007698:	2b05      	cmp	r3, #5
 800769a:	dc1d      	bgt.n	80076d8 <StartTaskModbusMaster+0xc4>
		  //The size of the frame is invalid
		  xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076a0:	2100      	movs	r1, #0
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fc fc18 	bl	8003ed8 <xQueueGenericReset>
		  modH->i8state = COM_IDLE;
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		  modH->i8lastError = ERR_BAD_SIZE;
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	22fa      	movs	r2, #250	; 0xfa
 80076b4:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80076bc:	3301      	adds	r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		  xSemaphoreGive(modH->ModBusSphrHandle);
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80076cc:	2300      	movs	r3, #0
 80076ce:	2200      	movs	r2, #0
 80076d0:	2100      	movs	r1, #0
 80076d2:	f7fc fda1 	bl	8004218 <xQueueGenericSend>
		  continue;
 80076d6:	e069      	b.n	80077ac <StartTaskModbusMaster+0x198>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 80076d8:	69fb      	ldr	r3, [r7, #28]
 80076da:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80076de:	2300      	movs	r3, #0
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	2300      	movs	r3, #0
 80076e4:	2200      	movs	r2, #0
 80076e6:	2103      	movs	r1, #3
 80076e8:	f7fe fd42 	bl	8006170 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  uint8_t u8exception = validateAnswer(modH);
 80076ec:	69f8      	ldr	r0, [r7, #28]
 80076ee:	f000 f8dd 	bl	80078ac <validateAnswer>
 80076f2:	4603      	mov	r3, r0
 80076f4:	75bb      	strb	r3, [r7, #22]
	  if (u8exception != 0)
 80076f6:	7dbb      	ldrb	r3, [r7, #22]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00c      	beq.n	8007716 <StartTaskModbusMaster+0x102>
	  {
		 modH->i8state = COM_IDLE;
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 800770a:	2300      	movs	r3, #0
 800770c:	2200      	movs	r2, #0
 800770e:	2100      	movs	r1, #0
 8007710:	f7fc fd82 	bl	8004218 <xQueueGenericSend>
	     continue;
 8007714:	e04a      	b.n	80077ac <StartTaskModbusMaster+0x198>
	  }



	  modH->i8lastError = u8exception;
 8007716:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	749a      	strb	r2, [r3, #18]

	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007724:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007728:	4618      	mov	r0, r3
 800772a:	f7fc ffdf 	bl	80046ec <xQueueSemaphoreTake>
	  // process answer
	  switch( modH->au8Buffer[ FUNC ] )
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	7d1b      	ldrb	r3, [r3, #20]
 8007732:	3b01      	subs	r3, #1
 8007734:	2b0f      	cmp	r3, #15
 8007736:	d82b      	bhi.n	8007790 <StartTaskModbusMaster+0x17c>
 8007738:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <StartTaskModbusMaster+0x12c>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007781 	.word	0x08007781
 8007744:	08007781 	.word	0x08007781
 8007748:	08007789 	.word	0x08007789
 800774c:	08007789 	.word	0x08007789
 8007750:	08007791 	.word	0x08007791
 8007754:	08007791 	.word	0x08007791
 8007758:	08007791 	.word	0x08007791
 800775c:	08007791 	.word	0x08007791
 8007760:	08007791 	.word	0x08007791
 8007764:	08007791 	.word	0x08007791
 8007768:	08007791 	.word	0x08007791
 800776c:	08007791 	.word	0x08007791
 8007770:	08007791 	.word	0x08007791
 8007774:	08007791 	.word	0x08007791
 8007778:	08007791 	.word	0x08007791
 800777c:	08007791 	.word	0x08007791
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to au16regs buffer
	      get_FC1(modH);
 8007780:	69f8      	ldr	r0, [r7, #28]
 8007782:	f000 f815 	bl	80077b0 <get_FC1>
	      break;
 8007786:	e004      	b.n	8007792 <StartTaskModbusMaster+0x17e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to au16regs buffer
	      get_FC3(modH);
 8007788:	69f8      	ldr	r0, [r7, #28]
 800778a:	f000 f863 	bl	8007854 <get_FC3>
	      break;
 800778e:	e000      	b.n	8007792 <StartTaskModbusMaster+0x17e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8007790:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	  xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80077a0:	2300      	movs	r3, #0
 80077a2:	2200      	movs	r2, #0
 80077a4:	2100      	movs	r1, #0
 80077a6:	f7fc fd37 	bl	8004218 <xQueueGenericSend>
	  //return i8state;
	  continue;
 80077aa:	bf00      	nop
  {
 80077ac:	e738      	b.n	8007620 <StartTaskModbusMaster+0xc>
 80077ae:	bf00      	nop

080077b0 <get_FC1>:
 *
 * @ingroup register
 * TODO: finish its implementation
 */
void get_FC1(modbusHandler_t *modH)
{
 80077b0:	b590      	push	{r4, r7, lr}
 80077b2:	b085      	sub	sp, #20
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80077b8:	2303      	movs	r3, #3
 80077ba:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 80077bc:	2300      	movs	r3, #0
 80077be:	73fb      	strb	r3, [r7, #15]
 80077c0:	e03f      	b.n	8007842 <get_FC1+0x92>

        if(i%2)
 80077c2:	7bfb      	ldrb	r3, [r7, #15]
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d01a      	beq.n	8007804 <get_FC1+0x54>
        {
        	modH->au16regs[i/2]= word(modH->au8Buffer[i+u8byte], lowByte(modH->au16regs[i/2]));
 80077ce:	7bfa      	ldrb	r2, [r7, #15]
 80077d0:	7bbb      	ldrb	r3, [r7, #14]
 80077d2:	4413      	add	r3, r2
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	4413      	add	r3, r2
 80077d8:	7cd8      	ldrb	r0, [r3, #19]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80077de:	7bfb      	ldrb	r3, [r7, #15]
 80077e0:	085b      	lsrs	r3, r3, #1
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	4413      	add	r3, r2
 80077e8:	881b      	ldrh	r3, [r3, #0]
 80077ea:	b2d9      	uxtb	r1, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80077f0:	7bfb      	ldrb	r3, [r7, #15]
 80077f2:	085b      	lsrs	r3, r3, #1
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	18d4      	adds	r4, r2, r3
 80077fa:	f000 fa6b 	bl	8007cd4 <word>
 80077fe:	4603      	mov	r3, r0
 8007800:	8023      	strh	r3, [r4, #0]
 8007802:	e01b      	b.n	800783c <get_FC1+0x8c>
        }
        else
        {

        	modH->au16regs[i/2]= word(highByte(modH->au16regs[i/2]), modH->au8Buffer[i+u8byte]);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007808:	7bfb      	ldrb	r3, [r7, #15]
 800780a:	085b      	lsrs	r3, r3, #1
 800780c:	b2db      	uxtb	r3, r3
 800780e:	005b      	lsls	r3, r3, #1
 8007810:	4413      	add	r3, r2
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	0a1b      	lsrs	r3, r3, #8
 8007816:	b29b      	uxth	r3, r3
 8007818:	b2d8      	uxtb	r0, r3
 800781a:	7bfa      	ldrb	r2, [r7, #15]
 800781c:	7bbb      	ldrb	r3, [r7, #14]
 800781e:	4413      	add	r3, r2
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	4413      	add	r3, r2
 8007824:	7cd9      	ldrb	r1, [r3, #19]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800782a:	7bfb      	ldrb	r3, [r7, #15]
 800782c:	085b      	lsrs	r3, r3, #1
 800782e:	b2db      	uxtb	r3, r3
 8007830:	005b      	lsls	r3, r3, #1
 8007832:	18d4      	adds	r4, r2, r3
 8007834:	f000 fa4e 	bl	8007cd4 <word>
 8007838:	4603      	mov	r3, r0
 800783a:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 800783c:	7bfb      	ldrb	r3, [r7, #15]
 800783e:	3301      	adds	r3, #1
 8007840:	73fb      	strb	r3, [r7, #15]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	7d5b      	ldrb	r3, [r3, #21]
 8007846:	7bfa      	ldrb	r2, [r7, #15]
 8007848:	429a      	cmp	r2, r3
 800784a:	d3ba      	bcc.n	80077c2 <get_FC1+0x12>
        }

     }
}
 800784c:	bf00      	nop
 800784e:	3714      	adds	r7, #20
 8007850:	46bd      	mov	sp, r7
 8007852:	bd90      	pop	{r4, r7, pc}

08007854 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8007854:	b590      	push	{r4, r7, lr}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800785c:	2303      	movs	r3, #3
 800785e:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8007860:	2300      	movs	r3, #0
 8007862:	73bb      	strb	r3, [r7, #14]
 8007864:	e017      	b.n	8007896 <get_FC3+0x42>
    {
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 8007866:	7bfb      	ldrb	r3, [r7, #15]
 8007868:	687a      	ldr	r2, [r7, #4]
 800786a:	4413      	add	r3, r2
 800786c:	7cd8      	ldrb	r0, [r3, #19]
 800786e:	7bfb      	ldrb	r3, [r7, #15]
 8007870:	3301      	adds	r3, #1
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	4413      	add	r3, r2
 8007876:	7cd9      	ldrb	r1, [r3, #19]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	18d4      	adds	r4, r2, r3
 8007882:	f000 fa27 	bl	8007cd4 <word>
 8007886:	4603      	mov	r3, r0
 8007888:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	3302      	adds	r3, #2
 800788e:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8007890:	7bbb      	ldrb	r3, [r7, #14]
 8007892:	3301      	adds	r3, #1
 8007894:	73bb      	strb	r3, [r7, #14]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	7d5b      	ldrb	r3, [r3, #21]
 800789a:	085b      	lsrs	r3, r3, #1
 800789c:	b2db      	uxtb	r3, r3
 800789e:	7bba      	ldrb	r2, [r7, #14]
 80078a0:	429a      	cmp	r2, r3
 80078a2:	d3e0      	bcc.n	8007866 <get_FC3+0x12>
    }
}
 80078a4:	bf00      	nop
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd90      	pop	{r4, r7, pc}

080078ac <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc
    uint16_t u16MsgCRC =
        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80078ba:	3b02      	subs	r3, #2
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	4413      	add	r3, r2
 80078c0:	7cdb      	ldrb	r3, [r3, #19]
 80078c2:	021b      	lsls	r3, r3, #8
         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80078c4:	b21a      	sxth	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80078cc:	3b01      	subs	r3, #1
 80078ce:	6879      	ldr	r1, [r7, #4]
 80078d0:	440b      	add	r3, r1
 80078d2:	7cdb      	ldrb	r3, [r3, #19]
 80078d4:	b21b      	sxth	r3, r3
 80078d6:	4313      	orrs	r3, r2
 80078d8:	b21b      	sxth	r3, r3
    uint16_t u16MsgCRC =
 80078da:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->au8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f103 0213 	add.w	r2, r3, #19
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80078e8:	3b02      	subs	r3, #2
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	4619      	mov	r1, r3
 80078ee:	4610      	mov	r0, r2
 80078f0:	f000 fa03 	bl	8007cfa <calcCRC>
 80078f4:	4603      	mov	r3, r0
 80078f6:	461a      	mov	r2, r3
 80078f8:	89bb      	ldrh	r3, [r7, #12]
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d009      	beq.n	8007912 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007904:	3301      	adds	r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return NO_REPLY;
 800790e:	23ff      	movs	r3, #255	; 0xff
 8007910:	e034      	b.n	800797c <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->au8Buffer[ FUNC ] & 0x80) != 0)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	7d1b      	ldrb	r3, [r3, #20]
 8007916:	b25b      	sxtb	r3, r3
 8007918:	2b00      	cmp	r3, #0
 800791a:	da09      	bge.n	8007930 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007922:	3301      	adds	r3, #1
 8007924:	b29a      	uxth	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return ERR_EXCEPTION;
 800792c:	23fb      	movs	r3, #251	; 0xfb
 800792e:	e025      	b.n	800797c <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 8007930:	2300      	movs	r3, #0
 8007932:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8007934:	2300      	movs	r3, #0
 8007936:	73bb      	strb	r3, [r7, #14]
 8007938:	e00c      	b.n	8007954 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->au8Buffer[FUNC])
 800793a:	7bbb      	ldrb	r3, [r7, #14]
 800793c:	4a11      	ldr	r2, [pc, #68]	; (8007984 <validateAnswer+0xd8>)
 800793e:	5cd2      	ldrb	r2, [r2, r3]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	7d1b      	ldrb	r3, [r3, #20]
 8007944:	429a      	cmp	r2, r3
 8007946:	d102      	bne.n	800794e <validateAnswer+0xa2>
        {
            isSupported = 1;
 8007948:	2301      	movs	r3, #1
 800794a:	73fb      	strb	r3, [r7, #15]
            break;
 800794c:	e005      	b.n	800795a <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800794e:	7bbb      	ldrb	r3, [r7, #14]
 8007950:	3301      	adds	r3, #1
 8007952:	73bb      	strb	r3, [r7, #14]
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	2b07      	cmp	r3, #7
 8007958:	d9ef      	bls.n	800793a <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800795a:	7bfb      	ldrb	r3, [r7, #15]
 800795c:	f083 0301 	eor.w	r3, r3, #1
 8007960:	b2db      	uxtb	r3, r3
 8007962:	2b00      	cmp	r3, #0
 8007964:	d009      	beq.n	800797a <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800796c:	3301      	adds	r3, #1
 800796e:	b29a      	uxth	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return EXC_FUNC_CODE;
 8007976:	2301      	movs	r3, #1
 8007978:	e000      	b.n	800797c <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	08008654 	.word	0x08008654

08007988 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int8_t getRxBuffer(modbusHandler_t *modH)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
    bool bBuffOverflow = false;
 8007990:	2300      	movs	r3, #0
 8007992:	72fb      	strb	r3, [r7, #11]
    int i;
    if (modH->EN_Port)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	68db      	ldr	r3, [r3, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d007      	beq.n	80079ac <getRxBuffer+0x24>
    {
    	//digitalWrite( u8txenpin, LOW );
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	68d8      	ldr	r0, [r3, #12]
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	8a1b      	ldrh	r3, [r3, #16]
 80079a4:	2200      	movs	r2, #0
 80079a6:	4619      	mov	r1, r3
 80079a8:	f7f9 f98e 	bl	8000cc8 <HAL_GPIO_WritePin>
    }


    modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7fc ffa3 	bl	80048fc <uxQueueMessagesWaiting>
 80079b6:	4603      	mov	r3, r0
 80079b8:	b2da      	uxtb	r2, r3
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    for(i = 0; i<  modH->u8BufferSize; i++ )
 80079c0:	2300      	movs	r3, #0
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	e00d      	b.n	80079e2 <getRxBuffer+0x5a>
   	{
   		  xQueueReceive(modH->QueueModbusHandle, &modH->au8Buffer[i], 0);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	3310      	adds	r3, #16
 80079ce:	687a      	ldr	r2, [r7, #4]
 80079d0:	4413      	add	r3, r2
 80079d2:	3303      	adds	r3, #3
 80079d4:	2200      	movs	r2, #0
 80079d6:	4619      	mov	r1, r3
 80079d8:	f7fc fdac 	bl	8004534 <xQueueReceive>
    for(i = 0; i<  modH->u8BufferSize; i++ )
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	3301      	adds	r3, #1
 80079e0:	60fb      	str	r3, [r7, #12]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80079e8:	461a      	mov	r2, r3
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	4293      	cmp	r3, r2
 80079ee:	dbea      	blt.n	80079c6 <getRxBuffer+0x3e>
   	}

    modH->u16InCnt++;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079f6:	3301      	adds	r3, #1
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c


    if (bBuffOverflow)
 8007a00:	7afb      	ldrb	r3, [r7, #11]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d00a      	beq.n	8007a1c <getRxBuffer+0x94>
    {
    	modH->u16errCnt++;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	b29a      	uxth	r2, r3
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return ERR_BUFF_OVERFLOW;  //using queues this will not happen
 8007a16:	f06f 0302 	mvn.w	r3, #2
 8007a1a:	e003      	b.n	8007a24 <getRxBuffer+0x9c>
    }
    return modH->u8BufferSize;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007a22:	b25b      	sxtb	r3, r3
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	3710      	adds	r7, #16
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	bd80      	pop	{r7, pc}

08007a2c <HAL_UART_RxCpltCallback>:
 * This is the callback for HAL interrupt of UART RX
 *
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8007a2c:	b590      	push	{r4, r7, lr}
 8007a2e:	b087      	sub	sp, #28
 8007a30:	af02      	add	r7, sp, #8
 8007a32:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007a34:	2300      	movs	r3, #0
 8007a36:	60bb      	str	r3, [r7, #8]

    int i;
    for (i = 0; i < numberHandlers; i++ )
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]
 8007a3c:	e03b      	b.n	8007ab6 <HAL_UART_RxCpltCallback+0x8a>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8007a3e:	4a23      	ldr	r2, [pc, #140]	; (8007acc <HAL_UART_RxCpltCallback+0xa0>)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	687a      	ldr	r2, [r7, #4]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d130      	bne.n	8007ab0 <HAL_UART_RxCpltCallback+0x84>
    	{
    		xQueueSendToBackFromISR( mHandlers[i]->QueueModbusHandle, &mHandlers[i]->dataRX, pdFALSE);
 8007a4e:	4a1f      	ldr	r2, [pc, #124]	; (8007acc <HAL_UART_RxCpltCallback+0xa0>)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a56:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8007a58:	4a1c      	ldr	r2, [pc, #112]	; (8007acc <HAL_UART_RxCpltCallback+0xa0>)
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a60:	f103 0171 	add.w	r1, r3, #113	; 0x71
 8007a64:	2300      	movs	r3, #0
 8007a66:	2200      	movs	r2, #0
 8007a68:	f7fc fcd0 	bl	800440c <xQueueGenericSendFromISR>
    		HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8007a6c:	4a17      	ldr	r2, [pc, #92]	; (8007acc <HAL_UART_RxCpltCallback+0xa0>)
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a74:	6858      	ldr	r0, [r3, #4]
 8007a76:	4a15      	ldr	r2, [pc, #84]	; (8007acc <HAL_UART_RxCpltCallback+0xa0>)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a7e:	3371      	adds	r3, #113	; 0x71
 8007a80:	2201      	movs	r2, #1
 8007a82:	4619      	mov	r1, r3
 8007a84:	f7fa ffe2 	bl	8002a4c <HAL_UART_Receive_IT>
    		xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8007a88:	4a10      	ldr	r2, [pc, #64]	; (8007acc <HAL_UART_RxCpltCallback+0xa0>)
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a90:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007a94:	f7fd fc06 	bl	80052a4 <xTaskGetTickCountFromISR>
 8007a98:	4601      	mov	r1, r0
 8007a9a:	f107 0208 	add.w	r2, r7, #8
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	4613      	mov	r3, r2
 8007aa4:	460a      	mov	r2, r1
 8007aa6:	2107      	movs	r1, #7
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	f7fe fb61 	bl	8006170 <xTimerGenericCommand>
    		break;
 8007aae:	e008      	b.n	8007ac2 <HAL_UART_RxCpltCallback+0x96>
    for (i = 0; i < numberHandlers; i++ )
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	60fb      	str	r3, [r7, #12]
 8007ab6:	4b06      	ldr	r3, [pc, #24]	; (8007ad0 <HAL_UART_RxCpltCallback+0xa4>)
 8007ab8:	781b      	ldrb	r3, [r3, #0]
 8007aba:	461a      	mov	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	dbbd      	blt.n	8007a3e <HAL_UART_RxCpltCallback+0x12>
    	}
    }


}
 8007ac2:	bf00      	nop
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd90      	pop	{r4, r7, pc}
 8007aca:	bf00      	nop
 8007acc:	2000193c 	.word	0x2000193c
 8007ad0:	20001934 	.word	0x20001934

08007ad4 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc
	    uint16_t u16MsgCRC =
	        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007ae2:	3b02      	subs	r3, #2
 8007ae4:	687a      	ldr	r2, [r7, #4]
 8007ae6:	4413      	add	r3, r2
 8007ae8:	7cdb      	ldrb	r3, [r3, #19]
 8007aea:	021b      	lsls	r3, r3, #8
	         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8007aec:	b21a      	sxth	r2, r3
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007af4:	3b01      	subs	r3, #1
 8007af6:	6879      	ldr	r1, [r7, #4]
 8007af8:	440b      	add	r3, r1
 8007afa:	7cdb      	ldrb	r3, [r3, #19]
 8007afc:	b21b      	sxth	r3, r3
 8007afe:	4313      	orrs	r3, r2
 8007b00:	b21b      	sxth	r3, r3
	    uint16_t u16MsgCRC =
 8007b02:	81bb      	strh	r3, [r7, #12]
	    if ( calcCRC( modH->au8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f103 0213 	add.w	r2, r3, #19
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007b10:	3b02      	subs	r3, #2
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	4619      	mov	r1, r3
 8007b16:	4610      	mov	r0, r2
 8007b18:	f000 f8ef 	bl	8007cfa <calcCRC>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	461a      	mov	r2, r3
 8007b20:	89bb      	ldrh	r3, [r7, #12]
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d009      	beq.n	8007b3a <validateRequest+0x66>
	    {
	    	modH->u16errCnt ++;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	b29a      	uxth	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	        return NO_REPLY;
 8007b36:	23ff      	movs	r3, #255	; 0xff
 8007b38:	e0c6      	b.n	8007cc8 <validateRequest+0x1f4>
	    }

	    // check fct code
	    bool isSupported = false;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8007b3e:	2300      	movs	r3, #0
 8007b40:	73bb      	strb	r3, [r7, #14]
 8007b42:	e00c      	b.n	8007b5e <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->au8Buffer[FUNC])
 8007b44:	7bbb      	ldrb	r3, [r7, #14]
 8007b46:	4a62      	ldr	r2, [pc, #392]	; (8007cd0 <validateRequest+0x1fc>)
 8007b48:	5cd2      	ldrb	r2, [r2, r3]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	7d1b      	ldrb	r3, [r3, #20]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d102      	bne.n	8007b58 <validateRequest+0x84>
	        {
	            isSupported = 1;
 8007b52:	2301      	movs	r3, #1
 8007b54:	73fb      	strb	r3, [r7, #15]
	            break;
 8007b56:	e005      	b.n	8007b64 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8007b58:	7bbb      	ldrb	r3, [r7, #14]
 8007b5a:	3301      	adds	r3, #1
 8007b5c:	73bb      	strb	r3, [r7, #14]
 8007b5e:	7bbb      	ldrb	r3, [r7, #14]
 8007b60:	2b07      	cmp	r3, #7
 8007b62:	d9ef      	bls.n	8007b44 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8007b64:	7bfb      	ldrb	r3, [r7, #15]
 8007b66:	f083 0301 	eor.w	r3, r3, #1
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d009      	beq.n	8007b84 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b76:	3301      	adds	r3, #1
 8007b78:	b29a      	uxth	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	        return EXC_FUNC_CODE;
 8007b80:	2301      	movs	r3, #1
 8007b82:	e0a1      	b.n	8007cc8 <validateRequest+0x1f4>
	    }

	    // check start address & nb range
	    uint16_t u16regs = 0;
 8007b84:	2300      	movs	r3, #0
 8007b86:	817b      	strh	r3, [r7, #10]
	    uint8_t u8regs;
	    switch ( modH->au8Buffer[ FUNC ] )
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	7d1b      	ldrb	r3, [r3, #20]
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	2b0f      	cmp	r3, #15
 8007b90:	f200 8099 	bhi.w	8007cc6 <validateRequest+0x1f2>
 8007b94:	a201      	add	r2, pc, #4	; (adr r2, 8007b9c <validateRequest+0xc8>)
 8007b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b9a:	bf00      	nop
 8007b9c:	08007bdd 	.word	0x08007bdd
 8007ba0:	08007bdd 	.word	0x08007bdd
 8007ba4:	08007c77 	.word	0x08007c77
 8007ba8:	08007c77 	.word	0x08007c77
 8007bac:	08007c25 	.word	0x08007c25
 8007bb0:	08007c4f 	.word	0x08007c4f
 8007bb4:	08007cc7 	.word	0x08007cc7
 8007bb8:	08007cc7 	.word	0x08007cc7
 8007bbc:	08007cc7 	.word	0x08007cc7
 8007bc0:	08007cc7 	.word	0x08007cc7
 8007bc4:	08007cc7 	.word	0x08007cc7
 8007bc8:	08007cc7 	.word	0x08007cc7
 8007bcc:	08007cc7 	.word	0x08007cc7
 8007bd0:	08007cc7 	.word	0x08007cc7
 8007bd4:	08007bdd 	.word	0x08007bdd
 8007bd8:	08007c77 	.word	0x08007c77
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	7d5a      	ldrb	r2, [r3, #21]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	7d9b      	ldrb	r3, [r3, #22]
 8007be4:	4619      	mov	r1, r3
 8007be6:	4610      	mov	r0, r2
 8007be8:	f000 f874 	bl	8007cd4 <word>
 8007bec:	4603      	mov	r3, r0
 8007bee:	091b      	lsrs	r3, r3, #4
 8007bf0:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]) /16;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	7dda      	ldrb	r2, [r3, #23]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	7e1b      	ldrb	r3, [r3, #24]
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	f000 f869 	bl	8007cd4 <word>
 8007c02:	4603      	mov	r3, r0
 8007c04:	091b      	lsrs	r3, r3, #4
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	b29a      	uxth	r2, r3
 8007c0a:	897b      	ldrh	r3, [r7, #10]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8007c10:	897b      	ldrh	r3, [r7, #10]
 8007c12:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007c1a:	7a7a      	ldrb	r2, [r7, #9]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d94b      	bls.n	8007cb8 <validateRequest+0x1e4>
 8007c20:	2302      	movs	r3, #2
 8007c22:	e051      	b.n	8007cc8 <validateRequest+0x1f4>
	        break;
	    case MB_FC_WRITE_COIL:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	7d5a      	ldrb	r2, [r3, #21]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	7d9b      	ldrb	r3, [r3, #22]
 8007c2c:	4619      	mov	r1, r3
 8007c2e:	4610      	mov	r0, r2
 8007c30:	f000 f850 	bl	8007cd4 <word>
 8007c34:	4603      	mov	r3, r0
 8007c36:	091b      	lsrs	r3, r3, #4
 8007c38:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8007c3a:	897b      	ldrh	r3, [r7, #10]
 8007c3c:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007c44:	7a7a      	ldrb	r2, [r7, #9]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d938      	bls.n	8007cbc <validateRequest+0x1e8>
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	e03c      	b.n	8007cc8 <validateRequest+0x1f4>
	        break;
	    case MB_FC_WRITE_REGISTER :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	7d5a      	ldrb	r2, [r3, #21]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	7d9b      	ldrb	r3, [r3, #22]
 8007c56:	4619      	mov	r1, r3
 8007c58:	4610      	mov	r0, r2
 8007c5a:	f000 f83b 	bl	8007cd4 <word>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8007c62:	897b      	ldrh	r3, [r7, #10]
 8007c64:	727b      	strb	r3, [r7, #9]
	        if (u8regs >modH-> u8regsize) return EXC_ADDR_RANGE;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007c6c:	7a7a      	ldrb	r2, [r7, #9]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d926      	bls.n	8007cc0 <validateRequest+0x1ec>
 8007c72:	2302      	movs	r3, #2
 8007c74:	e028      	b.n	8007cc8 <validateRequest+0x1f4>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	7d5a      	ldrb	r2, [r3, #21]
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	7d9b      	ldrb	r3, [r3, #22]
 8007c7e:	4619      	mov	r1, r3
 8007c80:	4610      	mov	r0, r2
 8007c82:	f000 f827 	bl	8007cd4 <word>
 8007c86:	4603      	mov	r3, r0
 8007c88:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	7dda      	ldrb	r2, [r3, #23]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	7e1b      	ldrb	r3, [r3, #24]
 8007c92:	4619      	mov	r1, r3
 8007c94:	4610      	mov	r0, r2
 8007c96:	f000 f81d 	bl	8007cd4 <word>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	897b      	ldrh	r3, [r7, #10]
 8007ca0:	4413      	add	r3, r2
 8007ca2:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8007ca4:	897b      	ldrh	r3, [r7, #10]
 8007ca6:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007cae:	7a7a      	ldrb	r2, [r7, #9]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d907      	bls.n	8007cc4 <validateRequest+0x1f0>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e007      	b.n	8007cc8 <validateRequest+0x1f4>
	        break;
 8007cb8:	bf00      	nop
 8007cba:	e004      	b.n	8007cc6 <validateRequest+0x1f2>
	        break;
 8007cbc:	bf00      	nop
 8007cbe:	e002      	b.n	8007cc6 <validateRequest+0x1f2>
	        break;
 8007cc0:	bf00      	nop
 8007cc2:	e000      	b.n	8007cc6 <validateRequest+0x1f2>
	        break;
 8007cc4:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8007cc6:	2300      	movs	r3, #0

}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3710      	adds	r7, #16
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	08008654 	.word	0x08008654

08007cd4 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	4603      	mov	r3, r0
 8007cdc:	460a      	mov	r2, r1
 8007cde:	71fb      	strb	r3, [r7, #7]
 8007ce0:	4613      	mov	r3, r2
 8007ce2:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8007ce4:	79bb      	ldrb	r3, [r7, #6]
 8007ce6:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8007ce8:	79fb      	ldrb	r3, [r7, #7]
 8007cea:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8007cec:	89bb      	ldrh	r3, [r7, #12]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3714      	adds	r7, #20
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8007cfa:	b480      	push	{r7}
 8007cfc:	b087      	sub	sp, #28
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
 8007d02:	460b      	mov	r3, r1
 8007d04:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8007d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d0a:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	74fb      	strb	r3, [r7, #19]
 8007d10:	e023      	b.n	8007d5a <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 8007d12:	7cfb      	ldrb	r3, [r7, #19]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	4413      	add	r3, r2
 8007d18:	781b      	ldrb	r3, [r3, #0]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	4053      	eors	r3, r2
 8007d20:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8007d22:	2301      	movs	r3, #1
 8007d24:	74bb      	strb	r3, [r7, #18]
 8007d26:	e012      	b.n	8007d4e <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f003 0301 	and.w	r3, r3, #1
 8007d2e:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	085b      	lsrs	r3, r3, #1
 8007d34:	617b      	str	r3, [r7, #20]
            if (flag)
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d005      	beq.n	8007d48 <calcCRC+0x4e>
                temp ^= 0xA001;
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8007d42:	f083 0301 	eor.w	r3, r3, #1
 8007d46:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8007d48:	7cbb      	ldrb	r3, [r7, #18]
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	74bb      	strb	r3, [r7, #18]
 8007d4e:	7cbb      	ldrb	r3, [r7, #18]
 8007d50:	2b08      	cmp	r3, #8
 8007d52:	d9e9      	bls.n	8007d28 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8007d54:	7cfb      	ldrb	r3, [r7, #19]
 8007d56:	3301      	adds	r3, #1
 8007d58:	74fb      	strb	r3, [r7, #19]
 8007d5a:	7cfa      	ldrb	r2, [r7, #19]
 8007d5c:	78fb      	ldrb	r3, [r7, #3]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d3d7      	bcc.n	8007d12 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	0a1b      	lsrs	r3, r3, #8
 8007d66:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	021b      	lsls	r3, r3, #8
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	b29b      	uxth	r3, r3
 8007d76:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8007d78:	697b      	ldr	r3, [r7, #20]
 8007d7a:	b29b      	uxth	r3, r3

}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	371c      	adds	r7, #28
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	4603      	mov	r3, r0
 8007d90:	6039      	str	r1, [r7, #0]
 8007d92:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->au8Buffer[ FUNC ];  // get the original FUNC code
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	7d1b      	ldrb	r3, [r3, #20]
 8007d98:	73fb      	strb	r3, [r7, #15]

    modH->au8Buffer[ ID ]      = modH->u8id;
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	7a1a      	ldrb	r2, [r3, #8]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	74da      	strb	r2, [r3, #19]
    modH->au8Buffer[ FUNC ]    = u8func + 0x80;
 8007da2:	7bfb      	ldrb	r3, [r7, #15]
 8007da4:	3b80      	subs	r3, #128	; 0x80
 8007da6:	b2da      	uxtb	r2, r3
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	751a      	strb	r2, [r3, #20]
    modH->au8Buffer[ 2 ]       = u8exception;
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	79fa      	ldrb	r2, [r7, #7]
 8007db0:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	2203      	movs	r2, #3
 8007db6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 8007dba:	bf00      	nop
 8007dbc:	3714      	adds	r7, #20
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
	...

08007dc8 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
void sendTxBuffer(modbusHandler_t *modH)
{
 8007dc8:	b590      	push	{r4, r7, lr}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af02      	add	r7, sp, #8
 8007dce:	6078      	str	r0, [r7, #4]
    // append CRC to message
    uint16_t u16crc = calcCRC(modH->au8Buffer, modH->u8BufferSize);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f103 0213 	add.w	r2, r3, #19
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007ddc:	4619      	mov	r1, r3
 8007dde:	4610      	mov	r0, r2
 8007de0:	f7ff ff8b 	bl	8007cfa <calcCRC>
 8007de4:	4603      	mov	r3, r0
 8007de6:	81fb      	strh	r3, [r7, #14]
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8007de8:	89fb      	ldrh	r3, [r7, #14]
 8007dea:	0a1b      	lsrs	r3, r3, #8
 8007dec:	b29a      	uxth	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007df4:	4619      	mov	r1, r3
 8007df6:	b2d2      	uxtb	r2, r2
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	440b      	add	r3, r1
 8007dfc:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007e04:	3301      	adds	r3, #1
 8007e06:	b2da      	uxtb	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007e14:	4619      	mov	r1, r3
 8007e16:	89fb      	ldrh	r3, [r7, #14]
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	440b      	add	r3, r1
 8007e1e:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007e26:	3301      	adds	r3, #1
 8007e28:	b2da      	uxtb	r2, r3
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    if (modH->EN_Port != NULL)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d007      	beq.n	8007e48 <sendTxBuffer+0x80>
    {
        // set RS485 transceiver to transmit mode
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	68d8      	ldr	r0, [r3, #12]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	8a1b      	ldrh	r3, [r3, #16]
 8007e40:	2201      	movs	r2, #1
 8007e42:	4619      	mov	r1, r3
 8007e44:	f7f8 ff40 	bl	8000cc8 <HAL_GPIO_WritePin>
    }

    // transfer buffer to serial line
    //port->write( au8Buffer, u8BufferSize );
    //HAL_UART_Transmit(modH->port, modH->au8Buffer , modH->u8BufferSize, 100);
    HAL_UART_Transmit_IT(modH->port, modH->au8Buffer,  modH->u8BufferSize);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6858      	ldr	r0, [r3, #4]
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f103 0113 	add.w	r1, r3, #19
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	f7fa fd9a 	bl	8002994 <HAL_UART_Transmit_IT>

    ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //wait notification from TXE interrupt
 8007e60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007e64:	2001      	movs	r0, #1
 8007e66:	f7fd fee3 	bl	8005c30 <ulTaskNotifyTake>


     if (modH->EN_Port != NULL)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	68db      	ldr	r3, [r3, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d018      	beq.n	8007ea4 <sendTxBuffer+0xdc>
     {
         // must wait transmission end before changing pin state
         //return RS485 transceiver to receive mode

    	 #if defined(STM32H745xx) || defined(STM32H743xx)  || defined(STM32F303xE)
    	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 8007e72:	e007      	b.n	8007e84 <sendTxBuffer+0xbc>
         #else
    	 while((modH->port->Instance->SR & USART_SR_TC) ==0 )
		 #endif
    	 {
    		taskYIELD();
 8007e74:	4b1f      	ldr	r3, [pc, #124]	; (8007ef4 <sendTxBuffer+0x12c>)
 8007e76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	f3bf 8f6f 	isb	sy
    	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d0ef      	beq.n	8007e74 <sendTxBuffer+0xac>
    	 }
    	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	68d8      	ldr	r0, [r3, #12]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	8a1b      	ldrh	r3, [r3, #16]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	4619      	mov	r1, r3
 8007ea0:	f7f8 ff12 	bl	8000cc8 <HAL_GPIO_WritePin>
     }

     xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fc f814 	bl	8003ed8 <xQueueGenericReset>

     modH->u8BufferSize = 0;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

     // set timeout for master query
     if(modH->uiModbusType == MASTER_RTU )
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	781b      	ldrb	r3, [r3, #0]
 8007ebc:	2b04      	cmp	r3, #4
 8007ebe:	d10c      	bne.n	8007eda <sendTxBuffer+0x112>
     {
 		xTimerReset(modH->xTimerTimeout,0);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007ec6:	f7fd f9dd 	bl	8005284 <xTaskGetTickCount>
 8007eca:	4602      	mov	r2, r0
 8007ecc:	2300      	movs	r3, #0
 8007ece:	9300      	str	r3, [sp, #0]
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	2102      	movs	r1, #2
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	f7fe f94b 	bl	8006170 <xTimerGenericCommand>
     }

     // increase message counter
     modH->u16OutCnt++;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ee0:	3301      	adds	r3, #1
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

}
 8007eea:	bf00      	nop
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd90      	pop	{r4, r7, pc}
 8007ef2:	bf00      	nop
 8007ef4:	e000ed04 	.word	0xe000ed04

08007ef8 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b086      	sub	sp, #24
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	7d5a      	ldrb	r2, [r3, #21]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	7d9b      	ldrb	r3, [r3, #22]
 8007f08:	4619      	mov	r1, r3
 8007f0a:	4610      	mov	r0, r2
 8007f0c:	f7ff fee2 	bl	8007cd4 <word>
 8007f10:	4603      	mov	r3, r0
 8007f12:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	7dda      	ldrb	r2, [r3, #23]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	7e1b      	ldrb	r3, [r3, #24]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	4610      	mov	r0, r2
 8007f20:	f7ff fed8 	bl	8007cd4 <word>
 8007f24:	4603      	mov	r3, r0
 8007f26:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8007f28:	8a3b      	ldrh	r3, [r7, #16]
 8007f2a:	08db      	lsrs	r3, r3, #3
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8007f30:	8a3b      	ldrh	r3, [r7, #16]
 8007f32:	f003 0307 	and.w	r3, r3, #7
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d002      	beq.n	8007f42 <process_FC1+0x4a>
 8007f3c:	7dfb      	ldrb	r3, [r7, #23]
 8007f3e:	3301      	adds	r3, #1
 8007f40:	75fb      	strb	r3, [r7, #23]
    modH->au8Buffer[ ADD_HI ]  = u8bytesno;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	7dfa      	ldrb	r2, [r7, #23]
 8007f46:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	2203      	movs	r2, #3
 8007f4c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    modH->au8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007f56:	461a      	mov	r2, r3
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	3b01      	subs	r3, #1
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	4413      	add	r3, r2
 8007f62:	2200      	movs	r2, #0
 8007f64:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8007f66:	2300      	movs	r3, #0
 8007f68:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	82bb      	strh	r3, [r7, #20]
 8007f6e:	e058      	b.n	8008022 <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8007f70:	8a7a      	ldrh	r2, [r7, #18]
 8007f72:	8abb      	ldrh	r3, [r7, #20]
 8007f74:	4413      	add	r3, r2
 8007f76:	81bb      	strh	r3, [r7, #12]
        u8currentRegister = (uint8_t) (u16coil / 16);
 8007f78:	89bb      	ldrh	r3, [r7, #12]
 8007f7a:	091b      	lsrs	r3, r3, #4
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	72fb      	strb	r3, [r7, #11]
        u8currentBit = (uint8_t) (u16coil % 16);
 8007f80:	89bb      	ldrh	r3, [r7, #12]
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	f003 030f 	and.w	r3, r3, #15
 8007f88:	72bb      	strb	r3, [r7, #10]

        bitWrite(
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f8e:	7afb      	ldrb	r3, [r7, #11]
 8007f90:	005b      	lsls	r3, r3, #1
 8007f92:	4413      	add	r3, r2
 8007f94:	881b      	ldrh	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	7abb      	ldrb	r3, [r7, #10]
 8007f9a:	fa42 f303 	asr.w	r3, r2, r3
 8007f9e:	f003 0301 	and.w	r3, r3, #1
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d014      	beq.n	8007fd0 <process_FC1+0xd8>
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007fac:	461a      	mov	r2, r3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	7cda      	ldrb	r2, [r3, #19]
 8007fb4:	7dbb      	ldrb	r3, [r7, #22]
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	6879      	ldr	r1, [r7, #4]
 8007fc0:	f891 1053 	ldrb.w	r1, [r1, #83]	; 0x53
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	b2da      	uxtb	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	440b      	add	r3, r1
 8007fcc:	74da      	strb	r2, [r3, #19]
 8007fce:	e015      	b.n	8007ffc <process_FC1+0x104>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4413      	add	r3, r2
 8007fdc:	7cda      	ldrb	r2, [r3, #19]
 8007fde:	7dbb      	ldrb	r3, [r7, #22]
 8007fe0:	2101      	movs	r1, #1
 8007fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	43db      	mvns	r3, r3
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	6879      	ldr	r1, [r7, #4]
 8007fee:	f891 1053 	ldrb.w	r1, [r1, #83]	; 0x53
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	440b      	add	r3, r1
 8007ffa:	74da      	strb	r2, [r3, #19]
        	modH->au8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->au16regs[ u8currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8007ffc:	7dbb      	ldrb	r3, [r7, #22]
 8007ffe:	3301      	adds	r3, #1
 8008000:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8008002:	7dbb      	ldrb	r3, [r7, #22]
 8008004:	2b07      	cmp	r3, #7
 8008006:	d909      	bls.n	800801c <process_FC1+0x124>
        {
            u8bitsno = 0;
 8008008:	2300      	movs	r3, #0
 800800a:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8008012:	3301      	adds	r3, #1
 8008014:	b2da      	uxtb	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800801c:	8abb      	ldrh	r3, [r7, #20]
 800801e:	3301      	adds	r3, #1
 8008020:	82bb      	strh	r3, [r7, #20]
 8008022:	8aba      	ldrh	r2, [r7, #20]
 8008024:	8a3b      	ldrh	r3, [r7, #16]
 8008026:	429a      	cmp	r2, r3
 8008028:	d3a2      	bcc.n	8007f70 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 800802a:	8a3b      	ldrh	r3, [r7, #16]
 800802c:	f003 0307 	and.w	r3, r3, #7
 8008030:	b29b      	uxth	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d007      	beq.n	8008046 <process_FC1+0x14e>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800803c:	3301      	adds	r3, #1
 800803e:	b2da      	uxtb	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize = modH->u8BufferSize +2;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800804c:	3302      	adds	r3, #2
 800804e:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff feb9 	bl	8007dc8 <sendTxBuffer>
    return u8CopyBufferSize;
 8008056:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3718      	adds	r7, #24
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}

08008062 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 8008062:	b580      	push	{r7, lr}
 8008064:	b084      	sub	sp, #16
 8008066:	af00      	add	r7, sp, #0
 8008068:	6078      	str	r0, [r7, #4]

    uint8_t u8StartAdd = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	7d5a      	ldrb	r2, [r3, #21]
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	7d9b      	ldrb	r3, [r3, #22]
 8008072:	4619      	mov	r1, r3
 8008074:	4610      	mov	r0, r2
 8008076:	f7ff fe2d 	bl	8007cd4 <word>
 800807a:	4603      	mov	r3, r0
 800807c:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	7dda      	ldrb	r2, [r3, #23]
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	7e1b      	ldrb	r3, [r3, #24]
 8008086:	4619      	mov	r1, r3
 8008088:	4610      	mov	r0, r2
 800808a:	f7ff fe23 	bl	8007cd4 <word>
 800808e:	4603      	mov	r3, r0
 8008090:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;

    modH->au8Buffer[ 2 ]       = u8regsno * 2;
 8008092:	7b7b      	ldrb	r3, [r7, #13]
 8008094:	005b      	lsls	r3, r3, #1
 8008096:	b2da      	uxtb	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2203      	movs	r2, #3
 80080a0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 80080a4:	7bbb      	ldrb	r3, [r7, #14]
 80080a6:	73fb      	strb	r3, [r7, #15]
 80080a8:	e030      	b.n	800810c <process_FC3+0xaa>
    {
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080ae:	7bfb      	ldrb	r3, [r7, #15]
 80080b0:	005b      	lsls	r3, r3, #1
 80080b2:	4413      	add	r3, r2
 80080b4:	881b      	ldrh	r3, [r3, #0]
 80080b6:	0a1b      	lsrs	r3, r3, #8
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80080c0:	4619      	mov	r1, r3
 80080c2:	b2d2      	uxtb	r2, r2
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	440b      	add	r3, r1
 80080c8:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80080d0:	3301      	adds	r3, #1
 80080d2:	b2da      	uxtb	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    	modH->au8Buffer[ modH->u8BufferSize ] = lowByte(modH->au16regs[i]);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080de:	7bfb      	ldrb	r3, [r7, #15]
 80080e0:	005b      	lsls	r3, r3, #1
 80080e2:	4413      	add	r3, r2
 80080e4:	881a      	ldrh	r2, [r3, #0]
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80080ec:	4619      	mov	r1, r3
 80080ee:	b2d2      	uxtb	r2, r2
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	440b      	add	r3, r1
 80080f4:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80080fc:	3301      	adds	r3, #1
 80080fe:	b2da      	uxtb	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8008106:	7bfb      	ldrb	r3, [r7, #15]
 8008108:	3301      	adds	r3, #1
 800810a:	73fb      	strb	r3, [r7, #15]
 800810c:	7bfa      	ldrb	r2, [r7, #15]
 800810e:	7bb9      	ldrb	r1, [r7, #14]
 8008110:	7b7b      	ldrb	r3, [r7, #13]
 8008112:	440b      	add	r3, r1
 8008114:	429a      	cmp	r2, r3
 8008116:	dbc8      	blt.n	80080aa <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800811e:	3302      	adds	r3, #2
 8008120:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7ff fe50 	bl	8007dc8 <sendTxBuffer>

    return u8CopyBufferSize;
 8008128:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	7d5a      	ldrb	r2, [r3, #21]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	7d9b      	ldrb	r3, [r3, #22]
 8008144:	4619      	mov	r1, r3
 8008146:	4610      	mov	r0, r2
 8008148:	f7ff fdc4 	bl	8007cd4 <word>
 800814c:	4603      	mov	r3, r0
 800814e:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u8currentRegister = (uint8_t) (u16coil / 16);
 8008150:	89fb      	ldrh	r3, [r7, #14]
 8008152:	091b      	lsrs	r3, r3, #4
 8008154:	b29b      	uxth	r3, r3
 8008156:	737b      	strb	r3, [r7, #13]
    u8currentBit = (uint8_t) (u16coil % 16);
 8008158:	89fb      	ldrh	r3, [r7, #14]
 800815a:	b2db      	uxtb	r3, r3
 800815c:	f003 030f 	and.w	r3, r3, #15
 8008160:	733b      	strb	r3, [r7, #12]

    // write to coil
    bitWrite(
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	7ddb      	ldrb	r3, [r3, #23]
 8008166:	2bff      	cmp	r3, #255	; 0xff
 8008168:	d113      	bne.n	8008192 <process_FC5+0x5e>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800816e:	7b7b      	ldrb	r3, [r7, #13]
 8008170:	005b      	lsls	r3, r3, #1
 8008172:	4413      	add	r3, r2
 8008174:	8819      	ldrh	r1, [r3, #0]
 8008176:	7b3b      	ldrb	r3, [r7, #12]
 8008178:	2201      	movs	r2, #1
 800817a:	fa02 f303 	lsl.w	r3, r2, r3
 800817e:	b29a      	uxth	r2, r3
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8008184:	7b7b      	ldrb	r3, [r7, #13]
 8008186:	005b      	lsls	r3, r3, #1
 8008188:	4403      	add	r3, r0
 800818a:	430a      	orrs	r2, r1
 800818c:	b292      	uxth	r2, r2
 800818e:	801a      	strh	r2, [r3, #0]
 8008190:	e014      	b.n	80081bc <process_FC5+0x88>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008196:	7b7b      	ldrb	r3, [r7, #13]
 8008198:	005b      	lsls	r3, r3, #1
 800819a:	4413      	add	r3, r2
 800819c:	8819      	ldrh	r1, [r3, #0]
 800819e:	7b3b      	ldrb	r3, [r7, #12]
 80081a0:	2201      	movs	r2, #1
 80081a2:	fa02 f303 	lsl.w	r3, r2, r3
 80081a6:	b29b      	uxth	r3, r3
 80081a8:	43db      	mvns	r3, r3
 80081aa:	b29a      	uxth	r2, r3
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80081b0:	7b7b      	ldrb	r3, [r7, #13]
 80081b2:	005b      	lsls	r3, r3, #1
 80081b4:	4403      	add	r3, r0
 80081b6:	400a      	ands	r2, r1
 80081b8:	b292      	uxth	r2, r2
 80081ba:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->au8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2206      	movs	r2, #6
 80081c0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize =  modH->u8BufferSize +2;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80081ca:	3302      	adds	r3, #2
 80081cc:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f7ff fdfa 	bl	8007dc8 <sendTxBuffer>

    return u8CopyBufferSize;
 80081d4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3710      	adds	r7, #16
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]

    uint8_t u8add = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	7d5a      	ldrb	r2, [r3, #21]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	7d9b      	ldrb	r3, [r3, #22]
 80081f0:	4619      	mov	r1, r3
 80081f2:	4610      	mov	r0, r2
 80081f4:	f7ff fd6e 	bl	8007cd4 <word>
 80081f8:	4603      	mov	r3, r0
 80081fa:	73fb      	strb	r3, [r7, #15]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	7dda      	ldrb	r2, [r3, #23]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	7e1b      	ldrb	r3, [r3, #24]
 8008204:	4619      	mov	r1, r3
 8008206:	4610      	mov	r0, r2
 8008208:	f7ff fd64 	bl	8007cd4 <word>
 800820c:	4603      	mov	r3, r0
 800820e:	81bb      	strh	r3, [r7, #12]

    modH->au16regs[ u8add ] = u16val;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008214:	7bfb      	ldrb	r3, [r7, #15]
 8008216:	005b      	lsls	r3, r3, #1
 8008218:	4413      	add	r3, r2
 800821a:	89ba      	ldrh	r2, [r7, #12]
 800821c:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2206      	movs	r2, #6
 8008222:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    u8CopyBufferSize = modH->u8BufferSize +2;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800822c:	3302      	adds	r3, #2
 800822e:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f7ff fdc9 	bl	8007dc8 <sendTxBuffer>

    return u8CopyBufferSize;
 8008236:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800823a:	4618      	mov	r0, r3
 800823c:	3710      	adds	r7, #16
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b086      	sub	sp, #24
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	7d5a      	ldrb	r2, [r3, #21]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	7d9b      	ldrb	r3, [r3, #22]
 8008252:	4619      	mov	r1, r3
 8008254:	4610      	mov	r0, r2
 8008256:	f7ff fd3d 	bl	8007cd4 <word>
 800825a:	4603      	mov	r3, r0
 800825c:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	7dda      	ldrb	r2, [r3, #23]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	7e1b      	ldrb	r3, [r3, #24]
 8008266:	4619      	mov	r1, r3
 8008268:	4610      	mov	r0, r2
 800826a:	f7ff fd33 	bl	8007cd4 <word>
 800826e:	4603      	mov	r3, r0
 8008270:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8008272:	2300      	movs	r3, #0
 8008274:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 8008276:	2307      	movs	r3, #7
 8008278:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800827a:	2300      	movs	r3, #0
 800827c:	82bb      	strh	r3, [r7, #20]
 800827e:	e055      	b.n	800832c <process_FC15+0xea>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8008280:	8a7a      	ldrh	r2, [r7, #18]
 8008282:	8abb      	ldrh	r3, [r7, #20]
 8008284:	4413      	add	r3, r2
 8008286:	81bb      	strh	r3, [r7, #12]
        u8currentRegister = (uint8_t) (u16coil / 16);
 8008288:	89bb      	ldrh	r3, [r7, #12]
 800828a:	091b      	lsrs	r3, r3, #4
 800828c:	b29b      	uxth	r3, r3
 800828e:	72fb      	strb	r3, [r7, #11]
        u8currentBit = (uint8_t) (u16coil % 16);
 8008290:	89bb      	ldrh	r3, [r7, #12]
 8008292:	b2db      	uxtb	r3, r3
 8008294:	f003 030f 	and.w	r3, r3, #15
 8008298:	72bb      	strb	r3, [r7, #10]

        bTemp = bitRead(
 800829a:	7dfb      	ldrb	r3, [r7, #23]
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	4413      	add	r3, r2
 80082a0:	7cdb      	ldrb	r3, [r3, #19]
 80082a2:	461a      	mov	r2, r3
 80082a4:	7dbb      	ldrb	r3, [r7, #22]
 80082a6:	fa42 f303 	asr.w	r3, r2, r3
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	bf14      	ite	ne
 80082b2:	2301      	movne	r3, #1
 80082b4:	2300      	moveq	r3, #0
 80082b6:	727b      	strb	r3, [r7, #9]
        			modH->au8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 80082b8:	7a7b      	ldrb	r3, [r7, #9]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d013      	beq.n	80082e6 <process_FC15+0xa4>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082c2:	7afb      	ldrb	r3, [r7, #11]
 80082c4:	005b      	lsls	r3, r3, #1
 80082c6:	4413      	add	r3, r2
 80082c8:	8819      	ldrh	r1, [r3, #0]
 80082ca:	7abb      	ldrb	r3, [r7, #10]
 80082cc:	2201      	movs	r2, #1
 80082ce:	fa02 f303 	lsl.w	r3, r2, r3
 80082d2:	b29a      	uxth	r2, r3
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80082d8:	7afb      	ldrb	r3, [r7, #11]
 80082da:	005b      	lsls	r3, r3, #1
 80082dc:	4403      	add	r3, r0
 80082de:	430a      	orrs	r2, r1
 80082e0:	b292      	uxth	r2, r2
 80082e2:	801a      	strh	r2, [r3, #0]
 80082e4:	e014      	b.n	8008310 <process_FC15+0xce>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082ea:	7afb      	ldrb	r3, [r7, #11]
 80082ec:	005b      	lsls	r3, r3, #1
 80082ee:	4413      	add	r3, r2
 80082f0:	8819      	ldrh	r1, [r3, #0]
 80082f2:	7abb      	ldrb	r3, [r7, #10]
 80082f4:	2201      	movs	r2, #1
 80082f6:	fa02 f303 	lsl.w	r3, r2, r3
 80082fa:	b29b      	uxth	r3, r3
 80082fc:	43db      	mvns	r3, r3
 80082fe:	b29a      	uxth	r2, r3
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8008304:	7afb      	ldrb	r3, [r7, #11]
 8008306:	005b      	lsls	r3, r3, #1
 8008308:	4403      	add	r3, r0
 800830a:	400a      	ands	r2, r1
 800830c:	b292      	uxth	r2, r2
 800830e:	801a      	strh	r2, [r3, #0]
            modH->au16regs[ u8currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8008310:	7dbb      	ldrb	r3, [r7, #22]
 8008312:	3301      	adds	r3, #1
 8008314:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8008316:	7dbb      	ldrb	r3, [r7, #22]
 8008318:	2b07      	cmp	r3, #7
 800831a:	d904      	bls.n	8008326 <process_FC15+0xe4>
        {
            u8bitsno = 0;
 800831c:	2300      	movs	r3, #0
 800831e:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8008320:	7dfb      	ldrb	r3, [r7, #23]
 8008322:	3301      	adds	r3, #1
 8008324:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8008326:	8abb      	ldrh	r3, [r7, #20]
 8008328:	3301      	adds	r3, #1
 800832a:	82bb      	strh	r3, [r7, #20]
 800832c:	8aba      	ldrh	r2, [r7, #20]
 800832e:	8a3b      	ldrh	r3, [r7, #16]
 8008330:	429a      	cmp	r2, r3
 8008332:	d3a5      	bcc.n	8008280 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2206      	movs	r2, #6
 8008338:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize = modH->u8BufferSize +2;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8008342:	3302      	adds	r3, #2
 8008344:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff fd3e 	bl	8007dc8 <sendTxBuffer>
    return u8CopyBufferSize;
 800834c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008350:	4618      	mov	r0, r3
 8008352:	3718      	adds	r7, #24
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
    uint8_t u8StartAdd = modH->au8Buffer[ ADD_HI ] << 8 | modH->au8Buffer[ ADD_LO ];
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	7d5b      	ldrb	r3, [r3, #21]
 8008364:	021b      	lsls	r3, r3, #8
 8008366:	b25a      	sxtb	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	7d9b      	ldrb	r3, [r3, #22]
 800836c:	b25b      	sxtb	r3, r3
 800836e:	4313      	orrs	r3, r2
 8008370:	b25b      	sxtb	r3, r3
 8008372:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = modH->au8Buffer[ NB_HI ] << 8 | modH->au8Buffer[ NB_LO ];
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	7ddb      	ldrb	r3, [r3, #23]
 8008378:	021b      	lsls	r3, r3, #8
 800837a:	b25a      	sxtb	r2, r3
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	7e1b      	ldrb	r3, [r3, #24]
 8008380:	b25b      	sxtb	r3, r3
 8008382:	4313      	orrs	r3, r2
 8008384:	b25b      	sxtb	r3, r3
 8008386:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;
    uint16_t temp;

    // build header
    modH->au8Buffer[ NB_HI ]   = 0;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2200      	movs	r2, #0
 800838c:	75da      	strb	r2, [r3, #23]
    modH->au8Buffer[ NB_LO ]   = u8regsno;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	7b7a      	ldrb	r2, [r7, #13]
 8008392:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2206      	movs	r2, #6
 8008398:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    // write registers
    for (i = 0; i < u8regsno; i++)
 800839c:	2300      	movs	r3, #0
 800839e:	73fb      	strb	r3, [r7, #15]
 80083a0:	e01c      	b.n	80083dc <process_FC16+0x84>
    {
        temp = word(
        		modH->au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 80083a2:	7bfb      	ldrb	r3, [r7, #15]
 80083a4:	005b      	lsls	r3, r3, #1
 80083a6:	3307      	adds	r3, #7
        temp = word(
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	4413      	add	r3, r2
 80083ac:	7cd8      	ldrb	r0, [r3, #19]
				modH->au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 80083ae:	7bfb      	ldrb	r3, [r7, #15]
 80083b0:	3304      	adds	r3, #4
 80083b2:	005b      	lsls	r3, r3, #1
        temp = word(
 80083b4:	687a      	ldr	r2, [r7, #4]
 80083b6:	4413      	add	r3, r2
 80083b8:	7cdb      	ldrb	r3, [r3, #19]
 80083ba:	4619      	mov	r1, r3
 80083bc:	f7ff fc8a 	bl	8007cd4 <word>
 80083c0:	4603      	mov	r3, r0
 80083c2:	817b      	strh	r3, [r7, #10]

        modH->au16regs[ u8StartAdd + i ] = temp;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80083c8:	7bb9      	ldrb	r1, [r7, #14]
 80083ca:	7bfb      	ldrb	r3, [r7, #15]
 80083cc:	440b      	add	r3, r1
 80083ce:	005b      	lsls	r3, r3, #1
 80083d0:	4413      	add	r3, r2
 80083d2:	897a      	ldrh	r2, [r7, #10]
 80083d4:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u8regsno; i++)
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	3301      	adds	r3, #1
 80083da:	73fb      	strb	r3, [r7, #15]
 80083dc:	7bfa      	ldrb	r2, [r7, #15]
 80083de:	7b7b      	ldrb	r3, [r7, #13]
 80083e0:	429a      	cmp	r2, r3
 80083e2:	d3de      	bcc.n	80083a2 <process_FC16+0x4a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80083ea:	3302      	adds	r3, #2
 80083ec:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7ff fcea 	bl	8007dc8 <sendTxBuffer>

    return u8CopyBufferSize;
 80083f4:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3710      	adds	r7, #16
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}

08008400 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af02      	add	r7, sp, #8
 8008406:	6078      	str	r0, [r7, #4]
	/* Modbus RTU callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8008408:	2300      	movs	r3, #0
 800840a:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 800840c:	2300      	movs	r3, #0
 800840e:	60fb      	str	r3, [r7, #12]
 8008410:	e018      	b.n	8008444 <HAL_UART_TxCpltCallback+0x44>
	{
	   	if (mHandlers[i]->port == huart )
 8008412:	4a11      	ldr	r2, [pc, #68]	; (8008458 <HAL_UART_TxCpltCallback+0x58>)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	687a      	ldr	r2, [r7, #4]
 800841e:	429a      	cmp	r2, r3
 8008420:	d10d      	bne.n	800843e <HAL_UART_TxCpltCallback+0x3e>
	   	{
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8008422:	4a0d      	ldr	r2, [pc, #52]	; (8008458 <HAL_UART_TxCpltCallback+0x58>)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800842a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800842c:	f107 0308 	add.w	r3, r7, #8
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	2300      	movs	r3, #0
 8008434:	2200      	movs	r2, #0
 8008436:	2100      	movs	r1, #0
 8008438:	f7fd fce4 	bl	8005e04 <xTaskGenericNotifyFromISR>
	   		break;
 800843c:	e008      	b.n	8008450 <HAL_UART_TxCpltCallback+0x50>
	for (i = 0; i < numberHandlers; i++ )
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	3301      	adds	r3, #1
 8008442:	60fb      	str	r3, [r7, #12]
 8008444:	4b05      	ldr	r3, [pc, #20]	; (800845c <HAL_UART_TxCpltCallback+0x5c>)
 8008446:	781b      	ldrb	r3, [r3, #0]
 8008448:	461a      	mov	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	4293      	cmp	r3, r2
 800844e:	dbe0      	blt.n	8008412 <HAL_UART_TxCpltCallback+0x12>
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8008450:	bf00      	nop
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}
 8008458:	2000193c 	.word	0x2000193c
 800845c:	20001934 	.word	0x20001934

08008460 <__libc_init_array>:
 8008460:	b570      	push	{r4, r5, r6, lr}
 8008462:	4e0d      	ldr	r6, [pc, #52]	; (8008498 <__libc_init_array+0x38>)
 8008464:	4c0d      	ldr	r4, [pc, #52]	; (800849c <__libc_init_array+0x3c>)
 8008466:	1ba4      	subs	r4, r4, r6
 8008468:	10a4      	asrs	r4, r4, #2
 800846a:	2500      	movs	r5, #0
 800846c:	42a5      	cmp	r5, r4
 800846e:	d109      	bne.n	8008484 <__libc_init_array+0x24>
 8008470:	4e0b      	ldr	r6, [pc, #44]	; (80084a0 <__libc_init_array+0x40>)
 8008472:	4c0c      	ldr	r4, [pc, #48]	; (80084a4 <__libc_init_array+0x44>)
 8008474:	f000 f82c 	bl	80084d0 <_init>
 8008478:	1ba4      	subs	r4, r4, r6
 800847a:	10a4      	asrs	r4, r4, #2
 800847c:	2500      	movs	r5, #0
 800847e:	42a5      	cmp	r5, r4
 8008480:	d105      	bne.n	800848e <__libc_init_array+0x2e>
 8008482:	bd70      	pop	{r4, r5, r6, pc}
 8008484:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008488:	4798      	blx	r3
 800848a:	3501      	adds	r5, #1
 800848c:	e7ee      	b.n	800846c <__libc_init_array+0xc>
 800848e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008492:	4798      	blx	r3
 8008494:	3501      	adds	r5, #1
 8008496:	e7f2      	b.n	800847e <__libc_init_array+0x1e>
 8008498:	0800865c 	.word	0x0800865c
 800849c:	0800865c 	.word	0x0800865c
 80084a0:	0800865c 	.word	0x0800865c
 80084a4:	08008660 	.word	0x08008660

080084a8 <memcpy>:
 80084a8:	b510      	push	{r4, lr}
 80084aa:	1e43      	subs	r3, r0, #1
 80084ac:	440a      	add	r2, r1
 80084ae:	4291      	cmp	r1, r2
 80084b0:	d100      	bne.n	80084b4 <memcpy+0xc>
 80084b2:	bd10      	pop	{r4, pc}
 80084b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084bc:	e7f7      	b.n	80084ae <memcpy+0x6>

080084be <memset>:
 80084be:	4402      	add	r2, r0
 80084c0:	4603      	mov	r3, r0
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d100      	bne.n	80084c8 <memset+0xa>
 80084c6:	4770      	bx	lr
 80084c8:	f803 1b01 	strb.w	r1, [r3], #1
 80084cc:	e7f9      	b.n	80084c2 <memset+0x4>
	...

080084d0 <_init>:
 80084d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d2:	bf00      	nop
 80084d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d6:	bc08      	pop	{r3}
 80084d8:	469e      	mov	lr, r3
 80084da:	4770      	bx	lr

080084dc <_fini>:
 80084dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084de:	bf00      	nop
 80084e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084e2:	bc08      	pop	{r3}
 80084e4:	469e      	mov	lr, r3
 80084e6:	4770      	bx	lr
