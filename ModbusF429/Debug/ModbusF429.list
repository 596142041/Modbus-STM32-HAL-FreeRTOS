
ModbusF429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008328  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  080084d8  080084d8  000184d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008630  08008630  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08008630  08008630  00018630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008638  08008638  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008638  08008638  00018638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800863c  0800863c  0001863c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08008640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004adc  20000010  08008650  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004aec  08008650  00024aec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e99a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a34  00000000  00000000  0003e9da  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a8  00000000  00000000  00042410  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013f0  00000000  00000000  000439b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000273ce  00000000  00000000  00044da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013e48  00000000  00000000  0006c176  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ebb7c  00000000  00000000  0007ffbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016bb3a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005990  00000000  00000000  0016bbb8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000010 	.word	0x20000010
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080084c0 	.word	0x080084c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000014 	.word	0x20000014
 80001ec:	080084c0 	.word	0x080084c0

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 80004f4:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <MX_ETH_Init+0x78>)
 80004f6:	4a1d      	ldr	r2, [pc, #116]	; (800056c <MX_ETH_Init+0x7c>)
 80004f8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80004fa:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <MX_ETH_Init+0x78>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000500:	4b19      	ldr	r3, [pc, #100]	; (8000568 <MX_ETH_Init+0x78>)
 8000502:	2200      	movs	r2, #0
 8000504:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_ETH_Init+0x78>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <MX_ETH_Init+0x78>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	3301      	adds	r3, #1
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <MX_ETH_Init+0x78>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	3302      	adds	r3, #2
 800051e:	22e1      	movs	r2, #225	; 0xe1
 8000520:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_ETH_Init+0x78>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	3303      	adds	r3, #3
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_ETH_Init+0x78>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	3304      	adds	r3, #4
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_ETH_Init+0x78>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	3305      	adds	r3, #5
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_ETH_Init+0x78>)
 8000542:	2200      	movs	r2, #0
 8000544:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <MX_ETH_Init+0x78>)
 8000548:	2200      	movs	r2, #0
 800054a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_ETH_Init+0x78>)
 800054e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000552:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000554:	4804      	ldr	r0, [pc, #16]	; (8000568 <MX_ETH_Init+0x78>)
 8000556:	f000 fd6d 	bl	8001034 <HAL_ETH_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000560:	f000 fa8a 	bl	8000a78 <Error_Handler>
  }

}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20004940 	.word	0x20004940
 800056c:	40028000 	.word	0x40028000

08000570 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08e      	sub	sp, #56	; 0x38
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a55      	ldr	r2, [pc, #340]	; (80006e4 <HAL_ETH_MspInit+0x174>)
 800058e:	4293      	cmp	r3, r2
 8000590:	f040 80a4 	bne.w	80006dc <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	623b      	str	r3, [r7, #32]
 8000598:	4b53      	ldr	r3, [pc, #332]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 800059a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059c:	4a52      	ldr	r2, [pc, #328]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 800059e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005a2:	6313      	str	r3, [r2, #48]	; 0x30
 80005a4:	4b50      	ldr	r3, [pc, #320]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005ac:	623b      	str	r3, [r7, #32]
 80005ae:	6a3b      	ldr	r3, [r7, #32]
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]
 80005b4:	4b4c      	ldr	r3, [pc, #304]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	4a4b      	ldr	r2, [pc, #300]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 80005ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005be:	6313      	str	r3, [r2, #48]	; 0x30
 80005c0:	4b49      	ldr	r3, [pc, #292]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 80005c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80005c8:	61fb      	str	r3, [r7, #28]
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
 80005d0:	4b45      	ldr	r3, [pc, #276]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	4a44      	ldr	r2, [pc, #272]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 80005d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80005da:	6313      	str	r3, [r2, #48]	; 0x30
 80005dc:	4b42      	ldr	r3, [pc, #264]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80005e4:	61bb      	str	r3, [r7, #24]
 80005e6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	4b3e      	ldr	r3, [pc, #248]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	4a3d      	ldr	r2, [pc, #244]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	6313      	str	r3, [r2, #48]	; 0x30
 80005f8:	4b3b      	ldr	r3, [pc, #236]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	4b37      	ldr	r3, [pc, #220]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	4a36      	ldr	r2, [pc, #216]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	6313      	str	r3, [r2, #48]	; 0x30
 8000614:	4b34      	ldr	r3, [pc, #208]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	4a2f      	ldr	r2, [pc, #188]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 800062a:	f043 0302 	orr.w	r3, r3, #2
 800062e:	6313      	str	r3, [r2, #48]	; 0x30
 8000630:	4b2d      	ldr	r3, [pc, #180]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000634:	f003 0302 	and.w	r3, r3, #2
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	4a28      	ldr	r2, [pc, #160]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 8000646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800064a:	6313      	str	r3, [r2, #48]	; 0x30
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <HAL_ETH_MspInit+0x178>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000658:	2332      	movs	r3, #50	; 0x32
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000664:	2303      	movs	r3, #3
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000668:	230b      	movs	r3, #11
 800066a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000670:	4619      	mov	r1, r3
 8000672:	481e      	ldr	r0, [pc, #120]	; (80006ec <HAL_ETH_MspInit+0x17c>)
 8000674:	f001 f94c 	bl	8001910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000678:	2386      	movs	r3, #134	; 0x86
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067c:	2302      	movs	r3, #2
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000684:	2303      	movs	r3, #3
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000688:	230b      	movs	r3, #11
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000690:	4619      	mov	r1, r3
 8000692:	4817      	ldr	r0, [pc, #92]	; (80006f0 <HAL_ETH_MspInit+0x180>)
 8000694:	f001 f93c 	bl	8001910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a6:	2303      	movs	r3, #3
 80006a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006aa:	230b      	movs	r3, #11
 80006ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b2:	4619      	mov	r1, r3
 80006b4:	480f      	ldr	r0, [pc, #60]	; (80006f4 <HAL_ETH_MspInit+0x184>)
 80006b6:	f001 f92b 	bl	8001910 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c0:	2302      	movs	r3, #2
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c8:	2303      	movs	r3, #3
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006cc:	230b      	movs	r3, #11
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d4:	4619      	mov	r1, r3
 80006d6:	4808      	ldr	r0, [pc, #32]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 80006d8:	f001 f91a 	bl	8001910 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80006dc:	bf00      	nop
 80006de:	3738      	adds	r7, #56	; 0x38
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40028000 	.word	0x40028000
 80006e8:	40023800 	.word	0x40023800
 80006ec:	40020800 	.word	0x40020800
 80006f0:	40020000 	.word	0x40020000
 80006f4:	40020400 	.word	0x40020400
 80006f8:	40021800 	.word	0x40021800

080006fc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of ModbusTestTask */
  ModbusTestTaskHandle = osThreadNew(StartModbusTestTask, NULL, &ModbusTestTask_attributes);
 8000700:	4a04      	ldr	r2, [pc, #16]	; (8000714 <MX_FREERTOS_Init+0x18>)
 8000702:	2100      	movs	r1, #0
 8000704:	4804      	ldr	r0, [pc, #16]	; (8000718 <MX_FREERTOS_Init+0x1c>)
 8000706:	f003 f8b9 	bl	800387c <osThreadNew>
 800070a:	4602      	mov	r2, r0
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <MX_FREERTOS_Init+0x20>)
 800070e:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	08008564 	.word	0x08008564
 8000718:	08000721 	.word	0x08000721
 800071c:	20004988 	.word	0x20004988

08000720 <StartModbusTestTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartModbusTestTask */
void StartModbusTestTask(void *argument)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartModbusTestTask */
  /* Infinite loop */
  for(;;)
  {
	  xSemaphoreTake(ModbusH.ModBusSphrHandle , portMAX_DELAY);
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <StartModbusTestTask+0x48>)
 800072a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800072e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000732:	4618      	mov	r0, r3
 8000734:	f003 ff90 	bl	8004658 <xQueueSemaphoreTake>
	  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, ModbusH.au16regs[0] & 0x1);
 8000738:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <StartModbusTestTask+0x48>)
 800073a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073c:	881b      	ldrh	r3, [r3, #0]
 800073e:	b2db      	uxtb	r3, r3
 8000740:	f003 0301 	and.w	r3, r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	461a      	mov	r2, r3
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	4808      	ldr	r0, [pc, #32]	; (800076c <StartModbusTestTask+0x4c>)
 800074c:	f001 fa8a 	bl	8001c64 <HAL_GPIO_WritePin>
	  xSemaphoreGive(ModbusH.ModBusSphrHandle);
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <StartModbusTestTask+0x48>)
 8000752:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8000756:	2300      	movs	r3, #0
 8000758:	2200      	movs	r2, #0
 800075a:	2100      	movs	r1, #0
 800075c:	f003 fd12 	bl	8004184 <xQueueGenericSend>
	  osDelay(200);
 8000760:	20c8      	movs	r0, #200	; 0xc8
 8000762:	f003 f931 	bl	80039c8 <osDelay>
	  xSemaphoreTake(ModbusH.ModBusSphrHandle , portMAX_DELAY);
 8000766:	e7df      	b.n	8000728 <StartModbusTestTask+0x8>
 8000768:	2000498c 	.word	0x2000498c
 800076c:	40020400 	.word	0x40020400

08000770 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b08c      	sub	sp, #48	; 0x30
 8000774:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	61bb      	str	r3, [r7, #24]
 800078a:	4b5a      	ldr	r3, [pc, #360]	; (80008f4 <MX_GPIO_Init+0x184>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a59      	ldr	r2, [pc, #356]	; (80008f4 <MX_GPIO_Init+0x184>)
 8000790:	f043 0304 	orr.w	r3, r3, #4
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b57      	ldr	r3, [pc, #348]	; (80008f4 <MX_GPIO_Init+0x184>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0304 	and.w	r3, r3, #4
 800079e:	61bb      	str	r3, [r7, #24]
 80007a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	4b53      	ldr	r3, [pc, #332]	; (80008f4 <MX_GPIO_Init+0x184>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a52      	ldr	r2, [pc, #328]	; (80008f4 <MX_GPIO_Init+0x184>)
 80007ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b50      	ldr	r3, [pc, #320]	; (80008f4 <MX_GPIO_Init+0x184>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	4b4c      	ldr	r3, [pc, #304]	; (80008f4 <MX_GPIO_Init+0x184>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a4b      	ldr	r2, [pc, #300]	; (80008f4 <MX_GPIO_Init+0x184>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b49      	ldr	r3, [pc, #292]	; (80008f4 <MX_GPIO_Init+0x184>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	613b      	str	r3, [r7, #16]
 80007d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60fb      	str	r3, [r7, #12]
 80007de:	4b45      	ldr	r3, [pc, #276]	; (80008f4 <MX_GPIO_Init+0x184>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a44      	ldr	r2, [pc, #272]	; (80008f4 <MX_GPIO_Init+0x184>)
 80007e4:	f043 0302 	orr.w	r3, r3, #2
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b42      	ldr	r3, [pc, #264]	; (80008f4 <MX_GPIO_Init+0x184>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0302 	and.w	r3, r3, #2
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	4b3e      	ldr	r3, [pc, #248]	; (80008f4 <MX_GPIO_Init+0x184>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a3d      	ldr	r2, [pc, #244]	; (80008f4 <MX_GPIO_Init+0x184>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b3b      	ldr	r3, [pc, #236]	; (80008f4 <MX_GPIO_Init+0x184>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0308 	and.w	r3, r3, #8
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b37      	ldr	r3, [pc, #220]	; (80008f4 <MX_GPIO_Init+0x184>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a36      	ldr	r2, [pc, #216]	; (80008f4 <MX_GPIO_Init+0x184>)
 800081c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b34      	ldr	r3, [pc, #208]	; (80008f4 <MX_GPIO_Init+0x184>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f244 0181 	movw	r1, #16513	; 0x4081
 8000834:	4830      	ldr	r0, [pc, #192]	; (80008f8 <MX_GPIO_Init+0x188>)
 8000836:	f001 fa15 	bl	8001c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	2140      	movs	r1, #64	; 0x40
 800083e:	482f      	ldr	r0, [pc, #188]	; (80008fc <MX_GPIO_Init+0x18c>)
 8000840:	f001 fa10 	bl	8001c64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000844:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084a:	4b2d      	ldr	r3, [pc, #180]	; (8000900 <MX_GPIO_Init+0x190>)
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	482a      	ldr	r0, [pc, #168]	; (8000904 <MX_GPIO_Init+0x194>)
 800085a:	f001 f859 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800085e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	4820      	ldr	r0, [pc, #128]	; (80008f8 <MX_GPIO_Init+0x188>)
 8000878:	f001 f84a 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800087c:	2340      	movs	r3, #64	; 0x40
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	481a      	ldr	r0, [pc, #104]	; (80008fc <MX_GPIO_Init+0x18c>)
 8000894:	f001 f83c 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800089c:	2300      	movs	r3, #0
 800089e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008a4:	f107 031c 	add.w	r3, r7, #28
 80008a8:	4619      	mov	r1, r3
 80008aa:	4814      	ldr	r0, [pc, #80]	; (80008fc <MX_GPIO_Init+0x18c>)
 80008ac:	f001 f830 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008b0:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b6:	2302      	movs	r3, #2
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008be:	2303      	movs	r3, #3
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008c2:	230a      	movs	r3, #10
 80008c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	480e      	ldr	r0, [pc, #56]	; (8000908 <MX_GPIO_Init+0x198>)
 80008ce:	f001 f81f 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	4808      	ldr	r0, [pc, #32]	; (8000908 <MX_GPIO_Init+0x198>)
 80008e8:	f001 f812 	bl	8001910 <HAL_GPIO_Init>

}
 80008ec:	bf00      	nop
 80008ee:	3730      	adds	r7, #48	; 0x30
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40020400 	.word	0x40020400
 80008fc:	40021800 	.word	0x40021800
 8000900:	10110000 	.word	0x10110000
 8000904:	40020800 	.word	0x40020800
 8000908:	40020000 	.word	0x40020000

0800090c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000910:	f000 fa28 	bl	8000d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000914:	f000 f834 	bl	8000980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000918:	f7ff ff2a 	bl	8000770 <MX_GPIO_Init>
  MX_ETH_Init();
 800091c:	f7ff fde8 	bl	80004f0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000920:	f000 f97c 	bl	8000c1c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Modbus Slave initialization */
  ModbusH.uiModbusType = SLAVE_RTU;
 8000924:	4b13      	ldr	r3, [pc, #76]	; (8000974 <main+0x68>)
 8000926:	2203      	movs	r2, #3
 8000928:	701a      	strb	r2, [r3, #0]
  ModbusH.port =  &huart3; // This is the UART port connected to STLINK in the NUCLEO F429
 800092a:	4b12      	ldr	r3, [pc, #72]	; (8000974 <main+0x68>)
 800092c:	4a12      	ldr	r2, [pc, #72]	; (8000978 <main+0x6c>)
 800092e:	605a      	str	r2, [r3, #4]
  ModbusH.u8id = 1; //slave ID
 8000930:	4b10      	ldr	r3, [pc, #64]	; (8000974 <main+0x68>)
 8000932:	2201      	movs	r2, #1
 8000934:	721a      	strb	r2, [r3, #8]
  ModbusH.u16timeOut = 1000;
 8000936:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <main+0x68>)
 8000938:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800093c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  ModbusH.EN_Port = NULL; // No RS485
 8000940:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <main+0x68>)
 8000942:	2200      	movs	r2, #0
 8000944:	60da      	str	r2, [r3, #12]
   //ModbusH2.EN_Port = LD2_GPIO_Port; // RS485 Enable
   //ModbusH2.EN_Pin = LD2_Pin; // RS485 Enable
  ModbusH.u32overTime = 0;
 8000946:	4b0b      	ldr	r3, [pc, #44]	; (8000974 <main+0x68>)
 8000948:	2200      	movs	r2, #0
 800094a:	66da      	str	r2, [r3, #108]	; 0x6c
  ModbusH.au16regs = ModbusDATA;
 800094c:	4b09      	ldr	r3, [pc, #36]	; (8000974 <main+0x68>)
 800094e:	4a0b      	ldr	r2, [pc, #44]	; (800097c <main+0x70>)
 8000950:	659a      	str	r2, [r3, #88]	; 0x58
  ModbusH.u8regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8000952:	4b08      	ldr	r3, [pc, #32]	; (8000974 <main+0x68>)
 8000954:	2208      	movs	r2, #8
 8000956:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
   //Initialize Modbus library
  ModbusInit(&ModbusH);
 800095a:	4806      	ldr	r0, [pc, #24]	; (8000974 <main+0x68>)
 800095c:	f006 faf6 	bl	8006f4c <ModbusInit>
  //Start capturing traffic on serial Port
  ModbusStart(&ModbusH);
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <main+0x68>)
 8000962:	f006 fb7d 	bl	8007060 <ModbusStart>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000966:	f002 ff1f 	bl	80037a8 <osKernelInitialize>
  MX_FREERTOS_Init(); 
 800096a:	f7ff fec7 	bl	80006fc <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800096e:	f002 ff4f 	bl	8003810 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000972:	e7fe      	b.n	8000972 <main+0x66>
 8000974:	2000498c 	.word	0x2000498c
 8000978:	20004a68 	.word	0x20004a68
 800097c:	20004a18 	.word	0x20004a18

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b094      	sub	sp, #80	; 0x50
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 0320 	add.w	r3, r7, #32
 800098a:	2230      	movs	r2, #48	; 0x30
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f007 fd8d 	bl	80084ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	f107 030c 	add.w	r3, r7, #12
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
 80009a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a4:	2300      	movs	r3, #0
 80009a6:	60bb      	str	r3, [r7, #8]
 80009a8:	4b28      	ldr	r3, [pc, #160]	; (8000a4c <SystemClock_Config+0xcc>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ac:	4a27      	ldr	r2, [pc, #156]	; (8000a4c <SystemClock_Config+0xcc>)
 80009ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009b2:	6413      	str	r3, [r2, #64]	; 0x40
 80009b4:	4b25      	ldr	r3, [pc, #148]	; (8000a4c <SystemClock_Config+0xcc>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c0:	2300      	movs	r3, #0
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	4b22      	ldr	r3, [pc, #136]	; (8000a50 <SystemClock_Config+0xd0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a21      	ldr	r2, [pc, #132]	; (8000a50 <SystemClock_Config+0xd0>)
 80009ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <SystemClock_Config+0xd0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009dc:	2301      	movs	r3, #1
 80009de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e6:	2302      	movs	r3, #2
 80009e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009f0:	2304      	movs	r3, #4
 80009f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009f4:	23a8      	movs	r3, #168	; 0xa8
 80009f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f8:	2302      	movs	r3, #2
 80009fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009fc:	2307      	movs	r3, #7
 80009fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a00:	f107 0320 	add.w	r3, r7, #32
 8000a04:	4618      	mov	r0, r3
 8000a06:	f001 f947 	bl	8001c98 <HAL_RCC_OscConfig>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a10:	f000 f832 	bl	8000a78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a14:	230f      	movs	r3, #15
 8000a16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a2c:	f107 030c 	add.w	r3, r7, #12
 8000a30:	2105      	movs	r1, #5
 8000a32:	4618      	mov	r0, r3
 8000a34:	f001 fba0 	bl	8002178 <HAL_RCC_ClockConfig>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a3e:	f000 f81b 	bl	8000a78 <Error_Handler>
  }
}
 8000a42:	bf00      	nop
 8000a44:	3750      	adds	r7, #80	; 0x50
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40007000 	.word	0x40007000

08000a54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a04      	ldr	r2, [pc, #16]	; (8000a74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d101      	bne.n	8000a6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a66:	f000 f99f 	bl	8000da8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40010000 	.word	0x40010000

08000a78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a7c:	bf00      	nop
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b12      	ldr	r3, [pc, #72]	; (8000adc <HAL_MspInit+0x54>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a11      	ldr	r2, [pc, #68]	; (8000adc <HAL_MspInit+0x54>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b0f      	ldr	r3, [pc, #60]	; (8000adc <HAL_MspInit+0x54>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_MspInit+0x54>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a0a      	ldr	r2, [pc, #40]	; (8000adc <HAL_MspInit+0x54>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aba:	4b08      	ldr	r3, [pc, #32]	; (8000adc <HAL_MspInit+0x54>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	210f      	movs	r1, #15
 8000aca:	f06f 0001 	mvn.w	r0, #1
 8000ace:	f000 fa65 	bl	8000f9c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40023800 	.word	0x40023800

08000ae0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	; 0x30
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000af0:	2200      	movs	r2, #0
 8000af2:	6879      	ldr	r1, [r7, #4]
 8000af4:	2019      	movs	r0, #25
 8000af6:	f000 fa51 	bl	8000f9c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000afa:	2019      	movs	r0, #25
 8000afc:	f000 fa6a 	bl	8000fd4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000b00:	2300      	movs	r3, #0
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <HAL_InitTick+0xa4>)
 8000b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b08:	4a1e      	ldr	r2, [pc, #120]	; (8000b84 <HAL_InitTick+0xa4>)
 8000b0a:	f043 0301 	orr.w	r3, r3, #1
 8000b0e:	6453      	str	r3, [r2, #68]	; 0x44
 8000b10:	4b1c      	ldr	r3, [pc, #112]	; (8000b84 <HAL_InitTick+0xa4>)
 8000b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b14:	f003 0301 	and.w	r3, r3, #1
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b1c:	f107 0210 	add.w	r2, r7, #16
 8000b20:	f107 0314 	add.w	r3, r7, #20
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 fd18 	bl	800255c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000b2c:	f001 fd02 	bl	8002534 <HAL_RCC_GetPCLK2Freq>
 8000b30:	4603      	mov	r3, r0
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b38:	4a13      	ldr	r2, [pc, #76]	; (8000b88 <HAL_InitTick+0xa8>)
 8000b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3e:	0c9b      	lsrs	r3, r3, #18
 8000b40:	3b01      	subs	r3, #1
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <HAL_InitTick+0xac>)
 8000b46:	4a12      	ldr	r2, [pc, #72]	; (8000b90 <HAL_InitTick+0xb0>)
 8000b48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <HAL_InitTick+0xac>)
 8000b4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b50:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_InitTick+0xac>)
 8000b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b56:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_InitTick+0xac>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_InitTick+0xac>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000b64:	4809      	ldr	r0, [pc, #36]	; (8000b8c <HAL_InitTick+0xac>)
 8000b66:	f001 fd2b 	bl	80025c0 <HAL_TIM_Base_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d104      	bne.n	8000b7a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000b70:	4806      	ldr	r0, [pc, #24]	; (8000b8c <HAL_InitTick+0xac>)
 8000b72:	f001 fd5a 	bl	800262a <HAL_TIM_Base_Start_IT>
 8000b76:	4603      	mov	r3, r0
 8000b78:	e000      	b.n	8000b7c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3730      	adds	r7, #48	; 0x30
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40023800 	.word	0x40023800
 8000b88:	431bde83 	.word	0x431bde83
 8000b8c:	20004a28 	.word	0x20004a28
 8000b90:	40010000 	.word	0x40010000

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler+0x4>

08000bae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000bce:	f001 fd50 	bl	8002672 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20004a28 	.word	0x20004a28

08000bdc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <USART3_IRQHandler+0x10>)
 8000be2:	f002 f813 	bl	8002c0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20004a68 	.word	0x20004a68

08000bf0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bf4:	4b08      	ldr	r3, [pc, #32]	; (8000c18 <SystemInit+0x28>)
 8000bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bfa:	4a07      	ldr	r2, [pc, #28]	; (8000c18 <SystemInit+0x28>)
 8000bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <SystemInit+0x28>)
 8000c06:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c0a:	609a      	str	r2, [r3, #8]
#endif
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000ed00 	.word	0xe000ed00

08000c1c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8000c20:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <MX_USART3_UART_Init+0x4c>)
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <MX_USART3_UART_Init+0x50>)
 8000c24:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <MX_USART3_UART_Init+0x4c>)
 8000c28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c2c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c2e:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <MX_USART3_UART_Init+0x4c>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c34:	4b0c      	ldr	r3, [pc, #48]	; (8000c68 <MX_USART3_UART_Init+0x4c>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c3a:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <MX_USART3_UART_Init+0x4c>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <MX_USART3_UART_Init+0x4c>)
 8000c42:	220c      	movs	r2, #12
 8000c44:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <MX_USART3_UART_Init+0x4c>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <MX_USART3_UART_Init+0x4c>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c52:	4805      	ldr	r0, [pc, #20]	; (8000c68 <MX_USART3_UART_Init+0x4c>)
 8000c54:	f001 fef2 	bl	8002a3c <HAL_UART_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000c5e:	f7ff ff0b 	bl	8000a78 <Error_Handler>
  }

}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	20004a68 	.word	0x20004a68
 8000c6c:	40004800 	.word	0x40004800

08000c70 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b08a      	sub	sp, #40	; 0x28
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a1d      	ldr	r2, [pc, #116]	; (8000d04 <HAL_UART_MspInit+0x94>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d134      	bne.n	8000cfc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
 8000c96:	4b1c      	ldr	r3, [pc, #112]	; (8000d08 <HAL_UART_MspInit+0x98>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	4a1b      	ldr	r2, [pc, #108]	; (8000d08 <HAL_UART_MspInit+0x98>)
 8000c9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca2:	4b19      	ldr	r3, [pc, #100]	; (8000d08 <HAL_UART_MspInit+0x98>)
 8000ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60fb      	str	r3, [r7, #12]
 8000cb2:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <HAL_UART_MspInit+0x98>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a14      	ldr	r2, [pc, #80]	; (8000d08 <HAL_UART_MspInit+0x98>)
 8000cb8:	f043 0308 	orr.w	r3, r3, #8
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_UART_MspInit+0x98>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0308 	and.w	r3, r3, #8
 8000cc6:	60fb      	str	r3, [r7, #12]
 8000cc8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000cca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd8:	2303      	movs	r3, #3
 8000cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cdc:	2307      	movs	r3, #7
 8000cde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4809      	ldr	r0, [pc, #36]	; (8000d0c <HAL_UART_MspInit+0x9c>)
 8000ce8:	f000 fe12 	bl	8001910 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000cec:	2200      	movs	r2, #0
 8000cee:	2105      	movs	r1, #5
 8000cf0:	2027      	movs	r0, #39	; 0x27
 8000cf2:	f000 f953 	bl	8000f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000cf6:	2027      	movs	r0, #39	; 0x27
 8000cf8:	f000 f96c 	bl	8000fd4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000cfc:	bf00      	nop
 8000cfe:	3728      	adds	r7, #40	; 0x28
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	40004800 	.word	0x40004800
 8000d08:	40023800 	.word	0x40023800
 8000d0c:	40020c00 	.word	0x40020c00

08000d10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d48 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d16:	e003      	b.n	8000d20 <LoopCopyDataInit>

08000d18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d1e:	3104      	adds	r1, #4

08000d20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d20:	480b      	ldr	r0, [pc, #44]	; (8000d50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d28:	d3f6      	bcc.n	8000d18 <CopyDataInit>
  ldr  r2, =_sbss
 8000d2a:	4a0b      	ldr	r2, [pc, #44]	; (8000d58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d2c:	e002      	b.n	8000d34 <LoopFillZerobss>

08000d2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d30:	f842 3b04 	str.w	r3, [r2], #4

08000d34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d38:	d3f9      	bcc.n	8000d2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d3a:	f7ff ff59 	bl	8000bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d3e:	f007 fb87 	bl	8008450 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d42:	f7ff fde3 	bl	800090c <main>
  bx  lr    
 8000d46:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d48:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000d4c:	08008640 	.word	0x08008640
  ldr  r0, =_sdata
 8000d50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d54:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000d58:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000d5c:	20004aec 	.word	0x20004aec

08000d60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d68:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_Init+0x40>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0d      	ldr	r2, [pc, #52]	; (8000da4 <HAL_Init+0x40>)
 8000d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d74:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0a      	ldr	r2, [pc, #40]	; (8000da4 <HAL_Init+0x40>)
 8000d7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <HAL_Init+0x40>)
 8000d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8c:	2003      	movs	r0, #3
 8000d8e:	f000 f8fa 	bl	8000f86 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f7ff fea4 	bl	8000ae0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d98:	f7ff fe76 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40023c00 	.word	0x40023c00

08000da8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_IncTick+0x20>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	461a      	mov	r2, r3
 8000db2:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <HAL_IncTick+0x24>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4413      	add	r3, r2
 8000db8:	4a04      	ldr	r2, [pc, #16]	; (8000dcc <HAL_IncTick+0x24>)
 8000dba:	6013      	str	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000008 	.word	0x20000008
 8000dcc:	20004aa8 	.word	0x20004aa8

08000dd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000dd4:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <HAL_GetTick+0x14>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20004aa8 	.word	0x20004aa8

08000de8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df0:	f7ff ffee 	bl	8000dd0 <HAL_GetTick>
 8000df4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000e00:	d005      	beq.n	8000e0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_Delay+0x40>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	4413      	add	r3, r2
 8000e0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e0e:	bf00      	nop
 8000e10:	f7ff ffde 	bl	8000dd0 <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68fa      	ldr	r2, [r7, #12]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	d8f7      	bhi.n	8000e10 <HAL_Delay+0x28>
  {
  }
}
 8000e20:	bf00      	nop
 8000e22:	3710      	adds	r7, #16
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	20000008 	.word	0x20000008

08000e2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e42:	68ba      	ldr	r2, [r7, #8]
 8000e44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e48:	4013      	ands	r3, r2
 8000e4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e5e:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <__NVIC_SetPriorityGrouping+0x44>)
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	60d3      	str	r3, [r2, #12]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e78:	4b04      	ldr	r3, [pc, #16]	; (8000e8c <__NVIC_GetPriorityGrouping+0x18>)
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	0a1b      	lsrs	r3, r3, #8
 8000e7e:	f003 0307 	and.w	r3, r3, #7
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	db0b      	blt.n	8000eba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea2:	79fb      	ldrb	r3, [r7, #7]
 8000ea4:	f003 021f 	and.w	r2, r3, #31
 8000ea8:	4907      	ldr	r1, [pc, #28]	; (8000ec8 <__NVIC_EnableIRQ+0x38>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	095b      	lsrs	r3, r3, #5
 8000eb0:	2001      	movs	r0, #1
 8000eb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000eb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eba:	bf00      	nop
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	e000e100 	.word	0xe000e100

08000ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	db0a      	blt.n	8000ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	490c      	ldr	r1, [pc, #48]	; (8000f18 <__NVIC_SetPriority+0x4c>)
 8000ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eea:	0112      	lsls	r2, r2, #4
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	440b      	add	r3, r1
 8000ef0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef4:	e00a      	b.n	8000f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef6:	683b      	ldr	r3, [r7, #0]
 8000ef8:	b2da      	uxtb	r2, r3
 8000efa:	4908      	ldr	r1, [pc, #32]	; (8000f1c <__NVIC_SetPriority+0x50>)
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	f003 030f 	and.w	r3, r3, #15
 8000f02:	3b04      	subs	r3, #4
 8000f04:	0112      	lsls	r2, r2, #4
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	440b      	add	r3, r1
 8000f0a:	761a      	strb	r2, [r3, #24]
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000e100 	.word	0xe000e100
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b089      	sub	sp, #36	; 0x24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f003 0307 	and.w	r3, r3, #7
 8000f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f1c3 0307 	rsb	r3, r3, #7
 8000f3a:	2b04      	cmp	r3, #4
 8000f3c:	bf28      	it	cs
 8000f3e:	2304      	movcs	r3, #4
 8000f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3304      	adds	r3, #4
 8000f46:	2b06      	cmp	r3, #6
 8000f48:	d902      	bls.n	8000f50 <NVIC_EncodePriority+0x30>
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3b03      	subs	r3, #3
 8000f4e:	e000      	b.n	8000f52 <NVIC_EncodePriority+0x32>
 8000f50:	2300      	movs	r3, #0
 8000f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f58:	69bb      	ldr	r3, [r7, #24]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43da      	mvns	r2, r3
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	401a      	ands	r2, r3
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f68:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f72:	43d9      	mvns	r1, r3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f78:	4313      	orrs	r3, r2
         );
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3724      	adds	r7, #36	; 0x24
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ff4c 	bl	8000e2c <__NVIC_SetPriorityGrouping>
}
 8000f94:	bf00      	nop
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fae:	f7ff ff61 	bl	8000e74 <__NVIC_GetPriorityGrouping>
 8000fb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	68b9      	ldr	r1, [r7, #8]
 8000fb8:	6978      	ldr	r0, [r7, #20]
 8000fba:	f7ff ffb1 	bl	8000f20 <NVIC_EncodePriority>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ff80 	bl	8000ecc <__NVIC_SetPriority>
}
 8000fcc:	bf00      	nop
 8000fce:	3718      	adds	r7, #24
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff ff54 	bl	8000e90 <__NVIC_EnableIRQ>
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	2b02      	cmp	r3, #2
 8001002:	d004      	beq.n	800100e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2280      	movs	r2, #128	; 0x80
 8001008:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e00c      	b.n	8001028 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2205      	movs	r2, #5
 8001012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f022 0201 	bic.w	r2, r2, #1
 8001024:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001044:	4baa      	ldr	r3, [pc, #680]	; (80012f0 <HAL_ETH_Init+0x2bc>)
 8001046:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001048:	2300      	movs	r3, #0
 800104a:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 800104c:	2300      	movs	r3, #0
 800104e:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e185      	b.n	8001366 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d106      	bne.n	8001074 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff fa7e 	bl	8000570 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
 8001078:	4b9e      	ldr	r3, [pc, #632]	; (80012f4 <HAL_ETH_Init+0x2c0>)
 800107a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107c:	4a9d      	ldr	r2, [pc, #628]	; (80012f4 <HAL_ETH_Init+0x2c0>)
 800107e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001082:	6453      	str	r3, [r2, #68]	; 0x44
 8001084:	4b9b      	ldr	r3, [pc, #620]	; (80012f4 <HAL_ETH_Init+0x2c0>)
 8001086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800108c:	60bb      	str	r3, [r7, #8]
 800108e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001090:	4b99      	ldr	r3, [pc, #612]	; (80012f8 <HAL_ETH_Init+0x2c4>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	4a98      	ldr	r2, [pc, #608]	; (80012f8 <HAL_ETH_Init+0x2c4>)
 8001096:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800109a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800109c:	4b96      	ldr	r3, [pc, #600]	; (80012f8 <HAL_ETH_Init+0x2c4>)
 800109e:	685a      	ldr	r2, [r3, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	4994      	ldr	r1, [pc, #592]	; (80012f8 <HAL_ETH_Init+0x2c4>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f042 0201 	orr.w	r2, r2, #1
 80010bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010c0:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80010c2:	f7ff fe85 	bl	8000dd0 <HAL_GetTick>
 80010c6:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80010c8:	e011      	b.n	80010ee <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80010ca:	f7ff fe81 	bl	8000dd0 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010d8:	d909      	bls.n	80010ee <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2203      	movs	r2, #3
 80010de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e13b      	b.n	8001366 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d1e4      	bne.n	80010ca <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	691b      	ldr	r3, [r3, #16]
 8001106:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f023 031c 	bic.w	r3, r3, #28
 800110e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001110:	f001 f9f0 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8001114:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	4a78      	ldr	r2, [pc, #480]	; (80012fc <HAL_ETH_Init+0x2c8>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d908      	bls.n	8001130 <HAL_ETH_Init+0xfc>
 800111e:	69bb      	ldr	r3, [r7, #24]
 8001120:	4a77      	ldr	r2, [pc, #476]	; (8001300 <HAL_ETH_Init+0x2cc>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d804      	bhi.n	8001130 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	f043 0308 	orr.w	r3, r3, #8
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	e027      	b.n	8001180 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001130:	69bb      	ldr	r3, [r7, #24]
 8001132:	4a73      	ldr	r2, [pc, #460]	; (8001300 <HAL_ETH_Init+0x2cc>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d908      	bls.n	800114a <HAL_ETH_Init+0x116>
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	4a72      	ldr	r2, [pc, #456]	; (8001304 <HAL_ETH_Init+0x2d0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d804      	bhi.n	800114a <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f043 030c 	orr.w	r3, r3, #12
 8001146:	61fb      	str	r3, [r7, #28]
 8001148:	e01a      	b.n	8001180 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	4a6d      	ldr	r2, [pc, #436]	; (8001304 <HAL_ETH_Init+0x2d0>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d903      	bls.n	800115a <HAL_ETH_Init+0x126>
 8001152:	69bb      	ldr	r3, [r7, #24]
 8001154:	4a6c      	ldr	r2, [pc, #432]	; (8001308 <HAL_ETH_Init+0x2d4>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d911      	bls.n	800117e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	4a6a      	ldr	r2, [pc, #424]	; (8001308 <HAL_ETH_Init+0x2d4>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d908      	bls.n	8001174 <HAL_ETH_Init+0x140>
 8001162:	69bb      	ldr	r3, [r7, #24]
 8001164:	4a69      	ldr	r2, [pc, #420]	; (800130c <HAL_ETH_Init+0x2d8>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d804      	bhi.n	8001174 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	f043 0304 	orr.w	r3, r3, #4
 8001170:	61fb      	str	r3, [r7, #28]
 8001172:	e005      	b.n	8001180 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	f043 0310 	orr.w	r3, r3, #16
 800117a:	61fb      	str	r3, [r7, #28]
 800117c:	e000      	b.n	8001180 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800117e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	69fa      	ldr	r2, [r7, #28]
 8001186:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001188:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800118c:	2100      	movs	r1, #0
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 f956 	bl	8001440 <HAL_ETH_WritePHYRegister>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d00b      	beq.n	80011b2 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800119e:	6939      	ldr	r1, [r7, #16]
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f000 f9b3 	bl	800150c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e0d9      	b.n	8001366 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80011b2:	20ff      	movs	r0, #255	; 0xff
 80011b4:	f7ff fe18 	bl	8000de8 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f000 80a7 	beq.w	8001310 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80011c2:	f7ff fe05 	bl	8000dd0 <HAL_GetTick>
 80011c6:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	461a      	mov	r2, r3
 80011ce:	2101      	movs	r1, #1
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 f8cd 	bl	8001370 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80011d6:	f7ff fdfb 	bl	8000dd0 <HAL_GetTick>
 80011da:	4602      	mov	r2, r0
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d90f      	bls.n	8001208 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80011ec:	6939      	ldr	r1, [r7, #16]
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f000 f98c 	bl	800150c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2201      	movs	r2, #1
 80011f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2200      	movs	r2, #0
 8001200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e0ae      	b.n	8001366 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0da      	beq.n	80011c8 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001212:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001216:	2100      	movs	r1, #0
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f911 	bl	8001440 <HAL_ETH_WritePHYRegister>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d00b      	beq.n	800123c <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001228:	6939      	ldr	r1, [r7, #16]
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f000 f96e 	bl	800150c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2201      	movs	r2, #1
 8001234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001238:	2301      	movs	r3, #1
 800123a:	e094      	b.n	8001366 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800123c:	f7ff fdc8 	bl	8000dd0 <HAL_GetTick>
 8001240:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	461a      	mov	r2, r3
 8001248:	2101      	movs	r1, #1
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f000 f890 	bl	8001370 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001250:	f7ff fdbe 	bl	8000dd0 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	f241 3288 	movw	r2, #5000	; 0x1388
 800125e:	4293      	cmp	r3, r2
 8001260:	d90f      	bls.n	8001282 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001266:	6939      	ldr	r1, [r7, #16]
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f000 f94f 	bl	800150c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e071      	b.n	8001366 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f003 0320 	and.w	r3, r3, #32
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0da      	beq.n	8001242 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	461a      	mov	r2, r3
 8001292:	211f      	movs	r1, #31
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f000 f86b 	bl	8001370 <HAL_ETH_ReadPHYRegister>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00b      	beq.n	80012b8 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012a4:	6939      	ldr	r1, [r7, #16]
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 f930 	bl	800150c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2201      	movs	r2, #1
 80012b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80012b4:	2301      	movs	r3, #1
 80012b6:	e056      	b.n	8001366 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0310 	and.w	r3, r3, #16
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d004      	beq.n	80012cc <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	e002      	b.n	80012d2 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	f003 0304 	and.w	r3, r3, #4
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d003      	beq.n	80012e4 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2200      	movs	r2, #0
 80012e0:	609a      	str	r2, [r3, #8]
 80012e2:	e037      	b.n	8001354 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	e032      	b.n	8001354 <HAL_ETH_Init+0x320>
 80012ee:	bf00      	nop
 80012f0:	03938700 	.word	0x03938700
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40013800 	.word	0x40013800
 80012fc:	01312cff 	.word	0x01312cff
 8001300:	02160ebf 	.word	0x02160ebf
 8001304:	039386ff 	.word	0x039386ff
 8001308:	05f5e0ff 	.word	0x05f5e0ff
 800130c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	08db      	lsrs	r3, r3, #3
 8001316:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	085b      	lsrs	r3, r3, #1
 800131e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001320:	4313      	orrs	r3, r2
 8001322:	b29b      	uxth	r3, r3
 8001324:	461a      	mov	r2, r3
 8001326:	2100      	movs	r1, #0
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f000 f889 	bl	8001440 <HAL_ETH_WritePHYRegister>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00b      	beq.n	800134c <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001338:	6939      	ldr	r1, [r7, #16]
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 f8e6 	bl	800150c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2201      	movs	r2, #1
 8001344:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e00c      	b.n	8001366 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800134c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001350:	f7ff fd4a 	bl	8000de8 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001354:	6939      	ldr	r1, [r7, #16]
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 f8d8 	bl	800150c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	3720      	adds	r7, #32
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop

08001370 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	460b      	mov	r3, r1
 800137a:	607a      	str	r2, [r7, #4]
 800137c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800137e:	2300      	movs	r3, #0
 8001380:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b82      	cmp	r3, #130	; 0x82
 8001390:	d101      	bne.n	8001396 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001392:	2302      	movs	r3, #2
 8001394:	e050      	b.n	8001438 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2282      	movs	r2, #130	; 0x82
 800139a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	f003 031c 	and.w	r3, r3, #28
 80013ac:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	8a1b      	ldrh	r3, [r3, #16]
 80013b2:	02db      	lsls	r3, r3, #11
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80013bc:	897b      	ldrh	r3, [r7, #10]
 80013be:	019b      	lsls	r3, r3, #6
 80013c0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80013c4:	697a      	ldr	r2, [r7, #20]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	f023 0302 	bic.w	r3, r3, #2
 80013d0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	697a      	ldr	r2, [r7, #20]
 80013e0:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80013e2:	f7ff fcf5 	bl	8000dd0 <HAL_GetTick>
 80013e6:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80013e8:	e015      	b.n	8001416 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80013ea:	f7ff fcf1 	bl	8000dd0 <HAL_GetTick>
 80013ee:	4602      	mov	r2, r0
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013f8:	d309      	bcc.n	800140e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800140a:	2303      	movs	r3, #3
 800140c:	e014      	b.n	8001438 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	691b      	ldr	r3, [r3, #16]
 8001414:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	f003 0301 	and.w	r3, r3, #1
 800141c:	2b00      	cmp	r3, #0
 800141e:	d1e4      	bne.n	80013ea <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	b29b      	uxth	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3718      	adds	r7, #24
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	460b      	mov	r3, r1
 800144a:	607a      	str	r2, [r7, #4]
 800144c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800145c:	b2db      	uxtb	r3, r3
 800145e:	2b42      	cmp	r3, #66	; 0x42
 8001460:	d101      	bne.n	8001466 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001462:	2302      	movs	r3, #2
 8001464:	e04e      	b.n	8001504 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	2242      	movs	r2, #66	; 0x42
 800146a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	691b      	ldr	r3, [r3, #16]
 8001474:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f003 031c 	and.w	r3, r3, #28
 800147c:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	8a1b      	ldrh	r3, [r3, #16]
 8001482:	02db      	lsls	r3, r3, #11
 8001484:	b29b      	uxth	r3, r3
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	4313      	orrs	r3, r2
 800148a:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800148c:	897b      	ldrh	r3, [r7, #10]
 800148e:	019b      	lsls	r3, r3, #6
 8001490:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	4313      	orrs	r3, r2
 8001498:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800149a:	697b      	ldr	r3, [r7, #20]
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80014bc:	f7ff fc88 	bl	8000dd0 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80014c2:	e015      	b.n	80014f0 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80014c4:	f7ff fc84 	bl	8000dd0 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d2:	d309      	bcc.n	80014e8 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e00d      	b.n	8001504 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	691b      	ldr	r3, [r3, #16]
 80014ee:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	f003 0301 	and.w	r3, r3, #1
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d1e4      	bne.n	80014c4 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3718      	adds	r7, #24
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b0b0      	sub	sp, #192	; 0xc0
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d007      	beq.n	8001532 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001528:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001530:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800153a:	2300      	movs	r3, #0
 800153c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001542:	2300      	movs	r3, #0
 8001544:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d103      	bne.n	800155a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001552:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001556:	663b      	str	r3, [r7, #96]	; 0x60
 8001558:	e001      	b.n	800155e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800155e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001562:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001568:	2300      	movs	r3, #0
 800156a:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001570:	2300      	movs	r3, #0
 8001572:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001574:	2300      	movs	r3, #0
 8001576:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001578:	2340      	movs	r3, #64	; 0x40
 800157a:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 800157c:	2300      	movs	r3, #0
 800157e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001582:	2300      	movs	r3, #0
 8001584:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001588:	2300      	movs	r3, #0
 800158a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800158e:	2300      	movs	r3, #0
 8001590:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001594:	2300      	movs	r3, #0
 8001596:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 800159a:	2300      	movs	r3, #0
 800159c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80015a0:	2300      	movs	r3, #0
 80015a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80015a6:	2300      	movs	r3, #0
 80015a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80015b2:	2300      	movs	r3, #0
 80015b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80015e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80015e4:	4bac      	ldr	r3, [pc, #688]	; (8001898 <ETH_MACDMAConfig+0x38c>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80015ec:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80015ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80015f0:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80015f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80015f4:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80015f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80015f8:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80015fe:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001602:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001604:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001606:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800160c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800160e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001610:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001612:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001614:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001618:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800161a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800161c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800161e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001620:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001622:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001626:	4313      	orrs	r3, r2
 8001628:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001634:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001640:	2001      	movs	r0, #1
 8001642:	f7ff fbd1 	bl	8000de8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800164e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001650:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001652:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001654:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001656:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001658:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800165a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800165e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001660:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001664:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001666:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 800166a:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 800166c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001670:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001674:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 800167c:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800167e:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800168a:	2001      	movs	r0, #1
 800168c:	f7ff fbac 	bl	8000de8 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001698:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80016a2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80016ac:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80016b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016bc:	f64f 7341 	movw	r3, #65345	; 0xff41
 80016c0:	4013      	ands	r3, r2
 80016c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80016c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80016ca:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80016cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80016d0:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80016d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80016d6:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80016d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80016dc:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80016de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80016e2:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80016e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80016e8:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80016ea:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016ee:	4313      	orrs	r3, r2
 80016f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016fc:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001708:	2001      	movs	r0, #1
 800170a:	f7ff fb6d 	bl	8000de8 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001716:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001718:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800171c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	430a      	orrs	r2, r1
 8001726:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	69db      	ldr	r3, [r3, #28]
 800172e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001732:	2001      	movs	r0, #1
 8001734:	f7ff fb58 	bl	8000de8 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001740:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800174a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001750:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001754:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800175e:	2300      	movs	r3, #0
 8001760:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001762:	2300      	movs	r3, #0
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001766:	2304      	movs	r3, #4
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 800176a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001774:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001776:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800177a:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800177c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001780:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001782:	2380      	movs	r3, #128	; 0x80
 8001784:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001786:	2300      	movs	r3, #0
 8001788:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800178a:	2300      	movs	r3, #0
 800178c:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001796:	3318      	adds	r3, #24
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800179e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017a2:	4b3e      	ldr	r3, [pc, #248]	; (800189c <ETH_MACDMAConfig+0x390>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80017aa:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80017ac:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80017ae:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80017b0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80017b2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80017b4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80017b6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80017b8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80017ba:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80017bc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80017be:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80017c0:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80017c2:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80017c6:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80017c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80017ca:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80017cc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017d0:	4313      	orrs	r3, r2
 80017d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017de:	3318      	adds	r3, #24
 80017e0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017e4:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ee:	3318      	adds	r3, #24
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80017f6:	2001      	movs	r0, #1
 80017f8:	f7ff faf6 	bl	8000de8 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001804:	3318      	adds	r3, #24
 8001806:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800180a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800180c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800180e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001810:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001814:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001818:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800181a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800181c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800181e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001820:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001822:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001824:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001826:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001830:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001834:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001844:	2001      	movs	r0, #1
 8001846:	f7ff facf 	bl	8000de8 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001852:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001856:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d10f      	bne.n	8001880 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001868:	331c      	adds	r3, #28
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800187c:	331c      	adds	r3, #28
 800187e:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	461a      	mov	r2, r3
 8001886:	2100      	movs	r1, #0
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f000 f809 	bl	80018a0 <ETH_MACAddressConfig>
}
 800188e:	bf00      	nop
 8001890:	37c0      	adds	r7, #192	; 0xc0
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	ff20810f 	.word	0xff20810f
 800189c:	f8de3f23 	.word	0xf8de3f23

080018a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3305      	adds	r3, #5
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	021b      	lsls	r3, r3, #8
 80018b4:	687a      	ldr	r2, [r7, #4]
 80018b6:	3204      	adds	r2, #4
 80018b8:	7812      	ldrb	r2, [r2, #0]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <ETH_MACAddressConfig+0x68>)
 80018c2:	4413      	add	r3, r2
 80018c4:	461a      	mov	r2, r3
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	3303      	adds	r3, #3
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	061a      	lsls	r2, r3, #24
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	3302      	adds	r3, #2
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	041b      	lsls	r3, r3, #16
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3301      	adds	r3, #1
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	4313      	orrs	r3, r2
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	7812      	ldrb	r2, [r2, #0]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <ETH_MACAddressConfig+0x6c>)
 80018f2:	4413      	add	r3, r2
 80018f4:	461a      	mov	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	6013      	str	r3, [r2, #0]
}
 80018fa:	bf00      	nop
 80018fc:	371c      	adds	r7, #28
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	40028040 	.word	0x40028040
 800190c:	40028044 	.word	0x40028044

08001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
 800192a:	e177      	b.n	8001c1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800192c:	2201      	movs	r2, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	429a      	cmp	r2, r3
 8001946:	f040 8166 	bne.w	8001c16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d00b      	beq.n	800196a <HAL_GPIO_Init+0x5a>
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	2b02      	cmp	r3, #2
 8001958:	d007      	beq.n	800196a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800195e:	2b11      	cmp	r3, #17
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b12      	cmp	r3, #18
 8001968:	d130      	bne.n	80019cc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	2203      	movs	r2, #3
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	43db      	mvns	r3, r3
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	4013      	ands	r3, r2
 8001980:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	68da      	ldr	r2, [r3, #12]
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a0:	2201      	movs	r2, #1
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	091b      	lsrs	r3, r3, #4
 80019b6:	f003 0201 	and.w	r2, r3, #1
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	2203      	movs	r2, #3
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	689a      	ldr	r2, [r3, #8]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	d003      	beq.n	8001a0c <HAL_GPIO_Init+0xfc>
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b12      	cmp	r3, #18
 8001a0a:	d123      	bne.n	8001a54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	08da      	lsrs	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3208      	adds	r2, #8
 8001a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	220f      	movs	r2, #15
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	08da      	lsrs	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3208      	adds	r2, #8
 8001a4e:	69b9      	ldr	r1, [r7, #24]
 8001a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0203 	and.w	r2, r3, #3
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80c0 	beq.w	8001c16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b65      	ldr	r3, [pc, #404]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	4a64      	ldr	r2, [pc, #400]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa6:	4b62      	ldr	r3, [pc, #392]	; (8001c30 <HAL_GPIO_Init+0x320>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ab2:	4a60      	ldr	r2, [pc, #384]	; (8001c34 <HAL_GPIO_Init+0x324>)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	220f      	movs	r2, #15
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a57      	ldr	r2, [pc, #348]	; (8001c38 <HAL_GPIO_Init+0x328>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d037      	beq.n	8001b4e <HAL_GPIO_Init+0x23e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a56      	ldr	r2, [pc, #344]	; (8001c3c <HAL_GPIO_Init+0x32c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d031      	beq.n	8001b4a <HAL_GPIO_Init+0x23a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a55      	ldr	r2, [pc, #340]	; (8001c40 <HAL_GPIO_Init+0x330>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d02b      	beq.n	8001b46 <HAL_GPIO_Init+0x236>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a54      	ldr	r2, [pc, #336]	; (8001c44 <HAL_GPIO_Init+0x334>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d025      	beq.n	8001b42 <HAL_GPIO_Init+0x232>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a53      	ldr	r2, [pc, #332]	; (8001c48 <HAL_GPIO_Init+0x338>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01f      	beq.n	8001b3e <HAL_GPIO_Init+0x22e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a52      	ldr	r2, [pc, #328]	; (8001c4c <HAL_GPIO_Init+0x33c>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d019      	beq.n	8001b3a <HAL_GPIO_Init+0x22a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a51      	ldr	r2, [pc, #324]	; (8001c50 <HAL_GPIO_Init+0x340>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_GPIO_Init+0x226>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a50      	ldr	r2, [pc, #320]	; (8001c54 <HAL_GPIO_Init+0x344>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00d      	beq.n	8001b32 <HAL_GPIO_Init+0x222>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a4f      	ldr	r2, [pc, #316]	; (8001c58 <HAL_GPIO_Init+0x348>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d007      	beq.n	8001b2e <HAL_GPIO_Init+0x21e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4e      	ldr	r2, [pc, #312]	; (8001c5c <HAL_GPIO_Init+0x34c>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d101      	bne.n	8001b2a <HAL_GPIO_Init+0x21a>
 8001b26:	2309      	movs	r3, #9
 8001b28:	e012      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b2a:	230a      	movs	r3, #10
 8001b2c:	e010      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b2e:	2308      	movs	r3, #8
 8001b30:	e00e      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b32:	2307      	movs	r3, #7
 8001b34:	e00c      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b36:	2306      	movs	r3, #6
 8001b38:	e00a      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	e008      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	e006      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b42:	2303      	movs	r3, #3
 8001b44:	e004      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e002      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	f002 0203 	and.w	r2, r2, #3
 8001b56:	0092      	lsls	r2, r2, #2
 8001b58:	4093      	lsls	r3, r2
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b60:	4934      	ldr	r1, [pc, #208]	; (8001c34 <HAL_GPIO_Init+0x324>)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	089b      	lsrs	r3, r3, #2
 8001b66:	3302      	adds	r3, #2
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b6e:	4b3c      	ldr	r3, [pc, #240]	; (8001c60 <HAL_GPIO_Init+0x350>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b92:	4a33      	ldr	r2, [pc, #204]	; (8001c60 <HAL_GPIO_Init+0x350>)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b98:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <HAL_GPIO_Init+0x350>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bbc:	4a28      	ldr	r2, [pc, #160]	; (8001c60 <HAL_GPIO_Init+0x350>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc2:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <HAL_GPIO_Init+0x350>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001be6:	4a1e      	ldr	r2, [pc, #120]	; (8001c60 <HAL_GPIO_Init+0x350>)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bec:	4b1c      	ldr	r3, [pc, #112]	; (8001c60 <HAL_GPIO_Init+0x350>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c10:	4a13      	ldr	r2, [pc, #76]	; (8001c60 <HAL_GPIO_Init+0x350>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	61fb      	str	r3, [r7, #28]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	2b0f      	cmp	r3, #15
 8001c20:	f67f ae84 	bls.w	800192c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c24:	bf00      	nop
 8001c26:	3724      	adds	r7, #36	; 0x24
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	40023800 	.word	0x40023800
 8001c34:	40013800 	.word	0x40013800
 8001c38:	40020000 	.word	0x40020000
 8001c3c:	40020400 	.word	0x40020400
 8001c40:	40020800 	.word	0x40020800
 8001c44:	40020c00 	.word	0x40020c00
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40021400 	.word	0x40021400
 8001c50:	40021800 	.word	0x40021800
 8001c54:	40021c00 	.word	0x40021c00
 8001c58:	40022000 	.word	0x40022000
 8001c5c:	40022400 	.word	0x40022400
 8001c60:	40013c00 	.word	0x40013c00

08001c64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	807b      	strh	r3, [r7, #2]
 8001c70:	4613      	mov	r3, r2
 8001c72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c74:	787b      	ldrb	r3, [r7, #1]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c7a:	887a      	ldrh	r2, [r7, #2]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c80:	e003      	b.n	8001c8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c82:	887b      	ldrh	r3, [r7, #2]
 8001c84:	041a      	lsls	r2, r3, #16
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	619a      	str	r2, [r3, #24]
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e25b      	b.n	8002162 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d075      	beq.n	8001da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cb6:	4ba3      	ldr	r3, [pc, #652]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 030c 	and.w	r3, r3, #12
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d00c      	beq.n	8001cdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cc2:	4ba0      	ldr	r3, [pc, #640]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cca:	2b08      	cmp	r3, #8
 8001ccc:	d112      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cce:	4b9d      	ldr	r3, [pc, #628]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cda:	d10b      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cdc:	4b99      	ldr	r3, [pc, #612]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d05b      	beq.n	8001da0 <HAL_RCC_OscConfig+0x108>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d157      	bne.n	8001da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e236      	b.n	8002162 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfc:	d106      	bne.n	8001d0c <HAL_RCC_OscConfig+0x74>
 8001cfe:	4b91      	ldr	r3, [pc, #580]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a90      	ldr	r2, [pc, #576]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d08:	6013      	str	r3, [r2, #0]
 8001d0a:	e01d      	b.n	8001d48 <HAL_RCC_OscConfig+0xb0>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d14:	d10c      	bne.n	8001d30 <HAL_RCC_OscConfig+0x98>
 8001d16:	4b8b      	ldr	r3, [pc, #556]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a8a      	ldr	r2, [pc, #552]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d20:	6013      	str	r3, [r2, #0]
 8001d22:	4b88      	ldr	r3, [pc, #544]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a87      	ldr	r2, [pc, #540]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2c:	6013      	str	r3, [r2, #0]
 8001d2e:	e00b      	b.n	8001d48 <HAL_RCC_OscConfig+0xb0>
 8001d30:	4b84      	ldr	r3, [pc, #528]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a83      	ldr	r2, [pc, #524]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3a:	6013      	str	r3, [r2, #0]
 8001d3c:	4b81      	ldr	r3, [pc, #516]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a80      	ldr	r2, [pc, #512]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d013      	beq.n	8001d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7ff f83e 	bl	8000dd0 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d58:	f7ff f83a 	bl	8000dd0 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b64      	cmp	r3, #100	; 0x64
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e1fb      	b.n	8002162 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d6a:	4b76      	ldr	r3, [pc, #472]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0xc0>
 8001d76:	e014      	b.n	8001da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d78:	f7ff f82a 	bl	8000dd0 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d7e:	e008      	b.n	8001d92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d80:	f7ff f826 	bl	8000dd0 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	2b64      	cmp	r3, #100	; 0x64
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e1e7      	b.n	8002162 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d92:	4b6c      	ldr	r3, [pc, #432]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d1f0      	bne.n	8001d80 <HAL_RCC_OscConfig+0xe8>
 8001d9e:	e000      	b.n	8001da2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0302 	and.w	r3, r3, #2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d063      	beq.n	8001e76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dae:	4b65      	ldr	r3, [pc, #404]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	f003 030c 	and.w	r3, r3, #12
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00b      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dba:	4b62      	ldr	r3, [pc, #392]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001dc2:	2b08      	cmp	r3, #8
 8001dc4:	d11c      	bne.n	8001e00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001dc6:	4b5f      	ldr	r3, [pc, #380]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d116      	bne.n	8001e00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd2:	4b5c      	ldr	r3, [pc, #368]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d005      	beq.n	8001dea <HAL_RCC_OscConfig+0x152>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d001      	beq.n	8001dea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e1bb      	b.n	8002162 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dea:	4b56      	ldr	r3, [pc, #344]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	4952      	ldr	r1, [pc, #328]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dfe:	e03a      	b.n	8001e76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d020      	beq.n	8001e4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e08:	4b4f      	ldr	r3, [pc, #316]	; (8001f48 <HAL_RCC_OscConfig+0x2b0>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0e:	f7fe ffdf 	bl	8000dd0 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e16:	f7fe ffdb 	bl	8000dd0 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e19c      	b.n	8002162 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e28:	4b46      	ldr	r3, [pc, #280]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e34:	4b43      	ldr	r3, [pc, #268]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	4940      	ldr	r1, [pc, #256]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	600b      	str	r3, [r1, #0]
 8001e48:	e015      	b.n	8001e76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4a:	4b3f      	ldr	r3, [pc, #252]	; (8001f48 <HAL_RCC_OscConfig+0x2b0>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7fe ffbe 	bl	8000dd0 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e58:	f7fe ffba 	bl	8000dd0 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e17b      	b.n	8002162 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e6a:	4b36      	ldr	r3, [pc, #216]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0308 	and.w	r3, r3, #8
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d030      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d016      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e8a:	4b30      	ldr	r3, [pc, #192]	; (8001f4c <HAL_RCC_OscConfig+0x2b4>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e90:	f7fe ff9e 	bl	8000dd0 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e98:	f7fe ff9a 	bl	8000dd0 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e15b      	b.n	8002162 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eaa:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d0f0      	beq.n	8001e98 <HAL_RCC_OscConfig+0x200>
 8001eb6:	e015      	b.n	8001ee4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eb8:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <HAL_RCC_OscConfig+0x2b4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ebe:	f7fe ff87 	bl	8000dd0 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec4:	e008      	b.n	8001ed8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ec6:	f7fe ff83 	bl	8000dd0 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d901      	bls.n	8001ed8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e144      	b.n	8002162 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ed8:	4b1a      	ldr	r3, [pc, #104]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001eda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d1f0      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0304 	and.w	r3, r3, #4
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	f000 80a0 	beq.w	8002032 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10f      	bne.n	8001f22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	4b0f      	ldr	r3, [pc, #60]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	4a0e      	ldr	r2, [pc, #56]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f10:	6413      	str	r3, [r2, #64]	; 0x40
 8001f12:	4b0c      	ldr	r3, [pc, #48]	; (8001f44 <HAL_RCC_OscConfig+0x2ac>)
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	60bb      	str	r3, [r7, #8]
 8001f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_RCC_OscConfig+0x2b8>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d121      	bne.n	8001f72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f2e:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <HAL_RCC_OscConfig+0x2b8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <HAL_RCC_OscConfig+0x2b8>)
 8001f34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f3a:	f7fe ff49 	bl	8000dd0 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f40:	e011      	b.n	8001f66 <HAL_RCC_OscConfig+0x2ce>
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800
 8001f48:	42470000 	.word	0x42470000
 8001f4c:	42470e80 	.word	0x42470e80
 8001f50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f54:	f7fe ff3c 	bl	8000dd0 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e0fd      	b.n	8002162 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f66:	4b81      	ldr	r3, [pc, #516]	; (800216c <HAL_RCC_OscConfig+0x4d4>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	d106      	bne.n	8001f88 <HAL_RCC_OscConfig+0x2f0>
 8001f7a:	4b7d      	ldr	r3, [pc, #500]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	4a7c      	ldr	r2, [pc, #496]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6713      	str	r3, [r2, #112]	; 0x70
 8001f86:	e01c      	b.n	8001fc2 <HAL_RCC_OscConfig+0x32a>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b05      	cmp	r3, #5
 8001f8e:	d10c      	bne.n	8001faa <HAL_RCC_OscConfig+0x312>
 8001f90:	4b77      	ldr	r3, [pc, #476]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 8001f92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f94:	4a76      	ldr	r2, [pc, #472]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 8001f96:	f043 0304 	orr.w	r3, r3, #4
 8001f9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f9c:	4b74      	ldr	r3, [pc, #464]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 8001f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa0:	4a73      	ldr	r2, [pc, #460]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 8001fa2:	f043 0301 	orr.w	r3, r3, #1
 8001fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa8:	e00b      	b.n	8001fc2 <HAL_RCC_OscConfig+0x32a>
 8001faa:	4b71      	ldr	r3, [pc, #452]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 8001fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fae:	4a70      	ldr	r2, [pc, #448]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 8001fb0:	f023 0301 	bic.w	r3, r3, #1
 8001fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fb6:	4b6e      	ldr	r3, [pc, #440]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fba:	4a6d      	ldr	r2, [pc, #436]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 8001fbc:	f023 0304 	bic.w	r3, r3, #4
 8001fc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d015      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fca:	f7fe ff01 	bl	8000dd0 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7fe fefd 	bl	8000dd0 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e0bc      	b.n	8002162 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fe8:	4b61      	ldr	r3, [pc, #388]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 8001fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fec:	f003 0302 	and.w	r3, r3, #2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0ee      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x33a>
 8001ff4:	e014      	b.n	8002020 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff6:	f7fe feeb 	bl	8000dd0 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ffc:	e00a      	b.n	8002014 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ffe:	f7fe fee7 	bl	8000dd0 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	f241 3288 	movw	r2, #5000	; 0x1388
 800200c:	4293      	cmp	r3, r2
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e0a6      	b.n	8002162 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002014:	4b56      	ldr	r3, [pc, #344]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d1ee      	bne.n	8001ffe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002020:	7dfb      	ldrb	r3, [r7, #23]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d105      	bne.n	8002032 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002026:	4b52      	ldr	r3, [pc, #328]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	4a51      	ldr	r2, [pc, #324]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 800202c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002030:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 8092 	beq.w	8002160 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800203c:	4b4c      	ldr	r3, [pc, #304]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b08      	cmp	r3, #8
 8002046:	d05c      	beq.n	8002102 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d141      	bne.n	80020d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002050:	4b48      	ldr	r3, [pc, #288]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 8002052:	2200      	movs	r2, #0
 8002054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002056:	f7fe febb 	bl	8000dd0 <HAL_GetTick>
 800205a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205c:	e008      	b.n	8002070 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800205e:	f7fe feb7 	bl	8000dd0 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d901      	bls.n	8002070 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	e078      	b.n	8002162 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002070:	4b3f      	ldr	r3, [pc, #252]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d1f0      	bne.n	800205e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	69da      	ldr	r2, [r3, #28]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	019b      	lsls	r3, r3, #6
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	085b      	lsrs	r3, r3, #1
 8002094:	3b01      	subs	r3, #1
 8002096:	041b      	lsls	r3, r3, #16
 8002098:	431a      	orrs	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	061b      	lsls	r3, r3, #24
 80020a0:	4933      	ldr	r1, [pc, #204]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a6:	4b33      	ldr	r3, [pc, #204]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ac:	f7fe fe90 	bl	8000dd0 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b4:	f7fe fe8c 	bl	8000dd0 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e04d      	b.n	8002162 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c6:	4b2a      	ldr	r3, [pc, #168]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x41c>
 80020d2:	e045      	b.n	8002160 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d4:	4b27      	ldr	r3, [pc, #156]	; (8002174 <HAL_RCC_OscConfig+0x4dc>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020da:	f7fe fe79 	bl	8000dd0 <HAL_GetTick>
 80020de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e0:	e008      	b.n	80020f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e2:	f7fe fe75 	bl	8000dd0 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d901      	bls.n	80020f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	e036      	b.n	8002162 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020f4:	4b1e      	ldr	r3, [pc, #120]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d1f0      	bne.n	80020e2 <HAL_RCC_OscConfig+0x44a>
 8002100:	e02e      	b.n	8002160 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	699b      	ldr	r3, [r3, #24]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d101      	bne.n	800210e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e029      	b.n	8002162 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800210e:	4b18      	ldr	r3, [pc, #96]	; (8002170 <HAL_RCC_OscConfig+0x4d8>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	69db      	ldr	r3, [r3, #28]
 800211e:	429a      	cmp	r2, r3
 8002120:	d11c      	bne.n	800215c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800212c:	429a      	cmp	r2, r3
 800212e:	d115      	bne.n	800215c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002136:	4013      	ands	r3, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800213c:	4293      	cmp	r3, r2
 800213e:	d10d      	bne.n	800215c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800214a:	429a      	cmp	r2, r3
 800214c:	d106      	bne.n	800215c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002158:	429a      	cmp	r2, r3
 800215a:	d001      	beq.n	8002160 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e000      	b.n	8002162 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3718      	adds	r7, #24
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40007000 	.word	0x40007000
 8002170:	40023800 	.word	0x40023800
 8002174:	42470060 	.word	0x42470060

08002178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0cc      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800218c:	4b68      	ldr	r3, [pc, #416]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	683a      	ldr	r2, [r7, #0]
 8002196:	429a      	cmp	r2, r3
 8002198:	d90c      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800219a:	4b65      	ldr	r3, [pc, #404]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	b2d2      	uxtb	r2, r2
 80021a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	4b63      	ldr	r3, [pc, #396]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 030f 	and.w	r3, r3, #15
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0b8      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0302 	and.w	r3, r3, #2
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d020      	beq.n	8002202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021cc:	4b59      	ldr	r3, [pc, #356]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	4a58      	ldr	r2, [pc, #352]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0308 	and.w	r3, r3, #8
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021e4:	4b53      	ldr	r3, [pc, #332]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	4a52      	ldr	r2, [pc, #328]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f0:	4b50      	ldr	r3, [pc, #320]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	494d      	ldr	r1, [pc, #308]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80021fe:	4313      	orrs	r3, r2
 8002200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d044      	beq.n	8002298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d107      	bne.n	8002226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002216:	4b47      	ldr	r3, [pc, #284]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d119      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e07f      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b02      	cmp	r3, #2
 800222c:	d003      	beq.n	8002236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002232:	2b03      	cmp	r3, #3
 8002234:	d107      	bne.n	8002246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002236:	4b3f      	ldr	r3, [pc, #252]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d109      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e06f      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002246:	4b3b      	ldr	r3, [pc, #236]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e067      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002256:	4b37      	ldr	r3, [pc, #220]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f023 0203 	bic.w	r2, r3, #3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	4934      	ldr	r1, [pc, #208]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	4313      	orrs	r3, r2
 8002266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002268:	f7fe fdb2 	bl	8000dd0 <HAL_GetTick>
 800226c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800226e:	e00a      	b.n	8002286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002270:	f7fe fdae 	bl	8000dd0 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	f241 3288 	movw	r2, #5000	; 0x1388
 800227e:	4293      	cmp	r3, r2
 8002280:	d901      	bls.n	8002286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e04f      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002286:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f003 020c 	and.w	r2, r3, #12
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	429a      	cmp	r2, r3
 8002296:	d1eb      	bne.n	8002270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002298:	4b25      	ldr	r3, [pc, #148]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 030f 	and.w	r3, r3, #15
 80022a0:	683a      	ldr	r2, [r7, #0]
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d20c      	bcs.n	80022c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022a6:	4b22      	ldr	r3, [pc, #136]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80022a8:	683a      	ldr	r2, [r7, #0]
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ae:	4b20      	ldr	r3, [pc, #128]	; (8002330 <HAL_RCC_ClockConfig+0x1b8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d001      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	e032      	b.n	8002326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4916      	ldr	r1, [pc, #88]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ea:	4b12      	ldr	r3, [pc, #72]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	490e      	ldr	r1, [pc, #56]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022fe:	f000 f821 	bl	8002344 <HAL_RCC_GetSysClockFreq>
 8002302:	4601      	mov	r1, r0
 8002304:	4b0b      	ldr	r3, [pc, #44]	; (8002334 <HAL_RCC_ClockConfig+0x1bc>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	4a0a      	ldr	r2, [pc, #40]	; (8002338 <HAL_RCC_ClockConfig+0x1c0>)
 8002310:	5cd3      	ldrb	r3, [r2, r3]
 8002312:	fa21 f303 	lsr.w	r3, r1, r3
 8002316:	4a09      	ldr	r2, [pc, #36]	; (800233c <HAL_RCC_ClockConfig+0x1c4>)
 8002318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800231a:	4b09      	ldr	r3, [pc, #36]	; (8002340 <HAL_RCC_ClockConfig+0x1c8>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f7fe fbde 	bl	8000ae0 <HAL_InitTick>

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	40023c00 	.word	0x40023c00
 8002334:	40023800 	.word	0x40023800
 8002338:	08008588 	.word	0x08008588
 800233c:	20000000 	.word	0x20000000
 8002340:	20000004 	.word	0x20000004

08002344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	607b      	str	r3, [r7, #4]
 800234e:	2300      	movs	r3, #0
 8002350:	60fb      	str	r3, [r7, #12]
 8002352:	2300      	movs	r3, #0
 8002354:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800235a:	4b63      	ldr	r3, [pc, #396]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	2b04      	cmp	r3, #4
 8002364:	d007      	beq.n	8002376 <HAL_RCC_GetSysClockFreq+0x32>
 8002366:	2b08      	cmp	r3, #8
 8002368:	d008      	beq.n	800237c <HAL_RCC_GetSysClockFreq+0x38>
 800236a:	2b00      	cmp	r3, #0
 800236c:	f040 80b4 	bne.w	80024d8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002370:	4b5e      	ldr	r3, [pc, #376]	; (80024ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002372:	60bb      	str	r3, [r7, #8]
       break;
 8002374:	e0b3      	b.n	80024de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002376:	4b5e      	ldr	r3, [pc, #376]	; (80024f0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002378:	60bb      	str	r3, [r7, #8]
      break;
 800237a:	e0b0      	b.n	80024de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800237c:	4b5a      	ldr	r3, [pc, #360]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002384:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002386:	4b58      	ldr	r3, [pc, #352]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d04a      	beq.n	8002428 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002392:	4b55      	ldr	r3, [pc, #340]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	099b      	lsrs	r3, r3, #6
 8002398:	f04f 0400 	mov.w	r4, #0
 800239c:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023a0:	f04f 0200 	mov.w	r2, #0
 80023a4:	ea03 0501 	and.w	r5, r3, r1
 80023a8:	ea04 0602 	and.w	r6, r4, r2
 80023ac:	4629      	mov	r1, r5
 80023ae:	4632      	mov	r2, r6
 80023b0:	f04f 0300 	mov.w	r3, #0
 80023b4:	f04f 0400 	mov.w	r4, #0
 80023b8:	0154      	lsls	r4, r2, #5
 80023ba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023be:	014b      	lsls	r3, r1, #5
 80023c0:	4619      	mov	r1, r3
 80023c2:	4622      	mov	r2, r4
 80023c4:	1b49      	subs	r1, r1, r5
 80023c6:	eb62 0206 	sbc.w	r2, r2, r6
 80023ca:	f04f 0300 	mov.w	r3, #0
 80023ce:	f04f 0400 	mov.w	r4, #0
 80023d2:	0194      	lsls	r4, r2, #6
 80023d4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80023d8:	018b      	lsls	r3, r1, #6
 80023da:	1a5b      	subs	r3, r3, r1
 80023dc:	eb64 0402 	sbc.w	r4, r4, r2
 80023e0:	f04f 0100 	mov.w	r1, #0
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	00e2      	lsls	r2, r4, #3
 80023ea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023ee:	00d9      	lsls	r1, r3, #3
 80023f0:	460b      	mov	r3, r1
 80023f2:	4614      	mov	r4, r2
 80023f4:	195b      	adds	r3, r3, r5
 80023f6:	eb44 0406 	adc.w	r4, r4, r6
 80023fa:	f04f 0100 	mov.w	r1, #0
 80023fe:	f04f 0200 	mov.w	r2, #0
 8002402:	0262      	lsls	r2, r4, #9
 8002404:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002408:	0259      	lsls	r1, r3, #9
 800240a:	460b      	mov	r3, r1
 800240c:	4614      	mov	r4, r2
 800240e:	4618      	mov	r0, r3
 8002410:	4621      	mov	r1, r4
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f04f 0400 	mov.w	r4, #0
 8002418:	461a      	mov	r2, r3
 800241a:	4623      	mov	r3, r4
 800241c:	f7fd fee8 	bl	80001f0 <__aeabi_uldivmod>
 8002420:	4603      	mov	r3, r0
 8002422:	460c      	mov	r4, r1
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	e049      	b.n	80024bc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002428:	4b2f      	ldr	r3, [pc, #188]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	099b      	lsrs	r3, r3, #6
 800242e:	f04f 0400 	mov.w	r4, #0
 8002432:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	ea03 0501 	and.w	r5, r3, r1
 800243e:	ea04 0602 	and.w	r6, r4, r2
 8002442:	4629      	mov	r1, r5
 8002444:	4632      	mov	r2, r6
 8002446:	f04f 0300 	mov.w	r3, #0
 800244a:	f04f 0400 	mov.w	r4, #0
 800244e:	0154      	lsls	r4, r2, #5
 8002450:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002454:	014b      	lsls	r3, r1, #5
 8002456:	4619      	mov	r1, r3
 8002458:	4622      	mov	r2, r4
 800245a:	1b49      	subs	r1, r1, r5
 800245c:	eb62 0206 	sbc.w	r2, r2, r6
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	f04f 0400 	mov.w	r4, #0
 8002468:	0194      	lsls	r4, r2, #6
 800246a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800246e:	018b      	lsls	r3, r1, #6
 8002470:	1a5b      	subs	r3, r3, r1
 8002472:	eb64 0402 	sbc.w	r4, r4, r2
 8002476:	f04f 0100 	mov.w	r1, #0
 800247a:	f04f 0200 	mov.w	r2, #0
 800247e:	00e2      	lsls	r2, r4, #3
 8002480:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002484:	00d9      	lsls	r1, r3, #3
 8002486:	460b      	mov	r3, r1
 8002488:	4614      	mov	r4, r2
 800248a:	195b      	adds	r3, r3, r5
 800248c:	eb44 0406 	adc.w	r4, r4, r6
 8002490:	f04f 0100 	mov.w	r1, #0
 8002494:	f04f 0200 	mov.w	r2, #0
 8002498:	02a2      	lsls	r2, r4, #10
 800249a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800249e:	0299      	lsls	r1, r3, #10
 80024a0:	460b      	mov	r3, r1
 80024a2:	4614      	mov	r4, r2
 80024a4:	4618      	mov	r0, r3
 80024a6:	4621      	mov	r1, r4
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f04f 0400 	mov.w	r4, #0
 80024ae:	461a      	mov	r2, r3
 80024b0:	4623      	mov	r3, r4
 80024b2:	f7fd fe9d 	bl	80001f0 <__aeabi_uldivmod>
 80024b6:	4603      	mov	r3, r0
 80024b8:	460c      	mov	r4, r1
 80024ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024bc:	4b0a      	ldr	r3, [pc, #40]	; (80024e8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	0c1b      	lsrs	r3, r3, #16
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	3301      	adds	r3, #1
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80024cc:	68fa      	ldr	r2, [r7, #12]
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d4:	60bb      	str	r3, [r7, #8]
      break;
 80024d6:	e002      	b.n	80024de <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80024d8:	4b04      	ldr	r3, [pc, #16]	; (80024ec <HAL_RCC_GetSysClockFreq+0x1a8>)
 80024da:	60bb      	str	r3, [r7, #8]
      break;
 80024dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024de:	68bb      	ldr	r3, [r7, #8]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3714      	adds	r7, #20
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024e8:	40023800 	.word	0x40023800
 80024ec:	00f42400 	.word	0x00f42400
 80024f0:	007a1200 	.word	0x007a1200

080024f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f8:	4b03      	ldr	r3, [pc, #12]	; (8002508 <HAL_RCC_GetHCLKFreq+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000000 	.word	0x20000000

0800250c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002510:	f7ff fff0 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8002514:	4601      	mov	r1, r0
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	0a9b      	lsrs	r3, r3, #10
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4a03      	ldr	r2, [pc, #12]	; (8002530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002522:	5cd3      	ldrb	r3, [r2, r3]
 8002524:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002528:	4618      	mov	r0, r3
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40023800 	.word	0x40023800
 8002530:	08008598 	.word	0x08008598

08002534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002538:	f7ff ffdc 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 800253c:	4601      	mov	r1, r0
 800253e:	4b05      	ldr	r3, [pc, #20]	; (8002554 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	0b5b      	lsrs	r3, r3, #13
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	4a03      	ldr	r2, [pc, #12]	; (8002558 <HAL_RCC_GetPCLK2Freq+0x24>)
 800254a:	5cd3      	ldrb	r3, [r2, r3]
 800254c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002550:	4618      	mov	r0, r3
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40023800 	.word	0x40023800
 8002558:	08008598 	.word	0x08008598

0800255c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	220f      	movs	r2, #15
 800256a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_RCC_GetClockConfig+0x5c>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f003 0203 	and.w	r2, r3, #3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <HAL_RCC_GetClockConfig+0x5c>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002584:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002590:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	08db      	lsrs	r3, r3, #3
 8002596:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800259e:	4b07      	ldr	r3, [pc, #28]	; (80025bc <HAL_RCC_GetClockConfig+0x60>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 020f 	and.w	r2, r3, #15
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	601a      	str	r2, [r3, #0]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
 80025bc:	40023c00 	.word	0x40023c00

080025c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e01d      	b.n	800260e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f815 	bl	8002616 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3304      	adds	r3, #4
 80025fc:	4619      	mov	r1, r3
 80025fe:	4610      	mov	r0, r2
 8002600:	f000 f968 	bl	80028d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800262a:	b480      	push	{r7}
 800262c:	b085      	sub	sp, #20
 800262e:	af00      	add	r7, sp, #0
 8002630:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f042 0201 	orr.w	r2, r2, #1
 8002640:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2b06      	cmp	r3, #6
 8002652:	d007      	beq.n	8002664 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b02      	cmp	r3, #2
 8002686:	d122      	bne.n	80026ce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b02      	cmp	r3, #2
 8002694:	d11b      	bne.n	80026ce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f06f 0202 	mvn.w	r2, #2
 800269e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	f003 0303 	and.w	r3, r3, #3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d003      	beq.n	80026bc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f8ee 	bl	8002896 <HAL_TIM_IC_CaptureCallback>
 80026ba:	e005      	b.n	80026c8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026bc:	6878      	ldr	r0, [r7, #4]
 80026be:	f000 f8e0 	bl	8002882 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f000 f8f1 	bl	80028aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b04      	cmp	r3, #4
 80026da:	d122      	bne.n	8002722 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f003 0304 	and.w	r3, r3, #4
 80026e6:	2b04      	cmp	r3, #4
 80026e8:	d11b      	bne.n	8002722 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f06f 0204 	mvn.w	r2, #4
 80026f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	699b      	ldr	r3, [r3, #24]
 8002700:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f8c4 	bl	8002896 <HAL_TIM_IC_CaptureCallback>
 800270e:	e005      	b.n	800271c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f8b6 	bl	8002882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f8c7 	bl	80028aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	f003 0308 	and.w	r3, r3, #8
 800272c:	2b08      	cmp	r3, #8
 800272e:	d122      	bne.n	8002776 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b08      	cmp	r3, #8
 800273c:	d11b      	bne.n	8002776 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f06f 0208 	mvn.w	r2, #8
 8002746:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2204      	movs	r2, #4
 800274c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	f003 0303 	and.w	r3, r3, #3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 f89a 	bl	8002896 <HAL_TIM_IC_CaptureCallback>
 8002762:	e005      	b.n	8002770 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f88c 	bl	8002882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f89d 	bl	80028aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	f003 0310 	and.w	r3, r3, #16
 8002780:	2b10      	cmp	r3, #16
 8002782:	d122      	bne.n	80027ca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	f003 0310 	and.w	r3, r3, #16
 800278e:	2b10      	cmp	r3, #16
 8002790:	d11b      	bne.n	80027ca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f06f 0210 	mvn.w	r2, #16
 800279a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2208      	movs	r2, #8
 80027a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f870 	bl	8002896 <HAL_TIM_IC_CaptureCallback>
 80027b6:	e005      	b.n	80027c4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f862 	bl	8002882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f873 	bl	80028aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d10e      	bne.n	80027f6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d107      	bne.n	80027f6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f06f 0201 	mvn.w	r2, #1
 80027ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f7fe f92f 	bl	8000a54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002800:	2b80      	cmp	r3, #128	; 0x80
 8002802:	d10e      	bne.n	8002822 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280e:	2b80      	cmp	r3, #128	; 0x80
 8002810:	d107      	bne.n	8002822 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800281a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f903 	bl	8002a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282c:	2b40      	cmp	r3, #64	; 0x40
 800282e:	d10e      	bne.n	800284e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283a:	2b40      	cmp	r3, #64	; 0x40
 800283c:	d107      	bne.n	800284e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 f838 	bl	80028be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b20      	cmp	r3, #32
 800285a:	d10e      	bne.n	800287a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f003 0320 	and.w	r3, r3, #32
 8002866:	2b20      	cmp	r3, #32
 8002868:	d107      	bne.n	800287a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f06f 0220 	mvn.w	r2, #32
 8002872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f8cd 	bl	8002a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800287a:	bf00      	nop
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002882:	b480      	push	{r7}
 8002884:	b083      	sub	sp, #12
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800288a:	bf00      	nop
 800288c:	370c      	adds	r7, #12
 800288e:	46bd      	mov	sp, r7
 8002890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002894:	4770      	bx	lr

08002896 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002896:	b480      	push	{r7}
 8002898:	b083      	sub	sp, #12
 800289a:	af00      	add	r7, sp, #0
 800289c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800289e:	bf00      	nop
 80028a0:	370c      	adds	r7, #12
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr

080028aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a40      	ldr	r2, [pc, #256]	; (80029e8 <TIM_Base_SetConfig+0x114>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d013      	beq.n	8002914 <TIM_Base_SetConfig+0x40>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028f2:	d00f      	beq.n	8002914 <TIM_Base_SetConfig+0x40>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a3d      	ldr	r2, [pc, #244]	; (80029ec <TIM_Base_SetConfig+0x118>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d00b      	beq.n	8002914 <TIM_Base_SetConfig+0x40>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a3c      	ldr	r2, [pc, #240]	; (80029f0 <TIM_Base_SetConfig+0x11c>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d007      	beq.n	8002914 <TIM_Base_SetConfig+0x40>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a3b      	ldr	r2, [pc, #236]	; (80029f4 <TIM_Base_SetConfig+0x120>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d003      	beq.n	8002914 <TIM_Base_SetConfig+0x40>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4a3a      	ldr	r2, [pc, #232]	; (80029f8 <TIM_Base_SetConfig+0x124>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d108      	bne.n	8002926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	4313      	orrs	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a2f      	ldr	r2, [pc, #188]	; (80029e8 <TIM_Base_SetConfig+0x114>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d02b      	beq.n	8002986 <TIM_Base_SetConfig+0xb2>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002934:	d027      	beq.n	8002986 <TIM_Base_SetConfig+0xb2>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a2c      	ldr	r2, [pc, #176]	; (80029ec <TIM_Base_SetConfig+0x118>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d023      	beq.n	8002986 <TIM_Base_SetConfig+0xb2>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a2b      	ldr	r2, [pc, #172]	; (80029f0 <TIM_Base_SetConfig+0x11c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d01f      	beq.n	8002986 <TIM_Base_SetConfig+0xb2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a2a      	ldr	r2, [pc, #168]	; (80029f4 <TIM_Base_SetConfig+0x120>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d01b      	beq.n	8002986 <TIM_Base_SetConfig+0xb2>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a29      	ldr	r2, [pc, #164]	; (80029f8 <TIM_Base_SetConfig+0x124>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d017      	beq.n	8002986 <TIM_Base_SetConfig+0xb2>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a28      	ldr	r2, [pc, #160]	; (80029fc <TIM_Base_SetConfig+0x128>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d013      	beq.n	8002986 <TIM_Base_SetConfig+0xb2>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a27      	ldr	r2, [pc, #156]	; (8002a00 <TIM_Base_SetConfig+0x12c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d00f      	beq.n	8002986 <TIM_Base_SetConfig+0xb2>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a26      	ldr	r2, [pc, #152]	; (8002a04 <TIM_Base_SetConfig+0x130>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d00b      	beq.n	8002986 <TIM_Base_SetConfig+0xb2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a25      	ldr	r2, [pc, #148]	; (8002a08 <TIM_Base_SetConfig+0x134>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d007      	beq.n	8002986 <TIM_Base_SetConfig+0xb2>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a24      	ldr	r2, [pc, #144]	; (8002a0c <TIM_Base_SetConfig+0x138>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d003      	beq.n	8002986 <TIM_Base_SetConfig+0xb2>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a23      	ldr	r2, [pc, #140]	; (8002a10 <TIM_Base_SetConfig+0x13c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d108      	bne.n	8002998 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	68fa      	ldr	r2, [r7, #12]
 8002994:	4313      	orrs	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a0a      	ldr	r2, [pc, #40]	; (80029e8 <TIM_Base_SetConfig+0x114>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d003      	beq.n	80029cc <TIM_Base_SetConfig+0xf8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a0c      	ldr	r2, [pc, #48]	; (80029f8 <TIM_Base_SetConfig+0x124>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d103      	bne.n	80029d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	691a      	ldr	r2, [r3, #16]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	615a      	str	r2, [r3, #20]
}
 80029da:	bf00      	nop
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	40010000 	.word	0x40010000
 80029ec:	40000400 	.word	0x40000400
 80029f0:	40000800 	.word	0x40000800
 80029f4:	40000c00 	.word	0x40000c00
 80029f8:	40010400 	.word	0x40010400
 80029fc:	40014000 	.word	0x40014000
 8002a00:	40014400 	.word	0x40014400
 8002a04:	40014800 	.word	0x40014800
 8002a08:	40001800 	.word	0x40001800
 8002a0c:	40001c00 	.word	0x40001c00
 8002a10:	40002000 	.word	0x40002000

08002a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d101      	bne.n	8002a4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e03f      	b.n	8002ace <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d106      	bne.n	8002a68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7fe f904 	bl	8000c70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2224      	movs	r2, #36	; 0x24
 8002a6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 fb0d 	bl	80030a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	691a      	ldr	r2, [r3, #16]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002aa4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ab4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b085      	sub	sp, #20
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	d130      	bne.n	8002b52 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d002      	beq.n	8002afc <HAL_UART_Transmit_IT+0x26>
 8002af6:	88fb      	ldrh	r3, [r7, #6]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e029      	b.n	8002b54 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_UART_Transmit_IT+0x38>
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	e022      	b.n	8002b54 <HAL_UART_Transmit_IT+0x7e>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2201      	movs	r2, #1
 8002b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	68ba      	ldr	r2, [r7, #8]
 8002b1a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	88fa      	ldrh	r2, [r7, #6]
 8002b20:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	88fa      	ldrh	r2, [r7, #6]
 8002b26:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2221      	movs	r2, #33	; 0x21
 8002b32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b4c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	e000      	b.n	8002b54 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002b52:	2302      	movs	r3, #2
  }
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002b60:	b480      	push	{r7}
 8002b62:	b085      	sub	sp, #20
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	60b9      	str	r1, [r7, #8]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b20      	cmp	r3, #32
 8002b78:	d140      	bne.n	8002bfc <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d002      	beq.n	8002b86 <HAL_UART_Receive_IT+0x26>
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d101      	bne.n	8002b8a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e039      	b.n	8002bfe <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d101      	bne.n	8002b98 <HAL_UART_Receive_IT+0x38>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e032      	b.n	8002bfe <HAL_UART_Receive_IT+0x9e>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	88fa      	ldrh	r2, [r7, #6]
 8002baa:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	88fa      	ldrh	r2, [r7, #6]
 8002bb0:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2222      	movs	r2, #34	; 0x22
 8002bbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68da      	ldr	r2, [r3, #12]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bd6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f042 0201 	orr.w	r2, r2, #1
 8002be6:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0220 	orr.w	r2, r2, #32
 8002bf6:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	e000      	b.n	8002bfe <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002bfc:	2302      	movs	r3, #2
  }
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b088      	sub	sp, #32
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	695b      	ldr	r3, [r3, #20]
 8002c2a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 030f 	and.w	r3, r3, #15
 8002c3a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10d      	bne.n	8002c5e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	f003 0320 	and.w	r3, r3, #32
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d008      	beq.n	8002c5e <HAL_UART_IRQHandler+0x52>
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 f9a0 	bl	8002f9c <UART_Receive_IT>
      return;
 8002c5c:	e0d1      	b.n	8002e02 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 80b0 	beq.w	8002dc6 <HAL_UART_IRQHandler+0x1ba>
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d105      	bne.n	8002c7c <HAL_UART_IRQHandler+0x70>
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 80a5 	beq.w	8002dc6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <HAL_UART_IRQHandler+0x90>
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d005      	beq.n	8002c9c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c94:	f043 0201 	orr.w	r2, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_UART_IRQHandler+0xb0>
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d005      	beq.n	8002cbc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb4:	f043 0202 	orr.w	r2, r3, #2
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <HAL_UART_IRQHandler+0xd0>
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d005      	beq.n	8002cdc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd4:	f043 0204 	orr.w	r2, r3, #4
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00f      	beq.n	8002d06 <HAL_UART_IRQHandler+0xfa>
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	f003 0320 	and.w	r3, r3, #32
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d104      	bne.n	8002cfa <HAL_UART_IRQHandler+0xee>
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d005      	beq.n	8002d06 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfe:	f043 0208 	orr.w	r2, r3, #8
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d078      	beq.n	8002e00 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d007      	beq.n	8002d28 <HAL_UART_IRQHandler+0x11c>
 8002d18:	69bb      	ldr	r3, [r7, #24]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d002      	beq.n	8002d28 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 f93a 	bl	8002f9c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d32:	2b40      	cmp	r3, #64	; 0x40
 8002d34:	bf0c      	ite	eq
 8002d36:	2301      	moveq	r3, #1
 8002d38:	2300      	movne	r3, #0
 8002d3a:	b2db      	uxtb	r3, r3
 8002d3c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d102      	bne.n	8002d50 <HAL_UART_IRQHandler+0x144>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d031      	beq.n	8002db4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f883 	bl	8002e5c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d60:	2b40      	cmp	r3, #64	; 0x40
 8002d62:	d123      	bne.n	8002dac <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d72:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d80:	4a21      	ldr	r2, [pc, #132]	; (8002e08 <HAL_UART_IRQHandler+0x1fc>)
 8002d82:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7fe f931 	bl	8000ff0 <HAL_DMA_Abort_IT>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d016      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d9a:	687a      	ldr	r2, [r7, #4]
 8002d9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da2:	e00e      	b.n	8002dc2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002da4:	6878      	ldr	r0, [r7, #4]
 8002da6:	f000 f831 	bl	8002e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002daa:	e00a      	b.n	8002dc2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f82d 	bl	8002e0c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db2:	e006      	b.n	8002dc2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f829 	bl	8002e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002dc0:	e01e      	b.n	8002e00 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dc2:	bf00      	nop
    return;
 8002dc4:	e01c      	b.n	8002e00 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d008      	beq.n	8002de2 <HAL_UART_IRQHandler+0x1d6>
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f870 	bl	8002ec0 <UART_Transmit_IT>
    return;
 8002de0:	e00f      	b.n	8002e02 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_UART_IRQHandler+0x1f6>
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f8b8 	bl	8002f6c <UART_EndTransmit_IT>
    return;
 8002dfc:	bf00      	nop
 8002dfe:	e000      	b.n	8002e02 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002e00:	bf00      	nop
  }
}
 8002e02:	3720      	adds	r7, #32
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	08002e99 	.word	0x08002e99

08002e0c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b085      	sub	sp, #20
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	b2db      	uxtb	r3, r3
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3714      	adds	r7, #20
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002e72:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	695a      	ldr	r2, [r3, #20]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0201 	bic.w	r2, r2, #1
 8002e82:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002e8c:	bf00      	nop
 8002e8e:	370c      	adds	r7, #12
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f7ff ffaa 	bl	8002e0c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002eb8:	bf00      	nop
 8002eba:	3710      	adds	r7, #16
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}

08002ec0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b21      	cmp	r3, #33	; 0x21
 8002ed2:	d144      	bne.n	8002f5e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002edc:	d11a      	bne.n	8002f14 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	881b      	ldrh	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ef2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d105      	bne.n	8002f08 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	1c9a      	adds	r2, r3, #2
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	621a      	str	r2, [r3, #32]
 8002f06:	e00e      	b.n	8002f26 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	621a      	str	r2, [r3, #32]
 8002f12:	e008      	b.n	8002f26 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	1c59      	adds	r1, r3, #1
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6211      	str	r1, [r2, #32]
 8002f1e:	781a      	ldrb	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	4619      	mov	r1, r3
 8002f34:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10f      	bne.n	8002f5a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f48:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f58:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002f5e:	2302      	movs	r3, #2
  }
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	68da      	ldr	r2, [r3, #12]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f82:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f005 fa2f 	bl	80083f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3708      	adds	r7, #8
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b22      	cmp	r3, #34	; 0x22
 8002fae:	d171      	bne.n	8003094 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb8:	d123      	bne.n	8003002 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10e      	bne.n	8002fe6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	1c9a      	adds	r2, r3, #2
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	629a      	str	r2, [r3, #40]	; 0x28
 8002fe4:	e029      	b.n	800303a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	1c5a      	adds	r2, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	629a      	str	r2, [r3, #40]	; 0x28
 8003000:	e01b      	b.n	800303a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10a      	bne.n	8003020 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	6858      	ldr	r0, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003014:	1c59      	adds	r1, r3, #1
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6291      	str	r1, [r2, #40]	; 0x28
 800301a:	b2c2      	uxtb	r2, r0
 800301c:	701a      	strb	r2, [r3, #0]
 800301e:	e00c      	b.n	800303a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302c:	1c58      	adds	r0, r3, #1
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	6288      	str	r0, [r1, #40]	; 0x28
 8003032:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29b      	uxth	r3, r3
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	4619      	mov	r1, r3
 8003048:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800304a:	2b00      	cmp	r3, #0
 800304c:	d120      	bne.n	8003090 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68da      	ldr	r2, [r3, #12]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 0220 	bic.w	r2, r2, #32
 800305c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68da      	ldr	r2, [r3, #12]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800306c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695a      	ldr	r2, [r3, #20]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f022 0201 	bic.w	r2, r2, #1
 800307c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2220      	movs	r2, #32
 8003082:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f004 fcc8 	bl	8007a1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	e002      	b.n	8003096 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	e000      	b.n	8003096 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003094:	2302      	movs	r3, #2
  }
}
 8003096:	4618      	mov	r0, r3
 8003098:	3710      	adds	r7, #16
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80030a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	68da      	ldr	r2, [r3, #12]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80030e2:	f023 030c 	bic.w	r3, r3, #12
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6812      	ldr	r2, [r2, #0]
 80030ea:	68f9      	ldr	r1, [r7, #12]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699a      	ldr	r2, [r3, #24]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800310e:	f040 818b 	bne.w	8003428 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4ac1      	ldr	r2, [pc, #772]	; (800341c <UART_SetConfig+0x37c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d005      	beq.n	8003128 <UART_SetConfig+0x88>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4abf      	ldr	r2, [pc, #764]	; (8003420 <UART_SetConfig+0x380>)
 8003122:	4293      	cmp	r3, r2
 8003124:	f040 80bd 	bne.w	80032a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003128:	f7ff fa04 	bl	8002534 <HAL_RCC_GetPCLK2Freq>
 800312c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	461d      	mov	r5, r3
 8003132:	f04f 0600 	mov.w	r6, #0
 8003136:	46a8      	mov	r8, r5
 8003138:	46b1      	mov	r9, r6
 800313a:	eb18 0308 	adds.w	r3, r8, r8
 800313e:	eb49 0409 	adc.w	r4, r9, r9
 8003142:	4698      	mov	r8, r3
 8003144:	46a1      	mov	r9, r4
 8003146:	eb18 0805 	adds.w	r8, r8, r5
 800314a:	eb49 0906 	adc.w	r9, r9, r6
 800314e:	f04f 0100 	mov.w	r1, #0
 8003152:	f04f 0200 	mov.w	r2, #0
 8003156:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800315a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800315e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003162:	4688      	mov	r8, r1
 8003164:	4691      	mov	r9, r2
 8003166:	eb18 0005 	adds.w	r0, r8, r5
 800316a:	eb49 0106 	adc.w	r1, r9, r6
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	461d      	mov	r5, r3
 8003174:	f04f 0600 	mov.w	r6, #0
 8003178:	196b      	adds	r3, r5, r5
 800317a:	eb46 0406 	adc.w	r4, r6, r6
 800317e:	461a      	mov	r2, r3
 8003180:	4623      	mov	r3, r4
 8003182:	f7fd f835 	bl	80001f0 <__aeabi_uldivmod>
 8003186:	4603      	mov	r3, r0
 8003188:	460c      	mov	r4, r1
 800318a:	461a      	mov	r2, r3
 800318c:	4ba5      	ldr	r3, [pc, #660]	; (8003424 <UART_SetConfig+0x384>)
 800318e:	fba3 2302 	umull	r2, r3, r3, r2
 8003192:	095b      	lsrs	r3, r3, #5
 8003194:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	461d      	mov	r5, r3
 800319c:	f04f 0600 	mov.w	r6, #0
 80031a0:	46a9      	mov	r9, r5
 80031a2:	46b2      	mov	sl, r6
 80031a4:	eb19 0309 	adds.w	r3, r9, r9
 80031a8:	eb4a 040a 	adc.w	r4, sl, sl
 80031ac:	4699      	mov	r9, r3
 80031ae:	46a2      	mov	sl, r4
 80031b0:	eb19 0905 	adds.w	r9, r9, r5
 80031b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80031b8:	f04f 0100 	mov.w	r1, #0
 80031bc:	f04f 0200 	mov.w	r2, #0
 80031c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80031c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80031cc:	4689      	mov	r9, r1
 80031ce:	4692      	mov	sl, r2
 80031d0:	eb19 0005 	adds.w	r0, r9, r5
 80031d4:	eb4a 0106 	adc.w	r1, sl, r6
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	461d      	mov	r5, r3
 80031de:	f04f 0600 	mov.w	r6, #0
 80031e2:	196b      	adds	r3, r5, r5
 80031e4:	eb46 0406 	adc.w	r4, r6, r6
 80031e8:	461a      	mov	r2, r3
 80031ea:	4623      	mov	r3, r4
 80031ec:	f7fd f800 	bl	80001f0 <__aeabi_uldivmod>
 80031f0:	4603      	mov	r3, r0
 80031f2:	460c      	mov	r4, r1
 80031f4:	461a      	mov	r2, r3
 80031f6:	4b8b      	ldr	r3, [pc, #556]	; (8003424 <UART_SetConfig+0x384>)
 80031f8:	fba3 1302 	umull	r1, r3, r3, r2
 80031fc:	095b      	lsrs	r3, r3, #5
 80031fe:	2164      	movs	r1, #100	; 0x64
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	00db      	lsls	r3, r3, #3
 8003208:	3332      	adds	r3, #50	; 0x32
 800320a:	4a86      	ldr	r2, [pc, #536]	; (8003424 <UART_SetConfig+0x384>)
 800320c:	fba2 2303 	umull	r2, r3, r2, r3
 8003210:	095b      	lsrs	r3, r3, #5
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003218:	4498      	add	r8, r3
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	461d      	mov	r5, r3
 800321e:	f04f 0600 	mov.w	r6, #0
 8003222:	46a9      	mov	r9, r5
 8003224:	46b2      	mov	sl, r6
 8003226:	eb19 0309 	adds.w	r3, r9, r9
 800322a:	eb4a 040a 	adc.w	r4, sl, sl
 800322e:	4699      	mov	r9, r3
 8003230:	46a2      	mov	sl, r4
 8003232:	eb19 0905 	adds.w	r9, r9, r5
 8003236:	eb4a 0a06 	adc.w	sl, sl, r6
 800323a:	f04f 0100 	mov.w	r1, #0
 800323e:	f04f 0200 	mov.w	r2, #0
 8003242:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003246:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800324a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800324e:	4689      	mov	r9, r1
 8003250:	4692      	mov	sl, r2
 8003252:	eb19 0005 	adds.w	r0, r9, r5
 8003256:	eb4a 0106 	adc.w	r1, sl, r6
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	461d      	mov	r5, r3
 8003260:	f04f 0600 	mov.w	r6, #0
 8003264:	196b      	adds	r3, r5, r5
 8003266:	eb46 0406 	adc.w	r4, r6, r6
 800326a:	461a      	mov	r2, r3
 800326c:	4623      	mov	r3, r4
 800326e:	f7fc ffbf 	bl	80001f0 <__aeabi_uldivmod>
 8003272:	4603      	mov	r3, r0
 8003274:	460c      	mov	r4, r1
 8003276:	461a      	mov	r2, r3
 8003278:	4b6a      	ldr	r3, [pc, #424]	; (8003424 <UART_SetConfig+0x384>)
 800327a:	fba3 1302 	umull	r1, r3, r3, r2
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	2164      	movs	r1, #100	; 0x64
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	00db      	lsls	r3, r3, #3
 800328a:	3332      	adds	r3, #50	; 0x32
 800328c:	4a65      	ldr	r2, [pc, #404]	; (8003424 <UART_SetConfig+0x384>)
 800328e:	fba2 2303 	umull	r2, r3, r2, r3
 8003292:	095b      	lsrs	r3, r3, #5
 8003294:	f003 0207 	and.w	r2, r3, #7
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4442      	add	r2, r8
 800329e:	609a      	str	r2, [r3, #8]
 80032a0:	e26f      	b.n	8003782 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80032a2:	f7ff f933 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 80032a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	461d      	mov	r5, r3
 80032ac:	f04f 0600 	mov.w	r6, #0
 80032b0:	46a8      	mov	r8, r5
 80032b2:	46b1      	mov	r9, r6
 80032b4:	eb18 0308 	adds.w	r3, r8, r8
 80032b8:	eb49 0409 	adc.w	r4, r9, r9
 80032bc:	4698      	mov	r8, r3
 80032be:	46a1      	mov	r9, r4
 80032c0:	eb18 0805 	adds.w	r8, r8, r5
 80032c4:	eb49 0906 	adc.w	r9, r9, r6
 80032c8:	f04f 0100 	mov.w	r1, #0
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80032d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80032d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80032dc:	4688      	mov	r8, r1
 80032de:	4691      	mov	r9, r2
 80032e0:	eb18 0005 	adds.w	r0, r8, r5
 80032e4:	eb49 0106 	adc.w	r1, r9, r6
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	461d      	mov	r5, r3
 80032ee:	f04f 0600 	mov.w	r6, #0
 80032f2:	196b      	adds	r3, r5, r5
 80032f4:	eb46 0406 	adc.w	r4, r6, r6
 80032f8:	461a      	mov	r2, r3
 80032fa:	4623      	mov	r3, r4
 80032fc:	f7fc ff78 	bl	80001f0 <__aeabi_uldivmod>
 8003300:	4603      	mov	r3, r0
 8003302:	460c      	mov	r4, r1
 8003304:	461a      	mov	r2, r3
 8003306:	4b47      	ldr	r3, [pc, #284]	; (8003424 <UART_SetConfig+0x384>)
 8003308:	fba3 2302 	umull	r2, r3, r3, r2
 800330c:	095b      	lsrs	r3, r3, #5
 800330e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	461d      	mov	r5, r3
 8003316:	f04f 0600 	mov.w	r6, #0
 800331a:	46a9      	mov	r9, r5
 800331c:	46b2      	mov	sl, r6
 800331e:	eb19 0309 	adds.w	r3, r9, r9
 8003322:	eb4a 040a 	adc.w	r4, sl, sl
 8003326:	4699      	mov	r9, r3
 8003328:	46a2      	mov	sl, r4
 800332a:	eb19 0905 	adds.w	r9, r9, r5
 800332e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003332:	f04f 0100 	mov.w	r1, #0
 8003336:	f04f 0200 	mov.w	r2, #0
 800333a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800333e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003342:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003346:	4689      	mov	r9, r1
 8003348:	4692      	mov	sl, r2
 800334a:	eb19 0005 	adds.w	r0, r9, r5
 800334e:	eb4a 0106 	adc.w	r1, sl, r6
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	461d      	mov	r5, r3
 8003358:	f04f 0600 	mov.w	r6, #0
 800335c:	196b      	adds	r3, r5, r5
 800335e:	eb46 0406 	adc.w	r4, r6, r6
 8003362:	461a      	mov	r2, r3
 8003364:	4623      	mov	r3, r4
 8003366:	f7fc ff43 	bl	80001f0 <__aeabi_uldivmod>
 800336a:	4603      	mov	r3, r0
 800336c:	460c      	mov	r4, r1
 800336e:	461a      	mov	r2, r3
 8003370:	4b2c      	ldr	r3, [pc, #176]	; (8003424 <UART_SetConfig+0x384>)
 8003372:	fba3 1302 	umull	r1, r3, r3, r2
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	2164      	movs	r1, #100	; 0x64
 800337a:	fb01 f303 	mul.w	r3, r1, r3
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	3332      	adds	r3, #50	; 0x32
 8003384:	4a27      	ldr	r2, [pc, #156]	; (8003424 <UART_SetConfig+0x384>)
 8003386:	fba2 2303 	umull	r2, r3, r2, r3
 800338a:	095b      	lsrs	r3, r3, #5
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003392:	4498      	add	r8, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	461d      	mov	r5, r3
 8003398:	f04f 0600 	mov.w	r6, #0
 800339c:	46a9      	mov	r9, r5
 800339e:	46b2      	mov	sl, r6
 80033a0:	eb19 0309 	adds.w	r3, r9, r9
 80033a4:	eb4a 040a 	adc.w	r4, sl, sl
 80033a8:	4699      	mov	r9, r3
 80033aa:	46a2      	mov	sl, r4
 80033ac:	eb19 0905 	adds.w	r9, r9, r5
 80033b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80033b4:	f04f 0100 	mov.w	r1, #0
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033c8:	4689      	mov	r9, r1
 80033ca:	4692      	mov	sl, r2
 80033cc:	eb19 0005 	adds.w	r0, r9, r5
 80033d0:	eb4a 0106 	adc.w	r1, sl, r6
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	461d      	mov	r5, r3
 80033da:	f04f 0600 	mov.w	r6, #0
 80033de:	196b      	adds	r3, r5, r5
 80033e0:	eb46 0406 	adc.w	r4, r6, r6
 80033e4:	461a      	mov	r2, r3
 80033e6:	4623      	mov	r3, r4
 80033e8:	f7fc ff02 	bl	80001f0 <__aeabi_uldivmod>
 80033ec:	4603      	mov	r3, r0
 80033ee:	460c      	mov	r4, r1
 80033f0:	461a      	mov	r2, r3
 80033f2:	4b0c      	ldr	r3, [pc, #48]	; (8003424 <UART_SetConfig+0x384>)
 80033f4:	fba3 1302 	umull	r1, r3, r3, r2
 80033f8:	095b      	lsrs	r3, r3, #5
 80033fa:	2164      	movs	r1, #100	; 0x64
 80033fc:	fb01 f303 	mul.w	r3, r1, r3
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	3332      	adds	r3, #50	; 0x32
 8003406:	4a07      	ldr	r2, [pc, #28]	; (8003424 <UART_SetConfig+0x384>)
 8003408:	fba2 2303 	umull	r2, r3, r2, r3
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	f003 0207 	and.w	r2, r3, #7
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4442      	add	r2, r8
 8003418:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800341a:	e1b2      	b.n	8003782 <UART_SetConfig+0x6e2>
 800341c:	40011000 	.word	0x40011000
 8003420:	40011400 	.word	0x40011400
 8003424:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4ad7      	ldr	r2, [pc, #860]	; (800378c <UART_SetConfig+0x6ec>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d005      	beq.n	800343e <UART_SetConfig+0x39e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4ad6      	ldr	r2, [pc, #856]	; (8003790 <UART_SetConfig+0x6f0>)
 8003438:	4293      	cmp	r3, r2
 800343a:	f040 80d1 	bne.w	80035e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800343e:	f7ff f879 	bl	8002534 <HAL_RCC_GetPCLK2Freq>
 8003442:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	469a      	mov	sl, r3
 8003448:	f04f 0b00 	mov.w	fp, #0
 800344c:	46d0      	mov	r8, sl
 800344e:	46d9      	mov	r9, fp
 8003450:	eb18 0308 	adds.w	r3, r8, r8
 8003454:	eb49 0409 	adc.w	r4, r9, r9
 8003458:	4698      	mov	r8, r3
 800345a:	46a1      	mov	r9, r4
 800345c:	eb18 080a 	adds.w	r8, r8, sl
 8003460:	eb49 090b 	adc.w	r9, r9, fp
 8003464:	f04f 0100 	mov.w	r1, #0
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003470:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003474:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003478:	4688      	mov	r8, r1
 800347a:	4691      	mov	r9, r2
 800347c:	eb1a 0508 	adds.w	r5, sl, r8
 8003480:	eb4b 0609 	adc.w	r6, fp, r9
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	4619      	mov	r1, r3
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	f04f 0400 	mov.w	r4, #0
 8003496:	0094      	lsls	r4, r2, #2
 8003498:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800349c:	008b      	lsls	r3, r1, #2
 800349e:	461a      	mov	r2, r3
 80034a0:	4623      	mov	r3, r4
 80034a2:	4628      	mov	r0, r5
 80034a4:	4631      	mov	r1, r6
 80034a6:	f7fc fea3 	bl	80001f0 <__aeabi_uldivmod>
 80034aa:	4603      	mov	r3, r0
 80034ac:	460c      	mov	r4, r1
 80034ae:	461a      	mov	r2, r3
 80034b0:	4bb8      	ldr	r3, [pc, #736]	; (8003794 <UART_SetConfig+0x6f4>)
 80034b2:	fba3 2302 	umull	r2, r3, r3, r2
 80034b6:	095b      	lsrs	r3, r3, #5
 80034b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	469b      	mov	fp, r3
 80034c0:	f04f 0c00 	mov.w	ip, #0
 80034c4:	46d9      	mov	r9, fp
 80034c6:	46e2      	mov	sl, ip
 80034c8:	eb19 0309 	adds.w	r3, r9, r9
 80034cc:	eb4a 040a 	adc.w	r4, sl, sl
 80034d0:	4699      	mov	r9, r3
 80034d2:	46a2      	mov	sl, r4
 80034d4:	eb19 090b 	adds.w	r9, r9, fp
 80034d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034dc:	f04f 0100 	mov.w	r1, #0
 80034e0:	f04f 0200 	mov.w	r2, #0
 80034e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034f0:	4689      	mov	r9, r1
 80034f2:	4692      	mov	sl, r2
 80034f4:	eb1b 0509 	adds.w	r5, fp, r9
 80034f8:	eb4c 060a 	adc.w	r6, ip, sl
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	4619      	mov	r1, r3
 8003502:	f04f 0200 	mov.w	r2, #0
 8003506:	f04f 0300 	mov.w	r3, #0
 800350a:	f04f 0400 	mov.w	r4, #0
 800350e:	0094      	lsls	r4, r2, #2
 8003510:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003514:	008b      	lsls	r3, r1, #2
 8003516:	461a      	mov	r2, r3
 8003518:	4623      	mov	r3, r4
 800351a:	4628      	mov	r0, r5
 800351c:	4631      	mov	r1, r6
 800351e:	f7fc fe67 	bl	80001f0 <__aeabi_uldivmod>
 8003522:	4603      	mov	r3, r0
 8003524:	460c      	mov	r4, r1
 8003526:	461a      	mov	r2, r3
 8003528:	4b9a      	ldr	r3, [pc, #616]	; (8003794 <UART_SetConfig+0x6f4>)
 800352a:	fba3 1302 	umull	r1, r3, r3, r2
 800352e:	095b      	lsrs	r3, r3, #5
 8003530:	2164      	movs	r1, #100	; 0x64
 8003532:	fb01 f303 	mul.w	r3, r1, r3
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	3332      	adds	r3, #50	; 0x32
 800353c:	4a95      	ldr	r2, [pc, #596]	; (8003794 <UART_SetConfig+0x6f4>)
 800353e:	fba2 2303 	umull	r2, r3, r2, r3
 8003542:	095b      	lsrs	r3, r3, #5
 8003544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003548:	4498      	add	r8, r3
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	469b      	mov	fp, r3
 800354e:	f04f 0c00 	mov.w	ip, #0
 8003552:	46d9      	mov	r9, fp
 8003554:	46e2      	mov	sl, ip
 8003556:	eb19 0309 	adds.w	r3, r9, r9
 800355a:	eb4a 040a 	adc.w	r4, sl, sl
 800355e:	4699      	mov	r9, r3
 8003560:	46a2      	mov	sl, r4
 8003562:	eb19 090b 	adds.w	r9, r9, fp
 8003566:	eb4a 0a0c 	adc.w	sl, sl, ip
 800356a:	f04f 0100 	mov.w	r1, #0
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003576:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800357a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800357e:	4689      	mov	r9, r1
 8003580:	4692      	mov	sl, r2
 8003582:	eb1b 0509 	adds.w	r5, fp, r9
 8003586:	eb4c 060a 	adc.w	r6, ip, sl
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	4619      	mov	r1, r3
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	f04f 0400 	mov.w	r4, #0
 800359c:	0094      	lsls	r4, r2, #2
 800359e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035a2:	008b      	lsls	r3, r1, #2
 80035a4:	461a      	mov	r2, r3
 80035a6:	4623      	mov	r3, r4
 80035a8:	4628      	mov	r0, r5
 80035aa:	4631      	mov	r1, r6
 80035ac:	f7fc fe20 	bl	80001f0 <__aeabi_uldivmod>
 80035b0:	4603      	mov	r3, r0
 80035b2:	460c      	mov	r4, r1
 80035b4:	461a      	mov	r2, r3
 80035b6:	4b77      	ldr	r3, [pc, #476]	; (8003794 <UART_SetConfig+0x6f4>)
 80035b8:	fba3 1302 	umull	r1, r3, r3, r2
 80035bc:	095b      	lsrs	r3, r3, #5
 80035be:	2164      	movs	r1, #100	; 0x64
 80035c0:	fb01 f303 	mul.w	r3, r1, r3
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	011b      	lsls	r3, r3, #4
 80035c8:	3332      	adds	r3, #50	; 0x32
 80035ca:	4a72      	ldr	r2, [pc, #456]	; (8003794 <UART_SetConfig+0x6f4>)
 80035cc:	fba2 2303 	umull	r2, r3, r2, r3
 80035d0:	095b      	lsrs	r3, r3, #5
 80035d2:	f003 020f 	and.w	r2, r3, #15
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4442      	add	r2, r8
 80035dc:	609a      	str	r2, [r3, #8]
 80035de:	e0d0      	b.n	8003782 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80035e0:	f7fe ff94 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 80035e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	469a      	mov	sl, r3
 80035ea:	f04f 0b00 	mov.w	fp, #0
 80035ee:	46d0      	mov	r8, sl
 80035f0:	46d9      	mov	r9, fp
 80035f2:	eb18 0308 	adds.w	r3, r8, r8
 80035f6:	eb49 0409 	adc.w	r4, r9, r9
 80035fa:	4698      	mov	r8, r3
 80035fc:	46a1      	mov	r9, r4
 80035fe:	eb18 080a 	adds.w	r8, r8, sl
 8003602:	eb49 090b 	adc.w	r9, r9, fp
 8003606:	f04f 0100 	mov.w	r1, #0
 800360a:	f04f 0200 	mov.w	r2, #0
 800360e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003612:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003616:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800361a:	4688      	mov	r8, r1
 800361c:	4691      	mov	r9, r2
 800361e:	eb1a 0508 	adds.w	r5, sl, r8
 8003622:	eb4b 0609 	adc.w	r6, fp, r9
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4619      	mov	r1, r3
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	f04f 0300 	mov.w	r3, #0
 8003634:	f04f 0400 	mov.w	r4, #0
 8003638:	0094      	lsls	r4, r2, #2
 800363a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800363e:	008b      	lsls	r3, r1, #2
 8003640:	461a      	mov	r2, r3
 8003642:	4623      	mov	r3, r4
 8003644:	4628      	mov	r0, r5
 8003646:	4631      	mov	r1, r6
 8003648:	f7fc fdd2 	bl	80001f0 <__aeabi_uldivmod>
 800364c:	4603      	mov	r3, r0
 800364e:	460c      	mov	r4, r1
 8003650:	461a      	mov	r2, r3
 8003652:	4b50      	ldr	r3, [pc, #320]	; (8003794 <UART_SetConfig+0x6f4>)
 8003654:	fba3 2302 	umull	r2, r3, r3, r2
 8003658:	095b      	lsrs	r3, r3, #5
 800365a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	469b      	mov	fp, r3
 8003662:	f04f 0c00 	mov.w	ip, #0
 8003666:	46d9      	mov	r9, fp
 8003668:	46e2      	mov	sl, ip
 800366a:	eb19 0309 	adds.w	r3, r9, r9
 800366e:	eb4a 040a 	adc.w	r4, sl, sl
 8003672:	4699      	mov	r9, r3
 8003674:	46a2      	mov	sl, r4
 8003676:	eb19 090b 	adds.w	r9, r9, fp
 800367a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800367e:	f04f 0100 	mov.w	r1, #0
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800368a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800368e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003692:	4689      	mov	r9, r1
 8003694:	4692      	mov	sl, r2
 8003696:	eb1b 0509 	adds.w	r5, fp, r9
 800369a:	eb4c 060a 	adc.w	r6, ip, sl
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	4619      	mov	r1, r3
 80036a4:	f04f 0200 	mov.w	r2, #0
 80036a8:	f04f 0300 	mov.w	r3, #0
 80036ac:	f04f 0400 	mov.w	r4, #0
 80036b0:	0094      	lsls	r4, r2, #2
 80036b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036b6:	008b      	lsls	r3, r1, #2
 80036b8:	461a      	mov	r2, r3
 80036ba:	4623      	mov	r3, r4
 80036bc:	4628      	mov	r0, r5
 80036be:	4631      	mov	r1, r6
 80036c0:	f7fc fd96 	bl	80001f0 <__aeabi_uldivmod>
 80036c4:	4603      	mov	r3, r0
 80036c6:	460c      	mov	r4, r1
 80036c8:	461a      	mov	r2, r3
 80036ca:	4b32      	ldr	r3, [pc, #200]	; (8003794 <UART_SetConfig+0x6f4>)
 80036cc:	fba3 1302 	umull	r1, r3, r3, r2
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	2164      	movs	r1, #100	; 0x64
 80036d4:	fb01 f303 	mul.w	r3, r1, r3
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	3332      	adds	r3, #50	; 0x32
 80036de:	4a2d      	ldr	r2, [pc, #180]	; (8003794 <UART_SetConfig+0x6f4>)
 80036e0:	fba2 2303 	umull	r2, r3, r2, r3
 80036e4:	095b      	lsrs	r3, r3, #5
 80036e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036ea:	4498      	add	r8, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	469b      	mov	fp, r3
 80036f0:	f04f 0c00 	mov.w	ip, #0
 80036f4:	46d9      	mov	r9, fp
 80036f6:	46e2      	mov	sl, ip
 80036f8:	eb19 0309 	adds.w	r3, r9, r9
 80036fc:	eb4a 040a 	adc.w	r4, sl, sl
 8003700:	4699      	mov	r9, r3
 8003702:	46a2      	mov	sl, r4
 8003704:	eb19 090b 	adds.w	r9, r9, fp
 8003708:	eb4a 0a0c 	adc.w	sl, sl, ip
 800370c:	f04f 0100 	mov.w	r1, #0
 8003710:	f04f 0200 	mov.w	r2, #0
 8003714:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003718:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800371c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003720:	4689      	mov	r9, r1
 8003722:	4692      	mov	sl, r2
 8003724:	eb1b 0509 	adds.w	r5, fp, r9
 8003728:	eb4c 060a 	adc.w	r6, ip, sl
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	4619      	mov	r1, r3
 8003732:	f04f 0200 	mov.w	r2, #0
 8003736:	f04f 0300 	mov.w	r3, #0
 800373a:	f04f 0400 	mov.w	r4, #0
 800373e:	0094      	lsls	r4, r2, #2
 8003740:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003744:	008b      	lsls	r3, r1, #2
 8003746:	461a      	mov	r2, r3
 8003748:	4623      	mov	r3, r4
 800374a:	4628      	mov	r0, r5
 800374c:	4631      	mov	r1, r6
 800374e:	f7fc fd4f 	bl	80001f0 <__aeabi_uldivmod>
 8003752:	4603      	mov	r3, r0
 8003754:	460c      	mov	r4, r1
 8003756:	461a      	mov	r2, r3
 8003758:	4b0e      	ldr	r3, [pc, #56]	; (8003794 <UART_SetConfig+0x6f4>)
 800375a:	fba3 1302 	umull	r1, r3, r3, r2
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	2164      	movs	r1, #100	; 0x64
 8003762:	fb01 f303 	mul.w	r3, r1, r3
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	3332      	adds	r3, #50	; 0x32
 800376c:	4a09      	ldr	r2, [pc, #36]	; (8003794 <UART_SetConfig+0x6f4>)
 800376e:	fba2 2303 	umull	r2, r3, r2, r3
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	f003 020f 	and.w	r2, r3, #15
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4442      	add	r2, r8
 800377e:	609a      	str	r2, [r3, #8]
}
 8003780:	e7ff      	b.n	8003782 <UART_SetConfig+0x6e2>
 8003782:	bf00      	nop
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800378c:	40011000 	.word	0x40011000
 8003790:	40011400 	.word	0x40011400
 8003794:	51eb851f 	.word	0x51eb851f

08003798 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800379c:	bf00      	nop
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
	...

080037a8 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80037a8:	b480      	push	{r7}
 80037aa:	b085      	sub	sp, #20
 80037ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037ae:	f3ef 8305 	mrs	r3, IPSR
 80037b2:	60bb      	str	r3, [r7, #8]
  return(result);
 80037b4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d10f      	bne.n	80037da <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037ba:	f3ef 8310 	mrs	r3, PRIMASK
 80037be:	607b      	str	r3, [r7, #4]
  return(result);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d105      	bne.n	80037d2 <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80037c6:	f3ef 8311 	mrs	r3, BASEPRI
 80037ca:	603b      	str	r3, [r7, #0]
  return(result);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d007      	beq.n	80037e2 <osKernelInitialize+0x3a>
 80037d2:	4b0e      	ldr	r3, [pc, #56]	; (800380c <osKernelInitialize+0x64>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d103      	bne.n	80037e2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80037da:	f06f 0305 	mvn.w	r3, #5
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	e00c      	b.n	80037fc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80037e2:	4b0a      	ldr	r3, [pc, #40]	; (800380c <osKernelInitialize+0x64>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d105      	bne.n	80037f6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80037ea:	4b08      	ldr	r3, [pc, #32]	; (800380c <osKernelInitialize+0x64>)
 80037ec:	2201      	movs	r2, #1
 80037ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80037f0:	2300      	movs	r3, #0
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	e002      	b.n	80037fc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80037f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037fa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80037fc:	68fb      	ldr	r3, [r7, #12]
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3714      	adds	r7, #20
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
 800380a:	bf00      	nop
 800380c:	2000002c 	.word	0x2000002c

08003810 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003816:	f3ef 8305 	mrs	r3, IPSR
 800381a:	60bb      	str	r3, [r7, #8]
  return(result);
 800381c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800381e:	2b00      	cmp	r3, #0
 8003820:	d10f      	bne.n	8003842 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003822:	f3ef 8310 	mrs	r3, PRIMASK
 8003826:	607b      	str	r3, [r7, #4]
  return(result);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2b00      	cmp	r3, #0
 800382c:	d105      	bne.n	800383a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800382e:	f3ef 8311 	mrs	r3, BASEPRI
 8003832:	603b      	str	r3, [r7, #0]
  return(result);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d007      	beq.n	800384a <osKernelStart+0x3a>
 800383a:	4b0f      	ldr	r3, [pc, #60]	; (8003878 <osKernelStart+0x68>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d103      	bne.n	800384a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003842:	f06f 0305 	mvn.w	r3, #5
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	e010      	b.n	800386c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800384a:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <osKernelStart+0x68>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d109      	bne.n	8003866 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003852:	f7ff ffa1 	bl	8003798 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <osKernelStart+0x68>)
 8003858:	2202      	movs	r2, #2
 800385a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800385c:	f001 fbc4 	bl	8004fe8 <vTaskStartScheduler>
      stat = osOK;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	e002      	b.n	800386c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8003866:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800386a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800386c:	68fb      	ldr	r3, [r7, #12]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	2000002c 	.word	0x2000002c

0800387c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800387c:	b580      	push	{r7, lr}
 800387e:	b090      	sub	sp, #64	; 0x40
 8003880:	af04      	add	r7, sp, #16
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003888:	2300      	movs	r3, #0
 800388a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800388c:	f3ef 8305 	mrs	r3, IPSR
 8003890:	61fb      	str	r3, [r7, #28]
  return(result);
 8003892:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8003894:	2b00      	cmp	r3, #0
 8003896:	f040 808f 	bne.w	80039b8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800389a:	f3ef 8310 	mrs	r3, PRIMASK
 800389e:	61bb      	str	r3, [r7, #24]
  return(result);
 80038a0:	69bb      	ldr	r3, [r7, #24]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d105      	bne.n	80038b2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80038a6:	f3ef 8311 	mrs	r3, BASEPRI
 80038aa:	617b      	str	r3, [r7, #20]
  return(result);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <osThreadNew+0x3e>
 80038b2:	4b44      	ldr	r3, [pc, #272]	; (80039c4 <osThreadNew+0x148>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b02      	cmp	r3, #2
 80038b8:	d07e      	beq.n	80039b8 <osThreadNew+0x13c>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d07b      	beq.n	80039b8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80038c0:	2380      	movs	r3, #128	; 0x80
 80038c2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80038c4:	2318      	movs	r3, #24
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80038c8:	2300      	movs	r3, #0
 80038ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80038cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d045      	beq.n	8003964 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d002      	beq.n	80038e6 <osThreadNew+0x6a>
        name = attr->name;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d002      	beq.n	80038f4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <osThreadNew+0x90>
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	2b38      	cmp	r3, #56	; 0x38
 80038fe:	d805      	bhi.n	800390c <osThreadNew+0x90>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	2b00      	cmp	r3, #0
 800390a:	d001      	beq.n	8003910 <osThreadNew+0x94>
        return (NULL);
 800390c:	2300      	movs	r3, #0
 800390e:	e054      	b.n	80039ba <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	089b      	lsrs	r3, r3, #2
 800391e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d00e      	beq.n	8003946 <osThreadNew+0xca>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	2b5b      	cmp	r3, #91	; 0x5b
 800392e:	d90a      	bls.n	8003946 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003934:	2b00      	cmp	r3, #0
 8003936:	d006      	beq.n	8003946 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d002      	beq.n	8003946 <osThreadNew+0xca>
        mem = 1;
 8003940:	2301      	movs	r3, #1
 8003942:	623b      	str	r3, [r7, #32]
 8003944:	e010      	b.n	8003968 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10c      	bne.n	8003968 <osThreadNew+0xec>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d108      	bne.n	8003968 <osThreadNew+0xec>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d104      	bne.n	8003968 <osThreadNew+0xec>
          mem = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	623b      	str	r3, [r7, #32]
 8003962:	e001      	b.n	8003968 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003968:	6a3b      	ldr	r3, [r7, #32]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d110      	bne.n	8003990 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003976:	9202      	str	r2, [sp, #8]
 8003978:	9301      	str	r3, [sp, #4]
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003982:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f001 f95d 	bl	8004c44 <xTaskCreateStatic>
 800398a:	4603      	mov	r3, r0
 800398c:	613b      	str	r3, [r7, #16]
 800398e:	e013      	b.n	80039b8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d110      	bne.n	80039b8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003998:	b29a      	uxth	r2, r3
 800399a:	f107 0310 	add.w	r3, r7, #16
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f001 f9a5 	bl	8004cf8 <xTaskCreate>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d001      	beq.n	80039b8 <osThreadNew+0x13c>
          hTask = NULL;
 80039b4:	2300      	movs	r3, #0
 80039b6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80039b8:	693b      	ldr	r3, [r7, #16]
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3730      	adds	r7, #48	; 0x30
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	2000002c 	.word	0x2000002c

080039c8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039d0:	f3ef 8305 	mrs	r3, IPSR
 80039d4:	613b      	str	r3, [r7, #16]
  return(result);
 80039d6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10f      	bne.n	80039fc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039dc:	f3ef 8310 	mrs	r3, PRIMASK
 80039e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d105      	bne.n	80039f4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80039e8:	f3ef 8311 	mrs	r3, BASEPRI
 80039ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d007      	beq.n	8003a04 <osDelay+0x3c>
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <osDelay+0x58>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d103      	bne.n	8003a04 <osDelay+0x3c>
    stat = osErrorISR;
 80039fc:	f06f 0305 	mvn.w	r3, #5
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	e007      	b.n	8003a14 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d002      	beq.n	8003a14 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f001 fab6 	bl	8004f80 <vTaskDelay>
    }
  }

  return (stat);
 8003a14:	697b      	ldr	r3, [r7, #20]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3718      	adds	r7, #24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	2000002c 	.word	0x2000002c

08003a24 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08c      	sub	sp, #48	; 0x30
 8003a28:	af02      	add	r7, sp, #8
 8003a2a:	60f8      	str	r0, [r7, #12]
 8003a2c:	60b9      	str	r1, [r7, #8]
 8003a2e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003a30:	2300      	movs	r3, #0
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003a34:	f3ef 8305 	mrs	r3, IPSR
 8003a38:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a3a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f040 8087 	bne.w	8003b50 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a42:	f3ef 8310 	mrs	r3, PRIMASK
 8003a46:	617b      	str	r3, [r7, #20]
  return(result);
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d105      	bne.n	8003a5a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003a4e:	f3ef 8311 	mrs	r3, BASEPRI
 8003a52:	613b      	str	r3, [r7, #16]
  return(result);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <osSemaphoreNew+0x3e>
 8003a5a:	4b40      	ldr	r3, [pc, #256]	; (8003b5c <osSemaphoreNew+0x138>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d076      	beq.n	8003b50 <osSemaphoreNew+0x12c>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d073      	beq.n	8003b50 <osSemaphoreNew+0x12c>
 8003a68:	68ba      	ldr	r2, [r7, #8]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d86f      	bhi.n	8003b50 <osSemaphoreNew+0x12c>
    mem = -1;
 8003a70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a74:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d015      	beq.n	8003aa8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d006      	beq.n	8003a92 <osSemaphoreNew+0x6e>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	2b4f      	cmp	r3, #79	; 0x4f
 8003a8a:	d902      	bls.n	8003a92 <osSemaphoreNew+0x6e>
        mem = 1;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	623b      	str	r3, [r7, #32]
 8003a90:	e00c      	b.n	8003aac <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d108      	bne.n	8003aac <osSemaphoreNew+0x88>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d104      	bne.n	8003aac <osSemaphoreNew+0x88>
          mem = 0;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	623b      	str	r3, [r7, #32]
 8003aa6:	e001      	b.n	8003aac <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8003aac:	6a3b      	ldr	r3, [r7, #32]
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab2:	d04d      	beq.n	8003b50 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d129      	bne.n	8003b0e <osSemaphoreNew+0xea>
        if (mem == 1) {
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d10b      	bne.n	8003ad8 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689a      	ldr	r2, [r3, #8]
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	2200      	movs	r2, #0
 8003acc:	2100      	movs	r1, #0
 8003ace:	2001      	movs	r0, #1
 8003ad0:	f000 fa1c 	bl	8003f0c <xQueueGenericCreateStatic>
 8003ad4:	6278      	str	r0, [r7, #36]	; 0x24
 8003ad6:	e005      	b.n	8003ae4 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8003ad8:	2203      	movs	r2, #3
 8003ada:	2100      	movs	r1, #0
 8003adc:	2001      	movs	r0, #1
 8003ade:	f000 fa88 	bl	8003ff2 <xQueueGenericCreate>
 8003ae2:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d022      	beq.n	8003b30 <osSemaphoreNew+0x10c>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01f      	beq.n	8003b30 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003af0:	2300      	movs	r3, #0
 8003af2:	2200      	movs	r2, #0
 8003af4:	2100      	movs	r1, #0
 8003af6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003af8:	f000 fb44 	bl	8004184 <xQueueGenericSend>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d016      	beq.n	8003b30 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8003b02:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b04:	f000 fecd 	bl	80048a2 <vQueueDelete>
            hSemaphore = NULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b0c:	e010      	b.n	8003b30 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d108      	bne.n	8003b26 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	461a      	mov	r2, r3
 8003b1a:	68b9      	ldr	r1, [r7, #8]
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f000 faca 	bl	80040b6 <xQueueCreateCountingSemaphoreStatic>
 8003b22:	6278      	str	r0, [r7, #36]	; 0x24
 8003b24:	e004      	b.n	8003b30 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003b26:	68b9      	ldr	r1, [r7, #8]
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f000 faf9 	bl	8004120 <xQueueCreateCountingSemaphore>
 8003b2e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00c      	beq.n	8003b50 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <osSemaphoreNew+0x120>
          name = attr->name;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	61fb      	str	r3, [r7, #28]
 8003b42:	e001      	b.n	8003b48 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003b48:	69f9      	ldr	r1, [r7, #28]
 8003b4a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b4c:	f000 fff4 	bl	8004b38 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3728      	adds	r7, #40	; 0x28
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	2000002c 	.word	0x2000002c

08003b60 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08c      	sub	sp, #48	; 0x30
 8003b64:	af02      	add	r7, sp, #8
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b70:	f3ef 8305 	mrs	r3, IPSR
 8003b74:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b76:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d170      	bne.n	8003c5e <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b7c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b80:	617b      	str	r3, [r7, #20]
  return(result);
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d105      	bne.n	8003b94 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b88:	f3ef 8311 	mrs	r3, BASEPRI
 8003b8c:	613b      	str	r3, [r7, #16]
  return(result);
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <osMessageQueueNew+0x3c>
 8003b94:	4b34      	ldr	r3, [pc, #208]	; (8003c68 <osMessageQueueNew+0x108>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d060      	beq.n	8003c5e <osMessageQueueNew+0xfe>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d05d      	beq.n	8003c5e <osMessageQueueNew+0xfe>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d05a      	beq.n	8003c5e <osMessageQueueNew+0xfe>
    mem = -1;
 8003ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003bac:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d029      	beq.n	8003c08 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d012      	beq.n	8003be2 <osMessageQueueNew+0x82>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	2b4f      	cmp	r3, #79	; 0x4f
 8003bc2:	d90e      	bls.n	8003be2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00a      	beq.n	8003be2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	fb01 f303 	mul.w	r3, r1, r3
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d302      	bcc.n	8003be2 <osMessageQueueNew+0x82>
        mem = 1;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	623b      	str	r3, [r7, #32]
 8003be0:	e014      	b.n	8003c0c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d110      	bne.n	8003c0c <osMessageQueueNew+0xac>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10c      	bne.n	8003c0c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d108      	bne.n	8003c0c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	695b      	ldr	r3, [r3, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d104      	bne.n	8003c0c <osMessageQueueNew+0xac>
          mem = 0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	623b      	str	r3, [r7, #32]
 8003c06:	e001      	b.n	8003c0c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003c0c:	6a3b      	ldr	r3, [r7, #32]
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d10c      	bne.n	8003c2c <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	691a      	ldr	r2, [r3, #16]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6899      	ldr	r1, [r3, #8]
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 f972 	bl	8003f0c <xQueueGenericCreateStatic>
 8003c28:	6278      	str	r0, [r7, #36]	; 0x24
 8003c2a:	e008      	b.n	8003c3e <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d105      	bne.n	8003c3e <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003c32:	2200      	movs	r2, #0
 8003c34:	68b9      	ldr	r1, [r7, #8]
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 f9db 	bl	8003ff2 <xQueueGenericCreate>
 8003c3c:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00c      	beq.n	8003c5e <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d003      	beq.n	8003c52 <osMessageQueueNew+0xf2>
        name = attr->name;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	61fb      	str	r3, [r7, #28]
 8003c50:	e001      	b.n	8003c56 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003c56:	69f9      	ldr	r1, [r7, #28]
 8003c58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c5a:	f000 ff6d 	bl	8004b38 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3728      	adds	r7, #40	; 0x28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	2000002c 	.word	0x2000002c

08003c6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4a07      	ldr	r2, [pc, #28]	; (8003c98 <vApplicationGetIdleTaskMemory+0x2c>)
 8003c7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	4a06      	ldr	r2, [pc, #24]	; (8003c9c <vApplicationGetIdleTaskMemory+0x30>)
 8003c82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2280      	movs	r2, #128	; 0x80
 8003c88:	601a      	str	r2, [r3, #0]
}
 8003c8a:	bf00      	nop
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20000030 	.word	0x20000030
 8003c9c:	2000008c 	.word	0x2000008c

08003ca0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	4a07      	ldr	r2, [pc, #28]	; (8003ccc <vApplicationGetTimerTaskMemory+0x2c>)
 8003cb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	4a06      	ldr	r2, [pc, #24]	; (8003cd0 <vApplicationGetTimerTaskMemory+0x30>)
 8003cb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cbe:	601a      	str	r2, [r3, #0]
}
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	2000028c 	.word	0x2000028c
 8003cd0:	200002e8 	.word	0x200002e8

08003cd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b083      	sub	sp, #12
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f103 0208 	add.w	r2, r3, #8
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f103 0208 	add.w	r2, r3, #8
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f103 0208 	add.w	r2, r3, #8
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d2e:	b480      	push	{r7}
 8003d30:	b085      	sub	sp, #20
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
 8003d36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	683a      	ldr	r2, [r7, #0]
 8003d52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	1c5a      	adds	r2, r3, #1
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	601a      	str	r2, [r3, #0]
}
 8003d6a:	bf00      	nop
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003d76:	b480      	push	{r7}
 8003d78:	b085      	sub	sp, #20
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d8c:	d103      	bne.n	8003d96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	e00c      	b.n	8003db0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	3308      	adds	r3, #8
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	e002      	b.n	8003da4 <vListInsert+0x2e>
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68ba      	ldr	r2, [r7, #8]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d2f6      	bcs.n	8003d9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	683a      	ldr	r2, [r7, #0]
 8003dca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	1c5a      	adds	r2, r3, #1
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	601a      	str	r2, [r3, #0]
}
 8003ddc:	bf00      	nop
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	687a      	ldr	r2, [r7, #4]
 8003dfc:	6892      	ldr	r2, [r2, #8]
 8003dfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	6852      	ldr	r2, [r2, #4]
 8003e08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d103      	bne.n	8003e1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689a      	ldr	r2, [r3, #8]
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2200      	movs	r2, #0
 8003e20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	1e5a      	subs	r2, r3, #1
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d109      	bne.n	8003e64 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	e7fe      	b.n	8003e62 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003e64:	f002 fd82 	bl	800696c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e70:	68f9      	ldr	r1, [r7, #12]
 8003e72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e74:	fb01 f303 	mul.w	r3, r1, r3
 8003e78:	441a      	add	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e94:	3b01      	subs	r3, #1
 8003e96:	68f9      	ldr	r1, [r7, #12]
 8003e98:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e9a:	fb01 f303 	mul.w	r3, r1, r3
 8003e9e:	441a      	add	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	22ff      	movs	r2, #255	; 0xff
 8003ea8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	22ff      	movs	r2, #255	; 0xff
 8003eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d114      	bne.n	8003ee4 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d01a      	beq.n	8003ef8 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	3310      	adds	r3, #16
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f001 fb20 	bl	800550c <xTaskRemoveFromEventList>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d012      	beq.n	8003ef8 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ed2:	4b0d      	ldr	r3, [pc, #52]	; (8003f08 <xQueueGenericReset+0xcc>)
 8003ed4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	f3bf 8f6f 	isb	sy
 8003ee2:	e009      	b.n	8003ef8 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	3310      	adds	r3, #16
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7ff fef3 	bl	8003cd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	3324      	adds	r3, #36	; 0x24
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7ff feee 	bl	8003cd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003ef8:	f002 fd66 	bl	80069c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003efc:	2301      	movs	r3, #1
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	e000ed04 	.word	0xe000ed04

08003f0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08e      	sub	sp, #56	; 0x38
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	60f8      	str	r0, [r7, #12]
 8003f14:	60b9      	str	r1, [r7, #8]
 8003f16:	607a      	str	r2, [r7, #4]
 8003f18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d109      	bne.n	8003f34 <xQueueGenericCreateStatic+0x28>
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f32:	e7fe      	b.n	8003f32 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d109      	bne.n	8003f4e <xQueueGenericCreateStatic+0x42>
 8003f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f3e:	f383 8811 	msr	BASEPRI, r3
 8003f42:	f3bf 8f6f 	isb	sy
 8003f46:	f3bf 8f4f 	dsb	sy
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4c:	e7fe      	b.n	8003f4c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d002      	beq.n	8003f5a <xQueueGenericCreateStatic+0x4e>
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d001      	beq.n	8003f5e <xQueueGenericCreateStatic+0x52>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <xQueueGenericCreateStatic+0x54>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d109      	bne.n	8003f78 <xQueueGenericCreateStatic+0x6c>
 8003f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f68:	f383 8811 	msr	BASEPRI, r3
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f3bf 8f4f 	dsb	sy
 8003f74:	623b      	str	r3, [r7, #32]
 8003f76:	e7fe      	b.n	8003f76 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d102      	bne.n	8003f84 <xQueueGenericCreateStatic+0x78>
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d101      	bne.n	8003f88 <xQueueGenericCreateStatic+0x7c>
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <xQueueGenericCreateStatic+0x7e>
 8003f88:	2300      	movs	r3, #0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <xQueueGenericCreateStatic+0x96>
 8003f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	61fb      	str	r3, [r7, #28]
 8003fa0:	e7fe      	b.n	8003fa0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003fa2:	2350      	movs	r3, #80	; 0x50
 8003fa4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2b50      	cmp	r3, #80	; 0x50
 8003faa:	d009      	beq.n	8003fc0 <xQueueGenericCreateStatic+0xb4>
 8003fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb0:	f383 8811 	msr	BASEPRI, r3
 8003fb4:	f3bf 8f6f 	isb	sy
 8003fb8:	f3bf 8f4f 	dsb	sy
 8003fbc:	61bb      	str	r3, [r7, #24]
 8003fbe:	e7fe      	b.n	8003fbe <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003fc0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00d      	beq.n	8003fe8 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fd4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	4613      	mov	r3, r2
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	68b9      	ldr	r1, [r7, #8]
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 f844 	bl	8004070 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3730      	adds	r7, #48	; 0x30
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b08a      	sub	sp, #40	; 0x28
 8003ff6:	af02      	add	r7, sp, #8
 8003ff8:	60f8      	str	r0, [r7, #12]
 8003ffa:	60b9      	str	r1, [r7, #8]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d109      	bne.n	800401a <xQueueGenericCreate+0x28>
 8004006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	613b      	str	r3, [r7, #16]
 8004018:	e7fe      	b.n	8004018 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d102      	bne.n	8004026 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004020:	2300      	movs	r3, #0
 8004022:	61fb      	str	r3, [r7, #28]
 8004024:	e004      	b.n	8004030 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	68ba      	ldr	r2, [r7, #8]
 800402a:	fb02 f303 	mul.w	r3, r2, r3
 800402e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	3350      	adds	r3, #80	; 0x50
 8004034:	4618      	mov	r0, r3
 8004036:	f002 fdb3 	bl	8006ba0 <pvPortMalloc>
 800403a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d011      	beq.n	8004066 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	3350      	adds	r3, #80	; 0x50
 800404a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800404c:	69bb      	ldr	r3, [r7, #24]
 800404e:	2200      	movs	r2, #0
 8004050:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004054:	79fa      	ldrb	r2, [r7, #7]
 8004056:	69bb      	ldr	r3, [r7, #24]
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	4613      	mov	r3, r2
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	68b9      	ldr	r1, [r7, #8]
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	f000 f805 	bl	8004070 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004066:	69bb      	ldr	r3, [r7, #24]
	}
 8004068:	4618      	mov	r0, r3
 800406a:	3720      	adds	r7, #32
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
 800407c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d103      	bne.n	800408c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	69ba      	ldr	r2, [r7, #24]
 8004088:	601a      	str	r2, [r3, #0]
 800408a:	e002      	b.n	8004092 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800408c:	69bb      	ldr	r3, [r7, #24]
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004092:	69bb      	ldr	r3, [r7, #24]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004098:	69bb      	ldr	r3, [r7, #24]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800409e:	2101      	movs	r1, #1
 80040a0:	69b8      	ldr	r0, [r7, #24]
 80040a2:	f7ff fecb 	bl	8003e3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	78fa      	ldrb	r2, [r7, #3]
 80040aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80040ae:	bf00      	nop
 80040b0:	3710      	adds	r7, #16
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b08a      	sub	sp, #40	; 0x28
 80040ba:	af02      	add	r7, sp, #8
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d109      	bne.n	80040dc <xQueueCreateCountingSemaphoreStatic+0x26>
 80040c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040cc:	f383 8811 	msr	BASEPRI, r3
 80040d0:	f3bf 8f6f 	isb	sy
 80040d4:	f3bf 8f4f 	dsb	sy
 80040d8:	61bb      	str	r3, [r7, #24]
 80040da:	e7fe      	b.n	80040da <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d909      	bls.n	80040f8 <xQueueCreateCountingSemaphoreStatic+0x42>
 80040e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e8:	f383 8811 	msr	BASEPRI, r3
 80040ec:	f3bf 8f6f 	isb	sy
 80040f0:	f3bf 8f4f 	dsb	sy
 80040f4:	617b      	str	r3, [r7, #20]
 80040f6:	e7fe      	b.n	80040f6 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80040f8:	2302      	movs	r3, #2
 80040fa:	9300      	str	r3, [sp, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	2100      	movs	r1, #0
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f7ff ff02 	bl	8003f0c <xQueueGenericCreateStatic>
 8004108:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	68ba      	ldr	r2, [r7, #8]
 8004114:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004116:	69fb      	ldr	r3, [r7, #28]
	}
 8004118:	4618      	mov	r0, r3
 800411a:	3720      	adds	r7, #32
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004120:	b580      	push	{r7, lr}
 8004122:	b086      	sub	sp, #24
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d109      	bne.n	8004144 <xQueueCreateCountingSemaphore+0x24>
 8004130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004134:	f383 8811 	msr	BASEPRI, r3
 8004138:	f3bf 8f6f 	isb	sy
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	e7fe      	b.n	8004142 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004144:	683a      	ldr	r2, [r7, #0]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	429a      	cmp	r2, r3
 800414a:	d909      	bls.n	8004160 <xQueueCreateCountingSemaphore+0x40>
 800414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	60fb      	str	r3, [r7, #12]
 800415e:	e7fe      	b.n	800415e <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004160:	2202      	movs	r2, #2
 8004162:	2100      	movs	r1, #0
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7ff ff44 	bl	8003ff2 <xQueueGenericCreate>
 800416a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	683a      	ldr	r2, [r7, #0]
 8004176:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004178:	697b      	ldr	r3, [r7, #20]
	}
 800417a:	4618      	mov	r0, r3
 800417c:	3718      	adds	r7, #24
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
	...

08004184 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b08e      	sub	sp, #56	; 0x38
 8004188:	af00      	add	r7, sp, #0
 800418a:	60f8      	str	r0, [r7, #12]
 800418c:	60b9      	str	r1, [r7, #8]
 800418e:	607a      	str	r2, [r7, #4]
 8004190:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004192:	2300      	movs	r3, #0
 8004194:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419c:	2b00      	cmp	r3, #0
 800419e:	d109      	bne.n	80041b4 <xQueueGenericSend+0x30>
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80041b2:	e7fe      	b.n	80041b2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d103      	bne.n	80041c2 <xQueueGenericSend+0x3e>
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <xQueueGenericSend+0x42>
 80041c2:	2301      	movs	r3, #1
 80041c4:	e000      	b.n	80041c8 <xQueueGenericSend+0x44>
 80041c6:	2300      	movs	r3, #0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d109      	bne.n	80041e0 <xQueueGenericSend+0x5c>
 80041cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	627b      	str	r3, [r7, #36]	; 0x24
 80041de:	e7fe      	b.n	80041de <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	2b02      	cmp	r3, #2
 80041e4:	d103      	bne.n	80041ee <xQueueGenericSend+0x6a>
 80041e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <xQueueGenericSend+0x6e>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <xQueueGenericSend+0x70>
 80041f2:	2300      	movs	r3, #0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d109      	bne.n	800420c <xQueueGenericSend+0x88>
 80041f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fc:	f383 8811 	msr	BASEPRI, r3
 8004200:	f3bf 8f6f 	isb	sy
 8004204:	f3bf 8f4f 	dsb	sy
 8004208:	623b      	str	r3, [r7, #32]
 800420a:	e7fe      	b.n	800420a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800420c:	f001 fb34 	bl	8005878 <xTaskGetSchedulerState>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d102      	bne.n	800421c <xQueueGenericSend+0x98>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <xQueueGenericSend+0x9c>
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <xQueueGenericSend+0x9e>
 8004220:	2300      	movs	r3, #0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d109      	bne.n	800423a <xQueueGenericSend+0xb6>
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	61fb      	str	r3, [r7, #28]
 8004238:	e7fe      	b.n	8004238 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800423a:	f002 fb97 	bl	800696c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800423e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004240:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004246:	429a      	cmp	r2, r3
 8004248:	d302      	bcc.n	8004250 <xQueueGenericSend+0xcc>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b02      	cmp	r3, #2
 800424e:	d129      	bne.n	80042a4 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004250:	683a      	ldr	r2, [r7, #0]
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004256:	f000 fb5e 	bl	8004916 <prvCopyDataToQueue>
 800425a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	2b00      	cmp	r3, #0
 8004262:	d010      	beq.n	8004286 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	3324      	adds	r3, #36	; 0x24
 8004268:	4618      	mov	r0, r3
 800426a:	f001 f94f 	bl	800550c <xTaskRemoveFromEventList>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d013      	beq.n	800429c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004274:	4b3f      	ldr	r3, [pc, #252]	; (8004374 <xQueueGenericSend+0x1f0>)
 8004276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	f3bf 8f6f 	isb	sy
 8004284:	e00a      	b.n	800429c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004288:	2b00      	cmp	r3, #0
 800428a:	d007      	beq.n	800429c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800428c:	4b39      	ldr	r3, [pc, #228]	; (8004374 <xQueueGenericSend+0x1f0>)
 800428e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800429c:	f002 fb94 	bl	80069c8 <vPortExitCritical>
				return pdPASS;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e063      	b.n	800436c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d103      	bne.n	80042b2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042aa:	f002 fb8d 	bl	80069c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80042ae:	2300      	movs	r3, #0
 80042b0:	e05c      	b.n	800436c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d106      	bne.n	80042c6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042b8:	f107 0314 	add.w	r3, r7, #20
 80042bc:	4618      	mov	r0, r3
 80042be:	f001 f987 	bl	80055d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042c2:	2301      	movs	r3, #1
 80042c4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042c6:	f002 fb7f 	bl	80069c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042ca:	f000 fef1 	bl	80050b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042ce:	f002 fb4d 	bl	800696c <vPortEnterCritical>
 80042d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042d8:	b25b      	sxtb	r3, r3
 80042da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042de:	d103      	bne.n	80042e8 <xQueueGenericSend+0x164>
 80042e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042ee:	b25b      	sxtb	r3, r3
 80042f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042f4:	d103      	bne.n	80042fe <xQueueGenericSend+0x17a>
 80042f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042fe:	f002 fb63 	bl	80069c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004302:	1d3a      	adds	r2, r7, #4
 8004304:	f107 0314 	add.w	r3, r7, #20
 8004308:	4611      	mov	r1, r2
 800430a:	4618      	mov	r0, r3
 800430c:	f001 f976 	bl	80055fc <xTaskCheckForTimeOut>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d124      	bne.n	8004360 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004316:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004318:	f000 fbf5 	bl	8004b06 <prvIsQueueFull>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d018      	beq.n	8004354 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	3310      	adds	r3, #16
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	4611      	mov	r1, r2
 800432a:	4618      	mov	r0, r3
 800432c:	f001 f8a0 	bl	8005470 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004332:	f000 fb80 	bl	8004a36 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004336:	f000 fec9 	bl	80050cc <xTaskResumeAll>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	f47f af7c 	bne.w	800423a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004342:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <xQueueGenericSend+0x1f0>)
 8004344:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	f3bf 8f6f 	isb	sy
 8004352:	e772      	b.n	800423a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004356:	f000 fb6e 	bl	8004a36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800435a:	f000 feb7 	bl	80050cc <xTaskResumeAll>
 800435e:	e76c      	b.n	800423a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004362:	f000 fb68 	bl	8004a36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004366:	f000 feb1 	bl	80050cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800436a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800436c:	4618      	mov	r0, r3
 800436e:	3738      	adds	r7, #56	; 0x38
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	e000ed04 	.word	0xe000ed04

08004378 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08e      	sub	sp, #56	; 0x38
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
 8004384:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800438a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438c:	2b00      	cmp	r3, #0
 800438e:	d109      	bne.n	80043a4 <xQueueGenericSendFromISR+0x2c>
 8004390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004394:	f383 8811 	msr	BASEPRI, r3
 8004398:	f3bf 8f6f 	isb	sy
 800439c:	f3bf 8f4f 	dsb	sy
 80043a0:	627b      	str	r3, [r7, #36]	; 0x24
 80043a2:	e7fe      	b.n	80043a2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d103      	bne.n	80043b2 <xQueueGenericSendFromISR+0x3a>
 80043aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <xQueueGenericSendFromISR+0x3e>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <xQueueGenericSendFromISR+0x40>
 80043b6:	2300      	movs	r3, #0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d109      	bne.n	80043d0 <xQueueGenericSendFromISR+0x58>
 80043bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c0:	f383 8811 	msr	BASEPRI, r3
 80043c4:	f3bf 8f6f 	isb	sy
 80043c8:	f3bf 8f4f 	dsb	sy
 80043cc:	623b      	str	r3, [r7, #32]
 80043ce:	e7fe      	b.n	80043ce <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d103      	bne.n	80043de <xQueueGenericSendFromISR+0x66>
 80043d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <xQueueGenericSendFromISR+0x6a>
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <xQueueGenericSendFromISR+0x6c>
 80043e2:	2300      	movs	r3, #0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d109      	bne.n	80043fc <xQueueGenericSendFromISR+0x84>
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	61fb      	str	r3, [r7, #28]
 80043fa:	e7fe      	b.n	80043fa <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80043fc:	f002 fb92 	bl	8006b24 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004400:	f3ef 8211 	mrs	r2, BASEPRI
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	61ba      	str	r2, [r7, #24]
 8004416:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004418:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800441a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004420:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004424:	429a      	cmp	r2, r3
 8004426:	d302      	bcc.n	800442e <xQueueGenericSendFromISR+0xb6>
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d12c      	bne.n	8004488 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004438:	683a      	ldr	r2, [r7, #0]
 800443a:	68b9      	ldr	r1, [r7, #8]
 800443c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800443e:	f000 fa6a 	bl	8004916 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004442:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004446:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800444a:	d112      	bne.n	8004472 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800444c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	2b00      	cmp	r3, #0
 8004452:	d016      	beq.n	8004482 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	3324      	adds	r3, #36	; 0x24
 8004458:	4618      	mov	r0, r3
 800445a:	f001 f857 	bl	800550c <xTaskRemoveFromEventList>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00e      	beq.n	8004482 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d00b      	beq.n	8004482 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	601a      	str	r2, [r3, #0]
 8004470:	e007      	b.n	8004482 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004472:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004476:	3301      	adds	r3, #1
 8004478:	b2db      	uxtb	r3, r3
 800447a:	b25a      	sxtb	r2, r3
 800447c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004482:	2301      	movs	r3, #1
 8004484:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004486:	e001      	b.n	800448c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004488:	2300      	movs	r3, #0
 800448a:	637b      	str	r3, [r7, #52]	; 0x34
 800448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800448e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004496:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004498:	4618      	mov	r0, r3
 800449a:	3738      	adds	r7, #56	; 0x38
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b08c      	sub	sp, #48	; 0x30
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80044ac:	2300      	movs	r3, #0
 80044ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80044b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d109      	bne.n	80044ce <xQueueReceive+0x2e>
	__asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	623b      	str	r3, [r7, #32]
 80044cc:	e7fe      	b.n	80044cc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d103      	bne.n	80044dc <xQueueReceive+0x3c>
 80044d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <xQueueReceive+0x40>
 80044dc:	2301      	movs	r3, #1
 80044de:	e000      	b.n	80044e2 <xQueueReceive+0x42>
 80044e0:	2300      	movs	r3, #0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d109      	bne.n	80044fa <xQueueReceive+0x5a>
 80044e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	61fb      	str	r3, [r7, #28]
 80044f8:	e7fe      	b.n	80044f8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044fa:	f001 f9bd 	bl	8005878 <xTaskGetSchedulerState>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d102      	bne.n	800450a <xQueueReceive+0x6a>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d101      	bne.n	800450e <xQueueReceive+0x6e>
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <xQueueReceive+0x70>
 800450e:	2300      	movs	r3, #0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d109      	bne.n	8004528 <xQueueReceive+0x88>
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	61bb      	str	r3, [r7, #24]
 8004526:	e7fe      	b.n	8004526 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004528:	f002 fa20 	bl	800696c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800452c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004534:	2b00      	cmp	r3, #0
 8004536:	d01f      	beq.n	8004578 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800453c:	f000 fa55 	bl	80049ea <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	1e5a      	subs	r2, r3, #1
 8004544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004546:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d00f      	beq.n	8004570 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004552:	3310      	adds	r3, #16
 8004554:	4618      	mov	r0, r3
 8004556:	f000 ffd9 	bl	800550c <xTaskRemoveFromEventList>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004560:	4b3c      	ldr	r3, [pc, #240]	; (8004654 <xQueueReceive+0x1b4>)
 8004562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004570:	f002 fa2a 	bl	80069c8 <vPortExitCritical>
				return pdPASS;
 8004574:	2301      	movs	r3, #1
 8004576:	e069      	b.n	800464c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d103      	bne.n	8004586 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800457e:	f002 fa23 	bl	80069c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004582:	2300      	movs	r3, #0
 8004584:	e062      	b.n	800464c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004588:	2b00      	cmp	r3, #0
 800458a:	d106      	bne.n	800459a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800458c:	f107 0310 	add.w	r3, r7, #16
 8004590:	4618      	mov	r0, r3
 8004592:	f001 f81d 	bl	80055d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004596:	2301      	movs	r3, #1
 8004598:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800459a:	f002 fa15 	bl	80069c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800459e:	f000 fd87 	bl	80050b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80045a2:	f002 f9e3 	bl	800696c <vPortEnterCritical>
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045ac:	b25b      	sxtb	r3, r3
 80045ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045b2:	d103      	bne.n	80045bc <xQueueReceive+0x11c>
 80045b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045c2:	b25b      	sxtb	r3, r3
 80045c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045c8:	d103      	bne.n	80045d2 <xQueueReceive+0x132>
 80045ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80045d2:	f002 f9f9 	bl	80069c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045d6:	1d3a      	adds	r2, r7, #4
 80045d8:	f107 0310 	add.w	r3, r7, #16
 80045dc:	4611      	mov	r1, r2
 80045de:	4618      	mov	r0, r3
 80045e0:	f001 f80c 	bl	80055fc <xTaskCheckForTimeOut>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d123      	bne.n	8004632 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80045ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045ec:	f000 fa75 	bl	8004ada <prvIsQueueEmpty>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d017      	beq.n	8004626 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	3324      	adds	r3, #36	; 0x24
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	4611      	mov	r1, r2
 80045fe:	4618      	mov	r0, r3
 8004600:	f000 ff36 	bl	8005470 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004606:	f000 fa16 	bl	8004a36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800460a:	f000 fd5f 	bl	80050cc <xTaskResumeAll>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d189      	bne.n	8004528 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004614:	4b0f      	ldr	r3, [pc, #60]	; (8004654 <xQueueReceive+0x1b4>)
 8004616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	f3bf 8f6f 	isb	sy
 8004624:	e780      	b.n	8004528 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004626:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004628:	f000 fa05 	bl	8004a36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800462c:	f000 fd4e 	bl	80050cc <xTaskResumeAll>
 8004630:	e77a      	b.n	8004528 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004632:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004634:	f000 f9ff 	bl	8004a36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004638:	f000 fd48 	bl	80050cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800463c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800463e:	f000 fa4c 	bl	8004ada <prvIsQueueEmpty>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	f43f af6f 	beq.w	8004528 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800464a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800464c:	4618      	mov	r0, r3
 800464e:	3730      	adds	r7, #48	; 0x30
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}
 8004654:	e000ed04 	.word	0xe000ed04

08004658 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08e      	sub	sp, #56	; 0x38
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004662:	2300      	movs	r3, #0
 8004664:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800466a:	2300      	movs	r3, #0
 800466c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800466e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004670:	2b00      	cmp	r3, #0
 8004672:	d109      	bne.n	8004688 <xQueueSemaphoreTake+0x30>
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	623b      	str	r3, [r7, #32]
 8004686:	e7fe      	b.n	8004686 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800468a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468c:	2b00      	cmp	r3, #0
 800468e:	d009      	beq.n	80046a4 <xQueueSemaphoreTake+0x4c>
 8004690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004694:	f383 8811 	msr	BASEPRI, r3
 8004698:	f3bf 8f6f 	isb	sy
 800469c:	f3bf 8f4f 	dsb	sy
 80046a0:	61fb      	str	r3, [r7, #28]
 80046a2:	e7fe      	b.n	80046a2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046a4:	f001 f8e8 	bl	8005878 <xTaskGetSchedulerState>
 80046a8:	4603      	mov	r3, r0
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d102      	bne.n	80046b4 <xQueueSemaphoreTake+0x5c>
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d101      	bne.n	80046b8 <xQueueSemaphoreTake+0x60>
 80046b4:	2301      	movs	r3, #1
 80046b6:	e000      	b.n	80046ba <xQueueSemaphoreTake+0x62>
 80046b8:	2300      	movs	r3, #0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d109      	bne.n	80046d2 <xQueueSemaphoreTake+0x7a>
 80046be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046c2:	f383 8811 	msr	BASEPRI, r3
 80046c6:	f3bf 8f6f 	isb	sy
 80046ca:	f3bf 8f4f 	dsb	sy
 80046ce:	61bb      	str	r3, [r7, #24]
 80046d0:	e7fe      	b.n	80046d0 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046d2:	f002 f94b 	bl	800696c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80046d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80046dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d024      	beq.n	800472c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	1e5a      	subs	r2, r3, #1
 80046e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d104      	bne.n	80046fc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80046f2:	f001 fa33 	bl	8005b5c <pvTaskIncrementMutexHeldCount>
 80046f6:	4602      	mov	r2, r0
 80046f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00f      	beq.n	8004724 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004706:	3310      	adds	r3, #16
 8004708:	4618      	mov	r0, r3
 800470a:	f000 feff 	bl	800550c <xTaskRemoveFromEventList>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	d007      	beq.n	8004724 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004714:	4b53      	ldr	r3, [pc, #332]	; (8004864 <xQueueSemaphoreTake+0x20c>)
 8004716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800471a:	601a      	str	r2, [r3, #0]
 800471c:	f3bf 8f4f 	dsb	sy
 8004720:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004724:	f002 f950 	bl	80069c8 <vPortExitCritical>
				return pdPASS;
 8004728:	2301      	movs	r3, #1
 800472a:	e096      	b.n	800485a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d110      	bne.n	8004754 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004734:	2b00      	cmp	r3, #0
 8004736:	d009      	beq.n	800474c <xQueueSemaphoreTake+0xf4>
 8004738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800473c:	f383 8811 	msr	BASEPRI, r3
 8004740:	f3bf 8f6f 	isb	sy
 8004744:	f3bf 8f4f 	dsb	sy
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	e7fe      	b.n	800474a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800474c:	f002 f93c 	bl	80069c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004750:	2300      	movs	r3, #0
 8004752:	e082      	b.n	800485a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800475a:	f107 030c 	add.w	r3, r7, #12
 800475e:	4618      	mov	r0, r3
 8004760:	f000 ff36 	bl	80055d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004764:	2301      	movs	r3, #1
 8004766:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004768:	f002 f92e 	bl	80069c8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800476c:	f000 fca0 	bl	80050b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004770:	f002 f8fc 	bl	800696c <vPortEnterCritical>
 8004774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004776:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800477a:	b25b      	sxtb	r3, r3
 800477c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004780:	d103      	bne.n	800478a <xQueueSemaphoreTake+0x132>
 8004782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004790:	b25b      	sxtb	r3, r3
 8004792:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004796:	d103      	bne.n	80047a0 <xQueueSemaphoreTake+0x148>
 8004798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047a0:	f002 f912 	bl	80069c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047a4:	463a      	mov	r2, r7
 80047a6:	f107 030c 	add.w	r3, r7, #12
 80047aa:	4611      	mov	r1, r2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 ff25 	bl	80055fc <xTaskCheckForTimeOut>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d132      	bne.n	800481e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047ba:	f000 f98e 	bl	8004ada <prvIsQueueEmpty>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d026      	beq.n	8004812 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80047c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d109      	bne.n	80047e0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 80047cc:	f002 f8ce 	bl	800696c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80047d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f001 f86d 	bl	80058b4 <xTaskPriorityInherit>
 80047da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80047dc:	f002 f8f4 	bl	80069c8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80047e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e2:	3324      	adds	r3, #36	; 0x24
 80047e4:	683a      	ldr	r2, [r7, #0]
 80047e6:	4611      	mov	r1, r2
 80047e8:	4618      	mov	r0, r3
 80047ea:	f000 fe41 	bl	8005470 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80047ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80047f0:	f000 f921 	bl	8004a36 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80047f4:	f000 fc6a 	bl	80050cc <xTaskResumeAll>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f47f af69 	bne.w	80046d2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8004800:	4b18      	ldr	r3, [pc, #96]	; (8004864 <xQueueSemaphoreTake+0x20c>)
 8004802:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	e75f      	b.n	80046d2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004812:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004814:	f000 f90f 	bl	8004a36 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004818:	f000 fc58 	bl	80050cc <xTaskResumeAll>
 800481c:	e759      	b.n	80046d2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800481e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004820:	f000 f909 	bl	8004a36 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004824:	f000 fc52 	bl	80050cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004828:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800482a:	f000 f956 	bl	8004ada <prvIsQueueEmpty>
 800482e:	4603      	mov	r3, r0
 8004830:	2b00      	cmp	r3, #0
 8004832:	f43f af4e 	beq.w	80046d2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00d      	beq.n	8004858 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800483c:	f002 f896 	bl	800696c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004840:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004842:	f000 f850 	bl	80048e6 <prvGetDisinheritPriorityAfterTimeout>
 8004846:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800484e:	4618      	mov	r0, r3
 8004850:	f001 f904 	bl	8005a5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004854:	f002 f8b8 	bl	80069c8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004858:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800485a:	4618      	mov	r0, r3
 800485c:	3738      	adds	r7, #56	; 0x38
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
 8004862:	bf00      	nop
 8004864:	e000ed04 	.word	0xe000ed04

08004868 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d109      	bne.n	800488a <uxQueueMessagesWaiting+0x22>
 8004876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	60bb      	str	r3, [r7, #8]
 8004888:	e7fe      	b.n	8004888 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800488a:	f002 f86f 	bl	800696c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004894:	f002 f898 	bl	80069c8 <vPortExitCritical>

	return uxReturn;
 8004898:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800489a:	4618      	mov	r0, r3
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	b084      	sub	sp, #16
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d109      	bne.n	80048c8 <vQueueDelete+0x26>
 80048b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b8:	f383 8811 	msr	BASEPRI, r3
 80048bc:	f3bf 8f6f 	isb	sy
 80048c0:	f3bf 8f4f 	dsb	sy
 80048c4:	60bb      	str	r3, [r7, #8]
 80048c6:	e7fe      	b.n	80048c6 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 f95d 	bl	8004b88 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d102      	bne.n	80048de <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f002 fa23 	bl	8006d24 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80048e6:	b480      	push	{r7}
 80048e8:	b085      	sub	sp, #20
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d006      	beq.n	8004904 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	e001      	b.n	8004908 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004908:	68fb      	ldr	r3, [r7, #12]
	}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004916:	b580      	push	{r7, lr}
 8004918:	b086      	sub	sp, #24
 800491a:	af00      	add	r7, sp, #0
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	60b9      	str	r1, [r7, #8]
 8004920:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004930:	2b00      	cmp	r3, #0
 8004932:	d10d      	bne.n	8004950 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d14d      	bne.n	80049d8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	4618      	mov	r0, r3
 8004942:	f001 f81f 	bl	8005984 <xTaskPriorityDisinherit>
 8004946:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	609a      	str	r2, [r3, #8]
 800494e:	e043      	b.n	80049d8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d119      	bne.n	800498a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6858      	ldr	r0, [r3, #4]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	461a      	mov	r2, r3
 8004960:	68b9      	ldr	r1, [r7, #8]
 8004962:	f003 fd99 	bl	8008498 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	441a      	add	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	429a      	cmp	r2, r3
 800497e:	d32b      	bcc.n	80049d8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	605a      	str	r2, [r3, #4]
 8004988:	e026      	b.n	80049d8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	68d8      	ldr	r0, [r3, #12]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	461a      	mov	r2, r3
 8004994:	68b9      	ldr	r1, [r7, #8]
 8004996:	f003 fd7f 	bl	8008498 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a2:	425b      	negs	r3, r3
 80049a4:	441a      	add	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	68da      	ldr	r2, [r3, #12]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d207      	bcs.n	80049c6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	425b      	negs	r3, r3
 80049c0:	441a      	add	r2, r3
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d105      	bne.n	80049d8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d002      	beq.n	80049d8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	3b01      	subs	r3, #1
 80049d6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	1c5a      	adds	r2, r3, #1
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80049e0:	697b      	ldr	r3, [r7, #20]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3718      	adds	r7, #24
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}

080049ea <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80049ea:	b580      	push	{r7, lr}
 80049ec:	b082      	sub	sp, #8
 80049ee:	af00      	add	r7, sp, #0
 80049f0:	6078      	str	r0, [r7, #4]
 80049f2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d018      	beq.n	8004a2e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	68da      	ldr	r2, [r3, #12]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a04:	441a      	add	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68da      	ldr	r2, [r3, #12]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d303      	bcc.n	8004a1e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681a      	ldr	r2, [r3, #0]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	68d9      	ldr	r1, [r3, #12]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	461a      	mov	r2, r3
 8004a28:	6838      	ldr	r0, [r7, #0]
 8004a2a:	f003 fd35 	bl	8008498 <memcpy>
	}
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b084      	sub	sp, #16
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a3e:	f001 ff95 	bl	800696c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a48:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a4a:	e011      	b.n	8004a70 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d012      	beq.n	8004a7a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3324      	adds	r3, #36	; 0x24
 8004a58:	4618      	mov	r0, r3
 8004a5a:	f000 fd57 	bl	800550c <xTaskRemoveFromEventList>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a64:	f000 fe2a 	bl	80056bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a68:	7bfb      	ldrb	r3, [r7, #15]
 8004a6a:	3b01      	subs	r3, #1
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	dce9      	bgt.n	8004a4c <prvUnlockQueue+0x16>
 8004a78:	e000      	b.n	8004a7c <prvUnlockQueue+0x46>
					break;
 8004a7a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	22ff      	movs	r2, #255	; 0xff
 8004a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004a84:	f001 ffa0 	bl	80069c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a88:	f001 ff70 	bl	800696c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a92:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a94:	e011      	b.n	8004aba <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d012      	beq.n	8004ac4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	3310      	adds	r3, #16
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f000 fd32 	bl	800550c <xTaskRemoveFromEventList>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004aae:	f000 fe05 	bl	80056bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004ab2:	7bbb      	ldrb	r3, [r7, #14]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004aba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	dce9      	bgt.n	8004a96 <prvUnlockQueue+0x60>
 8004ac2:	e000      	b.n	8004ac6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ac4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	22ff      	movs	r2, #255	; 0xff
 8004aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ace:	f001 ff7b 	bl	80069c8 <vPortExitCritical>
}
 8004ad2:	bf00      	nop
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ae2:	f001 ff43 	bl	800696c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d102      	bne.n	8004af4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004aee:	2301      	movs	r3, #1
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	e001      	b.n	8004af8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004af4:	2300      	movs	r3, #0
 8004af6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004af8:	f001 ff66 	bl	80069c8 <vPortExitCritical>

	return xReturn;
 8004afc:	68fb      	ldr	r3, [r7, #12]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b0e:	f001 ff2d 	bl	800696c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d102      	bne.n	8004b24 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	60fb      	str	r3, [r7, #12]
 8004b22:	e001      	b.n	8004b28 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b24:	2300      	movs	r3, #0
 8004b26:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b28:	f001 ff4e 	bl	80069c8 <vPortExitCritical>

	return xReturn;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
	...

08004b38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b42:	2300      	movs	r3, #0
 8004b44:	60fb      	str	r3, [r7, #12]
 8004b46:	e014      	b.n	8004b72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b48:	4a0e      	ldr	r2, [pc, #56]	; (8004b84 <vQueueAddToRegistry+0x4c>)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10b      	bne.n	8004b6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b54:	490b      	ldr	r1, [pc, #44]	; (8004b84 <vQueueAddToRegistry+0x4c>)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	683a      	ldr	r2, [r7, #0]
 8004b5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b5e:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <vQueueAddToRegistry+0x4c>)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	00db      	lsls	r3, r3, #3
 8004b64:	4413      	add	r3, r2
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b6a:	e005      	b.n	8004b78 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2b07      	cmp	r3, #7
 8004b76:	d9e7      	bls.n	8004b48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	20004aac 	.word	0x20004aac

08004b88 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	e016      	b.n	8004bc4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004b96:	4a10      	ldr	r2, [pc, #64]	; (8004bd8 <vQueueUnregisterQueue+0x50>)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d10b      	bne.n	8004bbe <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004ba6:	4a0c      	ldr	r2, [pc, #48]	; (8004bd8 <vQueueUnregisterQueue+0x50>)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2100      	movs	r1, #0
 8004bac:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004bb0:	4a09      	ldr	r2, [pc, #36]	; (8004bd8 <vQueueUnregisterQueue+0x50>)
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	00db      	lsls	r3, r3, #3
 8004bb6:	4413      	add	r3, r2
 8004bb8:	2200      	movs	r2, #0
 8004bba:	605a      	str	r2, [r3, #4]
				break;
 8004bbc:	e005      	b.n	8004bca <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	60fb      	str	r3, [r7, #12]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2b07      	cmp	r3, #7
 8004bc8:	d9e5      	bls.n	8004b96 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004bca:	bf00      	nop
 8004bcc:	3714      	adds	r7, #20
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	20004aac 	.word	0x20004aac

08004bdc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	60f8      	str	r0, [r7, #12]
 8004be4:	60b9      	str	r1, [r7, #8]
 8004be6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004bec:	f001 febe 	bl	800696c <vPortEnterCritical>
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bf6:	b25b      	sxtb	r3, r3
 8004bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bfc:	d103      	bne.n	8004c06 <vQueueWaitForMessageRestricted+0x2a>
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2200      	movs	r2, #0
 8004c02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c0c:	b25b      	sxtb	r3, r3
 8004c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c12:	d103      	bne.n	8004c1c <vQueueWaitForMessageRestricted+0x40>
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c1c:	f001 fed4 	bl	80069c8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d106      	bne.n	8004c36 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	3324      	adds	r3, #36	; 0x24
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	68b9      	ldr	r1, [r7, #8]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 fc41 	bl	80054b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004c36:	6978      	ldr	r0, [r7, #20]
 8004c38:	f7ff fefd 	bl	8004a36 <prvUnlockQueue>
	}
 8004c3c:	bf00      	nop
 8004c3e:	3718      	adds	r7, #24
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08e      	sub	sp, #56	; 0x38
 8004c48:	af04      	add	r7, sp, #16
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d109      	bne.n	8004c6c <xTaskCreateStatic+0x28>
 8004c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5c:	f383 8811 	msr	BASEPRI, r3
 8004c60:	f3bf 8f6f 	isb	sy
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	623b      	str	r3, [r7, #32]
 8004c6a:	e7fe      	b.n	8004c6a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004c6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d109      	bne.n	8004c86 <xTaskCreateStatic+0x42>
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	61fb      	str	r3, [r7, #28]
 8004c84:	e7fe      	b.n	8004c84 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c86:	235c      	movs	r3, #92	; 0x5c
 8004c88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	2b5c      	cmp	r3, #92	; 0x5c
 8004c8e:	d009      	beq.n	8004ca4 <xTaskCreateStatic+0x60>
 8004c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c94:	f383 8811 	msr	BASEPRI, r3
 8004c98:	f3bf 8f6f 	isb	sy
 8004c9c:	f3bf 8f4f 	dsb	sy
 8004ca0:	61bb      	str	r3, [r7, #24]
 8004ca2:	e7fe      	b.n	8004ca2 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ca4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d01e      	beq.n	8004cea <xTaskCreateStatic+0xa6>
 8004cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01b      	beq.n	8004cea <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cba:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	9303      	str	r3, [sp, #12]
 8004cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cca:	9302      	str	r3, [sp, #8]
 8004ccc:	f107 0314 	add.w	r3, r7, #20
 8004cd0:	9301      	str	r3, [sp, #4]
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	68b9      	ldr	r1, [r7, #8]
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f850 	bl	8004d82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ce2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ce4:	f000 f8dc 	bl	8004ea0 <prvAddNewTaskToReadyList>
 8004ce8:	e001      	b.n	8004cee <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004cee:	697b      	ldr	r3, [r7, #20]
	}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3728      	adds	r7, #40	; 0x28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08c      	sub	sp, #48	; 0x30
 8004cfc:	af04      	add	r7, sp, #16
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	4613      	mov	r3, r2
 8004d06:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004d08:	88fb      	ldrh	r3, [r7, #6]
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f001 ff47 	bl	8006ba0 <pvPortMalloc>
 8004d12:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00e      	beq.n	8004d38 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004d1a:	205c      	movs	r0, #92	; 0x5c
 8004d1c:	f001 ff40 	bl	8006ba0 <pvPortMalloc>
 8004d20:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d003      	beq.n	8004d30 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004d28:	69fb      	ldr	r3, [r7, #28]
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d2e:	e005      	b.n	8004d3c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d30:	6978      	ldr	r0, [r7, #20]
 8004d32:	f001 fff7 	bl	8006d24 <vPortFree>
 8004d36:	e001      	b.n	8004d3c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d017      	beq.n	8004d72 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d4a:	88fa      	ldrh	r2, [r7, #6]
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	9303      	str	r3, [sp, #12]
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	9302      	str	r3, [sp, #8]
 8004d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	68b9      	ldr	r1, [r7, #8]
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 f80e 	bl	8004d82 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d66:	69f8      	ldr	r0, [r7, #28]
 8004d68:	f000 f89a 	bl	8004ea0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	61bb      	str	r3, [r7, #24]
 8004d70:	e002      	b.n	8004d78 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d76:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d78:	69bb      	ldr	r3, [r7, #24]
	}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3720      	adds	r7, #32
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	bd80      	pop	{r7, pc}

08004d82 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b088      	sub	sp, #32
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	60f8      	str	r0, [r7, #12]
 8004d8a:	60b9      	str	r1, [r7, #8]
 8004d8c:	607a      	str	r2, [r7, #4]
 8004d8e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	461a      	mov	r2, r3
 8004d9a:	21a5      	movs	r1, #165	; 0xa5
 8004d9c:	f003 fb87 	bl	80084ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004daa:	3b01      	subs	r3, #1
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4413      	add	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	f023 0307 	bic.w	r3, r3, #7
 8004db8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004dba:	69bb      	ldr	r3, [r7, #24]
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d009      	beq.n	8004dd8 <prvInitialiseNewTask+0x56>
 8004dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc8:	f383 8811 	msr	BASEPRI, r3
 8004dcc:	f3bf 8f6f 	isb	sy
 8004dd0:	f3bf 8f4f 	dsb	sy
 8004dd4:	617b      	str	r3, [r7, #20]
 8004dd6:	e7fe      	b.n	8004dd6 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d01f      	beq.n	8004e1e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dde:	2300      	movs	r3, #0
 8004de0:	61fb      	str	r3, [r7, #28]
 8004de2:	e012      	b.n	8004e0a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	4413      	add	r3, r2
 8004dea:	7819      	ldrb	r1, [r3, #0]
 8004dec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	4413      	add	r3, r2
 8004df2:	3334      	adds	r3, #52	; 0x34
 8004df4:	460a      	mov	r2, r1
 8004df6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	781b      	ldrb	r3, [r3, #0]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d006      	beq.n	8004e12 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	3301      	adds	r3, #1
 8004e08:	61fb      	str	r3, [r7, #28]
 8004e0a:	69fb      	ldr	r3, [r7, #28]
 8004e0c:	2b0f      	cmp	r3, #15
 8004e0e:	d9e9      	bls.n	8004de4 <prvInitialiseNewTask+0x62>
 8004e10:	e000      	b.n	8004e14 <prvInitialiseNewTask+0x92>
			{
				break;
 8004e12:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e1c:	e003      	b.n	8004e26 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e28:	2b37      	cmp	r3, #55	; 0x37
 8004e2a:	d901      	bls.n	8004e30 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e2c:	2337      	movs	r3, #55	; 0x37
 8004e2e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e34:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e3a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3e:	2200      	movs	r2, #0
 8004e40:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	3304      	adds	r3, #4
 8004e46:	4618      	mov	r0, r3
 8004e48:	f7fe ff64 	bl	8003d14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	3318      	adds	r3, #24
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fe ff5f 	bl	8003d14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e5a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e5e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e64:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e6a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6e:	2200      	movs	r2, #0
 8004e70:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	68f9      	ldr	r1, [r7, #12]
 8004e7e:	69b8      	ldr	r0, [r7, #24]
 8004e80:	f001 fc4a 	bl	8006718 <pxPortInitialiseStack>
 8004e84:	4602      	mov	r2, r0
 8004e86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d002      	beq.n	8004e96 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e96:	bf00      	nop
 8004e98:	3720      	adds	r7, #32
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
	...

08004ea0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004ea8:	f001 fd60 	bl	800696c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004eac:	4b2d      	ldr	r3, [pc, #180]	; (8004f64 <prvAddNewTaskToReadyList+0xc4>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3301      	adds	r3, #1
 8004eb2:	4a2c      	ldr	r2, [pc, #176]	; (8004f64 <prvAddNewTaskToReadyList+0xc4>)
 8004eb4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004eb6:	4b2c      	ldr	r3, [pc, #176]	; (8004f68 <prvAddNewTaskToReadyList+0xc8>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d109      	bne.n	8004ed2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ebe:	4a2a      	ldr	r2, [pc, #168]	; (8004f68 <prvAddNewTaskToReadyList+0xc8>)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ec4:	4b27      	ldr	r3, [pc, #156]	; (8004f64 <prvAddNewTaskToReadyList+0xc4>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d110      	bne.n	8004eee <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ecc:	f000 fc1a 	bl	8005704 <prvInitialiseTaskLists>
 8004ed0:	e00d      	b.n	8004eee <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ed2:	4b26      	ldr	r3, [pc, #152]	; (8004f6c <prvAddNewTaskToReadyList+0xcc>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d109      	bne.n	8004eee <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004eda:	4b23      	ldr	r3, [pc, #140]	; (8004f68 <prvAddNewTaskToReadyList+0xc8>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee4:	429a      	cmp	r2, r3
 8004ee6:	d802      	bhi.n	8004eee <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ee8:	4a1f      	ldr	r2, [pc, #124]	; (8004f68 <prvAddNewTaskToReadyList+0xc8>)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004eee:	4b20      	ldr	r3, [pc, #128]	; (8004f70 <prvAddNewTaskToReadyList+0xd0>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	4a1e      	ldr	r2, [pc, #120]	; (8004f70 <prvAddNewTaskToReadyList+0xd0>)
 8004ef6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004ef8:	4b1d      	ldr	r3, [pc, #116]	; (8004f70 <prvAddNewTaskToReadyList+0xd0>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f04:	4b1b      	ldr	r3, [pc, #108]	; (8004f74 <prvAddNewTaskToReadyList+0xd4>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d903      	bls.n	8004f14 <prvAddNewTaskToReadyList+0x74>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	4a18      	ldr	r2, [pc, #96]	; (8004f74 <prvAddNewTaskToReadyList+0xd4>)
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4a15      	ldr	r2, [pc, #84]	; (8004f78 <prvAddNewTaskToReadyList+0xd8>)
 8004f22:	441a      	add	r2, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	3304      	adds	r3, #4
 8004f28:	4619      	mov	r1, r3
 8004f2a:	4610      	mov	r0, r2
 8004f2c:	f7fe feff 	bl	8003d2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f30:	f001 fd4a 	bl	80069c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f34:	4b0d      	ldr	r3, [pc, #52]	; (8004f6c <prvAddNewTaskToReadyList+0xcc>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00e      	beq.n	8004f5a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f3c:	4b0a      	ldr	r3, [pc, #40]	; (8004f68 <prvAddNewTaskToReadyList+0xc8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d207      	bcs.n	8004f5a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f4a:	4b0c      	ldr	r3, [pc, #48]	; (8004f7c <prvAddNewTaskToReadyList+0xdc>)
 8004f4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f50:	601a      	str	r2, [r3, #0]
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f5a:	bf00      	nop
 8004f5c:	3708      	adds	r7, #8
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	20000bbc 	.word	0x20000bbc
 8004f68:	200006e8 	.word	0x200006e8
 8004f6c:	20000bc8 	.word	0x20000bc8
 8004f70:	20000bd8 	.word	0x20000bd8
 8004f74:	20000bc4 	.word	0x20000bc4
 8004f78:	200006ec 	.word	0x200006ec
 8004f7c:	e000ed04 	.word	0xe000ed04

08004f80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b084      	sub	sp, #16
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d016      	beq.n	8004fc0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f92:	4b13      	ldr	r3, [pc, #76]	; (8004fe0 <vTaskDelay+0x60>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d009      	beq.n	8004fae <vTaskDelay+0x2e>
 8004f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9e:	f383 8811 	msr	BASEPRI, r3
 8004fa2:	f3bf 8f6f 	isb	sy
 8004fa6:	f3bf 8f4f 	dsb	sy
 8004faa:	60bb      	str	r3, [r7, #8]
 8004fac:	e7fe      	b.n	8004fac <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004fae:	f000 f87f 	bl	80050b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004fb2:	2100      	movs	r1, #0
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 ffb9 	bl	8005f2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004fba:	f000 f887 	bl	80050cc <xTaskResumeAll>
 8004fbe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d107      	bne.n	8004fd6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004fc6:	4b07      	ldr	r3, [pc, #28]	; (8004fe4 <vTaskDelay+0x64>)
 8004fc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	f3bf 8f4f 	dsb	sy
 8004fd2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fd6:	bf00      	nop
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	20000be4 	.word	0x20000be4
 8004fe4:	e000ed04 	.word	0xe000ed04

08004fe8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08a      	sub	sp, #40	; 0x28
 8004fec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ff6:	463a      	mov	r2, r7
 8004ff8:	1d39      	adds	r1, r7, #4
 8004ffa:	f107 0308 	add.w	r3, r7, #8
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fe fe34 	bl	8003c6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	9202      	str	r2, [sp, #8]
 800500c:	9301      	str	r3, [sp, #4]
 800500e:	2300      	movs	r3, #0
 8005010:	9300      	str	r3, [sp, #0]
 8005012:	2300      	movs	r3, #0
 8005014:	460a      	mov	r2, r1
 8005016:	4920      	ldr	r1, [pc, #128]	; (8005098 <vTaskStartScheduler+0xb0>)
 8005018:	4820      	ldr	r0, [pc, #128]	; (800509c <vTaskStartScheduler+0xb4>)
 800501a:	f7ff fe13 	bl	8004c44 <xTaskCreateStatic>
 800501e:	4602      	mov	r2, r0
 8005020:	4b1f      	ldr	r3, [pc, #124]	; (80050a0 <vTaskStartScheduler+0xb8>)
 8005022:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005024:	4b1e      	ldr	r3, [pc, #120]	; (80050a0 <vTaskStartScheduler+0xb8>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d002      	beq.n	8005032 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800502c:	2301      	movs	r3, #1
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	e001      	b.n	8005036 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005032:	2300      	movs	r3, #0
 8005034:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	2b01      	cmp	r3, #1
 800503a:	d102      	bne.n	8005042 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800503c:	f000 ffca 	bl	8005fd4 <xTimerCreateTimerTask>
 8005040:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b01      	cmp	r3, #1
 8005046:	d115      	bne.n	8005074 <vTaskStartScheduler+0x8c>
 8005048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504c:	f383 8811 	msr	BASEPRI, r3
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800505a:	4b12      	ldr	r3, [pc, #72]	; (80050a4 <vTaskStartScheduler+0xbc>)
 800505c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005060:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005062:	4b11      	ldr	r3, [pc, #68]	; (80050a8 <vTaskStartScheduler+0xc0>)
 8005064:	2201      	movs	r2, #1
 8005066:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005068:	4b10      	ldr	r3, [pc, #64]	; (80050ac <vTaskStartScheduler+0xc4>)
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800506e:	f001 fbdf 	bl	8006830 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005072:	e00d      	b.n	8005090 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800507a:	d109      	bne.n	8005090 <vTaskStartScheduler+0xa8>
 800507c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005080:	f383 8811 	msr	BASEPRI, r3
 8005084:	f3bf 8f6f 	isb	sy
 8005088:	f3bf 8f4f 	dsb	sy
 800508c:	60fb      	str	r3, [r7, #12]
 800508e:	e7fe      	b.n	800508e <vTaskStartScheduler+0xa6>
}
 8005090:	bf00      	nop
 8005092:	3718      	adds	r7, #24
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	080084e8 	.word	0x080084e8
 800509c:	080056d5 	.word	0x080056d5
 80050a0:	20000be0 	.word	0x20000be0
 80050a4:	20000bdc 	.word	0x20000bdc
 80050a8:	20000bc8 	.word	0x20000bc8
 80050ac:	20000bc0 	.word	0x20000bc0

080050b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050b0:	b480      	push	{r7}
 80050b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80050b4:	4b04      	ldr	r3, [pc, #16]	; (80050c8 <vTaskSuspendAll+0x18>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	3301      	adds	r3, #1
 80050ba:	4a03      	ldr	r2, [pc, #12]	; (80050c8 <vTaskSuspendAll+0x18>)
 80050bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80050be:	bf00      	nop
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	20000be4 	.word	0x20000be4

080050cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b084      	sub	sp, #16
 80050d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80050da:	4b41      	ldr	r3, [pc, #260]	; (80051e0 <xTaskResumeAll+0x114>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d109      	bne.n	80050f6 <xTaskResumeAll+0x2a>
 80050e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e6:	f383 8811 	msr	BASEPRI, r3
 80050ea:	f3bf 8f6f 	isb	sy
 80050ee:	f3bf 8f4f 	dsb	sy
 80050f2:	603b      	str	r3, [r7, #0]
 80050f4:	e7fe      	b.n	80050f4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80050f6:	f001 fc39 	bl	800696c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80050fa:	4b39      	ldr	r3, [pc, #228]	; (80051e0 <xTaskResumeAll+0x114>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3b01      	subs	r3, #1
 8005100:	4a37      	ldr	r2, [pc, #220]	; (80051e0 <xTaskResumeAll+0x114>)
 8005102:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005104:	4b36      	ldr	r3, [pc, #216]	; (80051e0 <xTaskResumeAll+0x114>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d162      	bne.n	80051d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800510c:	4b35      	ldr	r3, [pc, #212]	; (80051e4 <xTaskResumeAll+0x118>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d05e      	beq.n	80051d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005114:	e02f      	b.n	8005176 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005116:	4b34      	ldr	r3, [pc, #208]	; (80051e8 <xTaskResumeAll+0x11c>)
 8005118:	68db      	ldr	r3, [r3, #12]
 800511a:	68db      	ldr	r3, [r3, #12]
 800511c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3318      	adds	r3, #24
 8005122:	4618      	mov	r0, r3
 8005124:	f7fe fe60 	bl	8003de8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	3304      	adds	r3, #4
 800512c:	4618      	mov	r0, r3
 800512e:	f7fe fe5b 	bl	8003de8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005136:	4b2d      	ldr	r3, [pc, #180]	; (80051ec <xTaskResumeAll+0x120>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	429a      	cmp	r2, r3
 800513c:	d903      	bls.n	8005146 <xTaskResumeAll+0x7a>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005142:	4a2a      	ldr	r2, [pc, #168]	; (80051ec <xTaskResumeAll+0x120>)
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800514a:	4613      	mov	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4413      	add	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	4a27      	ldr	r2, [pc, #156]	; (80051f0 <xTaskResumeAll+0x124>)
 8005154:	441a      	add	r2, r3
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	3304      	adds	r3, #4
 800515a:	4619      	mov	r1, r3
 800515c:	4610      	mov	r0, r2
 800515e:	f7fe fde6 	bl	8003d2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005166:	4b23      	ldr	r3, [pc, #140]	; (80051f4 <xTaskResumeAll+0x128>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516c:	429a      	cmp	r2, r3
 800516e:	d302      	bcc.n	8005176 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005170:	4b21      	ldr	r3, [pc, #132]	; (80051f8 <xTaskResumeAll+0x12c>)
 8005172:	2201      	movs	r2, #1
 8005174:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005176:	4b1c      	ldr	r3, [pc, #112]	; (80051e8 <xTaskResumeAll+0x11c>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1cb      	bne.n	8005116 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d001      	beq.n	8005188 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005184:	f000 fb58 	bl	8005838 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005188:	4b1c      	ldr	r3, [pc, #112]	; (80051fc <xTaskResumeAll+0x130>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d010      	beq.n	80051b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005194:	f000 f858 	bl	8005248 <xTaskIncrementTick>
 8005198:	4603      	mov	r3, r0
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800519e:	4b16      	ldr	r3, [pc, #88]	; (80051f8 <xTaskResumeAll+0x12c>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3b01      	subs	r3, #1
 80051a8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1f1      	bne.n	8005194 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 80051b0:	4b12      	ldr	r3, [pc, #72]	; (80051fc <xTaskResumeAll+0x130>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80051b6:	4b10      	ldr	r3, [pc, #64]	; (80051f8 <xTaskResumeAll+0x12c>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d009      	beq.n	80051d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051be:	2301      	movs	r3, #1
 80051c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051c2:	4b0f      	ldr	r3, [pc, #60]	; (8005200 <xTaskResumeAll+0x134>)
 80051c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051c8:	601a      	str	r2, [r3, #0]
 80051ca:	f3bf 8f4f 	dsb	sy
 80051ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051d2:	f001 fbf9 	bl	80069c8 <vPortExitCritical>

	return xAlreadyYielded;
 80051d6:	68bb      	ldr	r3, [r7, #8]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	20000be4 	.word	0x20000be4
 80051e4:	20000bbc 	.word	0x20000bbc
 80051e8:	20000b7c 	.word	0x20000b7c
 80051ec:	20000bc4 	.word	0x20000bc4
 80051f0:	200006ec 	.word	0x200006ec
 80051f4:	200006e8 	.word	0x200006e8
 80051f8:	20000bd0 	.word	0x20000bd0
 80051fc:	20000bcc 	.word	0x20000bcc
 8005200:	e000ed04 	.word	0xe000ed04

08005204 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800520a:	4b05      	ldr	r3, [pc, #20]	; (8005220 <xTaskGetTickCount+0x1c>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005210:	687b      	ldr	r3, [r7, #4]
}
 8005212:	4618      	mov	r0, r3
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	20000bc0 	.word	0x20000bc0

08005224 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800522a:	f001 fc7b 	bl	8006b24 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800522e:	2300      	movs	r3, #0
 8005230:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8005232:	4b04      	ldr	r3, [pc, #16]	; (8005244 <xTaskGetTickCountFromISR+0x20>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005238:	683b      	ldr	r3, [r7, #0]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3708      	adds	r7, #8
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	20000bc0 	.word	0x20000bc0

08005248 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800524e:	2300      	movs	r3, #0
 8005250:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005252:	4b4e      	ldr	r3, [pc, #312]	; (800538c <xTaskIncrementTick+0x144>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	f040 8088 	bne.w	800536c <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800525c:	4b4c      	ldr	r3, [pc, #304]	; (8005390 <xTaskIncrementTick+0x148>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	3301      	adds	r3, #1
 8005262:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005264:	4a4a      	ldr	r2, [pc, #296]	; (8005390 <xTaskIncrementTick+0x148>)
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d11f      	bne.n	80052b0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005270:	4b48      	ldr	r3, [pc, #288]	; (8005394 <xTaskIncrementTick+0x14c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d009      	beq.n	800528e <xTaskIncrementTick+0x46>
 800527a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527e:	f383 8811 	msr	BASEPRI, r3
 8005282:	f3bf 8f6f 	isb	sy
 8005286:	f3bf 8f4f 	dsb	sy
 800528a:	603b      	str	r3, [r7, #0]
 800528c:	e7fe      	b.n	800528c <xTaskIncrementTick+0x44>
 800528e:	4b41      	ldr	r3, [pc, #260]	; (8005394 <xTaskIncrementTick+0x14c>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	4b40      	ldr	r3, [pc, #256]	; (8005398 <xTaskIncrementTick+0x150>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a3e      	ldr	r2, [pc, #248]	; (8005394 <xTaskIncrementTick+0x14c>)
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	4a3e      	ldr	r2, [pc, #248]	; (8005398 <xTaskIncrementTick+0x150>)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	4b3e      	ldr	r3, [pc, #248]	; (800539c <xTaskIncrementTick+0x154>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3301      	adds	r3, #1
 80052a8:	4a3c      	ldr	r2, [pc, #240]	; (800539c <xTaskIncrementTick+0x154>)
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	f000 fac4 	bl	8005838 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052b0:	4b3b      	ldr	r3, [pc, #236]	; (80053a0 <xTaskIncrementTick+0x158>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d349      	bcc.n	800534e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052ba:	4b36      	ldr	r3, [pc, #216]	; (8005394 <xTaskIncrementTick+0x14c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052c4:	4b36      	ldr	r3, [pc, #216]	; (80053a0 <xTaskIncrementTick+0x158>)
 80052c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052ca:	601a      	str	r2, [r3, #0]
					break;
 80052cc:	e03f      	b.n	800534e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ce:	4b31      	ldr	r3, [pc, #196]	; (8005394 <xTaskIncrementTick+0x14c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d203      	bcs.n	80052ee <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052e6:	4a2e      	ldr	r2, [pc, #184]	; (80053a0 <xTaskIncrementTick+0x158>)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80052ec:	e02f      	b.n	800534e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fd78 	bl	8003de8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d004      	beq.n	800530a <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	3318      	adds	r3, #24
 8005304:	4618      	mov	r0, r3
 8005306:	f7fe fd6f 	bl	8003de8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800530e:	4b25      	ldr	r3, [pc, #148]	; (80053a4 <xTaskIncrementTick+0x15c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d903      	bls.n	800531e <xTaskIncrementTick+0xd6>
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531a:	4a22      	ldr	r2, [pc, #136]	; (80053a4 <xTaskIncrementTick+0x15c>)
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4a1f      	ldr	r2, [pc, #124]	; (80053a8 <xTaskIncrementTick+0x160>)
 800532c:	441a      	add	r2, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	3304      	adds	r3, #4
 8005332:	4619      	mov	r1, r3
 8005334:	4610      	mov	r0, r2
 8005336:	f7fe fcfa 	bl	8003d2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800533e:	4b1b      	ldr	r3, [pc, #108]	; (80053ac <xTaskIncrementTick+0x164>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005344:	429a      	cmp	r2, r3
 8005346:	d3b8      	bcc.n	80052ba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005348:	2301      	movs	r3, #1
 800534a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800534c:	e7b5      	b.n	80052ba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800534e:	4b17      	ldr	r3, [pc, #92]	; (80053ac <xTaskIncrementTick+0x164>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005354:	4914      	ldr	r1, [pc, #80]	; (80053a8 <xTaskIncrementTick+0x160>)
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	440b      	add	r3, r1
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d907      	bls.n	8005376 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005366:	2301      	movs	r3, #1
 8005368:	617b      	str	r3, [r7, #20]
 800536a:	e004      	b.n	8005376 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800536c:	4b10      	ldr	r3, [pc, #64]	; (80053b0 <xTaskIncrementTick+0x168>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	3301      	adds	r3, #1
 8005372:	4a0f      	ldr	r2, [pc, #60]	; (80053b0 <xTaskIncrementTick+0x168>)
 8005374:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005376:	4b0f      	ldr	r3, [pc, #60]	; (80053b4 <xTaskIncrementTick+0x16c>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800537e:	2301      	movs	r3, #1
 8005380:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005382:	697b      	ldr	r3, [r7, #20]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	20000be4 	.word	0x20000be4
 8005390:	20000bc0 	.word	0x20000bc0
 8005394:	20000b74 	.word	0x20000b74
 8005398:	20000b78 	.word	0x20000b78
 800539c:	20000bd4 	.word	0x20000bd4
 80053a0:	20000bdc 	.word	0x20000bdc
 80053a4:	20000bc4 	.word	0x20000bc4
 80053a8:	200006ec 	.word	0x200006ec
 80053ac:	200006e8 	.word	0x200006e8
 80053b0:	20000bcc 	.word	0x20000bcc
 80053b4:	20000bd0 	.word	0x20000bd0

080053b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053be:	4b27      	ldr	r3, [pc, #156]	; (800545c <vTaskSwitchContext+0xa4>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053c6:	4b26      	ldr	r3, [pc, #152]	; (8005460 <vTaskSwitchContext+0xa8>)
 80053c8:	2201      	movs	r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053cc:	e040      	b.n	8005450 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80053ce:	4b24      	ldr	r3, [pc, #144]	; (8005460 <vTaskSwitchContext+0xa8>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d4:	4b23      	ldr	r3, [pc, #140]	; (8005464 <vTaskSwitchContext+0xac>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	e00f      	b.n	80053fc <vTaskSwitchContext+0x44>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d109      	bne.n	80053f6 <vTaskSwitchContext+0x3e>
 80053e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	607b      	str	r3, [r7, #4]
 80053f4:	e7fe      	b.n	80053f4 <vTaskSwitchContext+0x3c>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	3b01      	subs	r3, #1
 80053fa:	60fb      	str	r3, [r7, #12]
 80053fc:	491a      	ldr	r1, [pc, #104]	; (8005468 <vTaskSwitchContext+0xb0>)
 80053fe:	68fa      	ldr	r2, [r7, #12]
 8005400:	4613      	mov	r3, r2
 8005402:	009b      	lsls	r3, r3, #2
 8005404:	4413      	add	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	440b      	add	r3, r1
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0e5      	beq.n	80053dc <vTaskSwitchContext+0x24>
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4a13      	ldr	r2, [pc, #76]	; (8005468 <vTaskSwitchContext+0xb0>)
 800541c:	4413      	add	r3, r2
 800541e:	60bb      	str	r3, [r7, #8]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	3308      	adds	r3, #8
 8005432:	429a      	cmp	r2, r3
 8005434:	d104      	bne.n	8005440 <vTaskSwitchContext+0x88>
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	605a      	str	r2, [r3, #4]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	4a09      	ldr	r2, [pc, #36]	; (800546c <vTaskSwitchContext+0xb4>)
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	4a06      	ldr	r2, [pc, #24]	; (8005464 <vTaskSwitchContext+0xac>)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	6013      	str	r3, [r2, #0]
}
 8005450:	bf00      	nop
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	20000be4 	.word	0x20000be4
 8005460:	20000bd0 	.word	0x20000bd0
 8005464:	20000bc4 	.word	0x20000bc4
 8005468:	200006ec 	.word	0x200006ec
 800546c:	200006e8 	.word	0x200006e8

08005470 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
 8005478:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d109      	bne.n	8005494 <vTaskPlaceOnEventList+0x24>
 8005480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005484:	f383 8811 	msr	BASEPRI, r3
 8005488:	f3bf 8f6f 	isb	sy
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	e7fe      	b.n	8005492 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005494:	4b07      	ldr	r3, [pc, #28]	; (80054b4 <vTaskPlaceOnEventList+0x44>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3318      	adds	r3, #24
 800549a:	4619      	mov	r1, r3
 800549c:	6878      	ldr	r0, [r7, #4]
 800549e:	f7fe fc6a 	bl	8003d76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054a2:	2101      	movs	r1, #1
 80054a4:	6838      	ldr	r0, [r7, #0]
 80054a6:	f000 fd41 	bl	8005f2c <prvAddCurrentTaskToDelayedList>
}
 80054aa:	bf00      	nop
 80054ac:	3710      	adds	r7, #16
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	200006e8 	.word	0x200006e8

080054b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b086      	sub	sp, #24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d109      	bne.n	80054de <vTaskPlaceOnEventListRestricted+0x26>
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	617b      	str	r3, [r7, #20]
 80054dc:	e7fe      	b.n	80054dc <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054de:	4b0a      	ldr	r3, [pc, #40]	; (8005508 <vTaskPlaceOnEventListRestricted+0x50>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	3318      	adds	r3, #24
 80054e4:	4619      	mov	r1, r3
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f7fe fc21 	bl	8003d2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80054f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80054f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80054f8:	6879      	ldr	r1, [r7, #4]
 80054fa:	68b8      	ldr	r0, [r7, #8]
 80054fc:	f000 fd16 	bl	8005f2c <prvAddCurrentTaskToDelayedList>
	}
 8005500:	bf00      	nop
 8005502:	3718      	adds	r7, #24
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	200006e8 	.word	0x200006e8

0800550c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d109      	bne.n	8005536 <xTaskRemoveFromEventList+0x2a>
 8005522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	e7fe      	b.n	8005534 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	3318      	adds	r3, #24
 800553a:	4618      	mov	r0, r3
 800553c:	f7fe fc54 	bl	8003de8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005540:	4b1d      	ldr	r3, [pc, #116]	; (80055b8 <xTaskRemoveFromEventList+0xac>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d11d      	bne.n	8005584 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	3304      	adds	r3, #4
 800554c:	4618      	mov	r0, r3
 800554e:	f7fe fc4b 	bl	8003de8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005556:	4b19      	ldr	r3, [pc, #100]	; (80055bc <xTaskRemoveFromEventList+0xb0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	429a      	cmp	r2, r3
 800555c:	d903      	bls.n	8005566 <xTaskRemoveFromEventList+0x5a>
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005562:	4a16      	ldr	r2, [pc, #88]	; (80055bc <xTaskRemoveFromEventList+0xb0>)
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556a:	4613      	mov	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	4413      	add	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4a13      	ldr	r2, [pc, #76]	; (80055c0 <xTaskRemoveFromEventList+0xb4>)
 8005574:	441a      	add	r2, r3
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	3304      	adds	r3, #4
 800557a:	4619      	mov	r1, r3
 800557c:	4610      	mov	r0, r2
 800557e:	f7fe fbd6 	bl	8003d2e <vListInsertEnd>
 8005582:	e005      	b.n	8005590 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	3318      	adds	r3, #24
 8005588:	4619      	mov	r1, r3
 800558a:	480e      	ldr	r0, [pc, #56]	; (80055c4 <xTaskRemoveFromEventList+0xb8>)
 800558c:	f7fe fbcf 	bl	8003d2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005594:	4b0c      	ldr	r3, [pc, #48]	; (80055c8 <xTaskRemoveFromEventList+0xbc>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	429a      	cmp	r2, r3
 800559c:	d905      	bls.n	80055aa <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800559e:	2301      	movs	r3, #1
 80055a0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055a2:	4b0a      	ldr	r3, [pc, #40]	; (80055cc <xTaskRemoveFromEventList+0xc0>)
 80055a4:	2201      	movs	r2, #1
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	e001      	b.n	80055ae <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 80055aa:	2300      	movs	r3, #0
 80055ac:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80055ae:	697b      	ldr	r3, [r7, #20]
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3718      	adds	r7, #24
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}
 80055b8:	20000be4 	.word	0x20000be4
 80055bc:	20000bc4 	.word	0x20000bc4
 80055c0:	200006ec 	.word	0x200006ec
 80055c4:	20000b7c 	.word	0x20000b7c
 80055c8:	200006e8 	.word	0x200006e8
 80055cc:	20000bd0 	.word	0x20000bd0

080055d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055d8:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <vTaskInternalSetTimeOutState+0x24>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055e0:	4b05      	ldr	r3, [pc, #20]	; (80055f8 <vTaskInternalSetTimeOutState+0x28>)
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	605a      	str	r2, [r3, #4]
}
 80055e8:	bf00      	nop
 80055ea:	370c      	adds	r7, #12
 80055ec:	46bd      	mov	sp, r7
 80055ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f2:	4770      	bx	lr
 80055f4:	20000bd4 	.word	0x20000bd4
 80055f8:	20000bc0 	.word	0x20000bc0

080055fc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b088      	sub	sp, #32
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d109      	bne.n	8005620 <xTaskCheckForTimeOut+0x24>
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	f383 8811 	msr	BASEPRI, r3
 8005614:	f3bf 8f6f 	isb	sy
 8005618:	f3bf 8f4f 	dsb	sy
 800561c:	613b      	str	r3, [r7, #16]
 800561e:	e7fe      	b.n	800561e <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d109      	bne.n	800563a <xTaskCheckForTimeOut+0x3e>
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	e7fe      	b.n	8005638 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800563a:	f001 f997 	bl	800696c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800563e:	4b1d      	ldr	r3, [pc, #116]	; (80056b4 <xTaskCheckForTimeOut+0xb8>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	69ba      	ldr	r2, [r7, #24]
 800564a:	1ad3      	subs	r3, r2, r3
 800564c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005656:	d102      	bne.n	800565e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005658:	2300      	movs	r3, #0
 800565a:	61fb      	str	r3, [r7, #28]
 800565c:	e023      	b.n	80056a6 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	4b15      	ldr	r3, [pc, #84]	; (80056b8 <xTaskCheckForTimeOut+0xbc>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d007      	beq.n	800567a <xTaskCheckForTimeOut+0x7e>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	429a      	cmp	r2, r3
 8005672:	d302      	bcc.n	800567a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005674:	2301      	movs	r3, #1
 8005676:	61fb      	str	r3, [r7, #28]
 8005678:	e015      	b.n	80056a6 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	429a      	cmp	r2, r3
 8005682:	d20b      	bcs.n	800569c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	1ad2      	subs	r2, r2, r3
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f7ff ff9d 	bl	80055d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005696:	2300      	movs	r3, #0
 8005698:	61fb      	str	r3, [r7, #28]
 800569a:	e004      	b.n	80056a6 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056a2:	2301      	movs	r3, #1
 80056a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056a6:	f001 f98f 	bl	80069c8 <vPortExitCritical>

	return xReturn;
 80056aa:	69fb      	ldr	r3, [r7, #28]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3720      	adds	r7, #32
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20000bc0 	.word	0x20000bc0
 80056b8:	20000bd4 	.word	0x20000bd4

080056bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056bc:	b480      	push	{r7}
 80056be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056c0:	4b03      	ldr	r3, [pc, #12]	; (80056d0 <vTaskMissedYield+0x14>)
 80056c2:	2201      	movs	r2, #1
 80056c4:	601a      	str	r2, [r3, #0]
}
 80056c6:	bf00      	nop
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	20000bd0 	.word	0x20000bd0

080056d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80056dc:	f000 f852 	bl	8005784 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80056e0:	4b06      	ldr	r3, [pc, #24]	; (80056fc <prvIdleTask+0x28>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b01      	cmp	r3, #1
 80056e6:	d9f9      	bls.n	80056dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80056e8:	4b05      	ldr	r3, [pc, #20]	; (8005700 <prvIdleTask+0x2c>)
 80056ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	f3bf 8f4f 	dsb	sy
 80056f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80056f8:	e7f0      	b.n	80056dc <prvIdleTask+0x8>
 80056fa:	bf00      	nop
 80056fc:	200006ec 	.word	0x200006ec
 8005700:	e000ed04 	.word	0xe000ed04

08005704 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800570a:	2300      	movs	r3, #0
 800570c:	607b      	str	r3, [r7, #4]
 800570e:	e00c      	b.n	800572a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005710:	687a      	ldr	r2, [r7, #4]
 8005712:	4613      	mov	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4a12      	ldr	r2, [pc, #72]	; (8005764 <prvInitialiseTaskLists+0x60>)
 800571c:	4413      	add	r3, r2
 800571e:	4618      	mov	r0, r3
 8005720:	f7fe fad8 	bl	8003cd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	3301      	adds	r3, #1
 8005728:	607b      	str	r3, [r7, #4]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2b37      	cmp	r3, #55	; 0x37
 800572e:	d9ef      	bls.n	8005710 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005730:	480d      	ldr	r0, [pc, #52]	; (8005768 <prvInitialiseTaskLists+0x64>)
 8005732:	f7fe facf 	bl	8003cd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005736:	480d      	ldr	r0, [pc, #52]	; (800576c <prvInitialiseTaskLists+0x68>)
 8005738:	f7fe facc 	bl	8003cd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800573c:	480c      	ldr	r0, [pc, #48]	; (8005770 <prvInitialiseTaskLists+0x6c>)
 800573e:	f7fe fac9 	bl	8003cd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005742:	480c      	ldr	r0, [pc, #48]	; (8005774 <prvInitialiseTaskLists+0x70>)
 8005744:	f7fe fac6 	bl	8003cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005748:	480b      	ldr	r0, [pc, #44]	; (8005778 <prvInitialiseTaskLists+0x74>)
 800574a:	f7fe fac3 	bl	8003cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800574e:	4b0b      	ldr	r3, [pc, #44]	; (800577c <prvInitialiseTaskLists+0x78>)
 8005750:	4a05      	ldr	r2, [pc, #20]	; (8005768 <prvInitialiseTaskLists+0x64>)
 8005752:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005754:	4b0a      	ldr	r3, [pc, #40]	; (8005780 <prvInitialiseTaskLists+0x7c>)
 8005756:	4a05      	ldr	r2, [pc, #20]	; (800576c <prvInitialiseTaskLists+0x68>)
 8005758:	601a      	str	r2, [r3, #0]
}
 800575a:	bf00      	nop
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}
 8005762:	bf00      	nop
 8005764:	200006ec 	.word	0x200006ec
 8005768:	20000b4c 	.word	0x20000b4c
 800576c:	20000b60 	.word	0x20000b60
 8005770:	20000b7c 	.word	0x20000b7c
 8005774:	20000b90 	.word	0x20000b90
 8005778:	20000ba8 	.word	0x20000ba8
 800577c:	20000b74 	.word	0x20000b74
 8005780:	20000b78 	.word	0x20000b78

08005784 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800578a:	e019      	b.n	80057c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800578c:	f001 f8ee 	bl	800696c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005790:	4b0f      	ldr	r3, [pc, #60]	; (80057d0 <prvCheckTasksWaitingTermination+0x4c>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	68db      	ldr	r3, [r3, #12]
 8005796:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3304      	adds	r3, #4
 800579c:	4618      	mov	r0, r3
 800579e:	f7fe fb23 	bl	8003de8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057a2:	4b0c      	ldr	r3, [pc, #48]	; (80057d4 <prvCheckTasksWaitingTermination+0x50>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	3b01      	subs	r3, #1
 80057a8:	4a0a      	ldr	r2, [pc, #40]	; (80057d4 <prvCheckTasksWaitingTermination+0x50>)
 80057aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057ac:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <prvCheckTasksWaitingTermination+0x54>)
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	3b01      	subs	r3, #1
 80057b2:	4a09      	ldr	r2, [pc, #36]	; (80057d8 <prvCheckTasksWaitingTermination+0x54>)
 80057b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057b6:	f001 f907 	bl	80069c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 f80e 	bl	80057dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057c0:	4b05      	ldr	r3, [pc, #20]	; (80057d8 <prvCheckTasksWaitingTermination+0x54>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1e1      	bne.n	800578c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057c8:	bf00      	nop
 80057ca:	3708      	adds	r7, #8
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}
 80057d0:	20000b90 	.word	0x20000b90
 80057d4:	20000bbc 	.word	0x20000bbc
 80057d8:	20000ba4 	.word	0x20000ba4

080057dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d108      	bne.n	8005800 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f2:	4618      	mov	r0, r3
 80057f4:	f001 fa96 	bl	8006d24 <vPortFree>
				vPortFree( pxTCB );
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f001 fa93 	bl	8006d24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80057fe:	e017      	b.n	8005830 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005806:	2b01      	cmp	r3, #1
 8005808:	d103      	bne.n	8005812 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f001 fa8a 	bl	8006d24 <vPortFree>
	}
 8005810:	e00e      	b.n	8005830 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005818:	2b02      	cmp	r3, #2
 800581a:	d009      	beq.n	8005830 <prvDeleteTCB+0x54>
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	f383 8811 	msr	BASEPRI, r3
 8005824:	f3bf 8f6f 	isb	sy
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	e7fe      	b.n	800582e <prvDeleteTCB+0x52>
	}
 8005830:	bf00      	nop
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800583e:	4b0c      	ldr	r3, [pc, #48]	; (8005870 <prvResetNextTaskUnblockTime+0x38>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d104      	bne.n	8005852 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005848:	4b0a      	ldr	r3, [pc, #40]	; (8005874 <prvResetNextTaskUnblockTime+0x3c>)
 800584a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800584e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005850:	e008      	b.n	8005864 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005852:	4b07      	ldr	r3, [pc, #28]	; (8005870 <prvResetNextTaskUnblockTime+0x38>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	4a04      	ldr	r2, [pc, #16]	; (8005874 <prvResetNextTaskUnblockTime+0x3c>)
 8005862:	6013      	str	r3, [r2, #0]
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	20000b74 	.word	0x20000b74
 8005874:	20000bdc 	.word	0x20000bdc

08005878 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800587e:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <xTaskGetSchedulerState+0x34>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d102      	bne.n	800588c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005886:	2301      	movs	r3, #1
 8005888:	607b      	str	r3, [r7, #4]
 800588a:	e008      	b.n	800589e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800588c:	4b08      	ldr	r3, [pc, #32]	; (80058b0 <xTaskGetSchedulerState+0x38>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d102      	bne.n	800589a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005894:	2302      	movs	r3, #2
 8005896:	607b      	str	r3, [r7, #4]
 8005898:	e001      	b.n	800589e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800589a:	2300      	movs	r3, #0
 800589c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800589e:	687b      	ldr	r3, [r7, #4]
	}
 80058a0:	4618      	mov	r0, r3
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	20000bc8 	.word	0x20000bc8
 80058b0:	20000be4 	.word	0x20000be4

080058b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80058c0:	2300      	movs	r3, #0
 80058c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d051      	beq.n	800596e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ce:	4b2a      	ldr	r3, [pc, #168]	; (8005978 <xTaskPriorityInherit+0xc4>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d4:	429a      	cmp	r2, r3
 80058d6:	d241      	bcs.n	800595c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	699b      	ldr	r3, [r3, #24]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	db06      	blt.n	80058ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058e0:	4b25      	ldr	r3, [pc, #148]	; (8005978 <xTaskPriorityInherit+0xc4>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	6959      	ldr	r1, [r3, #20]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058f6:	4613      	mov	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4413      	add	r3, r2
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	4a1f      	ldr	r2, [pc, #124]	; (800597c <xTaskPriorityInherit+0xc8>)
 8005900:	4413      	add	r3, r2
 8005902:	4299      	cmp	r1, r3
 8005904:	d122      	bne.n	800594c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	3304      	adds	r3, #4
 800590a:	4618      	mov	r0, r3
 800590c:	f7fe fa6c 	bl	8003de8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005910:	4b19      	ldr	r3, [pc, #100]	; (8005978 <xTaskPriorityInherit+0xc4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591e:	4b18      	ldr	r3, [pc, #96]	; (8005980 <xTaskPriorityInherit+0xcc>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d903      	bls.n	800592e <xTaskPriorityInherit+0x7a>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800592a:	4a15      	ldr	r2, [pc, #84]	; (8005980 <xTaskPriorityInherit+0xcc>)
 800592c:	6013      	str	r3, [r2, #0]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005932:	4613      	mov	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4413      	add	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4a10      	ldr	r2, [pc, #64]	; (800597c <xTaskPriorityInherit+0xc8>)
 800593c:	441a      	add	r2, r3
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	3304      	adds	r3, #4
 8005942:	4619      	mov	r1, r3
 8005944:	4610      	mov	r0, r2
 8005946:	f7fe f9f2 	bl	8003d2e <vListInsertEnd>
 800594a:	e004      	b.n	8005956 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800594c:	4b0a      	ldr	r3, [pc, #40]	; (8005978 <xTaskPriorityInherit+0xc4>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005956:	2301      	movs	r3, #1
 8005958:	60fb      	str	r3, [r7, #12]
 800595a:	e008      	b.n	800596e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005960:	4b05      	ldr	r3, [pc, #20]	; (8005978 <xTaskPriorityInherit+0xc4>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005966:	429a      	cmp	r2, r3
 8005968:	d201      	bcs.n	800596e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800596a:	2301      	movs	r3, #1
 800596c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800596e:	68fb      	ldr	r3, [r7, #12]
	}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}
 8005978:	200006e8 	.word	0x200006e8
 800597c:	200006ec 	.word	0x200006ec
 8005980:	20000bc4 	.word	0x20000bc4

08005984 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005984:	b580      	push	{r7, lr}
 8005986:	b086      	sub	sp, #24
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005990:	2300      	movs	r3, #0
 8005992:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d054      	beq.n	8005a44 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800599a:	4b2d      	ldr	r3, [pc, #180]	; (8005a50 <xTaskPriorityDisinherit+0xcc>)
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	693a      	ldr	r2, [r7, #16]
 80059a0:	429a      	cmp	r2, r3
 80059a2:	d009      	beq.n	80059b8 <xTaskPriorityDisinherit+0x34>
 80059a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	60fb      	str	r3, [r7, #12]
 80059b6:	e7fe      	b.n	80059b6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d109      	bne.n	80059d4 <xTaskPriorityDisinherit+0x50>
 80059c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c4:	f383 8811 	msr	BASEPRI, r3
 80059c8:	f3bf 8f6f 	isb	sy
 80059cc:	f3bf 8f4f 	dsb	sy
 80059d0:	60bb      	str	r3, [r7, #8]
 80059d2:	e7fe      	b.n	80059d2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d8:	1e5a      	subs	r2, r3, #1
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d02c      	beq.n	8005a44 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d128      	bne.n	8005a44 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	3304      	adds	r3, #4
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fe f9f6 	bl	8003de8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a14:	4b0f      	ldr	r3, [pc, #60]	; (8005a54 <xTaskPriorityDisinherit+0xd0>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	d903      	bls.n	8005a24 <xTaskPriorityDisinherit+0xa0>
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	4a0c      	ldr	r2, [pc, #48]	; (8005a54 <xTaskPriorityDisinherit+0xd0>)
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a28:	4613      	mov	r3, r2
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4413      	add	r3, r2
 8005a2e:	009b      	lsls	r3, r3, #2
 8005a30:	4a09      	ldr	r2, [pc, #36]	; (8005a58 <xTaskPriorityDisinherit+0xd4>)
 8005a32:	441a      	add	r2, r3
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	3304      	adds	r3, #4
 8005a38:	4619      	mov	r1, r3
 8005a3a:	4610      	mov	r0, r2
 8005a3c:	f7fe f977 	bl	8003d2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a40:	2301      	movs	r3, #1
 8005a42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a44:	697b      	ldr	r3, [r7, #20]
	}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3718      	adds	r7, #24
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	200006e8 	.word	0x200006e8
 8005a54:	20000bc4 	.word	0x20000bc4
 8005a58:	200006ec 	.word	0x200006ec

08005a5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b088      	sub	sp, #32
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d068      	beq.n	8005b46 <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d109      	bne.n	8005a90 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8005a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a80:	f383 8811 	msr	BASEPRI, r3
 8005a84:	f3bf 8f6f 	isb	sy
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	e7fe      	b.n	8005a8e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a94:	683a      	ldr	r2, [r7, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d902      	bls.n	8005aa0 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	61fb      	str	r3, [r7, #28]
 8005a9e:	e002      	b.n	8005aa6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aa4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aaa:	69fa      	ldr	r2, [r7, #28]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d04a      	beq.n	8005b46 <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab4:	697a      	ldr	r2, [r7, #20]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d145      	bne.n	8005b46 <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005aba:	4b25      	ldr	r3, [pc, #148]	; (8005b50 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	69ba      	ldr	r2, [r7, #24]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d109      	bne.n	8005ad8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 8005ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac8:	f383 8811 	msr	BASEPRI, r3
 8005acc:	f3bf 8f6f 	isb	sy
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	60bb      	str	r3, [r7, #8]
 8005ad6:	e7fe      	b.n	8005ad6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005adc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	db04      	blt.n	8005af6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005af6:	69bb      	ldr	r3, [r7, #24]
 8005af8:	6959      	ldr	r1, [r3, #20]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	4613      	mov	r3, r2
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	4413      	add	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4a13      	ldr	r2, [pc, #76]	; (8005b54 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005b06:	4413      	add	r3, r2
 8005b08:	4299      	cmp	r1, r3
 8005b0a:	d11c      	bne.n	8005b46 <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	3304      	adds	r3, #4
 8005b10:	4618      	mov	r0, r3
 8005b12:	f7fe f969 	bl	8003de8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005b16:	69bb      	ldr	r3, [r7, #24]
 8005b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1a:	4b0f      	ldr	r3, [pc, #60]	; (8005b58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d903      	bls.n	8005b2a <vTaskPriorityDisinheritAfterTimeout+0xce>
 8005b22:	69bb      	ldr	r3, [r7, #24]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b26:	4a0c      	ldr	r2, [pc, #48]	; (8005b58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4a07      	ldr	r2, [pc, #28]	; (8005b54 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005b38:	441a      	add	r2, r3
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f7fe f8f4 	bl	8003d2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005b46:	bf00      	nop
 8005b48:	3720      	adds	r7, #32
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	200006e8 	.word	0x200006e8
 8005b54:	200006ec 	.word	0x200006ec
 8005b58:	20000bc4 	.word	0x20000bc4

08005b5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005b5c:	b480      	push	{r7}
 8005b5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005b60:	4b07      	ldr	r3, [pc, #28]	; (8005b80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d004      	beq.n	8005b72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005b68:	4b05      	ldr	r3, [pc, #20]	; (8005b80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005b6e:	3201      	adds	r2, #1
 8005b70:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005b72:	4b03      	ldr	r3, [pc, #12]	; (8005b80 <pvTaskIncrementMutexHeldCount+0x24>)
 8005b74:	681b      	ldr	r3, [r3, #0]
	}
 8005b76:	4618      	mov	r0, r3
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	200006e8 	.word	0x200006e8

08005b84 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8005b8e:	f000 feed 	bl	800696c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8005b92:	4b1e      	ldr	r3, [pc, #120]	; (8005c0c <ulTaskNotifyTake+0x88>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d113      	bne.n	8005bc4 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005b9c:	4b1b      	ldr	r3, [pc, #108]	; (8005c0c <ulTaskNotifyTake+0x88>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00b      	beq.n	8005bc4 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bac:	2101      	movs	r1, #1
 8005bae:	6838      	ldr	r0, [r7, #0]
 8005bb0:	f000 f9bc 	bl	8005f2c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8005bb4:	4b16      	ldr	r3, [pc, #88]	; (8005c10 <ulTaskNotifyTake+0x8c>)
 8005bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005bc4:	f000 ff00 	bl	80069c8 <vPortExitCritical>

		taskENTER_CRITICAL();
 8005bc8:	f000 fed0 	bl	800696c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8005bcc:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <ulTaskNotifyTake+0x88>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bd2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00c      	beq.n	8005bf4 <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d004      	beq.n	8005bea <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8005be0:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <ulTaskNotifyTake+0x88>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	2200      	movs	r2, #0
 8005be6:	655a      	str	r2, [r3, #84]	; 0x54
 8005be8:	e004      	b.n	8005bf4 <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8005bea:	4b08      	ldr	r3, [pc, #32]	; (8005c0c <ulTaskNotifyTake+0x88>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68fa      	ldr	r2, [r7, #12]
 8005bf0:	3a01      	subs	r2, #1
 8005bf2:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <ulTaskNotifyTake+0x88>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 8005bfe:	f000 fee3 	bl	80069c8 <vPortExitCritical>

		return ulReturn;
 8005c02:	68fb      	ldr	r3, [r7, #12]
	}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	200006e8 	.word	0x200006e8
 8005c10:	e000ed04 	.word	0xe000ed04

08005c14 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b08a      	sub	sp, #40	; 0x28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	603b      	str	r3, [r7, #0]
 8005c20:	4613      	mov	r3, r2
 8005c22:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8005c24:	2301      	movs	r3, #1
 8005c26:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d109      	bne.n	8005c42 <xTaskGenericNotify+0x2e>
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	61bb      	str	r3, [r7, #24]
 8005c40:	e7fe      	b.n	8005c40 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8005c46:	f000 fe91 	bl	800696c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d003      	beq.n	8005c58 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005c50:	6a3b      	ldr	r3, [r7, #32]
 8005c52:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005c5e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005c60:	6a3b      	ldr	r3, [r7, #32]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8005c68:	79fb      	ldrb	r3, [r7, #7]
 8005c6a:	2b04      	cmp	r3, #4
 8005c6c:	d827      	bhi.n	8005cbe <xTaskGenericNotify+0xaa>
 8005c6e:	a201      	add	r2, pc, #4	; (adr r2, 8005c74 <xTaskGenericNotify+0x60>)
 8005c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c74:	08005cdd 	.word	0x08005cdd
 8005c78:	08005c89 	.word	0x08005c89
 8005c7c:	08005c97 	.word	0x08005c97
 8005c80:	08005ca3 	.word	0x08005ca3
 8005c84:	08005cab 	.word	0x08005cab
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005c88:	6a3b      	ldr	r3, [r7, #32]
 8005c8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	6a3b      	ldr	r3, [r7, #32]
 8005c92:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005c94:	e025      	b.n	8005ce2 <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005ca0:	e01f      	b.n	8005ce2 <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005ca2:	6a3b      	ldr	r3, [r7, #32]
 8005ca4:	68ba      	ldr	r2, [r7, #8]
 8005ca6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005ca8:	e01b      	b.n	8005ce2 <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005caa:	7ffb      	ldrb	r3, [r7, #31]
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d003      	beq.n	8005cb8 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	68ba      	ldr	r2, [r7, #8]
 8005cb4:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005cb6:	e014      	b.n	8005ce2 <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8005cbc:	e011      	b.n	8005ce2 <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cc6:	d00b      	beq.n	8005ce0 <xTaskGenericNotify+0xcc>
 8005cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ccc:	f383 8811 	msr	BASEPRI, r3
 8005cd0:	f3bf 8f6f 	isb	sy
 8005cd4:	f3bf 8f4f 	dsb	sy
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	e7fe      	b.n	8005cda <xTaskGenericNotify+0xc6>
					break;
 8005cdc:	bf00      	nop
 8005cde:	e000      	b.n	8005ce2 <xTaskGenericNotify+0xce>

					break;
 8005ce0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005ce2:	7ffb      	ldrb	r3, [r7, #31]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d139      	bne.n	8005d5c <xTaskGenericNotify+0x148>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ce8:	6a3b      	ldr	r3, [r7, #32]
 8005cea:	3304      	adds	r3, #4
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fe f87b 	bl	8003de8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8005cf2:	6a3b      	ldr	r3, [r7, #32]
 8005cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf6:	4b1d      	ldr	r3, [pc, #116]	; (8005d6c <xTaskGenericNotify+0x158>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	429a      	cmp	r2, r3
 8005cfc:	d903      	bls.n	8005d06 <xTaskGenericNotify+0xf2>
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d02:	4a1a      	ldr	r2, [pc, #104]	; (8005d6c <xTaskGenericNotify+0x158>)
 8005d04:	6013      	str	r3, [r2, #0]
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4a17      	ldr	r2, [pc, #92]	; (8005d70 <xTaskGenericNotify+0x15c>)
 8005d14:	441a      	add	r2, r3
 8005d16:	6a3b      	ldr	r3, [r7, #32]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	f7fe f806 	bl	8003d2e <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005d22:	6a3b      	ldr	r3, [r7, #32]
 8005d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d009      	beq.n	8005d3e <xTaskGenericNotify+0x12a>
 8005d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2e:	f383 8811 	msr	BASEPRI, r3
 8005d32:	f3bf 8f6f 	isb	sy
 8005d36:	f3bf 8f4f 	dsb	sy
 8005d3a:	613b      	str	r3, [r7, #16]
 8005d3c:	e7fe      	b.n	8005d3c <xTaskGenericNotify+0x128>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d42:	4b0c      	ldr	r3, [pc, #48]	; (8005d74 <xTaskGenericNotify+0x160>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d907      	bls.n	8005d5c <xTaskGenericNotify+0x148>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8005d4c:	4b0a      	ldr	r3, [pc, #40]	; (8005d78 <xTaskGenericNotify+0x164>)
 8005d4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005d5c:	f000 fe34 	bl	80069c8 <vPortExitCritical>

		return xReturn;
 8005d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3728      	adds	r7, #40	; 0x28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20000bc4 	.word	0x20000bc4
 8005d70:	200006ec 	.word	0x200006ec
 8005d74:	200006e8 	.word	0x200006e8
 8005d78:	e000ed04 	.word	0xe000ed04

08005d7c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08e      	sub	sp, #56	; 0x38
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	603b      	str	r3, [r7, #0]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d109      	bne.n	8005daa <xTaskGenericNotifyFromISR+0x2e>
 8005d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d9a:	f383 8811 	msr	BASEPRI, r3
 8005d9e:	f3bf 8f6f 	isb	sy
 8005da2:	f3bf 8f4f 	dsb	sy
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
 8005da8:	e7fe      	b.n	8005da8 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005daa:	f000 febb 	bl	8006b24 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8005db2:	f3ef 8211 	mrs	r2, BASEPRI
 8005db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dba:	f383 8811 	msr	BASEPRI, r3
 8005dbe:	f3bf 8f6f 	isb	sy
 8005dc2:	f3bf 8f4f 	dsb	sy
 8005dc6:	623a      	str	r2, [r7, #32]
 8005dc8:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8005dca:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d003      	beq.n	8005ddc <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de8:	2202      	movs	r2, #2
 8005dea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	2b04      	cmp	r3, #4
 8005df2:	d829      	bhi.n	8005e48 <xTaskGenericNotifyFromISR+0xcc>
 8005df4:	a201      	add	r2, pc, #4	; (adr r2, 8005dfc <xTaskGenericNotifyFromISR+0x80>)
 8005df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dfa:	bf00      	nop
 8005dfc:	08005e67 	.word	0x08005e67
 8005e00:	08005e11 	.word	0x08005e11
 8005e04:	08005e1f 	.word	0x08005e1f
 8005e08:	08005e2b 	.word	0x08005e2b
 8005e0c:	08005e33 	.word	0x08005e33
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	431a      	orrs	r2, r3
 8005e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1a:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005e1c:	e026      	b.n	8005e6c <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e26:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005e28:	e020      	b.n	8005e6c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	68ba      	ldr	r2, [r7, #8]
 8005e2e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 8005e30:	e01c      	b.n	8005e6c <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005e32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d003      	beq.n	8005e42 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8005e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005e40:	e014      	b.n	8005e6c <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005e46:	e011      	b.n	8005e6c <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e50:	d00b      	beq.n	8005e6a <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	61bb      	str	r3, [r7, #24]
 8005e64:	e7fe      	b.n	8005e64 <xTaskGenericNotifyFromISR+0xe8>
					break;
 8005e66:	bf00      	nop
 8005e68:	e000      	b.n	8005e6c <xTaskGenericNotifyFromISR+0xf0>
					break;
 8005e6a:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005e6c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d145      	bne.n	8005f00 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d009      	beq.n	8005e90 <xTaskGenericNotifyFromISR+0x114>
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	617b      	str	r3, [r7, #20]
 8005e8e:	e7fe      	b.n	8005e8e <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e90:	4b20      	ldr	r3, [pc, #128]	; (8005f14 <xTaskGenericNotifyFromISR+0x198>)
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d11d      	bne.n	8005ed4 <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f7fd ffa3 	bl	8003de8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ea6:	4b1c      	ldr	r3, [pc, #112]	; (8005f18 <xTaskGenericNotifyFromISR+0x19c>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d903      	bls.n	8005eb6 <xTaskGenericNotifyFromISR+0x13a>
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb2:	4a19      	ldr	r2, [pc, #100]	; (8005f18 <xTaskGenericNotifyFromISR+0x19c>)
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4a16      	ldr	r2, [pc, #88]	; (8005f1c <xTaskGenericNotifyFromISR+0x1a0>)
 8005ec4:	441a      	add	r2, r3
 8005ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec8:	3304      	adds	r3, #4
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4610      	mov	r0, r2
 8005ece:	f7fd ff2e 	bl	8003d2e <vListInsertEnd>
 8005ed2:	e005      	b.n	8005ee0 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ed6:	3318      	adds	r3, #24
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4811      	ldr	r0, [pc, #68]	; (8005f20 <xTaskGenericNotifyFromISR+0x1a4>)
 8005edc:	f7fd ff27 	bl	8003d2e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee4:	4b0f      	ldr	r3, [pc, #60]	; (8005f24 <xTaskGenericNotifyFromISR+0x1a8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d908      	bls.n	8005f00 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005eee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d002      	beq.n	8005efa <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005efa:	4b0b      	ldr	r3, [pc, #44]	; (8005f28 <xTaskGenericNotifyFromISR+0x1ac>)
 8005efc:	2201      	movs	r2, #1
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f02:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005f0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3738      	adds	r7, #56	; 0x38
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20000be4 	.word	0x20000be4
 8005f18:	20000bc4 	.word	0x20000bc4
 8005f1c:	200006ec 	.word	0x200006ec
 8005f20:	20000b7c 	.word	0x20000b7c
 8005f24:	200006e8 	.word	0x200006e8
 8005f28:	20000bd0 	.word	0x20000bd0

08005f2c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005f36:	4b21      	ldr	r3, [pc, #132]	; (8005fbc <prvAddCurrentTaskToDelayedList+0x90>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f3c:	4b20      	ldr	r3, [pc, #128]	; (8005fc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3304      	adds	r3, #4
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fd ff50 	bl	8003de8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f4e:	d10a      	bne.n	8005f66 <prvAddCurrentTaskToDelayedList+0x3a>
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d007      	beq.n	8005f66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f56:	4b1a      	ldr	r3, [pc, #104]	; (8005fc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4819      	ldr	r0, [pc, #100]	; (8005fc4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005f60:	f7fd fee5 	bl	8003d2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005f64:	e026      	b.n	8005fb4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005f6e:	4b14      	ldr	r3, [pc, #80]	; (8005fc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d209      	bcs.n	8005f92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f7e:	4b12      	ldr	r3, [pc, #72]	; (8005fc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	4b0f      	ldr	r3, [pc, #60]	; (8005fc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	3304      	adds	r3, #4
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	f7fd fef3 	bl	8003d76 <vListInsert>
}
 8005f90:	e010      	b.n	8005fb4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005f92:	4b0e      	ldr	r3, [pc, #56]	; (8005fcc <prvAddCurrentTaskToDelayedList+0xa0>)
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	4b0a      	ldr	r3, [pc, #40]	; (8005fc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	f7fd fee9 	bl	8003d76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005fa4:	4b0a      	ldr	r3, [pc, #40]	; (8005fd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d202      	bcs.n	8005fb4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005fae:	4a08      	ldr	r2, [pc, #32]	; (8005fd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	6013      	str	r3, [r2, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	20000bc0 	.word	0x20000bc0
 8005fc0:	200006e8 	.word	0x200006e8
 8005fc4:	20000ba8 	.word	0x20000ba8
 8005fc8:	20000b78 	.word	0x20000b78
 8005fcc:	20000b74 	.word	0x20000b74
 8005fd0:	20000bdc 	.word	0x20000bdc

08005fd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08a      	sub	sp, #40	; 0x28
 8005fd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005fde:	f000 fb5b 	bl	8006698 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005fe2:	4b1c      	ldr	r3, [pc, #112]	; (8006054 <xTimerCreateTimerTask+0x80>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d021      	beq.n	800602e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005ff2:	1d3a      	adds	r2, r7, #4
 8005ff4:	f107 0108 	add.w	r1, r7, #8
 8005ff8:	f107 030c 	add.w	r3, r7, #12
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fd fe4f 	bl	8003ca0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	9202      	str	r2, [sp, #8]
 800600a:	9301      	str	r3, [sp, #4]
 800600c:	2302      	movs	r3, #2
 800600e:	9300      	str	r3, [sp, #0]
 8006010:	2300      	movs	r3, #0
 8006012:	460a      	mov	r2, r1
 8006014:	4910      	ldr	r1, [pc, #64]	; (8006058 <xTimerCreateTimerTask+0x84>)
 8006016:	4811      	ldr	r0, [pc, #68]	; (800605c <xTimerCreateTimerTask+0x88>)
 8006018:	f7fe fe14 	bl	8004c44 <xTaskCreateStatic>
 800601c:	4602      	mov	r2, r0
 800601e:	4b10      	ldr	r3, [pc, #64]	; (8006060 <xTimerCreateTimerTask+0x8c>)
 8006020:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006022:	4b0f      	ldr	r3, [pc, #60]	; (8006060 <xTimerCreateTimerTask+0x8c>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	2b00      	cmp	r3, #0
 8006028:	d001      	beq.n	800602e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800602a:	2301      	movs	r3, #1
 800602c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d109      	bne.n	8006048 <xTimerCreateTimerTask+0x74>
	__asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	613b      	str	r3, [r7, #16]
 8006046:	e7fe      	b.n	8006046 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006048:	697b      	ldr	r3, [r7, #20]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	20000c18 	.word	0x20000c18
 8006058:	080084f0 	.word	0x080084f0
 800605c:	0800624d 	.word	0x0800624d
 8006060:	20000c1c 	.word	0x20000c1c

08006064 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006064:	b580      	push	{r7, lr}
 8006066:	b088      	sub	sp, #32
 8006068:	af02      	add	r7, sp, #8
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
 8006070:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006072:	202c      	movs	r0, #44	; 0x2c
 8006074:	f000 fd94 	bl	8006ba0 <pvPortMalloc>
 8006078:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d00d      	beq.n	800609c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	9301      	str	r3, [sp, #4]
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	9300      	str	r3, [sp, #0]
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	68b9      	ldr	r1, [r7, #8]
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 f805 	bl	80060a6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800609c:	697b      	ldr	r3, [r7, #20]
	}
 800609e:	4618      	mov	r0, r3
 80060a0:	3718      	adds	r7, #24
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd80      	pop	{r7, pc}

080060a6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b086      	sub	sp, #24
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	60f8      	str	r0, [r7, #12]
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	607a      	str	r2, [r7, #4]
 80060b2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d109      	bne.n	80060ce <prvInitialiseNewTimer+0x28>
 80060ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	617b      	str	r3, [r7, #20]
 80060cc:	e7fe      	b.n	80060cc <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d01e      	beq.n	8006112 <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80060d4:	f000 fae0 	bl	8006698 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80060d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060da:	68fa      	ldr	r2, [r7, #12]
 80060dc:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80060de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	683a      	ldr	r2, [r7, #0]
 80060e8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80060ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ec:	6a3a      	ldr	r2, [r7, #32]
 80060ee:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	3304      	adds	r3, #4
 80060f4:	4618      	mov	r0, r3
 80060f6:	f7fd fe0d 	bl	8003d14 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d008      	beq.n	8006112 <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006102:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006106:	f043 0304 	orr.w	r3, r3, #4
 800610a:	b2da      	uxtb	r2, r3
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006112:	bf00      	nop
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
	...

0800611c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08a      	sub	sp, #40	; 0x28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800612a:	2300      	movs	r3, #0
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d109      	bne.n	8006148 <xTimerGenericCommand+0x2c>
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	623b      	str	r3, [r7, #32]
 8006146:	e7fe      	b.n	8006146 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006148:	4b19      	ldr	r3, [pc, #100]	; (80061b0 <xTimerGenericCommand+0x94>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d02a      	beq.n	80061a6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b05      	cmp	r3, #5
 8006160:	dc18      	bgt.n	8006194 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006162:	f7ff fb89 	bl	8005878 <xTaskGetSchedulerState>
 8006166:	4603      	mov	r3, r0
 8006168:	2b02      	cmp	r3, #2
 800616a:	d109      	bne.n	8006180 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800616c:	4b10      	ldr	r3, [pc, #64]	; (80061b0 <xTimerGenericCommand+0x94>)
 800616e:	6818      	ldr	r0, [r3, #0]
 8006170:	f107 0110 	add.w	r1, r7, #16
 8006174:	2300      	movs	r3, #0
 8006176:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006178:	f7fe f804 	bl	8004184 <xQueueGenericSend>
 800617c:	6278      	str	r0, [r7, #36]	; 0x24
 800617e:	e012      	b.n	80061a6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006180:	4b0b      	ldr	r3, [pc, #44]	; (80061b0 <xTimerGenericCommand+0x94>)
 8006182:	6818      	ldr	r0, [r3, #0]
 8006184:	f107 0110 	add.w	r1, r7, #16
 8006188:	2300      	movs	r3, #0
 800618a:	2200      	movs	r2, #0
 800618c:	f7fd fffa 	bl	8004184 <xQueueGenericSend>
 8006190:	6278      	str	r0, [r7, #36]	; 0x24
 8006192:	e008      	b.n	80061a6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006194:	4b06      	ldr	r3, [pc, #24]	; (80061b0 <xTimerGenericCommand+0x94>)
 8006196:	6818      	ldr	r0, [r3, #0]
 8006198:	f107 0110 	add.w	r1, r7, #16
 800619c:	2300      	movs	r3, #0
 800619e:	683a      	ldr	r2, [r7, #0]
 80061a0:	f7fe f8ea 	bl	8004378 <xQueueGenericSendFromISR>
 80061a4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061a8:	4618      	mov	r0, r3
 80061aa:	3728      	adds	r7, #40	; 0x28
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20000c18 	.word	0x20000c18

080061b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b088      	sub	sp, #32
 80061b8:	af02      	add	r7, sp, #8
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061be:	4b22      	ldr	r3, [pc, #136]	; (8006248 <prvProcessExpiredTimer+0x94>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	3304      	adds	r3, #4
 80061cc:	4618      	mov	r0, r3
 80061ce:	f7fd fe0b 	bl	8003de8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061d8:	f003 0304 	and.w	r3, r3, #4
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d021      	beq.n	8006224 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	699a      	ldr	r2, [r3, #24]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	18d1      	adds	r1, r2, r3
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	6978      	ldr	r0, [r7, #20]
 80061ee:	f000 f8d1 	bl	8006394 <prvInsertTimerInActiveList>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d01e      	beq.n	8006236 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061f8:	2300      	movs	r3, #0
 80061fa:	9300      	str	r3, [sp, #0]
 80061fc:	2300      	movs	r3, #0
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	2100      	movs	r1, #0
 8006202:	6978      	ldr	r0, [r7, #20]
 8006204:	f7ff ff8a 	bl	800611c <xTimerGenericCommand>
 8006208:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d112      	bne.n	8006236 <prvProcessExpiredTimer+0x82>
 8006210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006214:	f383 8811 	msr	BASEPRI, r3
 8006218:	f3bf 8f6f 	isb	sy
 800621c:	f3bf 8f4f 	dsb	sy
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	e7fe      	b.n	8006222 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800622a:	f023 0301 	bic.w	r3, r3, #1
 800622e:	b2da      	uxtb	r2, r3
 8006230:	697b      	ldr	r3, [r7, #20]
 8006232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	6978      	ldr	r0, [r7, #20]
 800623c:	4798      	blx	r3
}
 800623e:	bf00      	nop
 8006240:	3718      	adds	r7, #24
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20000c10 	.word	0x20000c10

0800624c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006254:	f107 0308 	add.w	r3, r7, #8
 8006258:	4618      	mov	r0, r3
 800625a:	f000 f857 	bl	800630c <prvGetNextExpireTime>
 800625e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	4619      	mov	r1, r3
 8006264:	68f8      	ldr	r0, [r7, #12]
 8006266:	f000 f803 	bl	8006270 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800626a:	f000 f8d5 	bl	8006418 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800626e:	e7f1      	b.n	8006254 <prvTimerTask+0x8>

08006270 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800627a:	f7fe ff19 	bl	80050b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800627e:	f107 0308 	add.w	r3, r7, #8
 8006282:	4618      	mov	r0, r3
 8006284:	f000 f866 	bl	8006354 <prvSampleTimeNow>
 8006288:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d130      	bne.n	80062f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10a      	bne.n	80062ac <prvProcessTimerOrBlockTask+0x3c>
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	429a      	cmp	r2, r3
 800629c:	d806      	bhi.n	80062ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800629e:	f7fe ff15 	bl	80050cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062a2:	68f9      	ldr	r1, [r7, #12]
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f7ff ff85 	bl	80061b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062aa:	e024      	b.n	80062f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d008      	beq.n	80062c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062b2:	4b13      	ldr	r3, [pc, #76]	; (8006300 <prvProcessTimerOrBlockTask+0x90>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <prvProcessTimerOrBlockTask+0x50>
 80062bc:	2301      	movs	r3, #1
 80062be:	e000      	b.n	80062c2 <prvProcessTimerOrBlockTask+0x52>
 80062c0:	2300      	movs	r3, #0
 80062c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062c4:	4b0f      	ldr	r3, [pc, #60]	; (8006304 <prvProcessTimerOrBlockTask+0x94>)
 80062c6:	6818      	ldr	r0, [r3, #0]
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	1ad3      	subs	r3, r2, r3
 80062ce:	683a      	ldr	r2, [r7, #0]
 80062d0:	4619      	mov	r1, r3
 80062d2:	f7fe fc83 	bl	8004bdc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062d6:	f7fe fef9 	bl	80050cc <xTaskResumeAll>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10a      	bne.n	80062f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062e0:	4b09      	ldr	r3, [pc, #36]	; (8006308 <prvProcessTimerOrBlockTask+0x98>)
 80062e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	f3bf 8f4f 	dsb	sy
 80062ec:	f3bf 8f6f 	isb	sy
}
 80062f0:	e001      	b.n	80062f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80062f2:	f7fe feeb 	bl	80050cc <xTaskResumeAll>
}
 80062f6:	bf00      	nop
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	20000c14 	.word	0x20000c14
 8006304:	20000c18 	.word	0x20000c18
 8006308:	e000ed04 	.word	0xe000ed04

0800630c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800630c:	b480      	push	{r7}
 800630e:	b085      	sub	sp, #20
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006314:	4b0e      	ldr	r3, [pc, #56]	; (8006350 <prvGetNextExpireTime+0x44>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d101      	bne.n	8006322 <prvGetNextExpireTime+0x16>
 800631e:	2201      	movs	r2, #1
 8006320:	e000      	b.n	8006324 <prvGetNextExpireTime+0x18>
 8006322:	2200      	movs	r2, #0
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d105      	bne.n	800633c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006330:	4b07      	ldr	r3, [pc, #28]	; (8006350 <prvGetNextExpireTime+0x44>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	60fb      	str	r3, [r7, #12]
 800633a:	e001      	b.n	8006340 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800633c:	2300      	movs	r3, #0
 800633e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006340:	68fb      	ldr	r3, [r7, #12]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	20000c10 	.word	0x20000c10

08006354 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800635c:	f7fe ff52 	bl	8005204 <xTaskGetTickCount>
 8006360:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006362:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <prvSampleTimeNow+0x3c>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	429a      	cmp	r2, r3
 800636a:	d205      	bcs.n	8006378 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800636c:	f000 f930 	bl	80065d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	e002      	b.n	800637e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800637e:	4a04      	ldr	r2, [pc, #16]	; (8006390 <prvSampleTimeNow+0x3c>)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006384:	68fb      	ldr	r3, [r7, #12]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20000c20 	.word	0x20000c20

08006394 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b086      	sub	sp, #24
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063a2:	2300      	movs	r3, #0
 80063a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	68ba      	ldr	r2, [r7, #8]
 80063aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063b2:	68ba      	ldr	r2, [r7, #8]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d812      	bhi.n	80063e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	1ad2      	subs	r2, r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d302      	bcc.n	80063ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063c8:	2301      	movs	r3, #1
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	e01b      	b.n	8006406 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063ce:	4b10      	ldr	r3, [pc, #64]	; (8006410 <prvInsertTimerInActiveList+0x7c>)
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	3304      	adds	r3, #4
 80063d6:	4619      	mov	r1, r3
 80063d8:	4610      	mov	r0, r2
 80063da:	f7fd fccc 	bl	8003d76 <vListInsert>
 80063de:	e012      	b.n	8006406 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063e0:	687a      	ldr	r2, [r7, #4]
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d206      	bcs.n	80063f6 <prvInsertTimerInActiveList+0x62>
 80063e8:	68ba      	ldr	r2, [r7, #8]
 80063ea:	683b      	ldr	r3, [r7, #0]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d302      	bcc.n	80063f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80063f0:	2301      	movs	r3, #1
 80063f2:	617b      	str	r3, [r7, #20]
 80063f4:	e007      	b.n	8006406 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063f6:	4b07      	ldr	r3, [pc, #28]	; (8006414 <prvInsertTimerInActiveList+0x80>)
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	3304      	adds	r3, #4
 80063fe:	4619      	mov	r1, r3
 8006400:	4610      	mov	r0, r2
 8006402:	f7fd fcb8 	bl	8003d76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006406:	697b      	ldr	r3, [r7, #20]
}
 8006408:	4618      	mov	r0, r3
 800640a:	3718      	adds	r7, #24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	20000c14 	.word	0x20000c14
 8006414:	20000c10 	.word	0x20000c10

08006418 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006418:	b580      	push	{r7, lr}
 800641a:	b08e      	sub	sp, #56	; 0x38
 800641c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800641e:	e0c6      	b.n	80065ae <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2b00      	cmp	r3, #0
 8006424:	da17      	bge.n	8006456 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006426:	1d3b      	adds	r3, r7, #4
 8006428:	3304      	adds	r3, #4
 800642a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800642c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642e:	2b00      	cmp	r3, #0
 8006430:	d109      	bne.n	8006446 <prvProcessReceivedCommands+0x2e>
 8006432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006436:	f383 8811 	msr	BASEPRI, r3
 800643a:	f3bf 8f6f 	isb	sy
 800643e:	f3bf 8f4f 	dsb	sy
 8006442:	61fb      	str	r3, [r7, #28]
 8006444:	e7fe      	b.n	8006444 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800644c:	6850      	ldr	r0, [r2, #4]
 800644e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006450:	6892      	ldr	r2, [r2, #8]
 8006452:	4611      	mov	r1, r2
 8006454:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	f2c0 80a7 	blt.w	80065ac <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	695b      	ldr	r3, [r3, #20]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d004      	beq.n	8006474 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	3304      	adds	r3, #4
 800646e:	4618      	mov	r0, r3
 8006470:	f7fd fcba 	bl	8003de8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006474:	463b      	mov	r3, r7
 8006476:	4618      	mov	r0, r3
 8006478:	f7ff ff6c 	bl	8006354 <prvSampleTimeNow>
 800647c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b09      	cmp	r3, #9
 8006482:	f200 8094 	bhi.w	80065ae <prvProcessReceivedCommands+0x196>
 8006486:	a201      	add	r2, pc, #4	; (adr r2, 800648c <prvProcessReceivedCommands+0x74>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	080064b5 	.word	0x080064b5
 8006490:	080064b5 	.word	0x080064b5
 8006494:	080064b5 	.word	0x080064b5
 8006498:	08006527 	.word	0x08006527
 800649c:	0800653b 	.word	0x0800653b
 80064a0:	08006583 	.word	0x08006583
 80064a4:	080064b5 	.word	0x080064b5
 80064a8:	080064b5 	.word	0x080064b5
 80064ac:	08006527 	.word	0x08006527
 80064b0:	0800653b 	.word	0x0800653b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064ba:	f043 0301 	orr.w	r3, r3, #1
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	18d1      	adds	r1, r2, r3
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064d4:	f7ff ff5e 	bl	8006394 <prvInsertTimerInActiveList>
 80064d8:	4603      	mov	r3, r0
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d067      	beq.n	80065ae <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e0:	6a1b      	ldr	r3, [r3, #32]
 80064e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d05c      	beq.n	80065ae <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064f4:	68ba      	ldr	r2, [r7, #8]
 80064f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f8:	699b      	ldr	r3, [r3, #24]
 80064fa:	441a      	add	r2, r3
 80064fc:	2300      	movs	r3, #0
 80064fe:	9300      	str	r3, [sp, #0]
 8006500:	2300      	movs	r3, #0
 8006502:	2100      	movs	r1, #0
 8006504:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006506:	f7ff fe09 	bl	800611c <xTimerGenericCommand>
 800650a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d14d      	bne.n	80065ae <prvProcessReceivedCommands+0x196>
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	61bb      	str	r3, [r7, #24]
 8006524:	e7fe      	b.n	8006524 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800652c:	f023 0301 	bic.w	r3, r3, #1
 8006530:	b2da      	uxtb	r2, r3
 8006532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006534:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006538:	e039      	b.n	80065ae <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800653a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006540:	f043 0301 	orr.w	r3, r3, #1
 8006544:	b2da      	uxtb	r2, r3
 8006546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006548:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800654c:	68ba      	ldr	r2, [r7, #8]
 800654e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006550:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d109      	bne.n	800656e <prvProcessReceivedCommands+0x156>
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	617b      	str	r3, [r7, #20]
 800656c:	e7fe      	b.n	800656c <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	699a      	ldr	r2, [r3, #24]
 8006572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006574:	18d1      	adds	r1, r2, r3
 8006576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006578:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800657a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800657c:	f7ff ff0a 	bl	8006394 <prvInsertTimerInActiveList>
					break;
 8006580:	e015      	b.n	80065ae <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006588:	f003 0302 	and.w	r3, r3, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d103      	bne.n	8006598 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 8006590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006592:	f000 fbc7 	bl	8006d24 <vPortFree>
 8006596:	e00a      	b.n	80065ae <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800659e:	f023 0301 	bic.w	r3, r3, #1
 80065a2:	b2da      	uxtb	r2, r3
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065aa:	e000      	b.n	80065ae <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80065ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065ae:	4b07      	ldr	r3, [pc, #28]	; (80065cc <prvProcessReceivedCommands+0x1b4>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	1d39      	adds	r1, r7, #4
 80065b4:	2200      	movs	r2, #0
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fd ff72 	bl	80044a0 <xQueueReceive>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f47f af2e 	bne.w	8006420 <prvProcessReceivedCommands+0x8>
	}
}
 80065c4:	bf00      	nop
 80065c6:	3730      	adds	r7, #48	; 0x30
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}
 80065cc:	20000c18 	.word	0x20000c18

080065d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b088      	sub	sp, #32
 80065d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065d6:	e047      	b.n	8006668 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065d8:	4b2d      	ldr	r3, [pc, #180]	; (8006690 <prvSwitchTimerLists+0xc0>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065e2:	4b2b      	ldr	r3, [pc, #172]	; (8006690 <prvSwitchTimerLists+0xc0>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	3304      	adds	r3, #4
 80065f0:	4618      	mov	r0, r3
 80065f2:	f7fd fbf9 	bl	8003de8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006604:	f003 0304 	and.w	r3, r3, #4
 8006608:	2b00      	cmp	r3, #0
 800660a:	d02d      	beq.n	8006668 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	693a      	ldr	r2, [r7, #16]
 8006612:	4413      	add	r3, r2
 8006614:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006616:	68ba      	ldr	r2, [r7, #8]
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	429a      	cmp	r2, r3
 800661c:	d90e      	bls.n	800663c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	68fa      	ldr	r2, [r7, #12]
 8006628:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800662a:	4b19      	ldr	r3, [pc, #100]	; (8006690 <prvSwitchTimerLists+0xc0>)
 800662c:	681a      	ldr	r2, [r3, #0]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3304      	adds	r3, #4
 8006632:	4619      	mov	r1, r3
 8006634:	4610      	mov	r0, r2
 8006636:	f7fd fb9e 	bl	8003d76 <vListInsert>
 800663a:	e015      	b.n	8006668 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800663c:	2300      	movs	r3, #0
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	2300      	movs	r3, #0
 8006642:	693a      	ldr	r2, [r7, #16]
 8006644:	2100      	movs	r1, #0
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f7ff fd68 	bl	800611c <xTimerGenericCommand>
 800664c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d109      	bne.n	8006668 <prvSwitchTimerLists+0x98>
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	603b      	str	r3, [r7, #0]
 8006666:	e7fe      	b.n	8006666 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006668:	4b09      	ldr	r3, [pc, #36]	; (8006690 <prvSwitchTimerLists+0xc0>)
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1b2      	bne.n	80065d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006672:	4b07      	ldr	r3, [pc, #28]	; (8006690 <prvSwitchTimerLists+0xc0>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006678:	4b06      	ldr	r3, [pc, #24]	; (8006694 <prvSwitchTimerLists+0xc4>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a04      	ldr	r2, [pc, #16]	; (8006690 <prvSwitchTimerLists+0xc0>)
 800667e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006680:	4a04      	ldr	r2, [pc, #16]	; (8006694 <prvSwitchTimerLists+0xc4>)
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	6013      	str	r3, [r2, #0]
}
 8006686:	bf00      	nop
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20000c10 	.word	0x20000c10
 8006694:	20000c14 	.word	0x20000c14

08006698 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b082      	sub	sp, #8
 800669c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800669e:	f000 f965 	bl	800696c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066a2:	4b15      	ldr	r3, [pc, #84]	; (80066f8 <prvCheckForValidListAndQueue+0x60>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d120      	bne.n	80066ec <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066aa:	4814      	ldr	r0, [pc, #80]	; (80066fc <prvCheckForValidListAndQueue+0x64>)
 80066ac:	f7fd fb12 	bl	8003cd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066b0:	4813      	ldr	r0, [pc, #76]	; (8006700 <prvCheckForValidListAndQueue+0x68>)
 80066b2:	f7fd fb0f 	bl	8003cd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066b6:	4b13      	ldr	r3, [pc, #76]	; (8006704 <prvCheckForValidListAndQueue+0x6c>)
 80066b8:	4a10      	ldr	r2, [pc, #64]	; (80066fc <prvCheckForValidListAndQueue+0x64>)
 80066ba:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066bc:	4b12      	ldr	r3, [pc, #72]	; (8006708 <prvCheckForValidListAndQueue+0x70>)
 80066be:	4a10      	ldr	r2, [pc, #64]	; (8006700 <prvCheckForValidListAndQueue+0x68>)
 80066c0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066c2:	2300      	movs	r3, #0
 80066c4:	9300      	str	r3, [sp, #0]
 80066c6:	4b11      	ldr	r3, [pc, #68]	; (800670c <prvCheckForValidListAndQueue+0x74>)
 80066c8:	4a11      	ldr	r2, [pc, #68]	; (8006710 <prvCheckForValidListAndQueue+0x78>)
 80066ca:	2110      	movs	r1, #16
 80066cc:	200a      	movs	r0, #10
 80066ce:	f7fd fc1d 	bl	8003f0c <xQueueGenericCreateStatic>
 80066d2:	4602      	mov	r2, r0
 80066d4:	4b08      	ldr	r3, [pc, #32]	; (80066f8 <prvCheckForValidListAndQueue+0x60>)
 80066d6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066d8:	4b07      	ldr	r3, [pc, #28]	; (80066f8 <prvCheckForValidListAndQueue+0x60>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d005      	beq.n	80066ec <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80066e0:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <prvCheckForValidListAndQueue+0x60>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	490b      	ldr	r1, [pc, #44]	; (8006714 <prvCheckForValidListAndQueue+0x7c>)
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fe fa26 	bl	8004b38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066ec:	f000 f96c 	bl	80069c8 <vPortExitCritical>
}
 80066f0:	bf00      	nop
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20000c18 	.word	0x20000c18
 80066fc:	20000be8 	.word	0x20000be8
 8006700:	20000bfc 	.word	0x20000bfc
 8006704:	20000c10 	.word	0x20000c10
 8006708:	20000c14 	.word	0x20000c14
 800670c:	20000cc4 	.word	0x20000cc4
 8006710:	20000c24 	.word	0x20000c24
 8006714:	080084f8 	.word	0x080084f8

08006718 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	3b04      	subs	r3, #4
 8006728:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006730:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3b04      	subs	r3, #4
 8006736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f023 0201 	bic.w	r2, r3, #1
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3b04      	subs	r3, #4
 8006746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006748:	4a0c      	ldr	r2, [pc, #48]	; (800677c <pxPortInitialiseStack+0x64>)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	3b14      	subs	r3, #20
 8006752:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006754:	687a      	ldr	r2, [r7, #4]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3b04      	subs	r3, #4
 800675e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	f06f 0202 	mvn.w	r2, #2
 8006766:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3b20      	subs	r3, #32
 800676c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800676e:	68fb      	ldr	r3, [r7, #12]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr
 800677c:	08006781 	.word	0x08006781

08006780 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006786:	2300      	movs	r3, #0
 8006788:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800678a:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <prvTaskExitError+0x50>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006792:	d009      	beq.n	80067a8 <prvTaskExitError+0x28>
 8006794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	60fb      	str	r3, [r7, #12]
 80067a6:	e7fe      	b.n	80067a6 <prvTaskExitError+0x26>
 80067a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ac:	f383 8811 	msr	BASEPRI, r3
 80067b0:	f3bf 8f6f 	isb	sy
 80067b4:	f3bf 8f4f 	dsb	sy
 80067b8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067ba:	bf00      	nop
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0fc      	beq.n	80067bc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067c2:	bf00      	nop
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	2000000c 	.word	0x2000000c
	...

080067e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067e0:	4b07      	ldr	r3, [pc, #28]	; (8006800 <pxCurrentTCBConst2>)
 80067e2:	6819      	ldr	r1, [r3, #0]
 80067e4:	6808      	ldr	r0, [r1, #0]
 80067e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ea:	f380 8809 	msr	PSP, r0
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f04f 0000 	mov.w	r0, #0
 80067f6:	f380 8811 	msr	BASEPRI, r0
 80067fa:	4770      	bx	lr
 80067fc:	f3af 8000 	nop.w

08006800 <pxCurrentTCBConst2>:
 8006800:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006804:	bf00      	nop
 8006806:	bf00      	nop

08006808 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006808:	4808      	ldr	r0, [pc, #32]	; (800682c <prvPortStartFirstTask+0x24>)
 800680a:	6800      	ldr	r0, [r0, #0]
 800680c:	6800      	ldr	r0, [r0, #0]
 800680e:	f380 8808 	msr	MSP, r0
 8006812:	f04f 0000 	mov.w	r0, #0
 8006816:	f380 8814 	msr	CONTROL, r0
 800681a:	b662      	cpsie	i
 800681c:	b661      	cpsie	f
 800681e:	f3bf 8f4f 	dsb	sy
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	df00      	svc	0
 8006828:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800682a:	bf00      	nop
 800682c:	e000ed08 	.word	0xe000ed08

08006830 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b086      	sub	sp, #24
 8006834:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006836:	4b44      	ldr	r3, [pc, #272]	; (8006948 <xPortStartScheduler+0x118>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	4a44      	ldr	r2, [pc, #272]	; (800694c <xPortStartScheduler+0x11c>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d109      	bne.n	8006854 <xPortStartScheduler+0x24>
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	613b      	str	r3, [r7, #16]
 8006852:	e7fe      	b.n	8006852 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006854:	4b3c      	ldr	r3, [pc, #240]	; (8006948 <xPortStartScheduler+0x118>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	4a3d      	ldr	r2, [pc, #244]	; (8006950 <xPortStartScheduler+0x120>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d109      	bne.n	8006872 <xPortStartScheduler+0x42>
 800685e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006862:	f383 8811 	msr	BASEPRI, r3
 8006866:	f3bf 8f6f 	isb	sy
 800686a:	f3bf 8f4f 	dsb	sy
 800686e:	60fb      	str	r3, [r7, #12]
 8006870:	e7fe      	b.n	8006870 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006872:	4b38      	ldr	r3, [pc, #224]	; (8006954 <xPortStartScheduler+0x124>)
 8006874:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	b2db      	uxtb	r3, r3
 800687c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	22ff      	movs	r2, #255	; 0xff
 8006882:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	b2db      	uxtb	r3, r3
 800688a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800688c:	78fb      	ldrb	r3, [r7, #3]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006894:	b2da      	uxtb	r2, r3
 8006896:	4b30      	ldr	r3, [pc, #192]	; (8006958 <xPortStartScheduler+0x128>)
 8006898:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800689a:	4b30      	ldr	r3, [pc, #192]	; (800695c <xPortStartScheduler+0x12c>)
 800689c:	2207      	movs	r2, #7
 800689e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068a0:	e009      	b.n	80068b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80068a2:	4b2e      	ldr	r3, [pc, #184]	; (800695c <xPortStartScheduler+0x12c>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	3b01      	subs	r3, #1
 80068a8:	4a2c      	ldr	r2, [pc, #176]	; (800695c <xPortStartScheduler+0x12c>)
 80068aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068ac:	78fb      	ldrb	r3, [r7, #3]
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	005b      	lsls	r3, r3, #1
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068b6:	78fb      	ldrb	r3, [r7, #3]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068be:	2b80      	cmp	r3, #128	; 0x80
 80068c0:	d0ef      	beq.n	80068a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068c2:	4b26      	ldr	r3, [pc, #152]	; (800695c <xPortStartScheduler+0x12c>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f1c3 0307 	rsb	r3, r3, #7
 80068ca:	2b04      	cmp	r3, #4
 80068cc:	d009      	beq.n	80068e2 <xPortStartScheduler+0xb2>
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	60bb      	str	r3, [r7, #8]
 80068e0:	e7fe      	b.n	80068e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068e2:	4b1e      	ldr	r3, [pc, #120]	; (800695c <xPortStartScheduler+0x12c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	021b      	lsls	r3, r3, #8
 80068e8:	4a1c      	ldr	r2, [pc, #112]	; (800695c <xPortStartScheduler+0x12c>)
 80068ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068ec:	4b1b      	ldr	r3, [pc, #108]	; (800695c <xPortStartScheduler+0x12c>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068f4:	4a19      	ldr	r2, [pc, #100]	; (800695c <xPortStartScheduler+0x12c>)
 80068f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	b2da      	uxtb	r2, r3
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006900:	4b17      	ldr	r3, [pc, #92]	; (8006960 <xPortStartScheduler+0x130>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a16      	ldr	r2, [pc, #88]	; (8006960 <xPortStartScheduler+0x130>)
 8006906:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800690a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800690c:	4b14      	ldr	r3, [pc, #80]	; (8006960 <xPortStartScheduler+0x130>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a13      	ldr	r2, [pc, #76]	; (8006960 <xPortStartScheduler+0x130>)
 8006912:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006916:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006918:	f000 f8d6 	bl	8006ac8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800691c:	4b11      	ldr	r3, [pc, #68]	; (8006964 <xPortStartScheduler+0x134>)
 800691e:	2200      	movs	r2, #0
 8006920:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006922:	f000 f8f5 	bl	8006b10 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006926:	4b10      	ldr	r3, [pc, #64]	; (8006968 <xPortStartScheduler+0x138>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a0f      	ldr	r2, [pc, #60]	; (8006968 <xPortStartScheduler+0x138>)
 800692c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006930:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006932:	f7ff ff69 	bl	8006808 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006936:	f7fe fd3f 	bl	80053b8 <vTaskSwitchContext>
	prvTaskExitError();
 800693a:	f7ff ff21 	bl	8006780 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	3718      	adds	r7, #24
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	e000ed00 	.word	0xe000ed00
 800694c:	410fc271 	.word	0x410fc271
 8006950:	410fc270 	.word	0x410fc270
 8006954:	e000e400 	.word	0xe000e400
 8006958:	20000d14 	.word	0x20000d14
 800695c:	20000d18 	.word	0x20000d18
 8006960:	e000ed20 	.word	0xe000ed20
 8006964:	2000000c 	.word	0x2000000c
 8006968:	e000ef34 	.word	0xe000ef34

0800696c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006976:	f383 8811 	msr	BASEPRI, r3
 800697a:	f3bf 8f6f 	isb	sy
 800697e:	f3bf 8f4f 	dsb	sy
 8006982:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006984:	4b0e      	ldr	r3, [pc, #56]	; (80069c0 <vPortEnterCritical+0x54>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	3301      	adds	r3, #1
 800698a:	4a0d      	ldr	r2, [pc, #52]	; (80069c0 <vPortEnterCritical+0x54>)
 800698c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800698e:	4b0c      	ldr	r3, [pc, #48]	; (80069c0 <vPortEnterCritical+0x54>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d10e      	bne.n	80069b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006996:	4b0b      	ldr	r3, [pc, #44]	; (80069c4 <vPortEnterCritical+0x58>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	d009      	beq.n	80069b4 <vPortEnterCritical+0x48>
 80069a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	603b      	str	r3, [r7, #0]
 80069b2:	e7fe      	b.n	80069b2 <vPortEnterCritical+0x46>
	}
}
 80069b4:	bf00      	nop
 80069b6:	370c      	adds	r7, #12
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	2000000c 	.word	0x2000000c
 80069c4:	e000ed04 	.word	0xe000ed04

080069c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069c8:	b480      	push	{r7}
 80069ca:	b083      	sub	sp, #12
 80069cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069ce:	4b11      	ldr	r3, [pc, #68]	; (8006a14 <vPortExitCritical+0x4c>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d109      	bne.n	80069ea <vPortExitCritical+0x22>
 80069d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069da:	f383 8811 	msr	BASEPRI, r3
 80069de:	f3bf 8f6f 	isb	sy
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	607b      	str	r3, [r7, #4]
 80069e8:	e7fe      	b.n	80069e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80069ea:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <vPortExitCritical+0x4c>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3b01      	subs	r3, #1
 80069f0:	4a08      	ldr	r2, [pc, #32]	; (8006a14 <vPortExitCritical+0x4c>)
 80069f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069f4:	4b07      	ldr	r3, [pc, #28]	; (8006a14 <vPortExitCritical+0x4c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d104      	bne.n	8006a06 <vPortExitCritical+0x3e>
 80069fc:	2300      	movs	r3, #0
 80069fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	2000000c 	.word	0x2000000c
	...

08006a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a20:	f3ef 8009 	mrs	r0, PSP
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	4b15      	ldr	r3, [pc, #84]	; (8006a80 <pxCurrentTCBConst>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	f01e 0f10 	tst.w	lr, #16
 8006a30:	bf08      	it	eq
 8006a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3a:	6010      	str	r0, [r2, #0]
 8006a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a44:	f380 8811 	msr	BASEPRI, r0
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f7fe fcb2 	bl	80053b8 <vTaskSwitchContext>
 8006a54:	f04f 0000 	mov.w	r0, #0
 8006a58:	f380 8811 	msr	BASEPRI, r0
 8006a5c:	bc09      	pop	{r0, r3}
 8006a5e:	6819      	ldr	r1, [r3, #0]
 8006a60:	6808      	ldr	r0, [r1, #0]
 8006a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a66:	f01e 0f10 	tst.w	lr, #16
 8006a6a:	bf08      	it	eq
 8006a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a70:	f380 8809 	msr	PSP, r0
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	f3af 8000 	nop.w

08006a80 <pxCurrentTCBConst>:
 8006a80:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop

08006a88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006aa0:	f7fe fbd2 	bl	8005248 <xTaskIncrementTick>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006aaa:	4b06      	ldr	r3, [pc, #24]	; (8006ac4 <SysTick_Handler+0x3c>)
 8006aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006abc:	bf00      	nop
 8006abe:	3708      	adds	r7, #8
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	e000ed04 	.word	0xe000ed04

08006ac8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006ac8:	b480      	push	{r7}
 8006aca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006acc:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <vPortSetupTimerInterrupt+0x34>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ad2:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <vPortSetupTimerInterrupt+0x38>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ad8:	4b0a      	ldr	r3, [pc, #40]	; (8006b04 <vPortSetupTimerInterrupt+0x3c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a0a      	ldr	r2, [pc, #40]	; (8006b08 <vPortSetupTimerInterrupt+0x40>)
 8006ade:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae2:	099b      	lsrs	r3, r3, #6
 8006ae4:	4a09      	ldr	r2, [pc, #36]	; (8006b0c <vPortSetupTimerInterrupt+0x44>)
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006aea:	4b04      	ldr	r3, [pc, #16]	; (8006afc <vPortSetupTimerInterrupt+0x34>)
 8006aec:	2207      	movs	r2, #7
 8006aee:	601a      	str	r2, [r3, #0]
}
 8006af0:	bf00      	nop
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	e000e010 	.word	0xe000e010
 8006b00:	e000e018 	.word	0xe000e018
 8006b04:	20000000 	.word	0x20000000
 8006b08:	10624dd3 	.word	0x10624dd3
 8006b0c:	e000e014 	.word	0xe000e014

08006b10 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b10:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b20 <vPortEnableVFP+0x10>
 8006b14:	6801      	ldr	r1, [r0, #0]
 8006b16:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b1a:	6001      	str	r1, [r0, #0]
 8006b1c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b1e:	bf00      	nop
 8006b20:	e000ed88 	.word	0xe000ed88

08006b24 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b2a:	f3ef 8305 	mrs	r3, IPSR
 8006b2e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2b0f      	cmp	r3, #15
 8006b34:	d913      	bls.n	8006b5e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b36:	4a16      	ldr	r2, [pc, #88]	; (8006b90 <vPortValidateInterruptPriority+0x6c>)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b40:	4b14      	ldr	r3, [pc, #80]	; (8006b94 <vPortValidateInterruptPriority+0x70>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	7afa      	ldrb	r2, [r7, #11]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d209      	bcs.n	8006b5e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006b4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4e:	f383 8811 	msr	BASEPRI, r3
 8006b52:	f3bf 8f6f 	isb	sy
 8006b56:	f3bf 8f4f 	dsb	sy
 8006b5a:	607b      	str	r3, [r7, #4]
 8006b5c:	e7fe      	b.n	8006b5c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b5e:	4b0e      	ldr	r3, [pc, #56]	; (8006b98 <vPortValidateInterruptPriority+0x74>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b66:	4b0d      	ldr	r3, [pc, #52]	; (8006b9c <vPortValidateInterruptPriority+0x78>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d909      	bls.n	8006b82 <vPortValidateInterruptPriority+0x5e>
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	e7fe      	b.n	8006b80 <vPortValidateInterruptPriority+0x5c>
	}
 8006b82:	bf00      	nop
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	e000e3f0 	.word	0xe000e3f0
 8006b94:	20000d14 	.word	0x20000d14
 8006b98:	e000ed0c 	.word	0xe000ed0c
 8006b9c:	20000d18 	.word	0x20000d18

08006ba0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b08a      	sub	sp, #40	; 0x28
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bac:	f7fe fa80 	bl	80050b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bb0:	4b57      	ldr	r3, [pc, #348]	; (8006d10 <pvPortMalloc+0x170>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bb8:	f000 f90c 	bl	8006dd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bbc:	4b55      	ldr	r3, [pc, #340]	; (8006d14 <pvPortMalloc+0x174>)
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	f040 808c 	bne.w	8006ce2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d01c      	beq.n	8006c0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006bd0:	2208      	movs	r2, #8
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f003 0307 	and.w	r3, r3, #7
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d013      	beq.n	8006c0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f023 0307 	bic.w	r3, r3, #7
 8006be8:	3308      	adds	r3, #8
 8006bea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d009      	beq.n	8006c0a <pvPortMalloc+0x6a>
 8006bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfa:	f383 8811 	msr	BASEPRI, r3
 8006bfe:	f3bf 8f6f 	isb	sy
 8006c02:	f3bf 8f4f 	dsb	sy
 8006c06:	617b      	str	r3, [r7, #20]
 8006c08:	e7fe      	b.n	8006c08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d068      	beq.n	8006ce2 <pvPortMalloc+0x142>
 8006c10:	4b41      	ldr	r3, [pc, #260]	; (8006d18 <pvPortMalloc+0x178>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d863      	bhi.n	8006ce2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c1a:	4b40      	ldr	r3, [pc, #256]	; (8006d1c <pvPortMalloc+0x17c>)
 8006c1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c1e:	4b3f      	ldr	r3, [pc, #252]	; (8006d1c <pvPortMalloc+0x17c>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c24:	e004      	b.n	8006c30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d903      	bls.n	8006c42 <pvPortMalloc+0xa2>
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1f1      	bne.n	8006c26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c42:	4b33      	ldr	r3, [pc, #204]	; (8006d10 <pvPortMalloc+0x170>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d04a      	beq.n	8006ce2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2208      	movs	r2, #8
 8006c52:	4413      	add	r3, r2
 8006c54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	6a3b      	ldr	r3, [r7, #32]
 8006c5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	1ad2      	subs	r2, r2, r3
 8006c66:	2308      	movs	r3, #8
 8006c68:	005b      	lsls	r3, r3, #1
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d91e      	bls.n	8006cac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4413      	add	r3, r2
 8006c74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	f003 0307 	and.w	r3, r3, #7
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d009      	beq.n	8006c94 <pvPortMalloc+0xf4>
 8006c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	613b      	str	r3, [r7, #16]
 8006c92:	e7fe      	b.n	8006c92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	1ad2      	subs	r2, r2, r3
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ca6:	69b8      	ldr	r0, [r7, #24]
 8006ca8:	f000 f8f6 	bl	8006e98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cac:	4b1a      	ldr	r3, [pc, #104]	; (8006d18 <pvPortMalloc+0x178>)
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	4a18      	ldr	r2, [pc, #96]	; (8006d18 <pvPortMalloc+0x178>)
 8006cb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cba:	4b17      	ldr	r3, [pc, #92]	; (8006d18 <pvPortMalloc+0x178>)
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	4b18      	ldr	r3, [pc, #96]	; (8006d20 <pvPortMalloc+0x180>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d203      	bcs.n	8006cce <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cc6:	4b14      	ldr	r3, [pc, #80]	; (8006d18 <pvPortMalloc+0x178>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a15      	ldr	r2, [pc, #84]	; (8006d20 <pvPortMalloc+0x180>)
 8006ccc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	4b10      	ldr	r3, [pc, #64]	; (8006d14 <pvPortMalloc+0x174>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ce2:	f7fe f9f3 	bl	80050cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	f003 0307 	and.w	r3, r3, #7
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d009      	beq.n	8006d04 <pvPortMalloc+0x164>
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	60fb      	str	r3, [r7, #12]
 8006d02:	e7fe      	b.n	8006d02 <pvPortMalloc+0x162>
	return pvReturn;
 8006d04:	69fb      	ldr	r3, [r7, #28]
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3728      	adds	r7, #40	; 0x28
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}
 8006d0e:	bf00      	nop
 8006d10:	20004924 	.word	0x20004924
 8006d14:	20004930 	.word	0x20004930
 8006d18:	20004928 	.word	0x20004928
 8006d1c:	2000491c 	.word	0x2000491c
 8006d20:	2000492c 	.word	0x2000492c

08006d24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d046      	beq.n	8006dc4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d36:	2308      	movs	r3, #8
 8006d38:	425b      	negs	r3, r3
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	4b20      	ldr	r3, [pc, #128]	; (8006dcc <vPortFree+0xa8>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d109      	bne.n	8006d66 <vPortFree+0x42>
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	e7fe      	b.n	8006d64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d009      	beq.n	8006d82 <vPortFree+0x5e>
 8006d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	60bb      	str	r3, [r7, #8]
 8006d80:	e7fe      	b.n	8006d80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	685a      	ldr	r2, [r3, #4]
 8006d86:	4b11      	ldr	r3, [pc, #68]	; (8006dcc <vPortFree+0xa8>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d019      	beq.n	8006dc4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d115      	bne.n	8006dc4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	685a      	ldr	r2, [r3, #4]
 8006d9c:	4b0b      	ldr	r3, [pc, #44]	; (8006dcc <vPortFree+0xa8>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	43db      	mvns	r3, r3
 8006da2:	401a      	ands	r2, r3
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006da8:	f7fe f982 	bl	80050b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	685a      	ldr	r2, [r3, #4]
 8006db0:	4b07      	ldr	r3, [pc, #28]	; (8006dd0 <vPortFree+0xac>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4413      	add	r3, r2
 8006db6:	4a06      	ldr	r2, [pc, #24]	; (8006dd0 <vPortFree+0xac>)
 8006db8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dba:	6938      	ldr	r0, [r7, #16]
 8006dbc:	f000 f86c 	bl	8006e98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006dc0:	f7fe f984 	bl	80050cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006dc4:	bf00      	nop
 8006dc6:	3718      	adds	r7, #24
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	bd80      	pop	{r7, pc}
 8006dcc:	20004930 	.word	0x20004930
 8006dd0:	20004928 	.word	0x20004928

08006dd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006dda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006dde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006de0:	4b27      	ldr	r3, [pc, #156]	; (8006e80 <prvHeapInit+0xac>)
 8006de2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f003 0307 	and.w	r3, r3, #7
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d00c      	beq.n	8006e08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3307      	adds	r3, #7
 8006df2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	f023 0307 	bic.w	r3, r3, #7
 8006dfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006dfc:	68ba      	ldr	r2, [r7, #8]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	4a1f      	ldr	r2, [pc, #124]	; (8006e80 <prvHeapInit+0xac>)
 8006e04:	4413      	add	r3, r2
 8006e06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e0c:	4a1d      	ldr	r2, [pc, #116]	; (8006e84 <prvHeapInit+0xb0>)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e12:	4b1c      	ldr	r3, [pc, #112]	; (8006e84 <prvHeapInit+0xb0>)
 8006e14:	2200      	movs	r2, #0
 8006e16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	68ba      	ldr	r2, [r7, #8]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e20:	2208      	movs	r2, #8
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	1a9b      	subs	r3, r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f023 0307 	bic.w	r3, r3, #7
 8006e2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4a15      	ldr	r2, [pc, #84]	; (8006e88 <prvHeapInit+0xb4>)
 8006e34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e36:	4b14      	ldr	r3, [pc, #80]	; (8006e88 <prvHeapInit+0xb4>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e3e:	4b12      	ldr	r3, [pc, #72]	; (8006e88 <prvHeapInit+0xb4>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2200      	movs	r2, #0
 8006e44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	1ad2      	subs	r2, r2, r3
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e54:	4b0c      	ldr	r3, [pc, #48]	; (8006e88 <prvHeapInit+0xb4>)
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	4a0a      	ldr	r2, [pc, #40]	; (8006e8c <prvHeapInit+0xb8>)
 8006e62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	685b      	ldr	r3, [r3, #4]
 8006e68:	4a09      	ldr	r2, [pc, #36]	; (8006e90 <prvHeapInit+0xbc>)
 8006e6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e6c:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <prvHeapInit+0xc0>)
 8006e6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e72:	601a      	str	r2, [r3, #0]
}
 8006e74:	bf00      	nop
 8006e76:	3714      	adds	r7, #20
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr
 8006e80:	20000d1c 	.word	0x20000d1c
 8006e84:	2000491c 	.word	0x2000491c
 8006e88:	20004924 	.word	0x20004924
 8006e8c:	2000492c 	.word	0x2000492c
 8006e90:	20004928 	.word	0x20004928
 8006e94:	20004930 	.word	0x20004930

08006e98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b085      	sub	sp, #20
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ea0:	4b28      	ldr	r3, [pc, #160]	; (8006f44 <prvInsertBlockIntoFreeList+0xac>)
 8006ea2:	60fb      	str	r3, [r7, #12]
 8006ea4:	e002      	b.n	8006eac <prvInsertBlockIntoFreeList+0x14>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d8f7      	bhi.n	8006ea6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	68ba      	ldr	r2, [r7, #8]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d108      	bne.n	8006eda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	685a      	ldr	r2, [r3, #4]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	441a      	add	r2, r3
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	68ba      	ldr	r2, [r7, #8]
 8006ee4:	441a      	add	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	429a      	cmp	r2, r3
 8006eec:	d118      	bne.n	8006f20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	4b15      	ldr	r3, [pc, #84]	; (8006f48 <prvInsertBlockIntoFreeList+0xb0>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d00d      	beq.n	8006f16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	441a      	add	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	601a      	str	r2, [r3, #0]
 8006f14:	e008      	b.n	8006f28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f16:	4b0c      	ldr	r3, [pc, #48]	; (8006f48 <prvInsertBlockIntoFreeList+0xb0>)
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	e003      	b.n	8006f28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d002      	beq.n	8006f36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f36:	bf00      	nop
 8006f38:	3714      	adds	r7, #20
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	2000491c 	.word	0x2000491c
 8006f48:	20004924 	.word	0x20004924

08006f4c <ModbusInit>:
 * @param EN_Port_v port for txen RS-485
 * @param EN_Pin_v pin for txen RS-485 (NULL means RS232C mode)
 * @ingroup setup
 */
void ModbusInit(modbusHandler_t * modH)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af02      	add	r7, sp, #8
 8006f52:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 8006f54:	4b35      	ldr	r3, [pc, #212]	; (800702c <ModbusInit+0xe0>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b01      	cmp	r3, #1
 8006f5a:	d862      	bhi.n	8007022 <ModbusInit+0xd6>
  {
	  //Create QueueModbus
	  modH->QueueModbusHandle = osMessageQueueNew (MAX_BUFFER, sizeof(uint8_t), &QueueModbus_attributes);
 8006f5c:	4a34      	ldr	r2, [pc, #208]	; (8007030 <ModbusInit+0xe4>)
 8006f5e:	2101      	movs	r1, #1
 8006f60:	2040      	movs	r0, #64	; 0x40
 8006f62:	f7fc fdfd 	bl	8003b60 <osMessageQueueNew>
 8006f66:	4602      	mov	r2, r0
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	675a      	str	r2, [r3, #116]	; 0x74

	  if(modH->uiModbusType == SLAVE_RTU)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	2b03      	cmp	r3, #3
 8006f72:	d108      	bne.n	8006f86 <ModbusInit+0x3a>
	  {
		  //Create Modbus task slave
	  	  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8006f74:	4a2f      	ldr	r2, [pc, #188]	; (8007034 <ModbusInit+0xe8>)
 8006f76:	6879      	ldr	r1, [r7, #4]
 8006f78:	482f      	ldr	r0, [pc, #188]	; (8007038 <ModbusInit+0xec>)
 8006f7a:	f7fc fc7f 	bl	800387c <osThreadNew>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	67da      	str	r2, [r3, #124]	; 0x7c
 8006f84:	e027      	b.n	8006fd6 <ModbusInit+0x8a>
	  }
	  else if (modH->uiModbusType == MASTER_RTU)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	2b04      	cmp	r3, #4
 8006f8c:	d122      	bne.n	8006fd4 <ModbusInit+0x88>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8006f8e:	4a2b      	ldr	r2, [pc, #172]	; (800703c <ModbusInit+0xf0>)
 8006f90:	6879      	ldr	r1, [r7, #4]
 8006f92:	482b      	ldr	r0, [pc, #172]	; (8007040 <ModbusInit+0xf4>)
 8006f94:	f7fc fc72 	bl	800387c <osThreadNew>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	67da      	str	r2, [r3, #124]	; 0x7c
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8006fa4:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8006fac:	4b25      	ldr	r3, [pc, #148]	; (8007044 <ModbusInit+0xf8>)
 8006fae:	9300      	str	r3, [sp, #0]
 8006fb0:	4613      	mov	r3, r2
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	4824      	ldr	r0, [pc, #144]	; (8007048 <ModbusInit+0xfc>)
 8006fb6:	f7ff f855 	bl	8006064 <xTimerCreate>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8006fc2:	4a22      	ldr	r2, [pc, #136]	; (800704c <ModbusInit+0x100>)
 8006fc4:	210c      	movs	r1, #12
 8006fc6:	2002      	movs	r0, #2
 8006fc8:	f7fc fdca 	bl	8003b60 <osMessageQueueNew>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	679a      	str	r2, [r3, #120]	; 0x78
 8006fd2:	e000      	b.n	8006fd6 <ModbusInit+0x8a>
	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8006fd4:	e7fe      	b.n	8006fd4 <ModbusInit+0x88>
	  //Create timer T35

	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	5 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8006fdc:	4b1c      	ldr	r3, [pc, #112]	; (8007050 <ModbusInit+0x104>)
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	2105      	movs	r1, #5
 8006fe6:	481b      	ldr	r0, [pc, #108]	; (8007054 <ModbusInit+0x108>)
 8006fe8:	f7ff f83c 	bl	8006064 <xTimerCreate>
 8006fec:	4602      	mov	r2, r0
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );

	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8006ff4:	4a18      	ldr	r2, [pc, #96]	; (8007058 <ModbusInit+0x10c>)
 8006ff6:	2101      	movs	r1, #1
 8006ff8:	2001      	movs	r0, #1
 8006ffa:	f7fc fd13 	bl	8003a24 <osSemaphoreNew>
 8006ffe:	4602      	mov	r2, r0
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  mHandlers[numberHandlers] = modH;
 8007006:	4b09      	ldr	r3, [pc, #36]	; (800702c <ModbusInit+0xe0>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	4619      	mov	r1, r3
 800700c:	4a13      	ldr	r2, [pc, #76]	; (800705c <ModbusInit+0x110>)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 8007014:	4b05      	ldr	r3, [pc, #20]	; (800702c <ModbusInit+0xe0>)
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	3301      	adds	r3, #1
 800701a:	b2da      	uxtb	r2, r3
 800701c:	4b03      	ldr	r3, [pc, #12]	; (800702c <ModbusInit+0xe0>)
 800701e:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 8007020:	e000      	b.n	8007024 <ModbusInit+0xd8>
	  while(1); //error no more Modbus handlers supported
 8007022:	e7fe      	b.n	8007022 <ModbusInit+0xd6>
}
 8007024:	3708      	adds	r7, #8
 8007026:	46bd      	mov	sp, r7
 8007028:	bd80      	pop	{r7, pc}
 800702a:	bf00      	nop
 800702c:	20004934 	.word	0x20004934
 8007030:	080085a0 	.word	0x080085a0
 8007034:	080085d0 	.word	0x080085d0
 8007038:	080071d1 	.word	0x080071d1
 800703c:	080085f4 	.word	0x080085f4
 8007040:	08007625 	.word	0x08007625
 8007044:	08007179 	.word	0x08007179
 8007048:	08008548 	.word	0x08008548
 800704c:	080085b8 	.word	0x080085b8
 8007050:	080070f9 	.word	0x080070f9
 8007054:	08008558 	.word	0x08008558
 8007058:	08008618 	.word	0x08008618
 800705c:	20004938 	.word	0x20004938

08007060 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b082      	sub	sp, #8
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
    if (modH->EN_Port != NULL )
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d007      	beq.n	8007080 <ModbusStart+0x20>
    {
        // return RS485 transceiver to transmit mode
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	68d8      	ldr	r0, [r3, #12]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	8a1b      	ldrh	r3, [r3, #16]
 8007078:	2200      	movs	r2, #0
 800707a:	4619      	mov	r1, r3
 800707c:	f7fa fdf2 	bl	8001c64 <HAL_GPIO_WritePin>
    }

    if (modH->uiModbusType == SLAVE_RTU &&  modH->au16regs == NULL )
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	2b03      	cmp	r3, #3
 8007086:	d104      	bne.n	8007092 <ModbusStart+0x32>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708c:	2b00      	cmp	r3, #0
 800708e:	d100      	bne.n	8007092 <ModbusStart+0x32>
    {
    	while(1); //ERROR define the DATA pointer shared through Modbus
 8007090:	e7fe      	b.n	8007090 <ModbusStart+0x30>
    }

    //check that port is initialized
    while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8007092:	bf00      	nop
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	4618      	mov	r0, r3
 800709a:	f7fb fec1 	bl	8002e20 <HAL_UART_GetState>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	d1f7      	bne.n	8007094 <ModbusStart+0x34>
    {
    }

    // Receive data from serial port for Modbus using interrupt
    if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6858      	ldr	r0, [r3, #4]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	3371      	adds	r3, #113	; 0x71
 80070ac:	2201      	movs	r2, #1
 80070ae:	4619      	mov	r1, r3
 80070b0:	f7fb fd56 	bl	8002b60 <HAL_UART_Receive_IT>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d000      	beq.n	80070bc <ModbusStart+0x5c>
    {
        while(1)
 80070ba:	e7fe      	b.n	80070ba <ModbusStart+0x5a>
        {
        }
    }

    modH->u8lastRec = modH->u8BufferSize = 0;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
}
 80070f0:	bf00      	nop
 80070f2:	3708      	adds	r7, #8
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}

080070f8 <vTimerCallbackT35>:


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b086      	sub	sp, #24
 80070fc:	af02      	add	r7, sp, #8
 80070fe:	6078      	str	r0, [r7, #4]
	//Notify that a steam has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8007100:	2300      	movs	r3, #0
 8007102:	60fb      	str	r3, [r7, #12]
 8007104:	e029      	b.n	800715a <vTimerCallbackT35+0x62>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 8007106:	4a1a      	ldr	r2, [pc, #104]	; (8007170 <vTimerCallbackT35+0x78>)
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800710e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	429a      	cmp	r2, r3
 8007116:	d11d      	bne.n	8007154 <vTimerCallbackT35+0x5c>
			if(mHandlers[i]->uiModbusType == MASTER_RTU)
 8007118:	4a15      	ldr	r2, [pc, #84]	; (8007170 <vTimerCallbackT35+0x78>)
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007120:	781b      	ldrb	r3, [r3, #0]
 8007122:	2b04      	cmp	r3, #4
 8007124:	d10c      	bne.n	8007140 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 8007126:	4a12      	ldr	r2, [pc, #72]	; (8007170 <vTimerCallbackT35+0x78>)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800712e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8007132:	2300      	movs	r3, #0
 8007134:	9300      	str	r3, [sp, #0]
 8007136:	2300      	movs	r3, #0
 8007138:	2200      	movs	r2, #0
 800713a:	2103      	movs	r1, #3
 800713c:	f7fe ffee 	bl	800611c <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 8007140:	4a0b      	ldr	r2, [pc, #44]	; (8007170 <vTimerCallbackT35+0x78>)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007148:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800714a:	2300      	movs	r3, #0
 800714c:	2203      	movs	r2, #3
 800714e:	2100      	movs	r1, #0
 8007150:	f7fe fd60 	bl	8005c14 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	3301      	adds	r3, #1
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	4b06      	ldr	r3, [pc, #24]	; (8007174 <vTimerCallbackT35+0x7c>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	461a      	mov	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4293      	cmp	r3, r2
 8007164:	dbcf      	blt.n	8007106 <vTimerCallbackT35+0xe>
		}

	}
}
 8007166:	bf00      	nop
 8007168:	3710      	adds	r7, #16
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	20004938 	.word	0x20004938
 8007174:	20004934 	.word	0x20004934

08007178 <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b084      	sub	sp, #16
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
	//Notify that a steam has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8007180:	2300      	movs	r3, #0
 8007182:	60fb      	str	r3, [r7, #12]
 8007184:	e015      	b.n	80071b2 <vTimerCallbackTimeout+0x3a>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 8007186:	4a10      	ldr	r2, [pc, #64]	; (80071c8 <vTimerCallbackTimeout+0x50>)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800718e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	429a      	cmp	r2, r3
 8007196:	d109      	bne.n	80071ac <vTimerCallbackTimeout+0x34>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, NO_REPLY, eSetValueWithOverwrite);
 8007198:	4a0b      	ldr	r2, [pc, #44]	; (80071c8 <vTimerCallbackTimeout+0x50>)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071a0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80071a2:	2300      	movs	r3, #0
 80071a4:	2203      	movs	r2, #3
 80071a6:	21ff      	movs	r1, #255	; 0xff
 80071a8:	f7fe fd34 	bl	8005c14 <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	3301      	adds	r3, #1
 80071b0:	60fb      	str	r3, [r7, #12]
 80071b2:	4b06      	ldr	r3, [pc, #24]	; (80071cc <vTimerCallbackTimeout+0x54>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	461a      	mov	r2, r3
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4293      	cmp	r3, r2
 80071bc:	dbe3      	blt.n	8007186 <vTimerCallbackTimeout+0xe>
		}

	}

}
 80071be:	bf00      	nop
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	20004938 	.word	0x20004938
 80071cc:	20004934 	.word	0x20004934

080071d0 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block indefinitely until a Modbus Frame arrives */
 80071dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80071e0:	2001      	movs	r0, #1
 80071e2:	f7fe fccf 	bl	8005b84 <ulTaskNotifyTake>

	  modH->i8lastError = 0;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2200      	movs	r2, #0
 80071ea:	749a      	strb	r2, [r3, #18]
	  modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7fd fb39 	bl	8004868 <uxQueueMessagesWaiting>
 80071f6:	4603      	mov	r3, r0
 80071f8:	b2da      	uxtb	r2, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	  if (modH->EN_Port != NULL )
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d007      	beq.n	8007218 <StartTaskModbusSlave+0x48>
	  {
	     	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET); // is this required?
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	68d8      	ldr	r0, [r3, #12]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	8a1b      	ldrh	r3, [r3, #16]
 8007210:	2200      	movs	r2, #0
 8007212:	4619      	mov	r1, r3
 8007214:	f7fa fd26 	bl	8001c64 <HAL_GPIO_WritePin>
	  }

	  int8_t i8state = getRxBuffer(modH);
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 fbad 	bl	8007978 <getRxBuffer>
 800721e:	4603      	mov	r3, r0
 8007220:	72fb      	strb	r3, [r7, #11]

	  if (i8state < 7){
 8007222:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8007226:	2b06      	cmp	r3, #6
 8007228:	dc09      	bgt.n	800723e <StartTaskModbusSlave+0x6e>
		  //The size of the frame is invalid
		  modH->i8lastError = ERR_BAD_SIZE;;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	22fa      	movs	r2, #250	; 0xfa
 800722e:	749a      	strb	r2, [r3, #18]
		  xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007234:	2100      	movs	r1, #0
 8007236:	4618      	mov	r0, r3
 8007238:	f7fc fe00 	bl	8003e3c <xQueueGenericReset>
		  continue;
 800723c:	e093      	b.n	8007366 <StartTaskModbusSlave+0x196>
	  }


		// check slave id
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	7cda      	ldrb	r2, [r3, #19]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	7a1b      	ldrb	r3, [r3, #8]
 8007246:	429a      	cmp	r2, r3
 8007248:	f040 808c 	bne.w	8007364 <StartTaskModbusSlave+0x194>

	  // validate message: CRC, FCT, address and size
	  uint8_t u8exception = validateRequest(modH);
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f000 fc39 	bl	8007ac4 <validateRequest>
 8007252:	4603      	mov	r3, r0
 8007254:	72bb      	strb	r3, [r7, #10]
	  if (u8exception > 0)
 8007256:	7abb      	ldrb	r3, [r7, #10]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00f      	beq.n	800727c <StartTaskModbusSlave+0xac>
	  {
		  if (u8exception != NO_REPLY)
 800725c:	7abb      	ldrb	r3, [r7, #10]
 800725e:	2bff      	cmp	r3, #255	; 0xff
 8007260:	d007      	beq.n	8007272 <StartTaskModbusSlave+0xa2>
		  {
			  buildException( u8exception, modH);
 8007262:	7abb      	ldrb	r3, [r7, #10]
 8007264:	68f9      	ldr	r1, [r7, #12]
 8007266:	4618      	mov	r0, r3
 8007268:	f000 fd86 	bl	8007d78 <buildException>
			  sendTxBuffer(modH);
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 fda3 	bl	8007db8 <sendTxBuffer>
		  }
		  modH->i8lastError = u8exception;
 8007272:	f997 200a 	ldrsb.w	r2, [r7, #10]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	749a      	strb	r2, [r3, #18]
		  //return u8exception
		  continue;
 800727a:	e074      	b.n	8007366 <StartTaskModbusSlave+0x196>
	  }

	  //u32timeOut = millis(); TODO is this really need?
	  modH->i8lastError = 0;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	749a      	strb	r2, [r3, #18]


	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007288:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800728c:	4618      	mov	r0, r3
 800728e:	f7fd f9e3 	bl	8004658 <xQueueSemaphoreTake>

	  // process message
	    switch(modH->au8Buffer[ FUNC ] )
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	7d1b      	ldrb	r3, [r3, #20]
 8007296:	3b01      	subs	r3, #1
 8007298:	2b0f      	cmp	r3, #15
 800729a:	d859      	bhi.n	8007350 <StartTaskModbusSlave+0x180>
 800729c:	a201      	add	r2, pc, #4	; (adr r2, 80072a4 <StartTaskModbusSlave+0xd4>)
 800729e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a2:	bf00      	nop
 80072a4:	080072e5 	.word	0x080072e5
 80072a8:	080072e5 	.word	0x080072e5
 80072ac:	080072f7 	.word	0x080072f7
 80072b0:	080072f7 	.word	0x080072f7
 80072b4:	08007309 	.word	0x08007309
 80072b8:	0800731b 	.word	0x0800731b
 80072bc:	08007351 	.word	0x08007351
 80072c0:	08007351 	.word	0x08007351
 80072c4:	08007351 	.word	0x08007351
 80072c8:	08007351 	.word	0x08007351
 80072cc:	08007351 	.word	0x08007351
 80072d0:	08007351 	.word	0x08007351
 80072d4:	08007351 	.word	0x08007351
 80072d8:	08007351 	.word	0x08007351
 80072dc:	0800732d 	.word	0x0800732d
 80072e0:	0800733f 	.word	0x0800733f
	    {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 80072e4:	68f8      	ldr	r0, [r7, #12]
 80072e6:	f000 fdff 	bl	8007ee8 <process_FC1>
 80072ea:	4603      	mov	r3, r0
 80072ec:	461a      	mov	r2, r3
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80072f4:	e02d      	b.n	8007352 <StartTaskModbusSlave+0x182>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 feab 	bl	8008052 <process_FC3>
 80072fc:	4603      	mov	r3, r0
 80072fe:	461a      	mov	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 8007306:	e024      	b.n	8007352 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 8007308:	68f8      	ldr	r0, [r7, #12]
 800730a:	f000 ff0b 	bl	8008124 <process_FC5>
 800730e:	4603      	mov	r3, r0
 8007310:	461a      	mov	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 8007318:	e01b      	b.n	8007352 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 800731a:	68f8      	ldr	r0, [r7, #12]
 800731c:	f000 ff58 	bl	80081d0 <process_FC6>
 8007320:	4603      	mov	r3, r0
 8007322:	461a      	mov	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 800732a:	e012      	b.n	8007352 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 ff80 	bl	8008232 <process_FC15>
 8007332:	4603      	mov	r3, r0
 8007334:	461a      	mov	r2, r3
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 800733c:	e009      	b.n	8007352 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 800733e:	68f8      	ldr	r0, [r7, #12]
 8007340:	f001 f802 	bl	8008348 <process_FC16>
 8007344:	4603      	mov	r3, r0
 8007346:	461a      	mov	r2, r3
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 800734e:	e000      	b.n	8007352 <StartTaskModbusSlave+0x182>
			default:
				break;
 8007350:	bf00      	nop
	    }

	    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8007358:	2300      	movs	r3, #0
 800735a:	2200      	movs	r2, #0
 800735c:	2100      	movs	r1, #0
 800735e:	f7fc ff11 	bl	8004184 <xQueueGenericSend>
	    //return i8state;
	    continue;
 8007362:	e000      	b.n	8007366 <StartTaskModbusSlave+0x196>
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 8007364:	bf00      	nop
  {
 8007366:	e739      	b.n	80071dc <StartTaskModbusSlave+0xc>

08007368 <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	4638      	mov	r0, r7
 8007372:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	75bb      	strb	r3, [r7, #22]
	//xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	7a1b      	ldrb	r3, [r3, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d001      	beq.n	8007386 <SendQuery+0x1e>
 8007382:	23ff      	movs	r3, #255	; 0xff
 8007384:	75bb      	strb	r3, [r7, #22]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 800738c:	2b00      	cmp	r3, #0
 800738e:	d001      	beq.n	8007394 <SendQuery+0x2c>
 8007390:	23fe      	movs	r3, #254	; 0xfe
 8007392:	75bb      	strb	r3, [r7, #22]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8007394:	783b      	ldrb	r3, [r7, #0]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d002      	beq.n	80073a0 <SendQuery+0x38>
 800739a:	783b      	ldrb	r3, [r7, #0]
 800739c:	2bf7      	cmp	r3, #247	; 0xf7
 800739e:	d901      	bls.n	80073a4 <SendQuery+0x3c>
 80073a0:	23f7      	movs	r3, #247	; 0xf7
 80073a2:	75bb      	strb	r3, [r7, #22]

	if(error)
 80073a4:	7dbb      	ldrb	r3, [r7, #22]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00e      	beq.n	80073c8 <SendQuery+0x60>
	{
		 modH->i8lastError = error;
 80073aa:	f997 2016 	ldrsb.w	r2, [r7, #22]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80073b8:	2300      	movs	r3, #0
 80073ba:	2200      	movs	r2, #0
 80073bc:	2100      	movs	r1, #0
 80073be:	f7fc fee1 	bl	8004184 <xQueueGenericSend>
		 return error;
 80073c2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80073c6:	e128      	b.n	800761a <SendQuery+0x2b2>
	}


	modH->au16regs = telegram.au16reg;
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	659a      	str	r2, [r3, #88]	; 0x58

	// telegram header
	modH->au8Buffer[ ID ]         = telegram.u8id;
 80073ce:	783a      	ldrb	r2, [r7, #0]
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	74da      	strb	r2, [r3, #19]
	modH->au8Buffer[ FUNC ]       = telegram.u8fct;
 80073d4:	787a      	ldrb	r2, [r7, #1]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	751a      	strb	r2, [r3, #20]
	modH->au8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 80073da:	887b      	ldrh	r3, [r7, #2]
 80073dc:	0a1b      	lsrs	r3, r3, #8
 80073de:	b29b      	uxth	r3, r3
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	755a      	strb	r2, [r3, #21]
	modH->au8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 80073e6:	887b      	ldrh	r3, [r7, #2]
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 80073ee:	787b      	ldrb	r3, [r7, #1]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	2b0f      	cmp	r3, #15
 80073f4:	f200 8106 	bhi.w	8007604 <SendQuery+0x29c>
 80073f8:	a201      	add	r2, pc, #4	; (adr r2, 8007400 <SendQuery+0x98>)
 80073fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073fe:	bf00      	nop
 8007400:	08007441 	.word	0x08007441
 8007404:	08007441 	.word	0x08007441
 8007408:	08007441 	.word	0x08007441
 800740c:	08007441 	.word	0x08007441
 8007410:	0800745f 	.word	0x0800745f
 8007414:	08007483 	.word	0x08007483
 8007418:	08007605 	.word	0x08007605
 800741c:	08007605 	.word	0x08007605
 8007420:	08007605 	.word	0x08007605
 8007424:	08007605 	.word	0x08007605
 8007428:	08007605 	.word	0x08007605
 800742c:	08007605 	.word	0x08007605
 8007430:	08007605 	.word	0x08007605
 8007434:	08007605 	.word	0x08007605
 8007438:	080074a9 	.word	0x080074a9
 800743c:	0800756b 	.word	0x0800756b
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8007440:	88bb      	ldrh	r3, [r7, #4]
 8007442:	0a1b      	lsrs	r3, r3, #8
 8007444:	b29b      	uxth	r3, r3
 8007446:	b2da      	uxtb	r2, r3
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 800744c:	88bb      	ldrh	r3, [r7, #4]
 800744e:	b2da      	uxtb	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2206      	movs	r2, #6
 8007458:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 800745c:	e0d2      	b.n	8007604 <SendQuery+0x29c>
	case MB_FC_WRITE_COIL:
	    modH->au8Buffer[ NB_HI ]      = ((modH->au16regs[0] > 0) ? 0xff : 0);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d001      	beq.n	800746c <SendQuery+0x104>
 8007468:	22ff      	movs	r2, #255	; 0xff
 800746a:	e000      	b.n	800746e <SendQuery+0x106>
 800746c:	2200      	movs	r2, #0
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = 0;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2200      	movs	r2, #0
 8007476:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2206      	movs	r2, #6
 800747c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 8007480:	e0c0      	b.n	8007604 <SendQuery+0x29c>
	case MB_FC_WRITE_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte(modH->au16regs[0]);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007486:	881b      	ldrh	r3, [r3, #0]
 8007488:	0a1b      	lsrs	r3, r3, #8
 800748a:	b29b      	uxth	r3, r3
 800748c:	b2da      	uxtb	r2, r3
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte(modH->au16regs[0]);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007496:	881b      	ldrh	r3, [r3, #0]
 8007498:	b2da      	uxtb	r2, r3
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2206      	movs	r2, #6
 80074a2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 80074a6:	e0ad      	b.n	8007604 <SendQuery+0x29c>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 80074a8:	88bb      	ldrh	r3, [r7, #4]
 80074aa:	091b      	lsrs	r3, r3, #4
 80074ac:	b29b      	uxth	r3, r3
 80074ae:	747b      	strb	r3, [r7, #17]
	    u8bytesno = u8regsno * 2;
 80074b0:	7c7b      	ldrb	r3, [r7, #17]
 80074b2:	005b      	lsls	r3, r3, #1
 80074b4:	75fb      	strb	r3, [r7, #23]
	    if ((telegram.u16CoilsNo % 16) != 0)
 80074b6:	88bb      	ldrh	r3, [r7, #4]
 80074b8:	f003 030f 	and.w	r3, r3, #15
 80074bc:	b29b      	uxth	r3, r3
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d005      	beq.n	80074ce <SendQuery+0x166>
	    {
	        u8bytesno++;
 80074c2:	7dfb      	ldrb	r3, [r7, #23]
 80074c4:	3301      	adds	r3, #1
 80074c6:	75fb      	strb	r3, [r7, #23]
	        u8regsno++;
 80074c8:	7c7b      	ldrb	r3, [r7, #17]
 80074ca:	3301      	adds	r3, #1
 80074cc:	747b      	strb	r3, [r7, #17]
	    }

	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 80074ce:	88bb      	ldrh	r3, [r7, #4]
 80074d0:	0a1b      	lsrs	r3, r3, #8
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 80074da:	88bb      	ldrh	r3, [r7, #4]
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = u8bytesno;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	7dfa      	ldrb	r2, [r7, #23]
 80074e6:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2207      	movs	r2, #7
 80074ec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	    for (uint16_t i = 0; i < u8bytesno; i++)
 80074f0:	2300      	movs	r3, #0
 80074f2:	82bb      	strh	r3, [r7, #20]
 80074f4:	e033      	b.n	800755e <SendQuery+0x1f6>
	    {
	        if(i%2)
 80074f6:	8abb      	ldrh	r3, [r7, #20]
 80074f8:	f003 0301 	and.w	r3, r3, #1
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d010      	beq.n	8007524 <SendQuery+0x1bc>
	        {
	            modH->au8Buffer[ modH->u8BufferSize ] = lowByte( modH->au16regs[ i/2 ] );
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007506:	8abb      	ldrh	r3, [r7, #20]
 8007508:	085b      	lsrs	r3, r3, #1
 800750a:	b29b      	uxth	r3, r3
 800750c:	005b      	lsls	r3, r3, #1
 800750e:	4413      	add	r3, r2
 8007510:	881a      	ldrh	r2, [r3, #0]
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007518:	4619      	mov	r1, r3
 800751a:	b2d2      	uxtb	r2, r2
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	440b      	add	r3, r1
 8007520:	74da      	strb	r2, [r3, #19]
 8007522:	e011      	b.n	8007548 <SendQuery+0x1e0>
	        }
	        else
	        {
	        	 modH->au8Buffer[  modH->u8BufferSize ] = highByte(  modH->au16regs[ i/2] );
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007528:	8abb      	ldrh	r3, [r7, #20]
 800752a:	085b      	lsrs	r3, r3, #1
 800752c:	b29b      	uxth	r3, r3
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	4413      	add	r3, r2
 8007532:	881b      	ldrh	r3, [r3, #0]
 8007534:	0a1b      	lsrs	r3, r3, #8
 8007536:	b29a      	uxth	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800753e:	4619      	mov	r1, r3
 8007540:	b2d2      	uxtb	r2, r2
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	440b      	add	r3, r1
 8007546:	74da      	strb	r2, [r3, #19]
	        }
	        modH->u8BufferSize++;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800754e:	3301      	adds	r3, #1
 8007550:	b2da      	uxtb	r2, r3
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8007558:	8abb      	ldrh	r3, [r7, #20]
 800755a:	3301      	adds	r3, #1
 800755c:	82bb      	strh	r3, [r7, #20]
 800755e:	7dfb      	ldrb	r3, [r7, #23]
 8007560:	b29b      	uxth	r3, r3
 8007562:	8aba      	ldrh	r2, [r7, #20]
 8007564:	429a      	cmp	r2, r3
 8007566:	d3c6      	bcc.n	80074f6 <SendQuery+0x18e>
	    }
	    break;
 8007568:	e04c      	b.n	8007604 <SendQuery+0x29c>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 800756a:	88bb      	ldrh	r3, [r7, #4]
 800756c:	0a1b      	lsrs	r3, r3, #8
 800756e:	b29b      	uxth	r3, r3
 8007570:	b2da      	uxtb	r2, r3
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8007576:	88bb      	ldrh	r3, [r7, #4]
 8007578:	b2da      	uxtb	r2, r3
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 800757e:	88bb      	ldrh	r3, [r7, #4]
 8007580:	b2db      	uxtb	r3, r3
 8007582:	005b      	lsls	r3, r3, #1
 8007584:	b2da      	uxtb	r2, r3
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2207      	movs	r2, #7
 800758e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8007592:	2300      	movs	r3, #0
 8007594:	827b      	strh	r3, [r7, #18]
 8007596:	e030      	b.n	80075fa <SendQuery+0x292>
	    {
	        modH->au8Buffer[  modH->u8BufferSize ] = highByte(  modH->au16regs[ i ] );
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800759c:	8a7b      	ldrh	r3, [r7, #18]
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	4413      	add	r3, r2
 80075a2:	881b      	ldrh	r3, [r3, #0]
 80075a4:	0a1b      	lsrs	r3, r3, #8
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80075ae:	4619      	mov	r1, r3
 80075b0:	b2d2      	uxtb	r2, r2
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	440b      	add	r3, r1
 80075b6:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80075be:	3301      	adds	r3, #1
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	        modH->au8Buffer[  modH->u8BufferSize ] = lowByte(  modH->au16regs[ i ] );
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80075cc:	8a7b      	ldrh	r3, [r7, #18]
 80075ce:	005b      	lsls	r3, r3, #1
 80075d0:	4413      	add	r3, r2
 80075d2:	881a      	ldrh	r2, [r3, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80075da:	4619      	mov	r1, r3
 80075dc:	b2d2      	uxtb	r2, r2
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	440b      	add	r3, r1
 80075e2:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80075ea:	3301      	adds	r3, #1
 80075ec:	b2da      	uxtb	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 80075f4:	8a7b      	ldrh	r3, [r7, #18]
 80075f6:	3301      	adds	r3, #1
 80075f8:	827b      	strh	r3, [r7, #18]
 80075fa:	88bb      	ldrh	r3, [r7, #4]
 80075fc:	8a7a      	ldrh	r2, [r7, #18]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d3ca      	bcc.n	8007598 <SendQuery+0x230>
	    }
	    break;
 8007602:	bf00      	nop
	}

	sendTxBuffer(modH);
 8007604:	68f8      	ldr	r0, [r7, #12]
 8007606:	f000 fbd7 	bl	8007db8 <sendTxBuffer>
	modH->i8state = COM_WAITING;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	modH->i8lastError = 0;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2200      	movs	r2, #0
 8007616:	749a      	strb	r2, [r3, #18]
	return 0;
 8007618:	2300      	movs	r3, #0


}
 800761a:	4618      	mov	r0, r3
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop

08007624 <StartTaskModbusMaster>:




void StartTaskModbusMaster(void *argument)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b08a      	sub	sp, #40	; 0x28
 8007628:	af02      	add	r7, sp, #8
 800762a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	61fb      	str	r3, [r7, #28]
  modbus_t telegram;

  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007634:	f107 0108 	add.w	r1, r7, #8
 8007638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800763c:	4618      	mov	r0, r3
 800763e:	f7fc ff2f 	bl	80044a0 <xQueueReceive>

	  /*Format and Send query */
	  SendQuery(modH, telegram);
 8007642:	f107 0308 	add.w	r3, r7, #8
 8007646:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007648:	69f8      	ldr	r0, [r7, #28]
 800764a:	f7ff fe8d 	bl	8007368 <SendQuery>

	  /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
	  ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800764e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007652:	2001      	movs	r0, #1
 8007654:	f7fe fa96 	bl	8005b84 <ulTaskNotifyTake>
 8007658:	61b8      	str	r0, [r7, #24]
	  modH->i8lastError = 0;
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	2200      	movs	r2, #0
 800765e:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue == NO_REPLY)
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	2bff      	cmp	r3, #255	; 0xff
 8007664:	d10f      	bne.n	8007686 <StartTaskModbusMaster+0x62>
      {
    	  modH->i8state = COM_IDLE;
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
    	  modH->i8lastError = NO_REPLY;
 800766e:	69fb      	ldr	r3, [r7, #28]
 8007670:	22ff      	movs	r2, #255	; 0xff
 8007672:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800767a:	3301      	adds	r3, #1
 800767c:	b29a      	uxth	r2, r3
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    	  continue;
 8007684:	e08a      	b.n	800779c <StartTaskModbusMaster+0x178>
      }

	  modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800768a:	4618      	mov	r0, r3
 800768c:	f7fd f8ec 	bl	8004868 <uxQueueMessagesWaiting>
 8007690:	4603      	mov	r3, r0
 8007692:	b2da      	uxtb	r2, r3
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	  int8_t i8state = getRxBuffer(modH);
 800769a:	69f8      	ldr	r0, [r7, #28]
 800769c:	f000 f96c 	bl	8007978 <getRxBuffer>
 80076a0:	4603      	mov	r3, r0
 80076a2:	75fb      	strb	r3, [r7, #23]
	  //modH->u8lastError = i8state;

	  if (i8state < 6){
 80076a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80076a8:	2b05      	cmp	r3, #5
 80076aa:	dc1d      	bgt.n	80076e8 <StartTaskModbusMaster+0xc4>
		  //The size of the frame is invalid
		  xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076b0:	2100      	movs	r1, #0
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7fc fbc2 	bl	8003e3c <xQueueGenericReset>
		  modH->i8state = COM_IDLE;
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	2200      	movs	r2, #0
 80076bc:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		  modH->i8lastError = ERR_BAD_SIZE;
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	22fa      	movs	r2, #250	; 0xfa
 80076c4:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80076cc:	3301      	adds	r3, #1
 80076ce:	b29a      	uxth	r2, r3
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		  xSemaphoreGive(modH->ModBusSphrHandle);
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80076dc:	2300      	movs	r3, #0
 80076de:	2200      	movs	r2, #0
 80076e0:	2100      	movs	r1, #0
 80076e2:	f7fc fd4f 	bl	8004184 <xQueueGenericSend>
		  continue;
 80076e6:	e059      	b.n	800779c <StartTaskModbusMaster+0x178>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80076ee:	2300      	movs	r3, #0
 80076f0:	9300      	str	r3, [sp, #0]
 80076f2:	2300      	movs	r3, #0
 80076f4:	2200      	movs	r2, #0
 80076f6:	2103      	movs	r1, #3
 80076f8:	f7fe fd10 	bl	800611c <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  uint8_t u8exception = validateAnswer(modH);
 80076fc:	69f8      	ldr	r0, [r7, #28]
 80076fe:	f000 f8cd 	bl	800789c <validateAnswer>
 8007702:	4603      	mov	r3, r0
 8007704:	75bb      	strb	r3, [r7, #22]
	  if (u8exception != 0)
 8007706:	7dbb      	ldrb	r3, [r7, #22]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00c      	beq.n	8007726 <StartTaskModbusMaster+0x102>
	  {
		 modH->i8state = COM_IDLE;
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 800771a:	2300      	movs	r3, #0
 800771c:	2200      	movs	r2, #0
 800771e:	2100      	movs	r1, #0
 8007720:	f7fc fd30 	bl	8004184 <xQueueGenericSend>
	     continue;
 8007724:	e03a      	b.n	800779c <StartTaskModbusMaster+0x178>
	  }



	  modH->i8lastError = u8exception;
 8007726:	f997 2016 	ldrsb.w	r2, [r7, #22]
 800772a:	69fb      	ldr	r3, [r7, #28]
 800772c:	749a      	strb	r2, [r3, #18]
	  // process answer
	  switch( modH->au8Buffer[ FUNC ] )
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	7d1b      	ldrb	r3, [r3, #20]
 8007732:	3b01      	subs	r3, #1
 8007734:	2b0f      	cmp	r3, #15
 8007736:	d82b      	bhi.n	8007790 <StartTaskModbusMaster+0x16c>
 8007738:	a201      	add	r2, pc, #4	; (adr r2, 8007740 <StartTaskModbusMaster+0x11c>)
 800773a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800773e:	bf00      	nop
 8007740:	08007781 	.word	0x08007781
 8007744:	08007781 	.word	0x08007781
 8007748:	08007789 	.word	0x08007789
 800774c:	08007789 	.word	0x08007789
 8007750:	08007791 	.word	0x08007791
 8007754:	08007791 	.word	0x08007791
 8007758:	08007791 	.word	0x08007791
 800775c:	08007791 	.word	0x08007791
 8007760:	08007791 	.word	0x08007791
 8007764:	08007791 	.word	0x08007791
 8007768:	08007791 	.word	0x08007791
 800776c:	08007791 	.word	0x08007791
 8007770:	08007791 	.word	0x08007791
 8007774:	08007791 	.word	0x08007791
 8007778:	08007791 	.word	0x08007791
 800777c:	08007791 	.word	0x08007791
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to au16regs buffer
	      get_FC1(modH);
 8007780:	69f8      	ldr	r0, [r7, #28]
 8007782:	f000 f80d 	bl	80077a0 <get_FC1>
	      break;
 8007786:	e004      	b.n	8007792 <StartTaskModbusMaster+0x16e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to au16regs buffer
	      get_FC3(modH);
 8007788:	69f8      	ldr	r0, [r7, #28]
 800778a:	f000 f85b 	bl	8007844 <get_FC3>
	      break;
 800778e:	e000      	b.n	8007792 <StartTaskModbusMaster+0x16e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8007790:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8007792:	69fb      	ldr	r3, [r7, #28]
 8007794:	2200      	movs	r2, #0
 8007796:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	  //xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
	  //return i8state;
	  continue;
 800779a:	bf00      	nop
  {
 800779c:	e748      	b.n	8007630 <StartTaskModbusMaster+0xc>
 800779e:	bf00      	nop

080077a0 <get_FC1>:
 *
 * @ingroup register
 * TODO: finish its implementation
 */
void get_FC1(modbusHandler_t *modH)
{
 80077a0:	b590      	push	{r4, r7, lr}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 80077a8:	2303      	movs	r3, #3
 80077aa:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 80077ac:	2300      	movs	r3, #0
 80077ae:	73fb      	strb	r3, [r7, #15]
 80077b0:	e03f      	b.n	8007832 <get_FC1+0x92>

        if(i%2)
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
 80077b4:	f003 0301 	and.w	r3, r3, #1
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d01a      	beq.n	80077f4 <get_FC1+0x54>
        {
        	modH->au16regs[i/2]= word(modH->au8Buffer[i+u8byte], lowByte(modH->au16regs[i/2]));
 80077be:	7bfa      	ldrb	r2, [r7, #15]
 80077c0:	7bbb      	ldrb	r3, [r7, #14]
 80077c2:	4413      	add	r3, r2
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	4413      	add	r3, r2
 80077c8:	7cd8      	ldrb	r0, [r3, #19]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	085b      	lsrs	r3, r3, #1
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	005b      	lsls	r3, r3, #1
 80077d6:	4413      	add	r3, r2
 80077d8:	881b      	ldrh	r3, [r3, #0]
 80077da:	b2d9      	uxtb	r1, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
 80077e2:	085b      	lsrs	r3, r3, #1
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	18d4      	adds	r4, r2, r3
 80077ea:	f000 fa6b 	bl	8007cc4 <word>
 80077ee:	4603      	mov	r3, r0
 80077f0:	8023      	strh	r3, [r4, #0]
 80077f2:	e01b      	b.n	800782c <get_FC1+0x8c>
        }
        else
        {

        	modH->au16regs[i/2]= word(highByte(modH->au16regs[i/2]), modH->au8Buffer[i+u8byte]);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	085b      	lsrs	r3, r3, #1
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	005b      	lsls	r3, r3, #1
 8007800:	4413      	add	r3, r2
 8007802:	881b      	ldrh	r3, [r3, #0]
 8007804:	0a1b      	lsrs	r3, r3, #8
 8007806:	b29b      	uxth	r3, r3
 8007808:	b2d8      	uxtb	r0, r3
 800780a:	7bfa      	ldrb	r2, [r7, #15]
 800780c:	7bbb      	ldrb	r3, [r7, #14]
 800780e:	4413      	add	r3, r2
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	4413      	add	r3, r2
 8007814:	7cd9      	ldrb	r1, [r3, #19]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800781a:	7bfb      	ldrb	r3, [r7, #15]
 800781c:	085b      	lsrs	r3, r3, #1
 800781e:	b2db      	uxtb	r3, r3
 8007820:	005b      	lsls	r3, r3, #1
 8007822:	18d4      	adds	r4, r2, r3
 8007824:	f000 fa4e 	bl	8007cc4 <word>
 8007828:	4603      	mov	r3, r0
 800782a:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 800782c:	7bfb      	ldrb	r3, [r7, #15]
 800782e:	3301      	adds	r3, #1
 8007830:	73fb      	strb	r3, [r7, #15]
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	7d5b      	ldrb	r3, [r3, #21]
 8007836:	7bfa      	ldrb	r2, [r7, #15]
 8007838:	429a      	cmp	r2, r3
 800783a:	d3ba      	bcc.n	80077b2 <get_FC1+0x12>
        }

     }
}
 800783c:	bf00      	nop
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	bd90      	pop	{r4, r7, pc}

08007844 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8007844:	b590      	push	{r4, r7, lr}
 8007846:	b085      	sub	sp, #20
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 800784c:	2303      	movs	r3, #3
 800784e:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8007850:	2300      	movs	r3, #0
 8007852:	73bb      	strb	r3, [r7, #14]
 8007854:	e017      	b.n	8007886 <get_FC3+0x42>
    {
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	4413      	add	r3, r2
 800785c:	7cd8      	ldrb	r0, [r3, #19]
 800785e:	7bfb      	ldrb	r3, [r7, #15]
 8007860:	3301      	adds	r3, #1
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	4413      	add	r3, r2
 8007866:	7cd9      	ldrb	r1, [r3, #19]
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800786c:	7bbb      	ldrb	r3, [r7, #14]
 800786e:	005b      	lsls	r3, r3, #1
 8007870:	18d4      	adds	r4, r2, r3
 8007872:	f000 fa27 	bl	8007cc4 <word>
 8007876:	4603      	mov	r3, r0
 8007878:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	3302      	adds	r3, #2
 800787e:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8007880:	7bbb      	ldrb	r3, [r7, #14]
 8007882:	3301      	adds	r3, #1
 8007884:	73bb      	strb	r3, [r7, #14]
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	7d5b      	ldrb	r3, [r3, #21]
 800788a:	085b      	lsrs	r3, r3, #1
 800788c:	b2db      	uxtb	r3, r3
 800788e:	7bba      	ldrb	r2, [r7, #14]
 8007890:	429a      	cmp	r2, r3
 8007892:	d3e0      	bcc.n	8007856 <get_FC3+0x12>
    }
}
 8007894:	bf00      	nop
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	bd90      	pop	{r4, r7, pc}

0800789c <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b084      	sub	sp, #16
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc
    uint16_t u16MsgCRC =
        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80078aa:	3b02      	subs	r3, #2
 80078ac:	687a      	ldr	r2, [r7, #4]
 80078ae:	4413      	add	r3, r2
 80078b0:	7cdb      	ldrb	r3, [r3, #19]
 80078b2:	021b      	lsls	r3, r3, #8
         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 80078b4:	b21a      	sxth	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80078bc:	3b01      	subs	r3, #1
 80078be:	6879      	ldr	r1, [r7, #4]
 80078c0:	440b      	add	r3, r1
 80078c2:	7cdb      	ldrb	r3, [r3, #19]
 80078c4:	b21b      	sxth	r3, r3
 80078c6:	4313      	orrs	r3, r2
 80078c8:	b21b      	sxth	r3, r3
    uint16_t u16MsgCRC =
 80078ca:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->au8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f103 0213 	add.w	r2, r3, #19
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80078d8:	3b02      	subs	r3, #2
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	4619      	mov	r1, r3
 80078de:	4610      	mov	r0, r2
 80078e0:	f000 fa03 	bl	8007cea <calcCRC>
 80078e4:	4603      	mov	r3, r0
 80078e6:	461a      	mov	r2, r3
 80078e8:	89bb      	ldrh	r3, [r7, #12]
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d009      	beq.n	8007902 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80078f4:	3301      	adds	r3, #1
 80078f6:	b29a      	uxth	r2, r3
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return NO_REPLY;
 80078fe:	23ff      	movs	r3, #255	; 0xff
 8007900:	e034      	b.n	800796c <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->au8Buffer[ FUNC ] & 0x80) != 0)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	7d1b      	ldrb	r3, [r3, #20]
 8007906:	b25b      	sxtb	r3, r3
 8007908:	2b00      	cmp	r3, #0
 800790a:	da09      	bge.n	8007920 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007912:	3301      	adds	r3, #1
 8007914:	b29a      	uxth	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return ERR_EXCEPTION;
 800791c:	23fb      	movs	r3, #251	; 0xfb
 800791e:	e025      	b.n	800796c <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 8007920:	2300      	movs	r3, #0
 8007922:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8007924:	2300      	movs	r3, #0
 8007926:	73bb      	strb	r3, [r7, #14]
 8007928:	e00c      	b.n	8007944 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->au8Buffer[FUNC])
 800792a:	7bbb      	ldrb	r3, [r7, #14]
 800792c:	4a11      	ldr	r2, [pc, #68]	; (8007974 <validateAnswer+0xd8>)
 800792e:	5cd2      	ldrb	r2, [r2, r3]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	7d1b      	ldrb	r3, [r3, #20]
 8007934:	429a      	cmp	r2, r3
 8007936:	d102      	bne.n	800793e <validateAnswer+0xa2>
        {
            isSupported = 1;
 8007938:	2301      	movs	r3, #1
 800793a:	73fb      	strb	r3, [r7, #15]
            break;
 800793c:	e005      	b.n	800794a <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	3301      	adds	r3, #1
 8007942:	73bb      	strb	r3, [r7, #14]
 8007944:	7bbb      	ldrb	r3, [r7, #14]
 8007946:	2b07      	cmp	r3, #7
 8007948:	d9ef      	bls.n	800792a <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	f083 0301 	eor.w	r3, r3, #1
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b00      	cmp	r3, #0
 8007954:	d009      	beq.n	800796a <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800795c:	3301      	adds	r3, #1
 800795e:	b29a      	uxth	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return EXC_FUNC_CODE;
 8007966:	2301      	movs	r3, #1
 8007968:	e000      	b.n	800796c <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3710      	adds	r7, #16
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	08008628 	.word	0x08008628

08007978 <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int8_t getRxBuffer(modbusHandler_t *modH)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
    bool bBuffOverflow = false;
 8007980:	2300      	movs	r3, #0
 8007982:	72fb      	strb	r3, [r7, #11]
    int i;
    if (modH->EN_Port)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d007      	beq.n	800799c <getRxBuffer+0x24>
    {
    	//digitalWrite( u8txenpin, LOW );
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	68d8      	ldr	r0, [r3, #12]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	8a1b      	ldrh	r3, [r3, #16]
 8007994:	2200      	movs	r2, #0
 8007996:	4619      	mov	r1, r3
 8007998:	f7fa f964 	bl	8001c64 <HAL_GPIO_WritePin>
    }


    modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7fc ff61 	bl	8004868 <uxQueueMessagesWaiting>
 80079a6:	4603      	mov	r3, r0
 80079a8:	b2da      	uxtb	r2, r3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    for(i = 0; i<  modH->u8BufferSize; i++ )
 80079b0:	2300      	movs	r3, #0
 80079b2:	60fb      	str	r3, [r7, #12]
 80079b4:	e00d      	b.n	80079d2 <getRxBuffer+0x5a>
   	{
   		  xQueueReceive(modH->QueueModbusHandle, &modH->au8Buffer[i], 0);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	3310      	adds	r3, #16
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	4413      	add	r3, r2
 80079c2:	3303      	adds	r3, #3
 80079c4:	2200      	movs	r2, #0
 80079c6:	4619      	mov	r1, r3
 80079c8:	f7fc fd6a 	bl	80044a0 <xQueueReceive>
    for(i = 0; i<  modH->u8BufferSize; i++ )
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	3301      	adds	r3, #1
 80079d0:	60fb      	str	r3, [r7, #12]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80079d8:	461a      	mov	r2, r3
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4293      	cmp	r3, r2
 80079de:	dbea      	blt.n	80079b6 <getRxBuffer+0x3e>
   	}

    modH->u16InCnt++;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079e6:	3301      	adds	r3, #1
 80079e8:	b29a      	uxth	r2, r3
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c


    if (bBuffOverflow)
 80079f0:	7afb      	ldrb	r3, [r7, #11]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d00a      	beq.n	8007a0c <getRxBuffer+0x94>
    {
    	modH->u16errCnt++;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80079fc:	3301      	adds	r3, #1
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return ERR_BUFF_OVERFLOW;  //using queues this will not happen
 8007a06:	f06f 0302 	mvn.w	r3, #2
 8007a0a:	e003      	b.n	8007a14 <getRxBuffer+0x9c>
    }
    return modH->u8BufferSize;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007a12:	b25b      	sxtb	r3, r3
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3710      	adds	r7, #16
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}

08007a1c <HAL_UART_RxCpltCallback>:
 * This is the callback for HAL interrupt of UART RX
 *
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8007a1c:	b590      	push	{r4, r7, lr}
 8007a1e:	b087      	sub	sp, #28
 8007a20:	af02      	add	r7, sp, #8
 8007a22:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8007a24:	2300      	movs	r3, #0
 8007a26:	60bb      	str	r3, [r7, #8]

    int i;
    for (i = 0; i < numberHandlers; i++ )
 8007a28:	2300      	movs	r3, #0
 8007a2a:	60fb      	str	r3, [r7, #12]
 8007a2c:	e03b      	b.n	8007aa6 <HAL_UART_RxCpltCallback+0x8a>
    {
    	if (mHandlers[i]->port == UartHandle  )
 8007a2e:	4a23      	ldr	r2, [pc, #140]	; (8007abc <HAL_UART_RxCpltCallback+0xa0>)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d130      	bne.n	8007aa0 <HAL_UART_RxCpltCallback+0x84>
    	{
    		xQueueSendToBackFromISR( mHandlers[i]->QueueModbusHandle, &mHandlers[i]->dataRX, pdFALSE);
 8007a3e:	4a1f      	ldr	r2, [pc, #124]	; (8007abc <HAL_UART_RxCpltCallback+0xa0>)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a46:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8007a48:	4a1c      	ldr	r2, [pc, #112]	; (8007abc <HAL_UART_RxCpltCallback+0xa0>)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a50:	f103 0171 	add.w	r1, r3, #113	; 0x71
 8007a54:	2300      	movs	r3, #0
 8007a56:	2200      	movs	r2, #0
 8007a58:	f7fc fc8e 	bl	8004378 <xQueueGenericSendFromISR>
    		HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 8007a5c:	4a17      	ldr	r2, [pc, #92]	; (8007abc <HAL_UART_RxCpltCallback+0xa0>)
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a64:	6858      	ldr	r0, [r3, #4]
 8007a66:	4a15      	ldr	r2, [pc, #84]	; (8007abc <HAL_UART_RxCpltCallback+0xa0>)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a6e:	3371      	adds	r3, #113	; 0x71
 8007a70:	2201      	movs	r2, #1
 8007a72:	4619      	mov	r1, r3
 8007a74:	f7fb f874 	bl	8002b60 <HAL_UART_Receive_IT>
    		xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 8007a78:	4a10      	ldr	r2, [pc, #64]	; (8007abc <HAL_UART_RxCpltCallback+0xa0>)
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a80:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8007a84:	f7fd fbce 	bl	8005224 <xTaskGetTickCountFromISR>
 8007a88:	4601      	mov	r1, r0
 8007a8a:	f107 0208 	add.w	r2, r7, #8
 8007a8e:	2300      	movs	r3, #0
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	4613      	mov	r3, r2
 8007a94:	460a      	mov	r2, r1
 8007a96:	2107      	movs	r1, #7
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f7fe fb3f 	bl	800611c <xTimerGenericCommand>
    		break;
 8007a9e:	e008      	b.n	8007ab2 <HAL_UART_RxCpltCallback+0x96>
    for (i = 0; i < numberHandlers; i++ )
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	3301      	adds	r3, #1
 8007aa4:	60fb      	str	r3, [r7, #12]
 8007aa6:	4b06      	ldr	r3, [pc, #24]	; (8007ac0 <HAL_UART_RxCpltCallback+0xa4>)
 8007aa8:	781b      	ldrb	r3, [r3, #0]
 8007aaa:	461a      	mov	r2, r3
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	dbbd      	blt.n	8007a2e <HAL_UART_RxCpltCallback+0x12>
    	}
    }


}
 8007ab2:	bf00      	nop
 8007ab4:	3714      	adds	r7, #20
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd90      	pop	{r4, r7, pc}
 8007aba:	bf00      	nop
 8007abc:	20004938 	.word	0x20004938
 8007ac0:	20004934 	.word	0x20004934

08007ac4 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc
	    uint16_t u16MsgCRC =
	        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007ad2:	3b02      	subs	r3, #2
 8007ad4:	687a      	ldr	r2, [r7, #4]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	7cdb      	ldrb	r3, [r3, #19]
 8007ada:	021b      	lsls	r3, r3, #8
	         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8007adc:	b21a      	sxth	r2, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007ae4:	3b01      	subs	r3, #1
 8007ae6:	6879      	ldr	r1, [r7, #4]
 8007ae8:	440b      	add	r3, r1
 8007aea:	7cdb      	ldrb	r3, [r3, #19]
 8007aec:	b21b      	sxth	r3, r3
 8007aee:	4313      	orrs	r3, r2
 8007af0:	b21b      	sxth	r3, r3
	    uint16_t u16MsgCRC =
 8007af2:	81bb      	strh	r3, [r7, #12]
	    if ( calcCRC( modH->au8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f103 0213 	add.w	r2, r3, #19
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007b00:	3b02      	subs	r3, #2
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	4619      	mov	r1, r3
 8007b06:	4610      	mov	r0, r2
 8007b08:	f000 f8ef 	bl	8007cea <calcCRC>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	461a      	mov	r2, r3
 8007b10:	89bb      	ldrh	r3, [r7, #12]
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d009      	beq.n	8007b2a <validateRequest+0x66>
	    {
	    	modH->u16errCnt ++;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	        return NO_REPLY;
 8007b26:	23ff      	movs	r3, #255	; 0xff
 8007b28:	e0c6      	b.n	8007cb8 <validateRequest+0x1f4>
	    }

	    // check fct code
	    bool isSupported = false;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8007b2e:	2300      	movs	r3, #0
 8007b30:	73bb      	strb	r3, [r7, #14]
 8007b32:	e00c      	b.n	8007b4e <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->au8Buffer[FUNC])
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
 8007b36:	4a62      	ldr	r2, [pc, #392]	; (8007cc0 <validateRequest+0x1fc>)
 8007b38:	5cd2      	ldrb	r2, [r2, r3]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	7d1b      	ldrb	r3, [r3, #20]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d102      	bne.n	8007b48 <validateRequest+0x84>
	        {
	            isSupported = 1;
 8007b42:	2301      	movs	r3, #1
 8007b44:	73fb      	strb	r3, [r7, #15]
	            break;
 8007b46:	e005      	b.n	8007b54 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8007b48:	7bbb      	ldrb	r3, [r7, #14]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	73bb      	strb	r3, [r7, #14]
 8007b4e:	7bbb      	ldrb	r3, [r7, #14]
 8007b50:	2b07      	cmp	r3, #7
 8007b52:	d9ef      	bls.n	8007b34 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
 8007b56:	f083 0301 	eor.w	r3, r3, #1
 8007b5a:	b2db      	uxtb	r3, r3
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d009      	beq.n	8007b74 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b66:	3301      	adds	r3, #1
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	        return EXC_FUNC_CODE;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e0a1      	b.n	8007cb8 <validateRequest+0x1f4>
	    }

	    // check start address & nb range
	    uint16_t u16regs = 0;
 8007b74:	2300      	movs	r3, #0
 8007b76:	817b      	strh	r3, [r7, #10]
	    uint8_t u8regs;
	    switch ( modH->au8Buffer[ FUNC ] )
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	7d1b      	ldrb	r3, [r3, #20]
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	2b0f      	cmp	r3, #15
 8007b80:	f200 8099 	bhi.w	8007cb6 <validateRequest+0x1f2>
 8007b84:	a201      	add	r2, pc, #4	; (adr r2, 8007b8c <validateRequest+0xc8>)
 8007b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8a:	bf00      	nop
 8007b8c:	08007bcd 	.word	0x08007bcd
 8007b90:	08007bcd 	.word	0x08007bcd
 8007b94:	08007c67 	.word	0x08007c67
 8007b98:	08007c67 	.word	0x08007c67
 8007b9c:	08007c15 	.word	0x08007c15
 8007ba0:	08007c3f 	.word	0x08007c3f
 8007ba4:	08007cb7 	.word	0x08007cb7
 8007ba8:	08007cb7 	.word	0x08007cb7
 8007bac:	08007cb7 	.word	0x08007cb7
 8007bb0:	08007cb7 	.word	0x08007cb7
 8007bb4:	08007cb7 	.word	0x08007cb7
 8007bb8:	08007cb7 	.word	0x08007cb7
 8007bbc:	08007cb7 	.word	0x08007cb7
 8007bc0:	08007cb7 	.word	0x08007cb7
 8007bc4:	08007bcd 	.word	0x08007bcd
 8007bc8:	08007c67 	.word	0x08007c67
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	7d5a      	ldrb	r2, [r3, #21]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	7d9b      	ldrb	r3, [r3, #22]
 8007bd4:	4619      	mov	r1, r3
 8007bd6:	4610      	mov	r0, r2
 8007bd8:	f000 f874 	bl	8007cc4 <word>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	091b      	lsrs	r3, r3, #4
 8007be0:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]) /16;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	7dda      	ldrb	r2, [r3, #23]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	7e1b      	ldrb	r3, [r3, #24]
 8007bea:	4619      	mov	r1, r3
 8007bec:	4610      	mov	r0, r2
 8007bee:	f000 f869 	bl	8007cc4 <word>
 8007bf2:	4603      	mov	r3, r0
 8007bf4:	091b      	lsrs	r3, r3, #4
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	b29a      	uxth	r2, r3
 8007bfa:	897b      	ldrh	r3, [r7, #10]
 8007bfc:	4413      	add	r3, r2
 8007bfe:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8007c00:	897b      	ldrh	r3, [r7, #10]
 8007c02:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007c0a:	7a7a      	ldrb	r2, [r7, #9]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d94b      	bls.n	8007ca8 <validateRequest+0x1e4>
 8007c10:	2302      	movs	r3, #2
 8007c12:	e051      	b.n	8007cb8 <validateRequest+0x1f4>
	        break;
	    case MB_FC_WRITE_COIL:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	7d5a      	ldrb	r2, [r3, #21]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	7d9b      	ldrb	r3, [r3, #22]
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	4610      	mov	r0, r2
 8007c20:	f000 f850 	bl	8007cc4 <word>
 8007c24:	4603      	mov	r3, r0
 8007c26:	091b      	lsrs	r3, r3, #4
 8007c28:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8007c2a:	897b      	ldrh	r3, [r7, #10]
 8007c2c:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007c34:	7a7a      	ldrb	r2, [r7, #9]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d938      	bls.n	8007cac <validateRequest+0x1e8>
 8007c3a:	2302      	movs	r3, #2
 8007c3c:	e03c      	b.n	8007cb8 <validateRequest+0x1f4>
	        break;
	    case MB_FC_WRITE_REGISTER :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	7d5a      	ldrb	r2, [r3, #21]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	7d9b      	ldrb	r3, [r3, #22]
 8007c46:	4619      	mov	r1, r3
 8007c48:	4610      	mov	r0, r2
 8007c4a:	f000 f83b 	bl	8007cc4 <word>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8007c52:	897b      	ldrh	r3, [r7, #10]
 8007c54:	727b      	strb	r3, [r7, #9]
	        if (u8regs >modH-> u8regsize) return EXC_ADDR_RANGE;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007c5c:	7a7a      	ldrb	r2, [r7, #9]
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d926      	bls.n	8007cb0 <validateRequest+0x1ec>
 8007c62:	2302      	movs	r3, #2
 8007c64:	e028      	b.n	8007cb8 <validateRequest+0x1f4>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	7d5a      	ldrb	r2, [r3, #21]
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	7d9b      	ldrb	r3, [r3, #22]
 8007c6e:	4619      	mov	r1, r3
 8007c70:	4610      	mov	r0, r2
 8007c72:	f000 f827 	bl	8007cc4 <word>
 8007c76:	4603      	mov	r3, r0
 8007c78:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	7dda      	ldrb	r2, [r3, #23]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	7e1b      	ldrb	r3, [r3, #24]
 8007c82:	4619      	mov	r1, r3
 8007c84:	4610      	mov	r0, r2
 8007c86:	f000 f81d 	bl	8007cc4 <word>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	461a      	mov	r2, r3
 8007c8e:	897b      	ldrh	r3, [r7, #10]
 8007c90:	4413      	add	r3, r2
 8007c92:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8007c94:	897b      	ldrh	r3, [r7, #10]
 8007c96:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8007c9e:	7a7a      	ldrb	r2, [r7, #9]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d907      	bls.n	8007cb4 <validateRequest+0x1f0>
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	e007      	b.n	8007cb8 <validateRequest+0x1f4>
	        break;
 8007ca8:	bf00      	nop
 8007caa:	e004      	b.n	8007cb6 <validateRequest+0x1f2>
	        break;
 8007cac:	bf00      	nop
 8007cae:	e002      	b.n	8007cb6 <validateRequest+0x1f2>
	        break;
 8007cb0:	bf00      	nop
 8007cb2:	e000      	b.n	8007cb6 <validateRequest+0x1f2>
	        break;
 8007cb4:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 8007cb6:	2300      	movs	r3, #0

}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	08008628 	.word	0x08008628

08007cc4 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	460a      	mov	r2, r1
 8007cce:	71fb      	strb	r3, [r7, #7]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8007cd4:	79bb      	ldrb	r3, [r7, #6]
 8007cd6:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 8007cd8:	79fb      	ldrb	r3, [r7, #7]
 8007cda:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8007cdc:	89bb      	ldrh	r3, [r7, #12]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b087      	sub	sp, #28
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
 8007cf2:	460b      	mov	r3, r1
 8007cf4:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 8007cf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007cfa:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	74fb      	strb	r3, [r7, #19]
 8007d00:	e023      	b.n	8007d4a <calcCRC+0x60>
    {
        temp = temp ^ Buffer[i];
 8007d02:	7cfb      	ldrb	r3, [r7, #19]
 8007d04:	687a      	ldr	r2, [r7, #4]
 8007d06:	4413      	add	r3, r2
 8007d08:	781b      	ldrb	r3, [r3, #0]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	4053      	eors	r3, r2
 8007d10:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8007d12:	2301      	movs	r3, #1
 8007d14:	74bb      	strb	r3, [r7, #18]
 8007d16:	e012      	b.n	8007d3e <calcCRC+0x54>
        {
            flag = temp & 0x0001;
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	f003 0301 	and.w	r3, r3, #1
 8007d1e:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	085b      	lsrs	r3, r3, #1
 8007d24:	617b      	str	r3, [r7, #20]
            if (flag)
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d005      	beq.n	8007d38 <calcCRC+0x4e>
                temp ^= 0xA001;
 8007d2c:	697b      	ldr	r3, [r7, #20]
 8007d2e:	f483 4320 	eor.w	r3, r3, #40960	; 0xa000
 8007d32:	f083 0301 	eor.w	r3, r3, #1
 8007d36:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 8007d38:	7cbb      	ldrb	r3, [r7, #18]
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	74bb      	strb	r3, [r7, #18]
 8007d3e:	7cbb      	ldrb	r3, [r7, #18]
 8007d40:	2b08      	cmp	r3, #8
 8007d42:	d9e9      	bls.n	8007d18 <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 8007d44:	7cfb      	ldrb	r3, [r7, #19]
 8007d46:	3301      	adds	r3, #1
 8007d48:	74fb      	strb	r3, [r7, #19]
 8007d4a:	7cfa      	ldrb	r2, [r7, #19]
 8007d4c:	78fb      	ldrb	r3, [r7, #3]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d3d7      	bcc.n	8007d02 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	0a1b      	lsrs	r3, r3, #8
 8007d56:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	021b      	lsls	r3, r3, #8
 8007d5c:	68fa      	ldr	r2, [r7, #12]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	b29b      	uxth	r3, r3

}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	371c      	adds	r7, #28
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	4603      	mov	r3, r0
 8007d80:	6039      	str	r1, [r7, #0]
 8007d82:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->au8Buffer[ FUNC ];  // get the original FUNC code
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	7d1b      	ldrb	r3, [r3, #20]
 8007d88:	73fb      	strb	r3, [r7, #15]

    modH->au8Buffer[ ID ]      = modH->u8id;
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	7a1a      	ldrb	r2, [r3, #8]
 8007d8e:	683b      	ldr	r3, [r7, #0]
 8007d90:	74da      	strb	r2, [r3, #19]
    modH->au8Buffer[ FUNC ]    = u8func + 0x80;
 8007d92:	7bfb      	ldrb	r3, [r7, #15]
 8007d94:	3b80      	subs	r3, #128	; 0x80
 8007d96:	b2da      	uxtb	r2, r3
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	751a      	strb	r2, [r3, #20]
    modH->au8Buffer[ 2 ]       = u8exception;
 8007d9c:	683b      	ldr	r3, [r7, #0]
 8007d9e:	79fa      	ldrb	r2, [r7, #7]
 8007da0:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	2203      	movs	r2, #3
 8007da6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 8007daa:	bf00      	nop
 8007dac:	3714      	adds	r7, #20
 8007dae:	46bd      	mov	sp, r7
 8007db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db4:	4770      	bx	lr
	...

08007db8 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
void sendTxBuffer(modbusHandler_t *modH)
{
 8007db8:	b590      	push	{r4, r7, lr}
 8007dba:	b087      	sub	sp, #28
 8007dbc:	af02      	add	r7, sp, #8
 8007dbe:	6078      	str	r0, [r7, #4]
    // append CRC to message
    uint16_t u16crc = calcCRC(modH->au8Buffer, modH->u8BufferSize);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f103 0213 	add.w	r2, r3, #19
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007dcc:	4619      	mov	r1, r3
 8007dce:	4610      	mov	r0, r2
 8007dd0:	f7ff ff8b 	bl	8007cea <calcCRC>
 8007dd4:	4603      	mov	r3, r0
 8007dd6:	81fb      	strh	r3, [r7, #14]
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8007dd8:	89fb      	ldrh	r3, [r7, #14]
 8007dda:	0a1b      	lsrs	r3, r3, #8
 8007ddc:	b29a      	uxth	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007de4:	4619      	mov	r1, r3
 8007de6:	b2d2      	uxtb	r2, r2
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	440b      	add	r3, r1
 8007dec:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007df4:	3301      	adds	r3, #1
 8007df6:	b2da      	uxtb	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007e04:	4619      	mov	r1, r3
 8007e06:	89fb      	ldrh	r3, [r7, #14]
 8007e08:	b2da      	uxtb	r2, r3
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	440b      	add	r3, r1
 8007e0e:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007e16:	3301      	adds	r3, #1
 8007e18:	b2da      	uxtb	r2, r3
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    if (modH->EN_Port != NULL)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d007      	beq.n	8007e38 <sendTxBuffer+0x80>
    {
        // set RS485 transceiver to transmit mode
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	68d8      	ldr	r0, [r3, #12]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	8a1b      	ldrh	r3, [r3, #16]
 8007e30:	2201      	movs	r2, #1
 8007e32:	4619      	mov	r1, r3
 8007e34:	f7f9 ff16 	bl	8001c64 <HAL_GPIO_WritePin>
    }

    // transfer buffer to serial line
    //port->write( au8Buffer, u8BufferSize );
    //HAL_UART_Transmit(modH->port, modH->au8Buffer , modH->u8BufferSize, 100);
    HAL_UART_Transmit_IT(modH->port, modH->au8Buffer,  modH->u8BufferSize);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6858      	ldr	r0, [r3, #4]
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f103 0113 	add.w	r1, r3, #19
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	f7fa fe43 	bl	8002ad6 <HAL_UART_Transmit_IT>

    ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //wait notification from TXE interrupt
 8007e50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007e54:	2001      	movs	r0, #1
 8007e56:	f7fd fe95 	bl	8005b84 <ulTaskNotifyTake>


     if (modH->EN_Port != NULL)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d018      	beq.n	8007e94 <sendTxBuffer+0xdc>
     {
         // must wait transmission end before changing pin state
         //return RS485 transceiver to receive mode

    	 while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8007e62:	e007      	b.n	8007e74 <sendTxBuffer+0xbc>
    	 {
    		taskYIELD();
 8007e64:	4b1f      	ldr	r3, [pc, #124]	; (8007ee4 <sendTxBuffer+0x12c>)
 8007e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007e6a:	601a      	str	r2, [r3, #0]
 8007e6c:	f3bf 8f4f 	dsb	sy
 8007e70:	f3bf 8f6f 	isb	sy
    	 while((modH->port->Instance->SR & USART_SR_TC) ==0 )
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d0ef      	beq.n	8007e64 <sendTxBuffer+0xac>
    	 }
    	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	68d8      	ldr	r0, [r3, #12]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	8a1b      	ldrh	r3, [r3, #16]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	4619      	mov	r1, r3
 8007e90:	f7f9 fee8 	bl	8001c64 <HAL_GPIO_WritePin>
     }

     xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e98:	2100      	movs	r1, #0
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fb ffce 	bl	8003e3c <xQueueGenericReset>

     modH->u8BufferSize = 0;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

     // set timeout for master query
     if(modH->uiModbusType == MASTER_RTU )
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	2b04      	cmp	r3, #4
 8007eae:	d10c      	bne.n	8007eca <sendTxBuffer+0x112>
     {
 		xTimerReset(modH->xTimerTimeout,0);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007eb6:	f7fd f9a5 	bl	8005204 <xTaskGetTickCount>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	9300      	str	r3, [sp, #0]
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	2102      	movs	r1, #2
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	f7fe f929 	bl	800611c <xTimerGenericCommand>
     }

     // increase message counter
     modH->u16OutCnt++;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007ed0:	3301      	adds	r3, #1
 8007ed2:	b29a      	uxth	r2, r3
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

}
 8007eda:	bf00      	nop
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd90      	pop	{r4, r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	e000ed04 	.word	0xe000ed04

08007ee8 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	7d5a      	ldrb	r2, [r3, #21]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	7d9b      	ldrb	r3, [r3, #22]
 8007ef8:	4619      	mov	r1, r3
 8007efa:	4610      	mov	r0, r2
 8007efc:	f7ff fee2 	bl	8007cc4 <word>
 8007f00:	4603      	mov	r3, r0
 8007f02:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	7dda      	ldrb	r2, [r3, #23]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	7e1b      	ldrb	r3, [r3, #24]
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	4610      	mov	r0, r2
 8007f10:	f7ff fed8 	bl	8007cc4 <word>
 8007f14:	4603      	mov	r3, r0
 8007f16:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 8007f18:	8a3b      	ldrh	r3, [r7, #16]
 8007f1a:	08db      	lsrs	r3, r3, #3
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 8007f20:	8a3b      	ldrh	r3, [r7, #16]
 8007f22:	f003 0307 	and.w	r3, r3, #7
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d002      	beq.n	8007f32 <process_FC1+0x4a>
 8007f2c:	7dfb      	ldrb	r3, [r7, #23]
 8007f2e:	3301      	adds	r3, #1
 8007f30:	75fb      	strb	r3, [r7, #23]
    modH->au8Buffer[ ADD_HI ]  = u8bytesno;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	7dfa      	ldrb	r2, [r7, #23]
 8007f36:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2203      	movs	r2, #3
 8007f3c:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    modH->au8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007f46:	461a      	mov	r2, r3
 8007f48:	7dfb      	ldrb	r3, [r7, #23]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	4413      	add	r3, r2
 8007f52:	2200      	movs	r2, #0
 8007f54:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8007f56:	2300      	movs	r3, #0
 8007f58:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	82bb      	strh	r3, [r7, #20]
 8007f5e:	e058      	b.n	8008012 <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 8007f60:	8a7a      	ldrh	r2, [r7, #18]
 8007f62:	8abb      	ldrh	r3, [r7, #20]
 8007f64:	4413      	add	r3, r2
 8007f66:	81bb      	strh	r3, [r7, #12]
        u8currentRegister = (uint8_t) (u16coil / 16);
 8007f68:	89bb      	ldrh	r3, [r7, #12]
 8007f6a:	091b      	lsrs	r3, r3, #4
 8007f6c:	b29b      	uxth	r3, r3
 8007f6e:	72fb      	strb	r3, [r7, #11]
        u8currentBit = (uint8_t) (u16coil % 16);
 8007f70:	89bb      	ldrh	r3, [r7, #12]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	f003 030f 	and.w	r3, r3, #15
 8007f78:	72bb      	strb	r3, [r7, #10]

        bitWrite(
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f7e:	7afb      	ldrb	r3, [r7, #11]
 8007f80:	005b      	lsls	r3, r3, #1
 8007f82:	4413      	add	r3, r2
 8007f84:	881b      	ldrh	r3, [r3, #0]
 8007f86:	461a      	mov	r2, r3
 8007f88:	7abb      	ldrb	r3, [r7, #10]
 8007f8a:	fa42 f303 	asr.w	r3, r2, r3
 8007f8e:	f003 0301 	and.w	r3, r3, #1
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d014      	beq.n	8007fc0 <process_FC1+0xd8>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	7cda      	ldrb	r2, [r3, #19]
 8007fa4:	7dbb      	ldrb	r3, [r7, #22]
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fac:	b2db      	uxtb	r3, r3
 8007fae:	6879      	ldr	r1, [r7, #4]
 8007fb0:	f891 1053 	ldrb.w	r1, [r1, #83]	; 0x53
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	440b      	add	r3, r1
 8007fbc:	74da      	strb	r2, [r3, #19]
 8007fbe:	e015      	b.n	8007fec <process_FC1+0x104>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8007fc6:	461a      	mov	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4413      	add	r3, r2
 8007fcc:	7cda      	ldrb	r2, [r3, #19]
 8007fce:	7dbb      	ldrb	r3, [r7, #22]
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	43db      	mvns	r3, r3
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	6879      	ldr	r1, [r7, #4]
 8007fde:	f891 1053 	ldrb.w	r1, [r1, #83]	; 0x53
 8007fe2:	4013      	ands	r3, r2
 8007fe4:	b2da      	uxtb	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	440b      	add	r3, r1
 8007fea:	74da      	strb	r2, [r3, #19]
        	modH->au8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->au16regs[ u8currentRegister ], u8currentBit ) );
        u8bitsno ++;
 8007fec:	7dbb      	ldrb	r3, [r7, #22]
 8007fee:	3301      	adds	r3, #1
 8007ff0:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8007ff2:	7dbb      	ldrb	r3, [r7, #22]
 8007ff4:	2b07      	cmp	r3, #7
 8007ff6:	d909      	bls.n	800800c <process_FC1+0x124>
        {
            u8bitsno = 0;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8008002:	3301      	adds	r3, #1
 8008004:	b2da      	uxtb	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800800c:	8abb      	ldrh	r3, [r7, #20]
 800800e:	3301      	adds	r3, #1
 8008010:	82bb      	strh	r3, [r7, #20]
 8008012:	8aba      	ldrh	r2, [r7, #20]
 8008014:	8a3b      	ldrh	r3, [r7, #16]
 8008016:	429a      	cmp	r2, r3
 8008018:	d3a2      	bcc.n	8007f60 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 800801a:	8a3b      	ldrh	r3, [r7, #16]
 800801c:	f003 0307 	and.w	r3, r3, #7
 8008020:	b29b      	uxth	r3, r3
 8008022:	2b00      	cmp	r3, #0
 8008024:	d007      	beq.n	8008036 <process_FC1+0x14e>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800802c:	3301      	adds	r3, #1
 800802e:	b2da      	uxtb	r2, r3
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize = modH->u8BufferSize +2;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800803c:	3302      	adds	r3, #2
 800803e:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7ff feb9 	bl	8007db8 <sendTxBuffer>
    return u8CopyBufferSize;
 8008046:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b084      	sub	sp, #16
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]

    uint8_t u8StartAdd = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	7d5a      	ldrb	r2, [r3, #21]
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	7d9b      	ldrb	r3, [r3, #22]
 8008062:	4619      	mov	r1, r3
 8008064:	4610      	mov	r0, r2
 8008066:	f7ff fe2d 	bl	8007cc4 <word>
 800806a:	4603      	mov	r3, r0
 800806c:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	7dda      	ldrb	r2, [r3, #23]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	7e1b      	ldrb	r3, [r3, #24]
 8008076:	4619      	mov	r1, r3
 8008078:	4610      	mov	r0, r2
 800807a:	f7ff fe23 	bl	8007cc4 <word>
 800807e:	4603      	mov	r3, r0
 8008080:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;

    modH->au8Buffer[ 2 ]       = u8regsno * 2;
 8008082:	7b7b      	ldrb	r3, [r7, #13]
 8008084:	005b      	lsls	r3, r3, #1
 8008086:	b2da      	uxtb	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2203      	movs	r2, #3
 8008090:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8008094:	7bbb      	ldrb	r3, [r7, #14]
 8008096:	73fb      	strb	r3, [r7, #15]
 8008098:	e030      	b.n	80080fc <process_FC3+0xaa>
    {
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800809e:	7bfb      	ldrb	r3, [r7, #15]
 80080a0:	005b      	lsls	r3, r3, #1
 80080a2:	4413      	add	r3, r2
 80080a4:	881b      	ldrh	r3, [r3, #0]
 80080a6:	0a1b      	lsrs	r3, r3, #8
 80080a8:	b29a      	uxth	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80080b0:	4619      	mov	r1, r3
 80080b2:	b2d2      	uxtb	r2, r2
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	440b      	add	r3, r1
 80080b8:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80080c0:	3301      	adds	r3, #1
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    	modH->au8Buffer[ modH->u8BufferSize ] = lowByte(modH->au16regs[i]);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080ce:	7bfb      	ldrb	r3, [r7, #15]
 80080d0:	005b      	lsls	r3, r3, #1
 80080d2:	4413      	add	r3, r2
 80080d4:	881a      	ldrh	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80080dc:	4619      	mov	r1, r3
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	440b      	add	r3, r1
 80080e4:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80080ec:	3301      	adds	r3, #1
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 80080f6:	7bfb      	ldrb	r3, [r7, #15]
 80080f8:	3301      	adds	r3, #1
 80080fa:	73fb      	strb	r3, [r7, #15]
 80080fc:	7bfa      	ldrb	r2, [r7, #15]
 80080fe:	7bb9      	ldrb	r1, [r7, #14]
 8008100:	7b7b      	ldrb	r3, [r7, #13]
 8008102:	440b      	add	r3, r1
 8008104:	429a      	cmp	r2, r3
 8008106:	dbc8      	blt.n	800809a <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800810e:	3302      	adds	r3, #2
 8008110:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f7ff fe50 	bl	8007db8 <sendTxBuffer>

    return u8CopyBufferSize;
 8008118:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 800811c:	4618      	mov	r0, r3
 800811e:	3710      	adds	r7, #16
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}

08008124 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	7d5a      	ldrb	r2, [r3, #21]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	7d9b      	ldrb	r3, [r3, #22]
 8008134:	4619      	mov	r1, r3
 8008136:	4610      	mov	r0, r2
 8008138:	f7ff fdc4 	bl	8007cc4 <word>
 800813c:	4603      	mov	r3, r0
 800813e:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u8currentRegister = (uint8_t) (u16coil / 16);
 8008140:	89fb      	ldrh	r3, [r7, #14]
 8008142:	091b      	lsrs	r3, r3, #4
 8008144:	b29b      	uxth	r3, r3
 8008146:	737b      	strb	r3, [r7, #13]
    u8currentBit = (uint8_t) (u16coil % 16);
 8008148:	89fb      	ldrh	r3, [r7, #14]
 800814a:	b2db      	uxtb	r3, r3
 800814c:	f003 030f 	and.w	r3, r3, #15
 8008150:	733b      	strb	r3, [r7, #12]

    // write to coil
    bitWrite(
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	7ddb      	ldrb	r3, [r3, #23]
 8008156:	2bff      	cmp	r3, #255	; 0xff
 8008158:	d113      	bne.n	8008182 <process_FC5+0x5e>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800815e:	7b7b      	ldrb	r3, [r7, #13]
 8008160:	005b      	lsls	r3, r3, #1
 8008162:	4413      	add	r3, r2
 8008164:	8819      	ldrh	r1, [r3, #0]
 8008166:	7b3b      	ldrb	r3, [r7, #12]
 8008168:	2201      	movs	r2, #1
 800816a:	fa02 f303 	lsl.w	r3, r2, r3
 800816e:	b29a      	uxth	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8008174:	7b7b      	ldrb	r3, [r7, #13]
 8008176:	005b      	lsls	r3, r3, #1
 8008178:	4403      	add	r3, r0
 800817a:	430a      	orrs	r2, r1
 800817c:	b292      	uxth	r2, r2
 800817e:	801a      	strh	r2, [r3, #0]
 8008180:	e014      	b.n	80081ac <process_FC5+0x88>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008186:	7b7b      	ldrb	r3, [r7, #13]
 8008188:	005b      	lsls	r3, r3, #1
 800818a:	4413      	add	r3, r2
 800818c:	8819      	ldrh	r1, [r3, #0]
 800818e:	7b3b      	ldrb	r3, [r7, #12]
 8008190:	2201      	movs	r2, #1
 8008192:	fa02 f303 	lsl.w	r3, r2, r3
 8008196:	b29b      	uxth	r3, r3
 8008198:	43db      	mvns	r3, r3
 800819a:	b29a      	uxth	r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80081a0:	7b7b      	ldrb	r3, [r7, #13]
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	4403      	add	r3, r0
 80081a6:	400a      	ands	r2, r1
 80081a8:	b292      	uxth	r2, r2
 80081aa:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->au8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2206      	movs	r2, #6
 80081b0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize =  modH->u8BufferSize +2;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80081ba:	3302      	adds	r3, #2
 80081bc:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7ff fdfa 	bl	8007db8 <sendTxBuffer>

    return u8CopyBufferSize;
 80081c4:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	3710      	adds	r7, #16
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b084      	sub	sp, #16
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]

    uint8_t u8add = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	7d5a      	ldrb	r2, [r3, #21]
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	7d9b      	ldrb	r3, [r3, #22]
 80081e0:	4619      	mov	r1, r3
 80081e2:	4610      	mov	r0, r2
 80081e4:	f7ff fd6e 	bl	8007cc4 <word>
 80081e8:	4603      	mov	r3, r0
 80081ea:	73fb      	strb	r3, [r7, #15]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	7dda      	ldrb	r2, [r3, #23]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	7e1b      	ldrb	r3, [r3, #24]
 80081f4:	4619      	mov	r1, r3
 80081f6:	4610      	mov	r0, r2
 80081f8:	f7ff fd64 	bl	8007cc4 <word>
 80081fc:	4603      	mov	r3, r0
 80081fe:	81bb      	strh	r3, [r7, #12]

    modH->au16regs[ u8add ] = u16val;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008204:	7bfb      	ldrb	r3, [r7, #15]
 8008206:	005b      	lsls	r3, r3, #1
 8008208:	4413      	add	r3, r2
 800820a:	89ba      	ldrh	r2, [r7, #12]
 800820c:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2206      	movs	r2, #6
 8008212:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    u8CopyBufferSize = modH->u8BufferSize +2;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800821c:	3302      	adds	r3, #2
 800821e:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f7ff fdc9 	bl	8007db8 <sendTxBuffer>

    return u8CopyBufferSize;
 8008226:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800822a:	4618      	mov	r0, r3
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 8008232:	b580      	push	{r7, lr}
 8008234:	b086      	sub	sp, #24
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	7d5a      	ldrb	r2, [r3, #21]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	7d9b      	ldrb	r3, [r3, #22]
 8008242:	4619      	mov	r1, r3
 8008244:	4610      	mov	r0, r2
 8008246:	f7ff fd3d 	bl	8007cc4 <word>
 800824a:	4603      	mov	r3, r0
 800824c:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	7dda      	ldrb	r2, [r3, #23]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	7e1b      	ldrb	r3, [r3, #24]
 8008256:	4619      	mov	r1, r3
 8008258:	4610      	mov	r0, r2
 800825a:	f7ff fd33 	bl	8007cc4 <word>
 800825e:	4603      	mov	r3, r0
 8008260:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 8008262:	2300      	movs	r3, #0
 8008264:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 8008266:	2307      	movs	r3, #7
 8008268:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800826a:	2300      	movs	r3, #0
 800826c:	82bb      	strh	r3, [r7, #20]
 800826e:	e055      	b.n	800831c <process_FC15+0xea>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8008270:	8a7a      	ldrh	r2, [r7, #18]
 8008272:	8abb      	ldrh	r3, [r7, #20]
 8008274:	4413      	add	r3, r2
 8008276:	81bb      	strh	r3, [r7, #12]
        u8currentRegister = (uint8_t) (u16coil / 16);
 8008278:	89bb      	ldrh	r3, [r7, #12]
 800827a:	091b      	lsrs	r3, r3, #4
 800827c:	b29b      	uxth	r3, r3
 800827e:	72fb      	strb	r3, [r7, #11]
        u8currentBit = (uint8_t) (u16coil % 16);
 8008280:	89bb      	ldrh	r3, [r7, #12]
 8008282:	b2db      	uxtb	r3, r3
 8008284:	f003 030f 	and.w	r3, r3, #15
 8008288:	72bb      	strb	r3, [r7, #10]

        bTemp = bitRead(
 800828a:	7dfb      	ldrb	r3, [r7, #23]
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	4413      	add	r3, r2
 8008290:	7cdb      	ldrb	r3, [r3, #19]
 8008292:	461a      	mov	r2, r3
 8008294:	7dbb      	ldrb	r3, [r7, #22]
 8008296:	fa42 f303 	asr.w	r3, r2, r3
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	bf14      	ite	ne
 80082a2:	2301      	movne	r3, #1
 80082a4:	2300      	moveq	r3, #0
 80082a6:	727b      	strb	r3, [r7, #9]
        			modH->au8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 80082a8:	7a7b      	ldrb	r3, [r7, #9]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d013      	beq.n	80082d6 <process_FC15+0xa4>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082b2:	7afb      	ldrb	r3, [r7, #11]
 80082b4:	005b      	lsls	r3, r3, #1
 80082b6:	4413      	add	r3, r2
 80082b8:	8819      	ldrh	r1, [r3, #0]
 80082ba:	7abb      	ldrb	r3, [r7, #10]
 80082bc:	2201      	movs	r2, #1
 80082be:	fa02 f303 	lsl.w	r3, r2, r3
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80082c8:	7afb      	ldrb	r3, [r7, #11]
 80082ca:	005b      	lsls	r3, r3, #1
 80082cc:	4403      	add	r3, r0
 80082ce:	430a      	orrs	r2, r1
 80082d0:	b292      	uxth	r2, r2
 80082d2:	801a      	strh	r2, [r3, #0]
 80082d4:	e014      	b.n	8008300 <process_FC15+0xce>
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082da:	7afb      	ldrb	r3, [r7, #11]
 80082dc:	005b      	lsls	r3, r3, #1
 80082de:	4413      	add	r3, r2
 80082e0:	8819      	ldrh	r1, [r3, #0]
 80082e2:	7abb      	ldrb	r3, [r7, #10]
 80082e4:	2201      	movs	r2, #1
 80082e6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	43db      	mvns	r3, r3
 80082ee:	b29a      	uxth	r2, r3
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80082f4:	7afb      	ldrb	r3, [r7, #11]
 80082f6:	005b      	lsls	r3, r3, #1
 80082f8:	4403      	add	r3, r0
 80082fa:	400a      	ands	r2, r1
 80082fc:	b292      	uxth	r2, r2
 80082fe:	801a      	strh	r2, [r3, #0]
            modH->au16regs[ u8currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8008300:	7dbb      	ldrb	r3, [r7, #22]
 8008302:	3301      	adds	r3, #1
 8008304:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8008306:	7dbb      	ldrb	r3, [r7, #22]
 8008308:	2b07      	cmp	r3, #7
 800830a:	d904      	bls.n	8008316 <process_FC15+0xe4>
        {
            u8bitsno = 0;
 800830c:	2300      	movs	r3, #0
 800830e:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 8008310:	7dfb      	ldrb	r3, [r7, #23]
 8008312:	3301      	adds	r3, #1
 8008314:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 8008316:	8abb      	ldrh	r3, [r7, #20]
 8008318:	3301      	adds	r3, #1
 800831a:	82bb      	strh	r3, [r7, #20]
 800831c:	8aba      	ldrh	r2, [r7, #20]
 800831e:	8a3b      	ldrh	r3, [r7, #16]
 8008320:	429a      	cmp	r2, r3
 8008322:	d3a5      	bcc.n	8008270 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2206      	movs	r2, #6
 8008328:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize = modH->u8BufferSize +2;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8008332:	3302      	adds	r3, #2
 8008334:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f7ff fd3e 	bl	8007db8 <sendTxBuffer>
    return u8CopyBufferSize;
 800833c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008340:	4618      	mov	r0, r3
 8008342:	3718      	adds	r7, #24
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
    uint8_t u8StartAdd = modH->au8Buffer[ ADD_HI ] << 8 | modH->au8Buffer[ ADD_LO ];
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	7d5b      	ldrb	r3, [r3, #21]
 8008354:	021b      	lsls	r3, r3, #8
 8008356:	b25a      	sxtb	r2, r3
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	7d9b      	ldrb	r3, [r3, #22]
 800835c:	b25b      	sxtb	r3, r3
 800835e:	4313      	orrs	r3, r2
 8008360:	b25b      	sxtb	r3, r3
 8008362:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = modH->au8Buffer[ NB_HI ] << 8 | modH->au8Buffer[ NB_LO ];
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	7ddb      	ldrb	r3, [r3, #23]
 8008368:	021b      	lsls	r3, r3, #8
 800836a:	b25a      	sxtb	r2, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	7e1b      	ldrb	r3, [r3, #24]
 8008370:	b25b      	sxtb	r3, r3
 8008372:	4313      	orrs	r3, r2
 8008374:	b25b      	sxtb	r3, r3
 8008376:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;
    uint16_t temp;

    // build header
    modH->au8Buffer[ NB_HI ]   = 0;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2200      	movs	r2, #0
 800837c:	75da      	strb	r2, [r3, #23]
    modH->au8Buffer[ NB_LO ]   = u8regsno;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	7b7a      	ldrb	r2, [r7, #13]
 8008382:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2206      	movs	r2, #6
 8008388:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    // write registers
    for (i = 0; i < u8regsno; i++)
 800838c:	2300      	movs	r3, #0
 800838e:	73fb      	strb	r3, [r7, #15]
 8008390:	e01c      	b.n	80083cc <process_FC16+0x84>
    {
        temp = word(
        		modH->au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8008392:	7bfb      	ldrb	r3, [r7, #15]
 8008394:	005b      	lsls	r3, r3, #1
 8008396:	3307      	adds	r3, #7
        temp = word(
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	4413      	add	r3, r2
 800839c:	7cd8      	ldrb	r0, [r3, #19]
				modH->au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 800839e:	7bfb      	ldrb	r3, [r7, #15]
 80083a0:	3304      	adds	r3, #4
 80083a2:	005b      	lsls	r3, r3, #1
        temp = word(
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	4413      	add	r3, r2
 80083a8:	7cdb      	ldrb	r3, [r3, #19]
 80083aa:	4619      	mov	r1, r3
 80083ac:	f7ff fc8a 	bl	8007cc4 <word>
 80083b0:	4603      	mov	r3, r0
 80083b2:	817b      	strh	r3, [r7, #10]

        modH->au16regs[ u8StartAdd + i ] = temp;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80083b8:	7bb9      	ldrb	r1, [r7, #14]
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
 80083bc:	440b      	add	r3, r1
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	4413      	add	r3, r2
 80083c2:	897a      	ldrh	r2, [r7, #10]
 80083c4:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u8regsno; i++)
 80083c6:	7bfb      	ldrb	r3, [r7, #15]
 80083c8:	3301      	adds	r3, #1
 80083ca:	73fb      	strb	r3, [r7, #15]
 80083cc:	7bfa      	ldrb	r2, [r7, #15]
 80083ce:	7b7b      	ldrb	r3, [r7, #13]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d3de      	bcc.n	8008392 <process_FC16+0x4a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80083da:	3302      	adds	r3, #2
 80083dc:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 80083de:	6878      	ldr	r0, [r7, #4]
 80083e0:	f7ff fcea 	bl	8007db8 <sendTxBuffer>

    return u8CopyBufferSize;
 80083e4:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3710      	adds	r7, #16
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b086      	sub	sp, #24
 80083f4:	af02      	add	r7, sp, #8
 80083f6:	6078      	str	r0, [r7, #4]
	/* Modbus RTU callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80083f8:	2300      	movs	r3, #0
 80083fa:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 80083fc:	2300      	movs	r3, #0
 80083fe:	60fb      	str	r3, [r7, #12]
 8008400:	e018      	b.n	8008434 <HAL_UART_TxCpltCallback+0x44>
	{
	   	if (mHandlers[i]->port == huart )
 8008402:	4a11      	ldr	r2, [pc, #68]	; (8008448 <HAL_UART_TxCpltCallback+0x58>)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	429a      	cmp	r2, r3
 8008410:	d10d      	bne.n	800842e <HAL_UART_TxCpltCallback+0x3e>
	   	{
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8008412:	4a0d      	ldr	r2, [pc, #52]	; (8008448 <HAL_UART_TxCpltCallback+0x58>)
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800841a:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800841c:	f107 0308 	add.w	r3, r7, #8
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	2300      	movs	r3, #0
 8008424:	2200      	movs	r2, #0
 8008426:	2100      	movs	r1, #0
 8008428:	f7fd fca8 	bl	8005d7c <xTaskGenericNotifyFromISR>
	   		break;
 800842c:	e008      	b.n	8008440 <HAL_UART_TxCpltCallback+0x50>
	for (i = 0; i < numberHandlers; i++ )
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	3301      	adds	r3, #1
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	4b05      	ldr	r3, [pc, #20]	; (800844c <HAL_UART_TxCpltCallback+0x5c>)
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	461a      	mov	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	4293      	cmp	r3, r2
 800843e:	dbe0      	blt.n	8008402 <HAL_UART_TxCpltCallback+0x12>
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8008440:	bf00      	nop
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	20004938 	.word	0x20004938
 800844c:	20004934 	.word	0x20004934

08008450 <__libc_init_array>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	4e0d      	ldr	r6, [pc, #52]	; (8008488 <__libc_init_array+0x38>)
 8008454:	4c0d      	ldr	r4, [pc, #52]	; (800848c <__libc_init_array+0x3c>)
 8008456:	1ba4      	subs	r4, r4, r6
 8008458:	10a4      	asrs	r4, r4, #2
 800845a:	2500      	movs	r5, #0
 800845c:	42a5      	cmp	r5, r4
 800845e:	d109      	bne.n	8008474 <__libc_init_array+0x24>
 8008460:	4e0b      	ldr	r6, [pc, #44]	; (8008490 <__libc_init_array+0x40>)
 8008462:	4c0c      	ldr	r4, [pc, #48]	; (8008494 <__libc_init_array+0x44>)
 8008464:	f000 f82c 	bl	80084c0 <_init>
 8008468:	1ba4      	subs	r4, r4, r6
 800846a:	10a4      	asrs	r4, r4, #2
 800846c:	2500      	movs	r5, #0
 800846e:	42a5      	cmp	r5, r4
 8008470:	d105      	bne.n	800847e <__libc_init_array+0x2e>
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008478:	4798      	blx	r3
 800847a:	3501      	adds	r5, #1
 800847c:	e7ee      	b.n	800845c <__libc_init_array+0xc>
 800847e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008482:	4798      	blx	r3
 8008484:	3501      	adds	r5, #1
 8008486:	e7f2      	b.n	800846e <__libc_init_array+0x1e>
 8008488:	08008638 	.word	0x08008638
 800848c:	08008638 	.word	0x08008638
 8008490:	08008638 	.word	0x08008638
 8008494:	0800863c 	.word	0x0800863c

08008498 <memcpy>:
 8008498:	b510      	push	{r4, lr}
 800849a:	1e43      	subs	r3, r0, #1
 800849c:	440a      	add	r2, r1
 800849e:	4291      	cmp	r1, r2
 80084a0:	d100      	bne.n	80084a4 <memcpy+0xc>
 80084a2:	bd10      	pop	{r4, pc}
 80084a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ac:	e7f7      	b.n	800849e <memcpy+0x6>

080084ae <memset>:
 80084ae:	4402      	add	r2, r0
 80084b0:	4603      	mov	r3, r0
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d100      	bne.n	80084b8 <memset+0xa>
 80084b6:	4770      	bx	lr
 80084b8:	f803 1b01 	strb.w	r1, [r3], #1
 80084bc:	e7f9      	b.n	80084b2 <memset+0x4>
	...

080084c0 <_init>:
 80084c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c2:	bf00      	nop
 80084c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084c6:	bc08      	pop	{r3}
 80084c8:	469e      	mov	lr, r3
 80084ca:	4770      	bx	lr

080084cc <_fini>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	bf00      	nop
 80084d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d2:	bc08      	pop	{r3}
 80084d4:	469e      	mov	lr, r3
 80084d6:	4770      	bx	lr
