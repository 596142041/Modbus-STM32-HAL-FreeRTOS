
modbus-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf84  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  0800c224  0800c224  0001c224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c398  0800c398  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c398  0800c398  0001c398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c3a0  0800c3a0  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c3a0  0800c3a0  0001c3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c3a4  0800c3a4  0001c3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  0800c3a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000014  0800c3bc  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000074  0800c41c  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00004f98  240000d4  0800c47c  000200d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400506c  0800c47c  0002506c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003a2ac  00000000  00000000  00020102  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00005921  00000000  00000000  0005a3ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001e10  00000000  00000000  0005fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001be8  00000000  00000000  00061ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0003beff  00000000  00000000  000636c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001dc5d  00000000  00000000  0009f5c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    0017437c  00000000  00000000  000bd224  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  002315a0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007ee0  00000000  00000000  0023161c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240000d4 	.word	0x240000d4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c20c 	.word	0x0800c20c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240000d8 	.word	0x240000d8
 80002dc:	0800c20c 	.word	0x0800c20c

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <ModbusInit>:
 * @param EN_Port_v port for txen RS-485
 * @param EN_Pin_v pin for txen RS-485 (NULL means RS232C mode)
 * @ingroup setup
 */
void ModbusInit(modbusHandler_t * modH)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]

  if (numberHandlers < MAX_M_HANDLERS)
 80005e8:	4b35      	ldr	r3, [pc, #212]	; (80006c0 <ModbusInit+0xe0>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d862      	bhi.n	80006b6 <ModbusInit+0xd6>
  {
	  //Create QueueModbus
	  modH->QueueModbusHandle = osMessageQueueNew (MAX_BUFFER, sizeof(uint8_t), &QueueModbus_attributes);
 80005f0:	4a34      	ldr	r2, [pc, #208]	; (80006c4 <ModbusInit+0xe4>)
 80005f2:	2101      	movs	r1, #1
 80005f4:	2040      	movs	r0, #64	; 0x40
 80005f6:	f008 fbdf 	bl	8008db8 <osMessageQueueNew>
 80005fa:	4602      	mov	r2, r0
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	675a      	str	r2, [r3, #116]	; 0x74

	  if(modH->uiModbusType == SLAVE_RTU)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	2b03      	cmp	r3, #3
 8000606:	d108      	bne.n	800061a <ModbusInit+0x3a>
	  {
		  //Create Modbus task slave
	  	  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusSlave, modH, &myTaskModbusA_attributes);
 8000608:	4a2f      	ldr	r2, [pc, #188]	; (80006c8 <ModbusInit+0xe8>)
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	482f      	ldr	r0, [pc, #188]	; (80006cc <ModbusInit+0xec>)
 800060e:	f008 fa61 	bl	8008ad4 <osThreadNew>
 8000612:	4602      	mov	r2, r0
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	67da      	str	r2, [r3, #124]	; 0x7c
 8000618:	e027      	b.n	800066a <ModbusInit+0x8a>
	  }
	  else if (modH->uiModbusType == MASTER_RTU)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b04      	cmp	r3, #4
 8000620:	d122      	bne.n	8000668 <ModbusInit+0x88>
	  {
		  //Create Modbus task Master  and Queue for telegrams
		  modH->myTaskModbusAHandle = osThreadNew(StartTaskModbusMaster, modH, &myTaskModbusB_attributes);
 8000622:	4a2b      	ldr	r2, [pc, #172]	; (80006d0 <ModbusInit+0xf0>)
 8000624:	6879      	ldr	r1, [r7, #4]
 8000626:	482b      	ldr	r0, [pc, #172]	; (80006d4 <ModbusInit+0xf4>)
 8000628:	f008 fa54 	bl	8008ad4 <osThreadNew>
 800062c:	4602      	mov	r2, r0
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	67da      	str	r2, [r3, #124]	; 0x7c
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
				  	  	modH->u16timeOut ,     		// The timer period in ticks.
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8000638:	4619      	mov	r1, r3
						pdFALSE,         // The timers will auto-reload themselves when they expire.
						( void * )modH->xTimerTimeout,     // Assign each timer a unique id equal to its array index.
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
		  modH->xTimerTimeout=xTimerCreate("xTimerTimeout",  // Just a text name, not used by the kernel.
 8000640:	4b25      	ldr	r3, [pc, #148]	; (80006d8 <ModbusInit+0xf8>)
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	4613      	mov	r3, r2
 8000646:	2200      	movs	r2, #0
 8000648:	4824      	ldr	r0, [pc, #144]	; (80006dc <ModbusInit+0xfc>)
 800064a:	f00a fe37 	bl	800b2bc <xTimerCreate>
 800064e:	4602      	mov	r2, r0
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
						(TimerCallbackFunction_t) vTimerCallbackTimeout  // Each timer calls the same callback when it expires.
                  	  	);
		  modH->QueueTelegramHandle = osMessageQueueNew (MAX_TELEGRAMS, sizeof(modbus_t), &QueueTelegram_attributes);
 8000656:	4a22      	ldr	r2, [pc, #136]	; (80006e0 <ModbusInit+0x100>)
 8000658:	210c      	movs	r1, #12
 800065a:	2002      	movs	r0, #2
 800065c:	f008 fbac 	bl	8008db8 <osMessageQueueNew>
 8000660:	4602      	mov	r2, r0
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	679a      	str	r2, [r3, #120]	; 0x78
 8000666:	e000      	b.n	800066a <ModbusInit+0x8a>
	  }
	  else
	  {
		  while(1); //Error Modbus type not supported choose a valid Type
 8000668:	e7fe      	b.n	8000668 <ModbusInit+0x88>
	  //Create timer T35

	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
		  	  	  	  	  	  	  	5 ,     // The timer period in ticks.
                                    pdFALSE,         // The timers will auto-reload themselves when they expire.
									( void * )modH->xTimerT35,     // Assign each timer a unique id equal to its array index.
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	  modH->xTimerT35 = xTimerCreate("TimerT35",         // Just a text name, not used by the kernel.
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <ModbusInit+0x104>)
 8000672:	9300      	str	r3, [sp, #0]
 8000674:	4613      	mov	r3, r2
 8000676:	2200      	movs	r2, #0
 8000678:	2105      	movs	r1, #5
 800067a:	481b      	ldr	r0, [pc, #108]	; (80006e8 <ModbusInit+0x108>)
 800067c:	f00a fe1e 	bl	800b2bc <xTimerCreate>
 8000680:	4602      	mov	r2, r0
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                                    (TimerCallbackFunction_t) vTimerCallbackT35     // Each timer calls the same callback when it expires.
                                    );

	  modH->ModBusSphrHandle = osSemaphoreNew(1, 1, &ModBusSphr_attributes);
 8000688:	4a18      	ldr	r2, [pc, #96]	; (80006ec <ModbusInit+0x10c>)
 800068a:	2101      	movs	r1, #1
 800068c:	2001      	movs	r0, #1
 800068e:	f008 faf5 	bl	8008c7c <osSemaphoreNew>
 8000692:	4602      	mov	r2, r0
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	  mHandlers[numberHandlers] = modH;
 800069a:	4b09      	ldr	r3, [pc, #36]	; (80006c0 <ModbusInit+0xe0>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	4619      	mov	r1, r3
 80006a0:	4a13      	ldr	r2, [pc, #76]	; (80006f0 <ModbusInit+0x110>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  numberHandlers++;
 80006a8:	4b05      	ldr	r3, [pc, #20]	; (80006c0 <ModbusInit+0xe0>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	3301      	adds	r3, #1
 80006ae:	b2da      	uxtb	r2, r3
 80006b0:	4b03      	ldr	r3, [pc, #12]	; (80006c0 <ModbusInit+0xe0>)
 80006b2:	701a      	strb	r2, [r3, #0]
  else
  {
	  while(1); //error no more Modbus handlers supported
  }

}
 80006b4:	e000      	b.n	80006b8 <ModbusInit+0xd8>
	  while(1); //error no more Modbus handlers supported
 80006b6:	e7fe      	b.n	80006b6 <ModbusInit+0xd6>
}
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	240000f0 	.word	0x240000f0
 80006c4:	0800c2bc 	.word	0x0800c2bc
 80006c8:	0800c2ec 	.word	0x0800c2ec
 80006cc:	08000865 	.word	0x08000865
 80006d0:	0800c310 	.word	0x0800c310
 80006d4:	08000cb9 	.word	0x08000cb9
 80006d8:	0800080d 	.word	0x0800080d
 80006dc:	0800c26c 	.word	0x0800c26c
 80006e0:	0800c2d4 	.word	0x0800c2d4
 80006e4:	0800078d 	.word	0x0800078d
 80006e8:	0800c27c 	.word	0x0800c27c
 80006ec:	0800c334 	.word	0x0800c334
 80006f0:	240049fc 	.word	0x240049fc

080006f4 <ModbusStart>:
 * ModbusRtu's own begin() functions.)
 *
 * @ingroup setup
 */
void ModbusStart(modbusHandler_t * modH)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
    if (modH->EN_Port != NULL )
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	68db      	ldr	r3, [r3, #12]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d007      	beq.n	8000714 <ModbusStart+0x20>
    {
        // return RS485 transceiver to transmit mode
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	68d8      	ldr	r0, [r3, #12]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	8a1b      	ldrh	r3, [r3, #16]
 800070c:	2200      	movs	r2, #0
 800070e:	4619      	mov	r1, r3
 8000710:	f003 f8ea 	bl	80038e8 <HAL_GPIO_WritePin>
    }

    if (modH->uiModbusType == SLAVE_RTU &&  modH->au16regs == NULL )
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b03      	cmp	r3, #3
 800071a:	d104      	bne.n	8000726 <ModbusStart+0x32>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000720:	2b00      	cmp	r3, #0
 8000722:	d100      	bne.n	8000726 <ModbusStart+0x32>
    {
    	while(1); //ERROR define the DATA pointer shared through Modbus
 8000724:	e7fe      	b.n	8000724 <ModbusStart+0x30>
    }

    //check that port is initialized
    while (HAL_UART_GetState(modH->port) != HAL_UART_STATE_READY)
 8000726:	bf00      	nop
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	4618      	mov	r0, r3
 800072e:	f006 fb2b 	bl	8006d88 <HAL_UART_GetState>
 8000732:	4603      	mov	r3, r0
 8000734:	2b20      	cmp	r3, #32
 8000736:	d1f7      	bne.n	8000728 <ModbusStart+0x34>
    {
    }

    // Receive data from serial port for Modbus using interrupt
    if(HAL_UART_Receive_IT(modH->port, &modH->dataRX, 1) != HAL_OK)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6858      	ldr	r0, [r3, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3371      	adds	r3, #113	; 0x71
 8000740:	2201      	movs	r2, #1
 8000742:	4619      	mov	r1, r3
 8000744:	f006 f8be 	bl	80068c4 <HAL_UART_Receive_IT>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d000      	beq.n	8000750 <ModbusStart+0x5c>
    {
        while(1)
 800074e:	e7fe      	b.n	800074e <ModbusStart+0x5a>
        {
        }
    }

    modH->u8lastRec = modH->u8BufferSize = 0;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	2200      	movs	r2, #0
 8000754:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	f893 2053 	ldrb.w	r2, [r3, #83]	; 0x53
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    modH->u16InCnt = modH->u16OutCnt = modH->u16errCnt = 0;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2200      	movs	r2, #0
 8000768:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
}
 8000784:	bf00      	nop
 8000786:	3708      	adds	r7, #8
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}

0800078c <vTimerCallbackT35>:


void vTimerCallbackT35(TimerHandle_t *pxTimer)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b086      	sub	sp, #24
 8000790:	af02      	add	r7, sp, #8
 8000792:	6078      	str	r0, [r7, #4]
	//Notify that a steam has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	e029      	b.n	80007ee <vTimerCallbackT35+0x62>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerT35 ==  pxTimer ){
 800079a:	4a1a      	ldr	r2, [pc, #104]	; (8000804 <vTimerCallbackT35+0x78>)
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d11d      	bne.n	80007e8 <vTimerCallbackT35+0x5c>
			if(mHandlers[i]->uiModbusType == MASTER_RTU)
 80007ac:	4a15      	ldr	r2, [pc, #84]	; (8000804 <vTimerCallbackT35+0x78>)
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b04      	cmp	r3, #4
 80007b8:	d10c      	bne.n	80007d4 <vTimerCallbackT35+0x48>
			{
				xTimerStop(mHandlers[i]->xTimerTimeout,0);
 80007ba:	4a12      	ldr	r2, [pc, #72]	; (8000804 <vTimerCallbackT35+0x78>)
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c2:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 80007c6:	2300      	movs	r3, #0
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2300      	movs	r3, #0
 80007cc:	2200      	movs	r2, #0
 80007ce:	2103      	movs	r1, #3
 80007d0:	f00a fdd0 	bl	800b374 <xTimerGenericCommand>
			}
			xTaskNotify(mHandlers[i]->myTaskModbusAHandle, 0, eSetValueWithOverwrite);
 80007d4:	4a0b      	ldr	r2, [pc, #44]	; (8000804 <vTimerCallbackT35+0x78>)
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007dc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80007de:	2300      	movs	r3, #0
 80007e0:	2203      	movs	r2, #3
 80007e2:	2100      	movs	r1, #0
 80007e4:	f00a fb42 	bl	800ae6c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	3301      	adds	r3, #1
 80007ec:	60fb      	str	r3, [r7, #12]
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <vTimerCallbackT35+0x7c>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	461a      	mov	r2, r3
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	4293      	cmp	r3, r2
 80007f8:	dbcf      	blt.n	800079a <vTimerCallbackT35+0xe>
		}

	}
}
 80007fa:	bf00      	nop
 80007fc:	3710      	adds	r7, #16
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	240049fc 	.word	0x240049fc
 8000808:	240000f0 	.word	0x240000f0

0800080c <vTimerCallbackTimeout>:

void vTimerCallbackTimeout(TimerHandle_t *pxTimer)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	//Notify that a steam has just arrived
	int i;
	//TimerHandle_t aux;
	for(i = 0; i < numberHandlers; i++)
 8000814:	2300      	movs	r3, #0
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	e015      	b.n	8000846 <vTimerCallbackTimeout+0x3a>
	{

		if( (TimerHandle_t *)mHandlers[i]->xTimerTimeout ==  pxTimer ){
 800081a:	4a10      	ldr	r2, [pc, #64]	; (800085c <vTimerCallbackTimeout+0x50>)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000826:	687a      	ldr	r2, [r7, #4]
 8000828:	429a      	cmp	r2, r3
 800082a:	d109      	bne.n	8000840 <vTimerCallbackTimeout+0x34>
				xTaskNotify(mHandlers[i]->myTaskModbusAHandle, NO_REPLY, eSetValueWithOverwrite);
 800082c:	4a0b      	ldr	r2, [pc, #44]	; (800085c <vTimerCallbackTimeout+0x50>)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000834:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8000836:	2300      	movs	r3, #0
 8000838:	2203      	movs	r2, #3
 800083a:	21ff      	movs	r1, #255	; 0xff
 800083c:	f00a fb16 	bl	800ae6c <xTaskGenericNotify>
	for(i = 0; i < numberHandlers; i++)
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	3301      	adds	r3, #1
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <vTimerCallbackTimeout+0x54>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	461a      	mov	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	4293      	cmp	r3, r2
 8000850:	dbe3      	blt.n	800081a <vTimerCallbackTimeout+0xe>
		}

	}

}
 8000852:	bf00      	nop
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	240049fc 	.word	0x240049fc
 8000860:	240000f0 	.word	0x240000f0

08000864 <StartTaskModbusSlave>:


void StartTaskModbusSlave(void *argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY); /* Block indefinitely until a Modbus Frame arrives */
 8000870:	f04f 31ff 	mov.w	r1, #4294967295
 8000874:	2001      	movs	r0, #1
 8000876:	f00a fab1 	bl	800addc <ulTaskNotifyTake>

	  modH->i8lastError = 0;
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	2200      	movs	r2, #0
 800087e:	749a      	strb	r2, [r3, #18]
	  modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000884:	4618      	mov	r0, r3
 8000886:	f009 f91b 	bl	8009ac0 <uxQueueMessagesWaiting>
 800088a:	4603      	mov	r3, r0
 800088c:	b2da      	uxtb	r2, r3
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	  if (modH->EN_Port != NULL )
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	2b00      	cmp	r3, #0
 800089a:	d007      	beq.n	80008ac <StartTaskModbusSlave+0x48>
	  {
	     	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET); // is this required?
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	68d8      	ldr	r0, [r3, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	8a1b      	ldrh	r3, [r3, #16]
 80008a4:	2200      	movs	r2, #0
 80008a6:	4619      	mov	r1, r3
 80008a8:	f003 f81e 	bl	80038e8 <HAL_GPIO_WritePin>
	  }

	  int8_t i8state = getRxBuffer(modH);
 80008ac:	68f8      	ldr	r0, [r7, #12]
 80008ae:	f000 fbad 	bl	800100c <getRxBuffer>
 80008b2:	4603      	mov	r3, r0
 80008b4:	72fb      	strb	r3, [r7, #11]

	  if (i8state < 7){
 80008b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80008ba:	2b06      	cmp	r3, #6
 80008bc:	dc09      	bgt.n	80008d2 <StartTaskModbusSlave+0x6e>
		  //The size of the frame is invalid
		  modH->i8lastError = ERR_BAD_SIZE;;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	22fa      	movs	r2, #250	; 0xfa
 80008c2:	749a      	strb	r2, [r3, #18]
		  xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f008 fbe2 	bl	8009094 <xQueueGenericReset>
		  continue;
 80008d0:	e093      	b.n	80009fa <StartTaskModbusSlave+0x196>
	  }


		// check slave id
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	7cda      	ldrb	r2, [r3, #19]
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	7a1b      	ldrb	r3, [r3, #8]
 80008da:	429a      	cmp	r2, r3
 80008dc:	f040 808c 	bne.w	80009f8 <StartTaskModbusSlave+0x194>

	  // validate message: CRC, FCT, address and size
	  uint8_t u8exception = validateRequest(modH);
 80008e0:	68f8      	ldr	r0, [r7, #12]
 80008e2:	f000 fc39 	bl	8001158 <validateRequest>
 80008e6:	4603      	mov	r3, r0
 80008e8:	72bb      	strb	r3, [r7, #10]
	  if (u8exception > 0)
 80008ea:	7abb      	ldrb	r3, [r7, #10]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00f      	beq.n	8000910 <StartTaskModbusSlave+0xac>
	  {
		  if (u8exception != NO_REPLY)
 80008f0:	7abb      	ldrb	r3, [r7, #10]
 80008f2:	2bff      	cmp	r3, #255	; 0xff
 80008f4:	d007      	beq.n	8000906 <StartTaskModbusSlave+0xa2>
		  {
			  buildException( u8exception, modH);
 80008f6:	7abb      	ldrb	r3, [r7, #10]
 80008f8:	68f9      	ldr	r1, [r7, #12]
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fd85 	bl	800140a <buildException>
			  sendTxBuffer(modH);
 8000900:	68f8      	ldr	r0, [r7, #12]
 8000902:	f000 fda1 	bl	8001448 <sendTxBuffer>
		  }
		  modH->i8lastError = u8exception;
 8000906:	f997 200a 	ldrsb.w	r2, [r7, #10]
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	749a      	strb	r2, [r3, #18]
		  //return u8exception
		  continue;
 800090e:	e074      	b.n	80009fa <StartTaskModbusSlave+0x196>
	  }

	  //u32timeOut = millis(); TODO is this really need?
	  modH->i8lastError = 0;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	2200      	movs	r2, #0
 8000914:	749a      	strb	r2, [r3, #18]


	  xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800091c:	f04f 31ff 	mov.w	r1, #4294967295
 8000920:	4618      	mov	r0, r3
 8000922:	f008 ffc5 	bl	80098b0 <xQueueSemaphoreTake>

	  // process message
	    switch(modH->au8Buffer[ FUNC ] )
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	7d1b      	ldrb	r3, [r3, #20]
 800092a:	3b01      	subs	r3, #1
 800092c:	2b0f      	cmp	r3, #15
 800092e:	d859      	bhi.n	80009e4 <StartTaskModbusSlave+0x180>
 8000930:	a201      	add	r2, pc, #4	; (adr r2, 8000938 <StartTaskModbusSlave+0xd4>)
 8000932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000936:	bf00      	nop
 8000938:	08000979 	.word	0x08000979
 800093c:	08000979 	.word	0x08000979
 8000940:	0800098b 	.word	0x0800098b
 8000944:	0800098b 	.word	0x0800098b
 8000948:	0800099d 	.word	0x0800099d
 800094c:	080009af 	.word	0x080009af
 8000950:	080009e5 	.word	0x080009e5
 8000954:	080009e5 	.word	0x080009e5
 8000958:	080009e5 	.word	0x080009e5
 800095c:	080009e5 	.word	0x080009e5
 8000960:	080009e5 	.word	0x080009e5
 8000964:	080009e5 	.word	0x080009e5
 8000968:	080009e5 	.word	0x080009e5
 800096c:	080009e5 	.word	0x080009e5
 8000970:	080009c1 	.word	0x080009c1
 8000974:	080009d3 	.word	0x080009d3
	    {
			case MB_FC_READ_COILS:
			case MB_FC_READ_DISCRETE_INPUT:
				modH->i8state = process_FC1(modH);
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	f000 fdfd 	bl	8001578 <process_FC1>
 800097e:	4603      	mov	r3, r0
 8000980:	461a      	mov	r2, r3
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 8000988:	e02d      	b.n	80009e6 <StartTaskModbusSlave+0x182>
			case MB_FC_READ_INPUT_REGISTER:
			case MB_FC_READ_REGISTERS :
				modH->i8state = process_FC3(modH);
 800098a:	68f8      	ldr	r0, [r7, #12]
 800098c:	f000 fea9 	bl	80016e2 <process_FC3>
 8000990:	4603      	mov	r3, r0
 8000992:	461a      	mov	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 800099a:	e024      	b.n	80009e6 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_COIL:
				modH->i8state = process_FC5(modH);
 800099c:	68f8      	ldr	r0, [r7, #12]
 800099e:	f000 ff09 	bl	80017b4 <process_FC5>
 80009a2:	4603      	mov	r3, r0
 80009a4:	461a      	mov	r2, r3
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80009ac:	e01b      	b.n	80009e6 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_REGISTER :
				modH->i8state = process_FC6(modH);
 80009ae:	68f8      	ldr	r0, [r7, #12]
 80009b0:	f000 ff56 	bl	8001860 <process_FC6>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80009be:	e012      	b.n	80009e6 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_MULTIPLE_COILS:
				modH->i8state = process_FC15(modH);
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f000 ff7e 	bl	80018c2 <process_FC15>
 80009c6:	4603      	mov	r3, r0
 80009c8:	461a      	mov	r2, r3
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80009d0:	e009      	b.n	80009e6 <StartTaskModbusSlave+0x182>
			case MB_FC_WRITE_MULTIPLE_REGISTERS :
				modH->i8state = process_FC16(modH);
 80009d2:	68f8      	ldr	r0, [r7, #12]
 80009d4:	f001 f800 	bl	80019d8 <process_FC16>
 80009d8:	4603      	mov	r3, r0
 80009da:	461a      	mov	r2, r3
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
				break;
 80009e2:	e000      	b.n	80009e6 <StartTaskModbusSlave+0x182>
			default:
				break;
 80009e4:	bf00      	nop
	    }

	    xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 80009ec:	2300      	movs	r3, #0
 80009ee:	2200      	movs	r2, #0
 80009f0:	2100      	movs	r1, #0
 80009f2:	f008 fcf3 	bl	80093dc <xQueueGenericSend>
	    //return i8state;
	    continue;
 80009f6:	e000      	b.n	80009fa <StartTaskModbusSlave+0x196>
	  if ( modH->au8Buffer[ID] !=  modH->u8id) continue;
 80009f8:	bf00      	nop
  {
 80009fa:	e739      	b.n	8000870 <StartTaskModbusSlave+0xc>

080009fc <SendQuery>:
 * @param modH  modbus handler
 * @param modbus_t  modbus telegram structure (id, fct, ...)
 * @ingroup loop
 */
int8_t SendQuery(modbusHandler_t *modH ,  modbus_t telegram )
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b086      	sub	sp, #24
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	60f8      	str	r0, [r7, #12]
 8000a04:	4638      	mov	r0, r7
 8000a06:	e880 000e 	stmia.w	r0, {r1, r2, r3}


	uint8_t u8regsno, u8bytesno;
	uint8_t  error = 0;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	75bb      	strb	r3, [r7, #22]
	//xSemaphoreTake(modH->ModBusSphrHandle , portMAX_DELAY); //before processing the message get the semaphore

	if (modH->u8id!=0) error = ERR_NOT_MASTER;
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	7a1b      	ldrb	r3, [r3, #8]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <SendQuery+0x1e>
 8000a16:	23ff      	movs	r3, #255	; 0xff
 8000a18:	75bb      	strb	r3, [r7, #22]
	if (modH->i8state != COM_IDLE) error = ERR_POLLING ;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f993 3072 	ldrsb.w	r3, [r3, #114]	; 0x72
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <SendQuery+0x2c>
 8000a24:	23fe      	movs	r3, #254	; 0xfe
 8000a26:	75bb      	strb	r3, [r7, #22]
	if ((telegram.u8id==0) || (telegram.u8id>247)) error = ERR_BAD_SLAVE_ID;
 8000a28:	783b      	ldrb	r3, [r7, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d002      	beq.n	8000a34 <SendQuery+0x38>
 8000a2e:	783b      	ldrb	r3, [r7, #0]
 8000a30:	2bf7      	cmp	r3, #247	; 0xf7
 8000a32:	d901      	bls.n	8000a38 <SendQuery+0x3c>
 8000a34:	23f7      	movs	r3, #247	; 0xf7
 8000a36:	75bb      	strb	r3, [r7, #22]

	if(error)
 8000a38:	7dbb      	ldrb	r3, [r7, #22]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d00e      	beq.n	8000a5c <SendQuery+0x60>
	{
		 modH->i8lastError = error;
 8000a3e:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	749a      	strb	r2, [r3, #18]
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	f008 fcc3 	bl	80093dc <xQueueGenericSend>
		 return error;
 8000a56:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000a5a:	e128      	b.n	8000cae <SendQuery+0x2b2>
	}


	modH->au16regs = telegram.au16reg;
 8000a5c:	68ba      	ldr	r2, [r7, #8]
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	659a      	str	r2, [r3, #88]	; 0x58

	// telegram header
	modH->au8Buffer[ ID ]         = telegram.u8id;
 8000a62:	783a      	ldrb	r2, [r7, #0]
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	74da      	strb	r2, [r3, #19]
	modH->au8Buffer[ FUNC ]       = telegram.u8fct;
 8000a68:	787a      	ldrb	r2, [r7, #1]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	751a      	strb	r2, [r3, #20]
	modH->au8Buffer[ ADD_HI ]     = highByte(telegram.u16RegAdd );
 8000a6e:	887b      	ldrh	r3, [r7, #2]
 8000a70:	0a1b      	lsrs	r3, r3, #8
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	b2da      	uxtb	r2, r3
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	755a      	strb	r2, [r3, #21]
	modH->au8Buffer[ ADD_LO ]     = lowByte( telegram.u16RegAdd );
 8000a7a:	887b      	ldrh	r3, [r7, #2]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	759a      	strb	r2, [r3, #22]

	switch( telegram.u8fct )
 8000a82:	787b      	ldrb	r3, [r7, #1]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	2b0f      	cmp	r3, #15
 8000a88:	f200 8106 	bhi.w	8000c98 <SendQuery+0x29c>
 8000a8c:	a201      	add	r2, pc, #4	; (adr r2, 8000a94 <SendQuery+0x98>)
 8000a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a92:	bf00      	nop
 8000a94:	08000ad5 	.word	0x08000ad5
 8000a98:	08000ad5 	.word	0x08000ad5
 8000a9c:	08000ad5 	.word	0x08000ad5
 8000aa0:	08000ad5 	.word	0x08000ad5
 8000aa4:	08000af3 	.word	0x08000af3
 8000aa8:	08000b17 	.word	0x08000b17
 8000aac:	08000c99 	.word	0x08000c99
 8000ab0:	08000c99 	.word	0x08000c99
 8000ab4:	08000c99 	.word	0x08000c99
 8000ab8:	08000c99 	.word	0x08000c99
 8000abc:	08000c99 	.word	0x08000c99
 8000ac0:	08000c99 	.word	0x08000c99
 8000ac4:	08000c99 	.word	0x08000c99
 8000ac8:	08000c99 	.word	0x08000c99
 8000acc:	08000b3d 	.word	0x08000b3d
 8000ad0:	08000bff 	.word	0x08000bff
	{
	case MB_FC_READ_COILS:
	case MB_FC_READ_DISCRETE_INPUT:
	case MB_FC_READ_REGISTERS:
	case MB_FC_READ_INPUT_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000ad4:	88bb      	ldrh	r3, [r7, #4]
 8000ad6:	0a1b      	lsrs	r3, r3, #8
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000ae0:	88bb      	ldrh	r3, [r7, #4]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	2206      	movs	r2, #6
 8000aec:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 8000af0:	e0d2      	b.n	8000c98 <SendQuery+0x29c>
	case MB_FC_WRITE_COIL:
	    modH->au8Buffer[ NB_HI ]      = ((modH->au16regs[0] > 0) ? 0xff : 0);
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	881b      	ldrh	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <SendQuery+0x104>
 8000afc:	22ff      	movs	r2, #255	; 0xff
 8000afe:	e000      	b.n	8000b02 <SendQuery+0x106>
 8000b00:	2200      	movs	r2, #0
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = 0;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2200      	movs	r2, #0
 8000b0a:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	2206      	movs	r2, #6
 8000b10:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 8000b14:	e0c0      	b.n	8000c98 <SendQuery+0x29c>
	case MB_FC_WRITE_REGISTER:
	    modH->au8Buffer[ NB_HI ]      = highByte(modH->au16regs[0]);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	0a1b      	lsrs	r3, r3, #8
 8000b1e:	b29b      	uxth	r3, r3
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte(modH->au16regs[0]);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	881b      	ldrh	r3, [r3, #0]
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	761a      	strb	r2, [r3, #24]
	    modH->u8BufferSize = 6;
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	2206      	movs	r2, #6
 8000b36:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    break;
 8000b3a:	e0ad      	b.n	8000c98 <SendQuery+0x29c>
	case MB_FC_WRITE_MULTIPLE_COILS: // TODO: implement "sending coils"
	    u8regsno = telegram.u16CoilsNo / 16;
 8000b3c:	88bb      	ldrh	r3, [r7, #4]
 8000b3e:	091b      	lsrs	r3, r3, #4
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	747b      	strb	r3, [r7, #17]
	    u8bytesno = u8regsno * 2;
 8000b44:	7c7b      	ldrb	r3, [r7, #17]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	75fb      	strb	r3, [r7, #23]
	    if ((telegram.u16CoilsNo % 16) != 0)
 8000b4a:	88bb      	ldrh	r3, [r7, #4]
 8000b4c:	f003 030f 	and.w	r3, r3, #15
 8000b50:	b29b      	uxth	r3, r3
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d005      	beq.n	8000b62 <SendQuery+0x166>
	    {
	        u8bytesno++;
 8000b56:	7dfb      	ldrb	r3, [r7, #23]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	75fb      	strb	r3, [r7, #23]
	        u8regsno++;
 8000b5c:	7c7b      	ldrb	r3, [r7, #17]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	747b      	strb	r3, [r7, #17]
	    }

	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000b62:	88bb      	ldrh	r3, [r7, #4]
 8000b64:	0a1b      	lsrs	r3, r3, #8
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000b6e:	88bb      	ldrh	r3, [r7, #4]
 8000b70:	b2da      	uxtb	r2, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = u8bytesno;
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	7dfa      	ldrb	r2, [r7, #23]
 8000b7a:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	2207      	movs	r2, #7
 8000b80:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	    for (uint16_t i = 0; i < u8bytesno; i++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	82bb      	strh	r3, [r7, #20]
 8000b88:	e033      	b.n	8000bf2 <SendQuery+0x1f6>
	    {
	        if(i%2)
 8000b8a:	8abb      	ldrh	r3, [r7, #20]
 8000b8c:	f003 0301 	and.w	r3, r3, #1
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d010      	beq.n	8000bb8 <SendQuery+0x1bc>
	        {
	            modH->au8Buffer[ modH->u8BufferSize ] = lowByte( modH->au16regs[ i/2 ] );
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b9a:	8abb      	ldrh	r3, [r7, #20]
 8000b9c:	085b      	lsrs	r3, r3, #1
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	005b      	lsls	r3, r3, #1
 8000ba2:	4413      	add	r3, r2
 8000ba4:	881a      	ldrh	r2, [r3, #0]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000bac:	4619      	mov	r1, r3
 8000bae:	b2d2      	uxtb	r2, r2
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	440b      	add	r3, r1
 8000bb4:	74da      	strb	r2, [r3, #19]
 8000bb6:	e011      	b.n	8000bdc <SendQuery+0x1e0>
	        }
	        else
	        {
	        	 modH->au8Buffer[  modH->u8BufferSize ] = highByte(  modH->au16regs[ i/2] );
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bbc:	8abb      	ldrh	r3, [r7, #20]
 8000bbe:	085b      	lsrs	r3, r3, #1
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	4413      	add	r3, r2
 8000bc6:	881b      	ldrh	r3, [r3, #0]
 8000bc8:	0a1b      	lsrs	r3, r3, #8
 8000bca:	b29a      	uxth	r2, r3
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	b2d2      	uxtb	r2, r2
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	440b      	add	r3, r1
 8000bda:	74da      	strb	r2, [r3, #19]
	        }
	        modH->u8BufferSize++;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000be2:	3301      	adds	r3, #1
 8000be4:	b2da      	uxtb	r2, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    for (uint16_t i = 0; i < u8bytesno; i++)
 8000bec:	8abb      	ldrh	r3, [r7, #20]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	82bb      	strh	r3, [r7, #20]
 8000bf2:	7dfb      	ldrb	r3, [r7, #23]
 8000bf4:	b29b      	uxth	r3, r3
 8000bf6:	8aba      	ldrh	r2, [r7, #20]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d3c6      	bcc.n	8000b8a <SendQuery+0x18e>
	    }
	    break;
 8000bfc:	e04c      	b.n	8000c98 <SendQuery+0x29c>

	case MB_FC_WRITE_MULTIPLE_REGISTERS:
	    modH->au8Buffer[ NB_HI ]      = highByte(telegram.u16CoilsNo );
 8000bfe:	88bb      	ldrh	r3, [r7, #4]
 8000c00:	0a1b      	lsrs	r3, r3, #8
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	75da      	strb	r2, [r3, #23]
	    modH->au8Buffer[ NB_LO ]      = lowByte( telegram.u16CoilsNo );
 8000c0a:	88bb      	ldrh	r3, [r7, #4]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	761a      	strb	r2, [r3, #24]
	    modH->au8Buffer[ BYTE_CNT ]    = (uint8_t) ( telegram.u16CoilsNo * 2 );
 8000c12:	88bb      	ldrh	r3, [r7, #4]
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	005b      	lsls	r3, r3, #1
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	765a      	strb	r2, [r3, #25]
	    modH->u8BufferSize = 7;
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	2207      	movs	r2, #7
 8000c22:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8000c26:	2300      	movs	r3, #0
 8000c28:	827b      	strh	r3, [r7, #18]
 8000c2a:	e030      	b.n	8000c8e <SendQuery+0x292>
	    {
	        modH->au8Buffer[  modH->u8BufferSize ] = highByte(  modH->au16regs[ i ] );
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c30:	8a7b      	ldrh	r3, [r7, #18]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	4413      	add	r3, r2
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000c42:	4619      	mov	r1, r3
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	440b      	add	r3, r1
 8000c4a:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000c52:	3301      	adds	r3, #1
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	        modH->au8Buffer[  modH->u8BufferSize ] = lowByte(  modH->au16regs[ i ] );
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c60:	8a7b      	ldrh	r3, [r7, #18]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	4413      	add	r3, r2
 8000c66:	881a      	ldrh	r2, [r3, #0]
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000c6e:	4619      	mov	r1, r3
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	440b      	add	r3, r1
 8000c76:	74da      	strb	r2, [r3, #19]
	        modH->u8BufferSize++;
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000c7e:	3301      	adds	r3, #1
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
	    for (uint16_t i=0; i< telegram.u16CoilsNo; i++)
 8000c88:	8a7b      	ldrh	r3, [r7, #18]
 8000c8a:	3301      	adds	r3, #1
 8000c8c:	827b      	strh	r3, [r7, #18]
 8000c8e:	88bb      	ldrh	r3, [r7, #4]
 8000c90:	8a7a      	ldrh	r2, [r7, #18]
 8000c92:	429a      	cmp	r2, r3
 8000c94:	d3ca      	bcc.n	8000c2c <SendQuery+0x230>
	    }
	    break;
 8000c96:	bf00      	nop
	}

	sendTxBuffer(modH);
 8000c98:	68f8      	ldr	r0, [r7, #12]
 8000c9a:	f000 fbd5 	bl	8001448 <sendTxBuffer>
	modH->i8state = COM_WAITING;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	modH->i8lastError = 0;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	749a      	strb	r2, [r3, #18]
	return 0;
 8000cac:	2300      	movs	r3, #0


}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3718      	adds	r7, #24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop

08000cb8 <StartTaskModbusMaster>:




void StartTaskModbusMaster(void *argument)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	; 0x28
 8000cbc:	af02      	add	r7, sp, #8
 8000cbe:	6078      	str	r0, [r7, #4]

  modbusHandler_t *modH =  (modbusHandler_t *)argument;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	61fb      	str	r3, [r7, #28]
  modbus_t telegram;

  for(;;)
  {
	  /*Wait indefinitely for a telegram to send */
	  xQueueReceive(modH->QueueTelegramHandle, &telegram, portMAX_DELAY);
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000cc8:	f107 0108 	add.w	r1, r7, #8
 8000ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f008 fd11 	bl	80096f8 <xQueueReceive>

	  /*Format and Send query */
	  SendQuery(modH, telegram);
 8000cd6:	f107 0308 	add.w	r3, r7, #8
 8000cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000cdc:	69f8      	ldr	r0, [r7, #28]
 8000cde:	f7ff fe8d 	bl	80009fc <SendQuery>

	  /* Block indefinitely until a Modbus Frame arrives or query timeouts*/
	  ulNotificationValue = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8000ce2:	f04f 31ff 	mov.w	r1, #4294967295
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	f00a f878 	bl	800addc <ulTaskNotifyTake>
 8000cec:	61b8      	str	r0, [r7, #24]
	  modH->i8lastError = 0;
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	749a      	strb	r2, [r3, #18]
      if(ulNotificationValue == NO_REPLY)
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	2bff      	cmp	r3, #255	; 0xff
 8000cf8:	d10f      	bne.n	8000d1a <StartTaskModbusMaster+0x62>
      {
    	  modH->i8state = COM_IDLE;
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
    	  modH->i8lastError = NO_REPLY;
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	22ff      	movs	r2, #255	; 0xff
 8000d06:	749a      	strb	r2, [r3, #18]
    	  modH->u16errCnt++;
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000d0e:	3301      	adds	r3, #1
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    	  continue;
 8000d18:	e08a      	b.n	8000e30 <StartTaskModbusMaster+0x178>
      }

	  modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f008 fece 	bl	8009ac0 <uxQueueMessagesWaiting>
 8000d24:	4603      	mov	r3, r0
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	69fb      	ldr	r3, [r7, #28]
 8000d2a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

	  int8_t i8state = getRxBuffer(modH);
 8000d2e:	69f8      	ldr	r0, [r7, #28]
 8000d30:	f000 f96c 	bl	800100c <getRxBuffer>
 8000d34:	4603      	mov	r3, r0
 8000d36:	75fb      	strb	r3, [r7, #23]
	  //modH->u8lastError = i8state;

	  if (i8state < 6){
 8000d38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000d3c:	2b05      	cmp	r3, #5
 8000d3e:	dc1d      	bgt.n	8000d7c <StartTaskModbusMaster+0xc4>
		  //The size of the frame is invalid
		  xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d44:	2100      	movs	r1, #0
 8000d46:	4618      	mov	r0, r3
 8000d48:	f008 f9a4 	bl	8009094 <xQueueGenericReset>
		  modH->i8state = COM_IDLE;
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	2200      	movs	r2, #0
 8000d50:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		  modH->i8lastError = ERR_BAD_SIZE;
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	22fa      	movs	r2, #250	; 0xfa
 8000d58:	749a      	strb	r2, [r3, #18]
		  modH->u16errCnt++;
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000d60:	3301      	adds	r3, #1
 8000d62:	b29a      	uxth	r2, r3
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
		  xSemaphoreGive(modH->ModBusSphrHandle);
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8000d70:	2300      	movs	r3, #0
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	f008 fb31 	bl	80093dc <xQueueGenericSend>
		  continue;
 8000d7a:	e059      	b.n	8000e30 <StartTaskModbusMaster+0x178>
	  }

	  xTimerStop(modH->xTimerTimeout,0); // cancel timeout timer
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8000d82:	2300      	movs	r3, #0
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2300      	movs	r3, #0
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2103      	movs	r1, #3
 8000d8c:	f00a faf2 	bl	800b374 <xTimerGenericCommand>


	  // validate message: id, CRC, FCT, exception
	  uint8_t u8exception = validateAnswer(modH);
 8000d90:	69f8      	ldr	r0, [r7, #28]
 8000d92:	f000 f8cd 	bl	8000f30 <validateAnswer>
 8000d96:	4603      	mov	r3, r0
 8000d98:	75bb      	strb	r3, [r7, #22]
	  if (u8exception != 0)
 8000d9a:	7dbb      	ldrb	r3, [r7, #22]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d00c      	beq.n	8000dba <StartTaskModbusMaster+0x102>
	  {
		 modH->i8state = COM_IDLE;
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
		 xSemaphoreGive(modH->ModBusSphrHandle);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f8d3 0088 	ldr.w	r0, [r3, #136]	; 0x88
 8000dae:	2300      	movs	r3, #0
 8000db0:	2200      	movs	r2, #0
 8000db2:	2100      	movs	r1, #0
 8000db4:	f008 fb12 	bl	80093dc <xQueueGenericSend>
	     continue;
 8000db8:	e03a      	b.n	8000e30 <StartTaskModbusMaster+0x178>
	  }



	  modH->i8lastError = u8exception;
 8000dba:	f997 2016 	ldrsb.w	r2, [r7, #22]
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	749a      	strb	r2, [r3, #18]
	  // process answer
	  switch( modH->au8Buffer[ FUNC ] )
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	7d1b      	ldrb	r3, [r3, #20]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	2b0f      	cmp	r3, #15
 8000dca:	d82b      	bhi.n	8000e24 <StartTaskModbusMaster+0x16c>
 8000dcc:	a201      	add	r2, pc, #4	; (adr r2, 8000dd4 <StartTaskModbusMaster+0x11c>)
 8000dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dd2:	bf00      	nop
 8000dd4:	08000e15 	.word	0x08000e15
 8000dd8:	08000e15 	.word	0x08000e15
 8000ddc:	08000e1d 	.word	0x08000e1d
 8000de0:	08000e1d 	.word	0x08000e1d
 8000de4:	08000e25 	.word	0x08000e25
 8000de8:	08000e25 	.word	0x08000e25
 8000dec:	08000e25 	.word	0x08000e25
 8000df0:	08000e25 	.word	0x08000e25
 8000df4:	08000e25 	.word	0x08000e25
 8000df8:	08000e25 	.word	0x08000e25
 8000dfc:	08000e25 	.word	0x08000e25
 8000e00:	08000e25 	.word	0x08000e25
 8000e04:	08000e25 	.word	0x08000e25
 8000e08:	08000e25 	.word	0x08000e25
 8000e0c:	08000e25 	.word	0x08000e25
 8000e10:	08000e25 	.word	0x08000e25
	  {
	  case MB_FC_READ_COILS:
	  case MB_FC_READ_DISCRETE_INPUT:
	      //call get_FC1 to transfer the incoming message to au16regs buffer
	      get_FC1(modH);
 8000e14:	69f8      	ldr	r0, [r7, #28]
 8000e16:	f000 f80d 	bl	8000e34 <get_FC1>
	      break;
 8000e1a:	e004      	b.n	8000e26 <StartTaskModbusMaster+0x16e>
	  case MB_FC_READ_INPUT_REGISTER:
	  case MB_FC_READ_REGISTERS :
	      // call get_FC3 to transfer the incoming message to au16regs buffer
	      get_FC3(modH);
 8000e1c:	69f8      	ldr	r0, [r7, #28]
 8000e1e:	f000 f85b 	bl	8000ed8 <get_FC3>
	      break;
 8000e22:	e000      	b.n	8000e26 <StartTaskModbusMaster+0x16e>
	  case MB_FC_WRITE_MULTIPLE_COILS:
	  case MB_FC_WRITE_MULTIPLE_REGISTERS :
	      // nothing to do
	      break;
	  default:
	      break;
 8000e24:	bf00      	nop
	  }
	  modH->i8state = COM_IDLE;
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72

	  //xSemaphoreGive(modH->ModBusSphrHandle); //Release the semaphore
	  //return i8state;
	  continue;
 8000e2e:	bf00      	nop
  {
 8000e30:	e748      	b.n	8000cc4 <StartTaskModbusMaster+0xc>
 8000e32:	bf00      	nop

08000e34 <get_FC1>:
 *
 * @ingroup register
 * TODO: finish its implementation
 */
void get_FC1(modbusHandler_t *modH)
{
 8000e34:	b590      	push	{r4, r7, lr}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	73bb      	strb	r3, [r7, #14]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 8000e40:	2300      	movs	r3, #0
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	e03f      	b.n	8000ec6 <get_FC1+0x92>

        if(i%2)
 8000e46:	7bfb      	ldrb	r3, [r7, #15]
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	b2db      	uxtb	r3, r3
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d01a      	beq.n	8000e88 <get_FC1+0x54>
        {
        	modH->au16regs[i/2]= word(modH->au8Buffer[i+u8byte], lowByte(modH->au16regs[i/2]));
 8000e52:	7bfa      	ldrb	r2, [r7, #15]
 8000e54:	7bbb      	ldrb	r3, [r7, #14]
 8000e56:	4413      	add	r3, r2
 8000e58:	687a      	ldr	r2, [r7, #4]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	7cd8      	ldrb	r0, [r3, #19]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	085b      	lsrs	r3, r3, #1
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	4413      	add	r3, r2
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	b2d9      	uxtb	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e74:	7bfb      	ldrb	r3, [r7, #15]
 8000e76:	085b      	lsrs	r3, r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	18d4      	adds	r4, r2, r3
 8000e7e:	f000 fa6b 	bl	8001358 <word>
 8000e82:	4603      	mov	r3, r0
 8000e84:	8023      	strh	r3, [r4, #0]
 8000e86:	e01b      	b.n	8000ec0 <get_FC1+0x8c>
        }
        else
        {

        	modH->au16regs[i/2]= word(highByte(modH->au16regs[i/2]), modH->au8Buffer[i+u8byte]);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	085b      	lsrs	r3, r3, #1
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	4413      	add	r3, r2
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	0a1b      	lsrs	r3, r3, #8
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	b2d8      	uxtb	r0, r3
 8000e9e:	7bfa      	ldrb	r2, [r7, #15]
 8000ea0:	7bbb      	ldrb	r3, [r7, #14]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	7cd9      	ldrb	r1, [r3, #19]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
 8000eb0:	085b      	lsrs	r3, r3, #1
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	18d4      	adds	r4, r2, r3
 8000eb8:	f000 fa4e 	bl	8001358 <word>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	8023      	strh	r3, [r4, #0]
     for (i=0; i< modH->au8Buffer[2]; i++) {
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	73fb      	strb	r3, [r7, #15]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	7d5b      	ldrb	r3, [r3, #21]
 8000eca:	7bfa      	ldrb	r2, [r7, #15]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d3ba      	bcc.n	8000e46 <get_FC1+0x12>
        }

     }
}
 8000ed0:	bf00      	nop
 8000ed2:	3714      	adds	r7, #20
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd90      	pop	{r4, r7, pc}

08000ed8 <get_FC3>:
 * This method puts the slave answer into master data buffer
 *
 * @ingroup register
 */
void get_FC3(modbusHandler_t *modH)
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
    uint8_t u8byte, i;
    u8byte = 3;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	73fb      	strb	r3, [r7, #15]

    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73bb      	strb	r3, [r7, #14]
 8000ee8:	e017      	b.n	8000f1a <get_FC3+0x42>
    {
    	modH->au16regs[ i ] = word(modH->au8Buffer[ u8byte ], modH->au8Buffer[ u8byte +1 ]);
 8000eea:	7bfb      	ldrb	r3, [r7, #15]
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	4413      	add	r3, r2
 8000ef0:	7cd8      	ldrb	r0, [r3, #19]
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	7cd9      	ldrb	r1, [r3, #19]
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f00:	7bbb      	ldrb	r3, [r7, #14]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	18d4      	adds	r4, r2, r3
 8000f06:	f000 fa27 	bl	8001358 <word>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	8023      	strh	r3, [r4, #0]
        u8byte += 2;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	3302      	adds	r3, #2
 8000f12:	73fb      	strb	r3, [r7, #15]
    for (i=0; i< modH->au8Buffer[ 2 ] /2; i++)
 8000f14:	7bbb      	ldrb	r3, [r7, #14]
 8000f16:	3301      	adds	r3, #1
 8000f18:	73bb      	strb	r3, [r7, #14]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	7d5b      	ldrb	r3, [r3, #21]
 8000f1e:	085b      	lsrs	r3, r3, #1
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	7bba      	ldrb	r2, [r7, #14]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d3e0      	bcc.n	8000eea <get_FC3+0x12>
    }
}
 8000f28:	bf00      	nop
 8000f2a:	3714      	adds	r7, #20
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd90      	pop	{r4, r7, pc}

08000f30 <validateAnswer>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup buffer
 */
uint8_t validateAnswer(modbusHandler_t *modH)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
    // check message crc vs calculated crc
    uint16_t u16MsgCRC =
        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000f3e:	3b02      	subs	r3, #2
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	4413      	add	r3, r2
 8000f44:	7cdb      	ldrb	r3, [r3, #19]
 8000f46:	021b      	lsls	r3, r3, #8
         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8000f48:	b21a      	sxth	r2, r3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000f50:	3b01      	subs	r3, #1
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	440b      	add	r3, r1
 8000f56:	7cdb      	ldrb	r3, [r3, #19]
 8000f58:	b21b      	sxth	r3, r3
 8000f5a:	4313      	orrs	r3, r2
 8000f5c:	b21b      	sxth	r3, r3
    uint16_t u16MsgCRC =
 8000f5e:	81bb      	strh	r3, [r7, #12]
    if ( calcCRC(modH->au8Buffer,  modH->u8BufferSize-2) != u16MsgCRC )
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f103 0213 	add.w	r2, r3, #19
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8000f6c:	3b02      	subs	r3, #2
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	4619      	mov	r1, r3
 8000f72:	4610      	mov	r0, r2
 8000f74:	f000 fa03 	bl	800137e <calcCRC>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	89bb      	ldrh	r3, [r7, #12]
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d009      	beq.n	8000f96 <validateAnswer+0x66>
    {
    	modH->u16errCnt ++;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000f88:	3301      	adds	r3, #1
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return NO_REPLY;
 8000f92:	23ff      	movs	r3, #255	; 0xff
 8000f94:	e034      	b.n	8001000 <validateAnswer+0xd0>
    }

    // check exception
    if ((modH->au8Buffer[ FUNC ] & 0x80) != 0)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	7d1b      	ldrb	r3, [r3, #20]
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	da09      	bge.n	8000fb4 <validateAnswer+0x84>
    {
    	modH->u16errCnt ++;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	b29a      	uxth	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return ERR_EXCEPTION;
 8000fb0:	23fb      	movs	r3, #251	; 0xfb
 8000fb2:	e025      	b.n	8001000 <validateAnswer+0xd0>
    }

    // check fct code
    bool isSupported = false;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73bb      	strb	r3, [r7, #14]
 8000fbc:	e00c      	b.n	8000fd8 <validateAnswer+0xa8>
    {
        if (fctsupported[i] == modH->au8Buffer[FUNC])
 8000fbe:	7bbb      	ldrb	r3, [r7, #14]
 8000fc0:	4a11      	ldr	r2, [pc, #68]	; (8001008 <validateAnswer+0xd8>)
 8000fc2:	5cd2      	ldrb	r2, [r2, r3]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7d1b      	ldrb	r3, [r3, #20]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d102      	bne.n	8000fd2 <validateAnswer+0xa2>
        {
            isSupported = 1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
            break;
 8000fd0:	e005      	b.n	8000fde <validateAnswer+0xae>
    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 8000fd2:	7bbb      	ldrb	r3, [r7, #14]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	73bb      	strb	r3, [r7, #14]
 8000fd8:	7bbb      	ldrb	r3, [r7, #14]
 8000fda:	2b07      	cmp	r3, #7
 8000fdc:	d9ef      	bls.n	8000fbe <validateAnswer+0x8e>
        }
    }
    if (!isSupported)
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	f083 0301 	eor.w	r3, r3, #1
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d009      	beq.n	8000ffe <validateAnswer+0xce>
    {
    	modH->u16errCnt ++;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	b29a      	uxth	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return EXC_FUNC_CODE;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e000      	b.n	8001000 <validateAnswer+0xd0>
    }

    return 0; // OK, no exception code thrown
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3710      	adds	r7, #16
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	0800c344 	.word	0x0800c344

0800100c <getRxBuffer>:
 *
 * @return buffer size if OK, ERR_BUFF_OVERFLOW if u8BufferSize >= MAX_BUFFER
 * @ingroup buffer
 */
int8_t getRxBuffer(modbusHandler_t *modH)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
    bool bBuffOverflow = false;
 8001014:	2300      	movs	r3, #0
 8001016:	72fb      	strb	r3, [r7, #11]
    int i;
    if (modH->EN_Port)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d007      	beq.n	8001030 <getRxBuffer+0x24>
    {
    	//digitalWrite( u8txenpin, LOW );
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68d8      	ldr	r0, [r3, #12]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	8a1b      	ldrh	r3, [r3, #16]
 8001028:	2200      	movs	r2, #0
 800102a:	4619      	mov	r1, r3
 800102c:	f002 fc5c 	bl	80038e8 <HAL_GPIO_WritePin>
    }


    modH->u8BufferSize = uxQueueMessagesWaiting(modH->QueueModbusHandle);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001034:	4618      	mov	r0, r3
 8001036:	f008 fd43 	bl	8009ac0 <uxQueueMessagesWaiting>
 800103a:	4603      	mov	r3, r0
 800103c:	b2da      	uxtb	r2, r3
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    for(i = 0; i<  modH->u8BufferSize; i++ )
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	e00d      	b.n	8001066 <getRxBuffer+0x5a>
   	{
   		  xQueueReceive(modH->QueueModbusHandle, &modH->au8Buffer[i], 0);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	3310      	adds	r3, #16
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	4413      	add	r3, r2
 8001056:	3303      	adds	r3, #3
 8001058:	2200      	movs	r2, #0
 800105a:	4619      	mov	r1, r3
 800105c:	f008 fb4c 	bl	80096f8 <xQueueReceive>
    for(i = 0; i<  modH->u8BufferSize; i++ )
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3301      	adds	r3, #1
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800106c:	461a      	mov	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4293      	cmp	r3, r2
 8001072:	dbea      	blt.n	800104a <getRxBuffer+0x3e>
   	}

    modH->u16InCnt++;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800107a:	3301      	adds	r3, #1
 800107c:	b29a      	uxth	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c


    if (bBuffOverflow)
 8001084:	7afb      	ldrb	r3, [r7, #11]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00a      	beq.n	80010a0 <getRxBuffer+0x94>
    {
    	modH->u16errCnt++;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001090:	3301      	adds	r3, #1
 8001092:	b29a      	uxth	r2, r3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        return ERR_BUFF_OVERFLOW;  //using queues this will not happen
 800109a:	f06f 0302 	mvn.w	r3, #2
 800109e:	e003      	b.n	80010a8 <getRxBuffer+0x9c>
    }
    return modH->u8BufferSize;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80010a6:	b25b      	sxtb	r3, r3
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3710      	adds	r7, #16
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <HAL_UART_RxCpltCallback>:
 * This is the callback for HAL interrupt of UART RX
 *
 * @ingroup UartHandle UART HAL handler
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b087      	sub	sp, #28
 80010b4:	af02      	add	r7, sp, #8
 80010b6:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]

    int i;
    for (i = 0; i < numberHandlers; i++ )
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	e03b      	b.n	800113a <HAL_UART_RxCpltCallback+0x8a>
    {
    	if (mHandlers[i]->port == UartHandle  )
 80010c2:	4a23      	ldr	r2, [pc, #140]	; (8001150 <HAL_UART_RxCpltCallback+0xa0>)
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d130      	bne.n	8001134 <HAL_UART_RxCpltCallback+0x84>
    	{
    		xQueueSendToBackFromISR( mHandlers[i]->QueueModbusHandle, &mHandlers[i]->dataRX, pdFALSE);
 80010d2:	4a1f      	ldr	r2, [pc, #124]	; (8001150 <HAL_UART_RxCpltCallback+0xa0>)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010da:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80010dc:	4a1c      	ldr	r2, [pc, #112]	; (8001150 <HAL_UART_RxCpltCallback+0xa0>)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e4:	f103 0171 	add.w	r1, r3, #113	; 0x71
 80010e8:	2300      	movs	r3, #0
 80010ea:	2200      	movs	r2, #0
 80010ec:	f008 fa70 	bl	80095d0 <xQueueGenericSendFromISR>
    		HAL_UART_Receive_IT(mHandlers[i]->port, &mHandlers[i]->dataRX, 1);
 80010f0:	4a17      	ldr	r2, [pc, #92]	; (8001150 <HAL_UART_RxCpltCallback+0xa0>)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f8:	6858      	ldr	r0, [r3, #4]
 80010fa:	4a15      	ldr	r2, [pc, #84]	; (8001150 <HAL_UART_RxCpltCallback+0xa0>)
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001102:	3371      	adds	r3, #113	; 0x71
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	f005 fbdc 	bl	80068c4 <HAL_UART_Receive_IT>
    		xTimerResetFromISR(mHandlers[i]->xTimerT35, &xHigherPriorityTaskWoken);
 800110c:	4a10      	ldr	r2, [pc, #64]	; (8001150 <HAL_UART_RxCpltCallback+0xa0>)
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001114:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8001118:	f009 f9b0 	bl	800a47c <xTaskGetTickCountFromISR>
 800111c:	4601      	mov	r1, r0
 800111e:	f107 0208 	add.w	r2, r7, #8
 8001122:	2300      	movs	r3, #0
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	4613      	mov	r3, r2
 8001128:	460a      	mov	r2, r1
 800112a:	2107      	movs	r1, #7
 800112c:	4620      	mov	r0, r4
 800112e:	f00a f921 	bl	800b374 <xTimerGenericCommand>
    		break;
 8001132:	e008      	b.n	8001146 <HAL_UART_RxCpltCallback+0x96>
    for (i = 0; i < numberHandlers; i++ )
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	3301      	adds	r3, #1
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b06      	ldr	r3, [pc, #24]	; (8001154 <HAL_UART_RxCpltCallback+0xa4>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4293      	cmp	r3, r2
 8001144:	dbbd      	blt.n	80010c2 <HAL_UART_RxCpltCallback+0x12>
    	}
    }


}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	bd90      	pop	{r4, r7, pc}
 800114e:	bf00      	nop
 8001150:	240049fc 	.word	0x240049fc
 8001154:	240000f0 	.word	0x240000f0

08001158 <validateRequest>:
 *
 * @return 0 if OK, EXCEPTION if anything fails
 * @ingroup modH Modbus handler
 */
uint8_t validateRequest(modbusHandler_t *modH)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
	// check message crc vs calculated crc
	    uint16_t u16MsgCRC =
	        ((modH->au8Buffer[modH->u8BufferSize - 2] << 8)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001166:	3b02      	subs	r3, #2
 8001168:	687a      	ldr	r2, [r7, #4]
 800116a:	4413      	add	r3, r2
 800116c:	7cdb      	ldrb	r3, [r3, #19]
 800116e:	021b      	lsls	r3, r3, #8
	         | modH->au8Buffer[modH->u8BufferSize - 1]); // combine the crc Low & High bytes
 8001170:	b21a      	sxth	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001178:	3b01      	subs	r3, #1
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	440b      	add	r3, r1
 800117e:	7cdb      	ldrb	r3, [r3, #19]
 8001180:	b21b      	sxth	r3, r3
 8001182:	4313      	orrs	r3, r2
 8001184:	b21b      	sxth	r3, r3
	    uint16_t u16MsgCRC =
 8001186:	81bb      	strh	r3, [r7, #12]
	    if ( calcCRC( modH->au8Buffer,  modH->u8BufferSize-2 ) != u16MsgCRC )
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	f103 0213 	add.w	r2, r3, #19
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001194:	3b02      	subs	r3, #2
 8001196:	b2db      	uxtb	r3, r3
 8001198:	4619      	mov	r1, r3
 800119a:	4610      	mov	r0, r2
 800119c:	f000 f8ef 	bl	800137e <calcCRC>
 80011a0:	4603      	mov	r3, r0
 80011a2:	461a      	mov	r2, r3
 80011a4:	89bb      	ldrh	r3, [r7, #12]
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d009      	beq.n	80011be <validateRequest+0x66>
	    {
	    	modH->u16errCnt ++;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80011b0:	3301      	adds	r3, #1
 80011b2:	b29a      	uxth	r2, r3
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	        return NO_REPLY;
 80011ba:	23ff      	movs	r3, #255	; 0xff
 80011bc:	e0c6      	b.n	800134c <validateRequest+0x1f4>
	    }

	    // check fct code
	    bool isSupported = false;
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80011c2:	2300      	movs	r3, #0
 80011c4:	73bb      	strb	r3, [r7, #14]
 80011c6:	e00c      	b.n	80011e2 <validateRequest+0x8a>
	    {
	        if (fctsupported[i] == modH->au8Buffer[FUNC])
 80011c8:	7bbb      	ldrb	r3, [r7, #14]
 80011ca:	4a62      	ldr	r2, [pc, #392]	; (8001354 <validateRequest+0x1fc>)
 80011cc:	5cd2      	ldrb	r2, [r2, r3]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	7d1b      	ldrb	r3, [r3, #20]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d102      	bne.n	80011dc <validateRequest+0x84>
	        {
	            isSupported = 1;
 80011d6:	2301      	movs	r3, #1
 80011d8:	73fb      	strb	r3, [r7, #15]
	            break;
 80011da:	e005      	b.n	80011e8 <validateRequest+0x90>
	    for (uint8_t i = 0; i< sizeof( fctsupported ); i++)
 80011dc:	7bbb      	ldrb	r3, [r7, #14]
 80011de:	3301      	adds	r3, #1
 80011e0:	73bb      	strb	r3, [r7, #14]
 80011e2:	7bbb      	ldrb	r3, [r7, #14]
 80011e4:	2b07      	cmp	r3, #7
 80011e6:	d9ef      	bls.n	80011c8 <validateRequest+0x70>
	        }
	    }
	    if (!isSupported)
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	f083 0301 	eor.w	r3, r3, #1
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d009      	beq.n	8001208 <validateRequest+0xb0>
	    {
	    	modH->u16errCnt ++;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80011fa:	3301      	adds	r3, #1
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	        return EXC_FUNC_CODE;
 8001204:	2301      	movs	r3, #1
 8001206:	e0a1      	b.n	800134c <validateRequest+0x1f4>
	    }

	    // check start address & nb range
	    uint16_t u16regs = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	817b      	strh	r3, [r7, #10]
	    uint8_t u8regs;
	    switch ( modH->au8Buffer[ FUNC ] )
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	7d1b      	ldrb	r3, [r3, #20]
 8001210:	3b01      	subs	r3, #1
 8001212:	2b0f      	cmp	r3, #15
 8001214:	f200 8099 	bhi.w	800134a <validateRequest+0x1f2>
 8001218:	a201      	add	r2, pc, #4	; (adr r2, 8001220 <validateRequest+0xc8>)
 800121a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121e:	bf00      	nop
 8001220:	08001261 	.word	0x08001261
 8001224:	08001261 	.word	0x08001261
 8001228:	080012fb 	.word	0x080012fb
 800122c:	080012fb 	.word	0x080012fb
 8001230:	080012a9 	.word	0x080012a9
 8001234:	080012d3 	.word	0x080012d3
 8001238:	0800134b 	.word	0x0800134b
 800123c:	0800134b 	.word	0x0800134b
 8001240:	0800134b 	.word	0x0800134b
 8001244:	0800134b 	.word	0x0800134b
 8001248:	0800134b 	.word	0x0800134b
 800124c:	0800134b 	.word	0x0800134b
 8001250:	0800134b 	.word	0x0800134b
 8001254:	0800134b 	.word	0x0800134b
 8001258:	08001261 	.word	0x08001261
 800125c:	080012fb 	.word	0x080012fb
	    {
	    case MB_FC_READ_COILS:
	    case MB_FC_READ_DISCRETE_INPUT:
	    case MB_FC_WRITE_MULTIPLE_COILS:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	7d5a      	ldrb	r2, [r3, #21]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7d9b      	ldrb	r3, [r3, #22]
 8001268:	4619      	mov	r1, r3
 800126a:	4610      	mov	r0, r2
 800126c:	f000 f874 	bl	8001358 <word>
 8001270:	4603      	mov	r3, r0
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]) /16;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7dda      	ldrb	r2, [r3, #23]
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	7e1b      	ldrb	r3, [r3, #24]
 800127e:	4619      	mov	r1, r3
 8001280:	4610      	mov	r0, r2
 8001282:	f000 f869 	bl	8001358 <word>
 8001286:	4603      	mov	r3, r0
 8001288:	091b      	lsrs	r3, r3, #4
 800128a:	b29b      	uxth	r3, r3
 800128c:	b29a      	uxth	r2, r3
 800128e:	897b      	ldrh	r3, [r7, #10]
 8001290:	4413      	add	r3, r2
 8001292:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8001294:	897b      	ldrh	r3, [r7, #10]
 8001296:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800129e:	7a7a      	ldrb	r2, [r7, #9]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d94b      	bls.n	800133c <validateRequest+0x1e4>
 80012a4:	2302      	movs	r3, #2
 80012a6:	e051      	b.n	800134c <validateRequest+0x1f4>
	        break;
	    case MB_FC_WRITE_COIL:
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]) / 16;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7d5a      	ldrb	r2, [r3, #21]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7d9b      	ldrb	r3, [r3, #22]
 80012b0:	4619      	mov	r1, r3
 80012b2:	4610      	mov	r0, r2
 80012b4:	f000 f850 	bl	8001358 <word>
 80012b8:	4603      	mov	r3, r0
 80012ba:	091b      	lsrs	r3, r3, #4
 80012bc:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 80012be:	897b      	ldrh	r3, [r7, #10]
 80012c0:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80012c8:	7a7a      	ldrb	r2, [r7, #9]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d938      	bls.n	8001340 <validateRequest+0x1e8>
 80012ce:	2302      	movs	r3, #2
 80012d0:	e03c      	b.n	800134c <validateRequest+0x1f4>
	        break;
	    case MB_FC_WRITE_REGISTER :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7d5a      	ldrb	r2, [r3, #21]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	7d9b      	ldrb	r3, [r3, #22]
 80012da:	4619      	mov	r1, r3
 80012dc:	4610      	mov	r0, r2
 80012de:	f000 f83b 	bl	8001358 <word>
 80012e2:	4603      	mov	r3, r0
 80012e4:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 80012e6:	897b      	ldrh	r3, [r7, #10]
 80012e8:	727b      	strb	r3, [r7, #9]
	        if (u8regs >modH-> u8regsize) return EXC_ADDR_RANGE;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80012f0:	7a7a      	ldrb	r2, [r7, #9]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d926      	bls.n	8001344 <validateRequest+0x1ec>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e028      	b.n	800134c <validateRequest+0x1f4>
	        break;
	    case MB_FC_READ_REGISTERS :
	    case MB_FC_READ_INPUT_REGISTER :
	    case MB_FC_WRITE_MULTIPLE_REGISTERS :
	        u16regs = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ]);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	7d5a      	ldrb	r2, [r3, #21]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7d9b      	ldrb	r3, [r3, #22]
 8001302:	4619      	mov	r1, r3
 8001304:	4610      	mov	r0, r2
 8001306:	f000 f827 	bl	8001358 <word>
 800130a:	4603      	mov	r3, r0
 800130c:	817b      	strh	r3, [r7, #10]
	        u16regs += word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ]);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	7dda      	ldrb	r2, [r3, #23]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	7e1b      	ldrb	r3, [r3, #24]
 8001316:	4619      	mov	r1, r3
 8001318:	4610      	mov	r0, r2
 800131a:	f000 f81d 	bl	8001358 <word>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	897b      	ldrh	r3, [r7, #10]
 8001324:	4413      	add	r3, r2
 8001326:	817b      	strh	r3, [r7, #10]
	        u8regs = (uint8_t) u16regs;
 8001328:	897b      	ldrh	r3, [r7, #10]
 800132a:	727b      	strb	r3, [r7, #9]
	        if (u8regs > modH->u8regsize) return EXC_ADDR_RANGE;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001332:	7a7a      	ldrb	r2, [r7, #9]
 8001334:	429a      	cmp	r2, r3
 8001336:	d907      	bls.n	8001348 <validateRequest+0x1f0>
 8001338:	2302      	movs	r3, #2
 800133a:	e007      	b.n	800134c <validateRequest+0x1f4>
	        break;
 800133c:	bf00      	nop
 800133e:	e004      	b.n	800134a <validateRequest+0x1f2>
	        break;
 8001340:	bf00      	nop
 8001342:	e002      	b.n	800134a <validateRequest+0x1f2>
	        break;
 8001344:	bf00      	nop
 8001346:	e000      	b.n	800134a <validateRequest+0x1f2>
	        break;
 8001348:	bf00      	nop
	    }
	    return 0; // OK, no exception code thrown
 800134a:	2300      	movs	r3, #0

}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	0800c344 	.word	0x0800c344

08001358 <word>:
 * @return uint16_t (word)
 * @ingroup H  Most significant byte
 * @ingroup L  Less significant byte
 */
uint16_t word(uint8_t H, uint8_t L)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	460a      	mov	r2, r1
 8001362:	71fb      	strb	r3, [r7, #7]
 8001364:	4613      	mov	r3, r2
 8001366:	71bb      	strb	r3, [r7, #6]
	bytesFields W;
	W.u8[0] = L;
 8001368:	79bb      	ldrb	r3, [r7, #6]
 800136a:	733b      	strb	r3, [r7, #12]
	W.u8[1] = H;
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	737b      	strb	r3, [r7, #13]

	return W.u16[0];
 8001370:	89bb      	ldrh	r3, [r7, #12]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3714      	adds	r7, #20
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr

0800137e <calcCRC>:
 * @return uint16_t calculated CRC value for the message
 * @ingroup Buffer
 * @ingroup u8length
 */
uint16_t calcCRC(uint8_t *Buffer, uint8_t u8length)
{
 800137e:	b480      	push	{r7}
 8001380:	b087      	sub	sp, #28
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
 8001386:	460b      	mov	r3, r1
 8001388:	70fb      	strb	r3, [r7, #3]
    unsigned int temp, temp2, flag;
    temp = 0xFFFF;
 800138a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800138e:	617b      	str	r3, [r7, #20]
    for (unsigned char i = 0; i < u8length; i++)
 8001390:	2300      	movs	r3, #0
 8001392:	74fb      	strb	r3, [r7, #19]
 8001394:	e022      	b.n	80013dc <calcCRC+0x5e>
    {
        temp = temp ^ Buffer[i];
 8001396:	7cfb      	ldrb	r3, [r7, #19]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	4413      	add	r3, r2
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	4053      	eors	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 80013a6:	2301      	movs	r3, #1
 80013a8:	74bb      	strb	r3, [r7, #18]
 80013aa:	e011      	b.n	80013d0 <calcCRC+0x52>
        {
            flag = temp & 0x0001;
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	60bb      	str	r3, [r7, #8]
            temp >>=1;
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	085b      	lsrs	r3, r3, #1
 80013b8:	617b      	str	r3, [r7, #20]
            if (flag)
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d004      	beq.n	80013ca <calcCRC+0x4c>
                temp ^= 0xA001;
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	f24a 0301 	movw	r3, #40961	; 0xa001
 80013c6:	4053      	eors	r3, r2
 80013c8:	617b      	str	r3, [r7, #20]
        for (unsigned char j = 1; j <= 8; j++)
 80013ca:	7cbb      	ldrb	r3, [r7, #18]
 80013cc:	3301      	adds	r3, #1
 80013ce:	74bb      	strb	r3, [r7, #18]
 80013d0:	7cbb      	ldrb	r3, [r7, #18]
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d9ea      	bls.n	80013ac <calcCRC+0x2e>
    for (unsigned char i = 0; i < u8length; i++)
 80013d6:	7cfb      	ldrb	r3, [r7, #19]
 80013d8:	3301      	adds	r3, #1
 80013da:	74fb      	strb	r3, [r7, #19]
 80013dc:	7cfa      	ldrb	r2, [r7, #19]
 80013de:	78fb      	ldrb	r3, [r7, #3]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d3d8      	bcc.n	8001396 <calcCRC+0x18>
        }
    }
    // Reverse byte order.
    temp2 = temp >> 8;
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	0a1b      	lsrs	r3, r3, #8
 80013e8:	60fb      	str	r3, [r7, #12]
    temp = (temp << 8) | temp2;
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	021b      	lsls	r3, r3, #8
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	617b      	str	r3, [r7, #20]
    temp &= 0xFFFF;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	617b      	str	r3, [r7, #20]
    // the returned value is already swapped
    // crcLo byte is first & crcHi byte is last
    return temp;
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	b29b      	uxth	r3, r3

}
 80013fe:	4618      	mov	r0, r3
 8001400:	371c      	adds	r7, #28
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <buildException>:
 *
 * @ingroup u8exception exception number
 * @ingroup modH modbus handler
 */
void buildException( uint8_t u8exception, modbusHandler_t *modH )
{
 800140a:	b480      	push	{r7}
 800140c:	b085      	sub	sp, #20
 800140e:	af00      	add	r7, sp, #0
 8001410:	4603      	mov	r3, r0
 8001412:	6039      	str	r1, [r7, #0]
 8001414:	71fb      	strb	r3, [r7, #7]
    uint8_t u8func = modH->au8Buffer[ FUNC ];  // get the original FUNC code
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	7d1b      	ldrb	r3, [r3, #20]
 800141a:	73fb      	strb	r3, [r7, #15]

    modH->au8Buffer[ ID ]      = modH->u8id;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	7a1a      	ldrb	r2, [r3, #8]
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	74da      	strb	r2, [r3, #19]
    modH->au8Buffer[ FUNC ]    = u8func + 0x80;
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	3b80      	subs	r3, #128	; 0x80
 8001428:	b2da      	uxtb	r2, r3
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	751a      	strb	r2, [r3, #20]
    modH->au8Buffer[ 2 ]       = u8exception;
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	79fa      	ldrb	r2, [r7, #7]
 8001432:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = EXCEPTION_SIZE;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	2203      	movs	r2, #3
 8001438:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <sendTxBuffer>:
 *
 * @return nothing
 * @ingroup modH Modbus handler
 */
void sendTxBuffer(modbusHandler_t *modH)
{
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b087      	sub	sp, #28
 800144c:	af02      	add	r7, sp, #8
 800144e:	6078      	str	r0, [r7, #4]
    // append CRC to message
    uint16_t u16crc = calcCRC(modH->au8Buffer, modH->u8BufferSize);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f103 0213 	add.w	r2, r3, #19
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800145c:	4619      	mov	r1, r3
 800145e:	4610      	mov	r0, r2
 8001460:	f7ff ff8d 	bl	800137e <calcCRC>
 8001464:	4603      	mov	r3, r0
 8001466:	81fb      	strh	r3, [r7, #14]
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc >> 8;
 8001468:	89fb      	ldrh	r3, [r7, #14]
 800146a:	0a1b      	lsrs	r3, r3, #8
 800146c:	b29a      	uxth	r2, r3
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001474:	4619      	mov	r1, r3
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	440b      	add	r3, r1
 800147c:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001484:	3301      	adds	r3, #1
 8001486:	b2da      	uxtb	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    modH->au8Buffer[ modH->u8BufferSize ] = u16crc & 0x00ff;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001494:	4619      	mov	r1, r3
 8001496:	89fb      	ldrh	r3, [r7, #14]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	440b      	add	r3, r1
 800149e:	74da      	strb	r2, [r3, #19]
    modH->u8BufferSize++;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80014a6:	3301      	adds	r3, #1
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    if (modH->EN_Port != NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d007      	beq.n	80014c8 <sendTxBuffer+0x80>
    {
        // set RS485 transceiver to transmit mode
    	HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_SET);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	68d8      	ldr	r0, [r3, #12]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	8a1b      	ldrh	r3, [r3, #16]
 80014c0:	2201      	movs	r2, #1
 80014c2:	4619      	mov	r1, r3
 80014c4:	f002 fa10 	bl	80038e8 <HAL_GPIO_WritePin>
    }

    // transfer buffer to serial line
    //port->write( au8Buffer, u8BufferSize );
    //HAL_UART_Transmit(modH->port, modH->au8Buffer , modH->u8BufferSize, 100);
    HAL_UART_Transmit_IT(modH->port, modH->au8Buffer,  modH->u8BufferSize);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6858      	ldr	r0, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f103 0113 	add.w	r1, r3, #19
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80014d8:	b29b      	uxth	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	f005 f96e 	bl	80067bc <HAL_UART_Transmit_IT>

    ulTaskNotifyTake(pdTRUE, portMAX_DELAY); //wait notification from TXE interrupt
 80014e0:	f04f 31ff 	mov.w	r1, #4294967295
 80014e4:	2001      	movs	r0, #1
 80014e6:	f009 fc79 	bl	800addc <ulTaskNotifyTake>


     if (modH->EN_Port != NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d018      	beq.n	8001524 <sendTxBuffer+0xdc>
     {
         // must wait transmission end before changing pin state
         //return RS485 transceiver to receive mode

    	 #if defined(STM32H745xx) || defined(STM32H743xx)
    	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 80014f2:	e007      	b.n	8001504 <sendTxBuffer+0xbc>
         #else
    	 while((modH->port->Instance->SR & USART_SR_TC) ==0 )
		 #endif
    	 {
    		taskYIELD();
 80014f4:	4b1f      	ldr	r3, [pc, #124]	; (8001574 <sendTxBuffer+0x12c>)
 80014f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	f3bf 8f4f 	dsb	sy
 8001500:	f3bf 8f6f 	isb	sy
    	 while((modH->port->Instance->ISR & USART_ISR_TC) ==0 )
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001510:	2b00      	cmp	r3, #0
 8001512:	d0ef      	beq.n	80014f4 <sendTxBuffer+0xac>
    	 }
    	 HAL_GPIO_WritePin(modH->EN_Port, modH->EN_Pin, GPIO_PIN_RESET);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68d8      	ldr	r0, [r3, #12]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	8a1b      	ldrh	r3, [r3, #16]
 800151c:	2200      	movs	r2, #0
 800151e:	4619      	mov	r1, r3
 8001520:	f002 f9e2 	bl	80038e8 <HAL_GPIO_WritePin>
     }

     xQueueGenericReset(modH->QueueModbusHandle, pdFALSE);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f007 fdb2 	bl	8009094 <xQueueGenericReset>

     modH->u8BufferSize = 0;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

     // set timeout for master query
     if(modH->uiModbusType == MASTER_RTU )
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b04      	cmp	r3, #4
 800153e:	d10c      	bne.n	800155a <sendTxBuffer+0x112>
     {
 		xTimerReset(modH->xTimerTimeout,0);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8001546:	f008 ff89 	bl	800a45c <xTaskGetTickCount>
 800154a:	4602      	mov	r2, r0
 800154c:	2300      	movs	r3, #0
 800154e:	9300      	str	r3, [sp, #0]
 8001550:	2300      	movs	r3, #0
 8001552:	2102      	movs	r1, #2
 8001554:	4620      	mov	r0, r4
 8001556:	f009 ff0d 	bl	800b374 <xTimerGenericCommand>
     }

     // increase message counter
     modH->u16OutCnt++;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8001560:	3301      	adds	r3, #1
 8001562:	b29a      	uxth	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

}
 800156a:	bf00      	nop
 800156c:	3714      	adds	r7, #20
 800156e:	46bd      	mov	sp, r7
 8001570:	bd90      	pop	{r4, r7, pc}
 8001572:	bf00      	nop
 8001574:	e000ed04 	.word	0xe000ed04

08001578 <process_FC1>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC1(modbusHandler_t *modH )
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit, u8bytesno, u8bitsno;
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	7d5a      	ldrb	r2, [r3, #21]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	7d9b      	ldrb	r3, [r3, #22]
 8001588:	4619      	mov	r1, r3
 800158a:	4610      	mov	r0, r2
 800158c:	f7ff fee4 	bl	8001358 <word>
 8001590:	4603      	mov	r3, r0
 8001592:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7dda      	ldrb	r2, [r3, #23]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	7e1b      	ldrb	r3, [r3, #24]
 800159c:	4619      	mov	r1, r3
 800159e:	4610      	mov	r0, r2
 80015a0:	f7ff feda 	bl	8001358 <word>
 80015a4:	4603      	mov	r3, r0
 80015a6:	823b      	strh	r3, [r7, #16]

    // put the number of bytes in the outcoming message
    u8bytesno = (uint8_t) (u16Coilno / 8);
 80015a8:	8a3b      	ldrh	r3, [r7, #16]
 80015aa:	08db      	lsrs	r3, r3, #3
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	75fb      	strb	r3, [r7, #23]
    if (u16Coilno % 8 != 0) u8bytesno ++;
 80015b0:	8a3b      	ldrh	r3, [r7, #16]
 80015b2:	f003 0307 	and.w	r3, r3, #7
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d002      	beq.n	80015c2 <process_FC1+0x4a>
 80015bc:	7dfb      	ldrb	r3, [r7, #23]
 80015be:	3301      	adds	r3, #1
 80015c0:	75fb      	strb	r3, [r7, #23]
    modH->au8Buffer[ ADD_HI ]  = u8bytesno;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7dfa      	ldrb	r2, [r7, #23]
 80015c6:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = ADD_LO;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2203      	movs	r2, #3
 80015cc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    modH->au8Buffer[modH->u8BufferSize + u8bytesno - 1 ] = 0;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80015d6:	461a      	mov	r2, r3
 80015d8:	7dfb      	ldrb	r3, [r7, #23]
 80015da:	4413      	add	r3, r2
 80015dc:	3b01      	subs	r3, #1
 80015de:	687a      	ldr	r2, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	2200      	movs	r2, #0
 80015e4:	74da      	strb	r2, [r3, #19]

    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	75bb      	strb	r3, [r7, #22]

    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	82bb      	strh	r3, [r7, #20]
 80015ee:	e058      	b.n	80016a2 <process_FC1+0x12a>
    {
        u16coil = u16StartCoil + u16currentCoil;
 80015f0:	8a7a      	ldrh	r2, [r7, #18]
 80015f2:	8abb      	ldrh	r3, [r7, #20]
 80015f4:	4413      	add	r3, r2
 80015f6:	81bb      	strh	r3, [r7, #12]
        u8currentRegister = (uint8_t) (u16coil / 16);
 80015f8:	89bb      	ldrh	r3, [r7, #12]
 80015fa:	091b      	lsrs	r3, r3, #4
 80015fc:	b29b      	uxth	r3, r3
 80015fe:	72fb      	strb	r3, [r7, #11]
        u8currentBit = (uint8_t) (u16coil % 16);
 8001600:	89bb      	ldrh	r3, [r7, #12]
 8001602:	b2db      	uxtb	r3, r3
 8001604:	f003 030f 	and.w	r3, r3, #15
 8001608:	72bb      	strb	r3, [r7, #10]

        bitWrite(
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800160e:	7afb      	ldrb	r3, [r7, #11]
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	461a      	mov	r2, r3
 8001618:	7abb      	ldrb	r3, [r7, #10]
 800161a:	fa42 f303 	asr.w	r3, r2, r3
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d014      	beq.n	8001650 <process_FC1+0xd8>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800162c:	461a      	mov	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4413      	add	r3, r2
 8001632:	7cda      	ldrb	r2, [r3, #19]
 8001634:	7dbb      	ldrb	r3, [r7, #22]
 8001636:	2101      	movs	r1, #1
 8001638:	fa01 f303 	lsl.w	r3, r1, r3
 800163c:	b2db      	uxtb	r3, r3
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f891 1053 	ldrb.w	r1, [r1, #83]	; 0x53
 8001644:	4313      	orrs	r3, r2
 8001646:	b2da      	uxtb	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	440b      	add	r3, r1
 800164c:	74da      	strb	r2, [r3, #19]
 800164e:	e015      	b.n	800167c <process_FC1+0x104>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001656:	461a      	mov	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	4413      	add	r3, r2
 800165c:	7cda      	ldrb	r2, [r3, #19]
 800165e:	7dbb      	ldrb	r3, [r7, #22]
 8001660:	2101      	movs	r1, #1
 8001662:	fa01 f303 	lsl.w	r3, r1, r3
 8001666:	b2db      	uxtb	r3, r3
 8001668:	43db      	mvns	r3, r3
 800166a:	b2db      	uxtb	r3, r3
 800166c:	6879      	ldr	r1, [r7, #4]
 800166e:	f891 1053 	ldrb.w	r1, [r1, #83]	; 0x53
 8001672:	4013      	ands	r3, r2
 8001674:	b2da      	uxtb	r2, r3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	440b      	add	r3, r1
 800167a:	74da      	strb	r2, [r3, #19]
        	modH->au8Buffer[ modH->u8BufferSize ],
            u8bitsno,
		    bitRead( modH->au16regs[ u8currentRegister ], u8currentBit ) );
        u8bitsno ++;
 800167c:	7dbb      	ldrb	r3, [r7, #22]
 800167e:	3301      	adds	r3, #1
 8001680:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8001682:	7dbb      	ldrb	r3, [r7, #22]
 8001684:	2b07      	cmp	r3, #7
 8001686:	d909      	bls.n	800169c <process_FC1+0x124>
        {
            u8bitsno = 0;
 8001688:	2300      	movs	r3, #0
 800168a:	75bb      	strb	r3, [r7, #22]
            modH->u8BufferSize++;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001692:	3301      	adds	r3, #1
 8001694:	b2da      	uxtb	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 800169c:	8abb      	ldrh	r3, [r7, #20]
 800169e:	3301      	adds	r3, #1
 80016a0:	82bb      	strh	r3, [r7, #20]
 80016a2:	8aba      	ldrh	r2, [r7, #20]
 80016a4:	8a3b      	ldrh	r3, [r7, #16]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d3a2      	bcc.n	80015f0 <process_FC1+0x78>
        }
    }

    // send outcoming message
    if (u16Coilno % 8 != 0) modH->u8BufferSize ++;
 80016aa:	8a3b      	ldrh	r3, [r7, #16]
 80016ac:	f003 0307 	and.w	r3, r3, #7
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d007      	beq.n	80016c6 <process_FC1+0x14e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80016bc:	3301      	adds	r3, #1
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize = modH->u8BufferSize +2;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80016cc:	3302      	adds	r3, #2
 80016ce:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff feb9 	bl	8001448 <sendTxBuffer>
    return u8CopyBufferSize;
 80016d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3718      	adds	r7, #24
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}

080016e2 <process_FC3>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC3(modbusHandler_t *modH)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b084      	sub	sp, #16
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]

    uint8_t u8StartAdd = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7d5a      	ldrb	r2, [r3, #21]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	7d9b      	ldrb	r3, [r3, #22]
 80016f2:	4619      	mov	r1, r3
 80016f4:	4610      	mov	r0, r2
 80016f6:	f7ff fe2f 	bl	8001358 <word>
 80016fa:	4603      	mov	r3, r0
 80016fc:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7dda      	ldrb	r2, [r3, #23]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	7e1b      	ldrb	r3, [r3, #24]
 8001706:	4619      	mov	r1, r3
 8001708:	4610      	mov	r0, r2
 800170a:	f7ff fe25 	bl	8001358 <word>
 800170e:	4603      	mov	r3, r0
 8001710:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;

    modH->au8Buffer[ 2 ]       = u8regsno * 2;
 8001712:	7b7b      	ldrb	r3, [r7, #13]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	b2da      	uxtb	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	755a      	strb	r2, [r3, #21]
    modH->u8BufferSize         = 3;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2203      	movs	r2, #3
 8001720:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8001724:	7bbb      	ldrb	r3, [r7, #14]
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	e030      	b.n	800178c <process_FC3+0xaa>
    {
    	modH->au8Buffer[ modH->u8BufferSize ] = highByte(modH->au16regs[i]);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800172e:	7bfb      	ldrb	r3, [r7, #15]
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	881b      	ldrh	r3, [r3, #0]
 8001736:	0a1b      	lsrs	r3, r3, #8
 8001738:	b29a      	uxth	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001740:	4619      	mov	r1, r3
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	440b      	add	r3, r1
 8001748:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001750:	3301      	adds	r3, #1
 8001752:	b2da      	uxtb	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    	modH->au8Buffer[ modH->u8BufferSize ] = lowByte(modH->au16regs[i]);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800175e:	7bfb      	ldrb	r3, [r7, #15]
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	881a      	ldrh	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800176c:	4619      	mov	r1, r3
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	440b      	add	r3, r1
 8001774:	74da      	strb	r2, [r3, #19]
    	modH->u8BufferSize++;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800177c:	3301      	adds	r3, #1
 800177e:	b2da      	uxtb	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
 8001786:	7bfb      	ldrb	r3, [r7, #15]
 8001788:	3301      	adds	r3, #1
 800178a:	73fb      	strb	r3, [r7, #15]
 800178c:	7bfa      	ldrb	r2, [r7, #15]
 800178e:	7bb9      	ldrb	r1, [r7, #14]
 8001790:	7b7b      	ldrb	r3, [r7, #13]
 8001792:	440b      	add	r3, r1
 8001794:	429a      	cmp	r2, r3
 8001796:	dbc8      	blt.n	800172a <process_FC3+0x48>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800179e:	3302      	adds	r3, #2
 80017a0:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff fe50 	bl	8001448 <sendTxBuffer>

    return u8CopyBufferSize;
 80017a8:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3710      	adds	r7, #16
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <process_FC5>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC5( modbusHandler_t *modH )
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
    uint8_t u8currentRegister, u8currentBit;
    uint8_t u8CopyBufferSize;
    uint16_t u16coil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	7d5a      	ldrb	r2, [r3, #21]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7d9b      	ldrb	r3, [r3, #22]
 80017c4:	4619      	mov	r1, r3
 80017c6:	4610      	mov	r0, r2
 80017c8:	f7ff fdc6 	bl	8001358 <word>
 80017cc:	4603      	mov	r3, r0
 80017ce:	81fb      	strh	r3, [r7, #14]

    // point to the register and its bit
    u8currentRegister = (uint8_t) (u16coil / 16);
 80017d0:	89fb      	ldrh	r3, [r7, #14]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	737b      	strb	r3, [r7, #13]
    u8currentBit = (uint8_t) (u16coil % 16);
 80017d8:	89fb      	ldrh	r3, [r7, #14]
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	f003 030f 	and.w	r3, r3, #15
 80017e0:	733b      	strb	r3, [r7, #12]

    // write to coil
    bitWrite(
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	7ddb      	ldrb	r3, [r3, #23]
 80017e6:	2bff      	cmp	r3, #255	; 0xff
 80017e8:	d113      	bne.n	8001812 <process_FC5+0x5e>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017ee:	7b7b      	ldrb	r3, [r7, #13]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	8819      	ldrh	r1, [r3, #0]
 80017f6:	7b3b      	ldrb	r3, [r7, #12]
 80017f8:	2201      	movs	r2, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	b29a      	uxth	r2, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001804:	7b7b      	ldrb	r3, [r7, #13]
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4403      	add	r3, r0
 800180a:	430a      	orrs	r2, r1
 800180c:	b292      	uxth	r2, r2
 800180e:	801a      	strh	r2, [r3, #0]
 8001810:	e014      	b.n	800183c <process_FC5+0x88>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001816:	7b7b      	ldrb	r3, [r7, #13]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	4413      	add	r3, r2
 800181c:	8819      	ldrh	r1, [r3, #0]
 800181e:	7b3b      	ldrb	r3, [r7, #12]
 8001820:	2201      	movs	r2, #1
 8001822:	fa02 f303 	lsl.w	r3, r2, r3
 8001826:	b29b      	uxth	r3, r3
 8001828:	43db      	mvns	r3, r3
 800182a:	b29a      	uxth	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001830:	7b7b      	ldrb	r3, [r7, #13]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4403      	add	r3, r0
 8001836:	400a      	ands	r2, r1
 8001838:	b292      	uxth	r2, r2
 800183a:	801a      	strh	r2, [r3, #0]
        u8currentBit,
		modH->au8Buffer[ NB_HI ] == 0xff );


    // send answer to master
    modH->u8BufferSize = 6;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2206      	movs	r2, #6
 8001840:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize =  modH->u8BufferSize +2;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 800184a:	3302      	adds	r3, #2
 800184c:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f7ff fdfa 	bl	8001448 <sendTxBuffer>

    return u8CopyBufferSize;
 8001854:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8001858:	4618      	mov	r0, r3
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <process_FC6>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC6(modbusHandler_t *modH )
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

    uint8_t u8add = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	7d5a      	ldrb	r2, [r3, #21]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	7d9b      	ldrb	r3, [r3, #22]
 8001870:	4619      	mov	r1, r3
 8001872:	4610      	mov	r0, r2
 8001874:	f7ff fd70 	bl	8001358 <word>
 8001878:	4603      	mov	r3, r0
 800187a:	73fb      	strb	r3, [r7, #15]
    uint8_t u8CopyBufferSize;
    uint16_t u16val = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7dda      	ldrb	r2, [r3, #23]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	7e1b      	ldrb	r3, [r3, #24]
 8001884:	4619      	mov	r1, r3
 8001886:	4610      	mov	r0, r2
 8001888:	f7ff fd66 	bl	8001358 <word>
 800188c:	4603      	mov	r3, r0
 800188e:	81bb      	strh	r3, [r7, #12]

    modH->au16regs[ u8add ] = u16val;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	4413      	add	r3, r2
 800189a:	89ba      	ldrh	r2, [r7, #12]
 800189c:	801a      	strh	r2, [r3, #0]

    // keep the same header
    modH->u8BufferSize = RESPONSE_SIZE;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2206      	movs	r2, #6
 80018a2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    u8CopyBufferSize = modH->u8BufferSize +2;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80018ac:	3302      	adds	r3, #2
 80018ae:	72fb      	strb	r3, [r7, #11]
    sendTxBuffer(modH);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff fdc9 	bl	8001448 <sendTxBuffer>

    return u8CopyBufferSize;
 80018b6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3710      	adds	r7, #16
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <process_FC15>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup discrete
 */
int8_t process_FC15( modbusHandler_t *modH )
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b086      	sub	sp, #24
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
    uint8_t u8CopyBufferSize;
    uint16_t u16currentCoil, u16coil;
    bool bTemp;

    // get the first and last coil from the message
    uint16_t u16StartCoil = word( modH->au8Buffer[ ADD_HI ], modH->au8Buffer[ ADD_LO ] );
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	7d5a      	ldrb	r2, [r3, #21]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	7d9b      	ldrb	r3, [r3, #22]
 80018d2:	4619      	mov	r1, r3
 80018d4:	4610      	mov	r0, r2
 80018d6:	f7ff fd3f 	bl	8001358 <word>
 80018da:	4603      	mov	r3, r0
 80018dc:	827b      	strh	r3, [r7, #18]
    uint16_t u16Coilno = word( modH->au8Buffer[ NB_HI ], modH->au8Buffer[ NB_LO ] );
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	7dda      	ldrb	r2, [r3, #23]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	7e1b      	ldrb	r3, [r3, #24]
 80018e6:	4619      	mov	r1, r3
 80018e8:	4610      	mov	r0, r2
 80018ea:	f7ff fd35 	bl	8001358 <word>
 80018ee:	4603      	mov	r3, r0
 80018f0:	823b      	strh	r3, [r7, #16]


    // read each coil from the register map and put its value inside the outcoming message
    u8bitsno = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	75bb      	strb	r3, [r7, #22]
    u8frameByte = 7;
 80018f6:	2307      	movs	r3, #7
 80018f8:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	82bb      	strh	r3, [r7, #20]
 80018fe:	e055      	b.n	80019ac <process_FC15+0xea>
    {

        u16coil = u16StartCoil + u16currentCoil;
 8001900:	8a7a      	ldrh	r2, [r7, #18]
 8001902:	8abb      	ldrh	r3, [r7, #20]
 8001904:	4413      	add	r3, r2
 8001906:	81bb      	strh	r3, [r7, #12]
        u8currentRegister = (uint8_t) (u16coil / 16);
 8001908:	89bb      	ldrh	r3, [r7, #12]
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	b29b      	uxth	r3, r3
 800190e:	72fb      	strb	r3, [r7, #11]
        u8currentBit = (uint8_t) (u16coil % 16);
 8001910:	89bb      	ldrh	r3, [r7, #12]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	f003 030f 	and.w	r3, r3, #15
 8001918:	72bb      	strb	r3, [r7, #10]

        bTemp = bitRead(
 800191a:	7dfb      	ldrb	r3, [r7, #23]
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	4413      	add	r3, r2
 8001920:	7cdb      	ldrb	r3, [r3, #19]
 8001922:	461a      	mov	r2, r3
 8001924:	7dbb      	ldrb	r3, [r7, #22]
 8001926:	fa42 f303 	asr.w	r3, r2, r3
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	bf14      	ite	ne
 8001932:	2301      	movne	r3, #1
 8001934:	2300      	moveq	r3, #0
 8001936:	727b      	strb	r3, [r7, #9]
        			modH->au8Buffer[ u8frameByte ],
                    u8bitsno );

        bitWrite(
 8001938:	7a7b      	ldrb	r3, [r7, #9]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d013      	beq.n	8001966 <process_FC15+0xa4>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001942:	7afb      	ldrb	r3, [r7, #11]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	8819      	ldrh	r1, [r3, #0]
 800194a:	7abb      	ldrb	r3, [r7, #10]
 800194c:	2201      	movs	r2, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	b29a      	uxth	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001958:	7afb      	ldrb	r3, [r7, #11]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4403      	add	r3, r0
 800195e:	430a      	orrs	r2, r1
 8001960:	b292      	uxth	r2, r2
 8001962:	801a      	strh	r2, [r3, #0]
 8001964:	e014      	b.n	8001990 <process_FC15+0xce>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800196a:	7afb      	ldrb	r3, [r7, #11]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	4413      	add	r3, r2
 8001970:	8819      	ldrh	r1, [r3, #0]
 8001972:	7abb      	ldrb	r3, [r7, #10]
 8001974:	2201      	movs	r2, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	b29b      	uxth	r3, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	b29a      	uxth	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8001984:	7afb      	ldrb	r3, [r7, #11]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	4403      	add	r3, r0
 800198a:	400a      	ands	r2, r1
 800198c:	b292      	uxth	r2, r2
 800198e:	801a      	strh	r2, [r3, #0]
            modH->au16regs[ u8currentRegister ],
            u8currentBit,
            bTemp );

        u8bitsno ++;
 8001990:	7dbb      	ldrb	r3, [r7, #22]
 8001992:	3301      	adds	r3, #1
 8001994:	75bb      	strb	r3, [r7, #22]

        if (u8bitsno > 7)
 8001996:	7dbb      	ldrb	r3, [r7, #22]
 8001998:	2b07      	cmp	r3, #7
 800199a:	d904      	bls.n	80019a6 <process_FC15+0xe4>
        {
            u8bitsno = 0;
 800199c:	2300      	movs	r3, #0
 800199e:	75bb      	strb	r3, [r7, #22]
            u8frameByte++;
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	3301      	adds	r3, #1
 80019a4:	75fb      	strb	r3, [r7, #23]
    for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
 80019a6:	8abb      	ldrh	r3, [r7, #20]
 80019a8:	3301      	adds	r3, #1
 80019aa:	82bb      	strh	r3, [r7, #20]
 80019ac:	8aba      	ldrh	r2, [r7, #20]
 80019ae:	8a3b      	ldrh	r3, [r7, #16]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d3a5      	bcc.n	8001900 <process_FC15+0x3e>
        }
    }

    // send outcoming message
    // it's just a copy of the incomping frame until 6th byte
    modH->u8BufferSize         = 6;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2206      	movs	r2, #6
 80019b8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
    u8CopyBufferSize = modH->u8BufferSize +2;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 80019c2:	3302      	adds	r3, #2
 80019c4:	73fb      	strb	r3, [r7, #15]
    sendTxBuffer(modH);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7ff fd3e 	bl	8001448 <sendTxBuffer>
    return u8CopyBufferSize;
 80019cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <process_FC16>:
 *
 * @return u8BufferSize Response to master length
 * @ingroup register
 */
int8_t process_FC16(modbusHandler_t *modH )
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b084      	sub	sp, #16
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
    uint8_t u8StartAdd = modH->au8Buffer[ ADD_HI ] << 8 | modH->au8Buffer[ ADD_LO ];
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	7d5b      	ldrb	r3, [r3, #21]
 80019e4:	021b      	lsls	r3, r3, #8
 80019e6:	b25a      	sxtb	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	7d9b      	ldrb	r3, [r3, #22]
 80019ec:	b25b      	sxtb	r3, r3
 80019ee:	4313      	orrs	r3, r2
 80019f0:	b25b      	sxtb	r3, r3
 80019f2:	73bb      	strb	r3, [r7, #14]
    uint8_t u8regsno = modH->au8Buffer[ NB_HI ] << 8 | modH->au8Buffer[ NB_LO ];
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	7ddb      	ldrb	r3, [r3, #23]
 80019f8:	021b      	lsls	r3, r3, #8
 80019fa:	b25a      	sxtb	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	7e1b      	ldrb	r3, [r3, #24]
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	4313      	orrs	r3, r2
 8001a04:	b25b      	sxtb	r3, r3
 8001a06:	737b      	strb	r3, [r7, #13]
    uint8_t u8CopyBufferSize;
    uint8_t i;
    uint16_t temp;

    // build header
    modH->au8Buffer[ NB_HI ]   = 0;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	75da      	strb	r2, [r3, #23]
    modH->au8Buffer[ NB_LO ]   = u8regsno;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	7b7a      	ldrb	r2, [r7, #13]
 8001a12:	761a      	strb	r2, [r3, #24]
    modH->u8BufferSize         = RESPONSE_SIZE;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2206      	movs	r2, #6
 8001a18:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

    // write registers
    for (i = 0; i < u8regsno; i++)
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	73fb      	strb	r3, [r7, #15]
 8001a20:	e01c      	b.n	8001a5c <process_FC16+0x84>
    {
        temp = word(
        		modH->au8Buffer[ (BYTE_CNT + 1) + i * 2 ],
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	005b      	lsls	r3, r3, #1
 8001a26:	3307      	adds	r3, #7
        temp = word(
 8001a28:	687a      	ldr	r2, [r7, #4]
 8001a2a:	4413      	add	r3, r2
 8001a2c:	7cd8      	ldrb	r0, [r3, #19]
				modH->au8Buffer[ (BYTE_CNT + 2) + i * 2 ]);
 8001a2e:	7bfb      	ldrb	r3, [r7, #15]
 8001a30:	3304      	adds	r3, #4
 8001a32:	005b      	lsls	r3, r3, #1
        temp = word(
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	4413      	add	r3, r2
 8001a38:	7cdb      	ldrb	r3, [r3, #19]
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f7ff fc8c 	bl	8001358 <word>
 8001a40:	4603      	mov	r3, r0
 8001a42:	817b      	strh	r3, [r7, #10]

        modH->au16regs[ u8StartAdd + i ] = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a48:	7bb9      	ldrb	r1, [r7, #14]
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	440b      	add	r3, r1
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	897a      	ldrh	r2, [r7, #10]
 8001a54:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < u8regsno; i++)
 8001a56:	7bfb      	ldrb	r3, [r7, #15]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	73fb      	strb	r3, [r7, #15]
 8001a5c:	7bfa      	ldrb	r2, [r7, #15]
 8001a5e:	7b7b      	ldrb	r3, [r7, #13]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d3de      	bcc.n	8001a22 <process_FC16+0x4a>
    }
    u8CopyBufferSize = modH->u8BufferSize +2;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 3053 	ldrb.w	r3, [r3, #83]	; 0x53
 8001a6a:	3302      	adds	r3, #2
 8001a6c:	733b      	strb	r3, [r7, #12]
    sendTxBuffer(modH);
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff fcea 	bl	8001448 <sendTxBuffer>

    return u8CopyBufferSize;
 8001a74:	f997 300c 	ldrsb.w	r3, [r7, #12]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3710      	adds	r7, #16
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <HAL_UART_TxCpltCallback>:
 * Modbus functionality.
 * @ingroup UartHandle UART HAL handler
 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af02      	add	r7, sp, #8
 8001a86:	6078      	str	r0, [r7, #4]
	/* Modbus RTU callback BEGIN */
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
	int i;
	for (i = 0; i < numberHandlers; i++ )
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	e018      	b.n	8001ac4 <HAL_UART_TxCpltCallback+0x44>
	{
	   	if (mHandlers[i]->port == huart )
 8001a92:	4a11      	ldr	r2, [pc, #68]	; (8001ad8 <HAL_UART_TxCpltCallback+0x58>)
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d10d      	bne.n	8001abe <HAL_UART_TxCpltCallback+0x3e>
	   	{
	   		xTaskNotifyFromISR(mHandlers[i]->myTaskModbusAHandle, 0, eNoAction, &xHigherPriorityTaskWoken);
 8001aa2:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <HAL_UART_TxCpltCallback+0x58>)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aaa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8001aac:	f107 0308 	add.w	r3, r7, #8
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	f009 fa8c 	bl	800afd4 <xTaskGenericNotifyFromISR>
	   		break;
 8001abc:	e008      	b.n	8001ad0 <HAL_UART_TxCpltCallback+0x50>
	for (i = 0; i < numberHandlers; i++ )
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	60fb      	str	r3, [r7, #12]
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_UART_TxCpltCallback+0x5c>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4293      	cmp	r3, r2
 8001ace:	dbe0      	blt.n	8001a92 <HAL_UART_TxCpltCallback+0x12>
	/*
	 * Here you should implement the callback code for other UARTs not used by Modbus
	 *
	 * */

}
 8001ad0:	bf00      	nop
 8001ad2:	3710      	adds	r7, #16
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	240049fc 	.word	0x240049fc
 8001adc:	240000f0 	.word	0x240000f0

08001ae0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 8001ae4:	4b22      	ldr	r3, [pc, #136]	; (8001b70 <MX_ETH_Init+0x90>)
 8001ae6:	4a23      	ldr	r2, [pc, #140]	; (8001b74 <MX_ETH_Init+0x94>)
 8001ae8:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8001aea:	4b21      	ldr	r3, [pc, #132]	; (8001b70 <MX_ETH_Init+0x90>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 8001af2:	4b1f      	ldr	r3, [pc, #124]	; (8001b70 <MX_ETH_Init+0x90>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	3301      	adds	r3, #1
 8001af8:	2280      	movs	r2, #128	; 0x80
 8001afa:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8001afc:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_ETH_Init+0x90>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	3302      	adds	r3, #2
 8001b02:	22e1      	movs	r2, #225	; 0xe1
 8001b04:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8001b06:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <MX_ETH_Init+0x90>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	3303      	adds	r3, #3
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <MX_ETH_Init+0x90>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	3304      	adds	r3, #4
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <MX_ETH_Init+0x90>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	3305      	adds	r3, #5
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001b24:	4b12      	ldr	r3, [pc, #72]	; (8001b70 <MX_ETH_Init+0x90>)
 8001b26:	2201      	movs	r2, #1
 8001b28:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001b2a:	4b11      	ldr	r3, [pc, #68]	; (8001b70 <MX_ETH_Init+0x90>)
 8001b2c:	4a12      	ldr	r2, [pc, #72]	; (8001b78 <MX_ETH_Init+0x98>)
 8001b2e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001b30:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <MX_ETH_Init+0x90>)
 8001b32:	4a12      	ldr	r2, [pc, #72]	; (8001b7c <MX_ETH_Init+0x9c>)
 8001b34:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001b36:	4b0e      	ldr	r3, [pc, #56]	; (8001b70 <MX_ETH_Init+0x90>)
 8001b38:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001b3c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001b3e:	480c      	ldr	r0, [pc, #48]	; (8001b70 <MX_ETH_Init+0x90>)
 8001b40:	f001 f90c 	bl	8002d5c <HAL_ETH_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8001b4a:	f000 fabd 	bl	80020c8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001b4e:	2234      	movs	r2, #52	; 0x34
 8001b50:	2100      	movs	r1, #0
 8001b52:	480b      	ldr	r0, [pc, #44]	; (8001b80 <MX_ETH_Init+0xa0>)
 8001b54:	f00a fb51 	bl	800c1fa <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <MX_ETH_Init+0xa0>)
 8001b5a:	2221      	movs	r2, #33	; 0x21
 8001b5c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <MX_ETH_Init+0xa0>)
 8001b60:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b64:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <MX_ETH_Init+0xa0>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]

}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	24004a04 	.word	0x24004a04
 8001b74:	40028000 	.word	0x40028000
 8001b78:	24000074 	.word	0x24000074
 8001b7c:	24000014 	.word	0x24000014
 8001b80:	24004a74 	.word	0x24004a74

08001b84 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08e      	sub	sp, #56	; 0x38
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a59      	ldr	r2, [pc, #356]	; (8001d08 <HAL_ETH_MspInit+0x184>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	f040 80ab 	bne.w	8001cfe <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001ba8:	4b58      	ldr	r3, [pc, #352]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001baa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bae:	4a57      	ldr	r2, [pc, #348]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001bb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bb4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bb8:	4b54      	ldr	r3, [pc, #336]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001bba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bc2:	623b      	str	r3, [r7, #32]
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001bc6:	4b51      	ldr	r3, [pc, #324]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001bc8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bcc:	4a4f      	ldr	r2, [pc, #316]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bd6:	4b4d      	ldr	r3, [pc, #308]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001bd8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001be4:	4b49      	ldr	r3, [pc, #292]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001be6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bea:	4a48      	ldr	r2, [pc, #288]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001bf4:	4b45      	ldr	r3, [pc, #276]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001bf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c02:	4b42      	ldr	r3, [pc, #264]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c08:	4a40      	ldr	r2, [pc, #256]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001c0a:	f043 0304 	orr.w	r3, r3, #4
 8001c0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c12:	4b3e      	ldr	r3, [pc, #248]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	617b      	str	r3, [r7, #20]
 8001c1e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c20:	4b3a      	ldr	r3, [pc, #232]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c26:	4a39      	ldr	r2, [pc, #228]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c30:	4b36      	ldr	r3, [pc, #216]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001c32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3e:	4b33      	ldr	r3, [pc, #204]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c44:	4a31      	ldr	r2, [pc, #196]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001c46:	f043 0302 	orr.w	r3, r3, #2
 8001c4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c4e:	4b2f      	ldr	r3, [pc, #188]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c62:	4a2a      	ldr	r2, [pc, #168]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001c64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c6c:	4b27      	ldr	r3, [pc, #156]	; (8001d0c <HAL_ETH_MspInit+0x188>)
 8001c6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001c7a:	2332      	movs	r3, #50	; 0x32
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c8a:	230b      	movs	r3, #11
 8001c8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c92:	4619      	mov	r1, r3
 8001c94:	481e      	ldr	r0, [pc, #120]	; (8001d10 <HAL_ETH_MspInit+0x18c>)
 8001c96:	f001 fc77 	bl	8003588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001c9a:	2386      	movs	r3, #134	; 0x86
 8001c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001caa:	230b      	movs	r3, #11
 8001cac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4817      	ldr	r0, [pc, #92]	; (8001d14 <HAL_ETH_MspInit+0x190>)
 8001cb6:	f001 fc67 	bl	8003588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001cba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ccc:	230b      	movs	r3, #11
 8001cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4810      	ldr	r0, [pc, #64]	; (8001d18 <HAL_ETH_MspInit+0x194>)
 8001cd8:	f001 fc56 	bl	8003588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001cdc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001cee:	230b      	movs	r3, #11
 8001cf0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cf2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4808      	ldr	r0, [pc, #32]	; (8001d1c <HAL_ETH_MspInit+0x198>)
 8001cfa:	f001 fc45 	bl	8003588 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001cfe:	bf00      	nop
 8001d00:	3738      	adds	r7, #56	; 0x38
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40028000 	.word	0x40028000
 8001d0c:	58024400 	.word	0x58024400
 8001d10:	58020800 	.word	0x58020800
 8001d14:	58020000 	.word	0x58020000
 8001d18:	58020400 	.word	0x58020400
 8001d1c:	58021800 	.word	0x58021800

08001d20 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001d24:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <MX_FREERTOS_Init+0x18>)
 8001d26:	2100      	movs	r1, #0
 8001d28:	4804      	ldr	r0, [pc, #16]	; (8001d3c <MX_FREERTOS_Init+0x1c>)
 8001d2a:	f006 fed3 	bl	8008ad4 <osThreadNew>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	4b03      	ldr	r3, [pc, #12]	; (8001d40 <MX_FREERTOS_Init+0x20>)
 8001d32:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001d34:	bf00      	nop
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	0800c34c 	.word	0x0800c34c
 8001d3c:	08001d45 	.word	0x08001d45
 8001d40:	24004aa8 	.word	0x24004aa8

08001d44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d4c:	2001      	movs	r0, #1
 8001d4e:	f006 ff67 	bl	8008c20 <osDelay>
 8001d52:	e7fb      	b.n	8001d4c <StartDefaultTask+0x8>

08001d54 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b08c      	sub	sp, #48	; 0x30
 8001d58:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]
 8001d66:	60da      	str	r2, [r3, #12]
 8001d68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d6a:	4b4f      	ldr	r3, [pc, #316]	; (8001ea8 <MX_GPIO_Init+0x154>)
 8001d6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d70:	4a4d      	ldr	r2, [pc, #308]	; (8001ea8 <MX_GPIO_Init+0x154>)
 8001d72:	f043 0304 	orr.w	r3, r3, #4
 8001d76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d7a:	4b4b      	ldr	r3, [pc, #300]	; (8001ea8 <MX_GPIO_Init+0x154>)
 8001d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d88:	4b47      	ldr	r3, [pc, #284]	; (8001ea8 <MX_GPIO_Init+0x154>)
 8001d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d8e:	4a46      	ldr	r2, [pc, #280]	; (8001ea8 <MX_GPIO_Init+0x154>)
 8001d90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d98:	4b43      	ldr	r3, [pc, #268]	; (8001ea8 <MX_GPIO_Init+0x154>)
 8001d9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	4b40      	ldr	r3, [pc, #256]	; (8001ea8 <MX_GPIO_Init+0x154>)
 8001da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dac:	4a3e      	ldr	r2, [pc, #248]	; (8001ea8 <MX_GPIO_Init+0x154>)
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001db6:	4b3c      	ldr	r3, [pc, #240]	; (8001ea8 <MX_GPIO_Init+0x154>)
 8001db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b38      	ldr	r3, [pc, #224]	; (8001ea8 <MX_GPIO_Init+0x154>)
 8001dc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dca:	4a37      	ldr	r2, [pc, #220]	; (8001ea8 <MX_GPIO_Init+0x154>)
 8001dcc:	f043 0302 	orr.w	r3, r3, #2
 8001dd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dd4:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <MX_GPIO_Init+0x154>)
 8001dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001de2:	4b31      	ldr	r3, [pc, #196]	; (8001ea8 <MX_GPIO_Init+0x154>)
 8001de4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001de8:	4a2f      	ldr	r2, [pc, #188]	; (8001ea8 <MX_GPIO_Init+0x154>)
 8001dea:	f043 0308 	orr.w	r3, r3, #8
 8001dee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001df2:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <MX_GPIO_Init+0x154>)
 8001df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	60bb      	str	r3, [r7, #8]
 8001dfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e00:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <MX_GPIO_Init+0x154>)
 8001e02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e06:	4a28      	ldr	r2, [pc, #160]	; (8001ea8 <MX_GPIO_Init+0x154>)
 8001e08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001e0c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e10:	4b25      	ldr	r3, [pc, #148]	; (8001ea8 <MX_GPIO_Init+0x154>)
 8001e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e1a:	607b      	str	r3, [r7, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001e24:	4821      	ldr	r0, [pc, #132]	; (8001eac <MX_GPIO_Init+0x158>)
 8001e26:	f001 fd5f 	bl	80038e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2140      	movs	r1, #64	; 0x40
 8001e2e:	4820      	ldr	r0, [pc, #128]	; (8001eb0 <MX_GPIO_Init+0x15c>)
 8001e30:	f001 fd5a 	bl	80038e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001e34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <MX_GPIO_Init+0x160>)
 8001e3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001e42:	f107 031c 	add.w	r3, r7, #28
 8001e46:	4619      	mov	r1, r3
 8001e48:	481b      	ldr	r0, [pc, #108]	; (8001eb8 <MX_GPIO_Init+0x164>)
 8001e4a:	f001 fb9d 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8001e4e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8001e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e54:	2301      	movs	r3, #1
 8001e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	4619      	mov	r1, r3
 8001e66:	4811      	ldr	r0, [pc, #68]	; (8001eac <MX_GPIO_Init+0x158>)
 8001e68:	f001 fb8e 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001e6c:	2340      	movs	r3, #64	; 0x40
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e70:	2301      	movs	r3, #1
 8001e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e74:	2300      	movs	r3, #0
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	4619      	mov	r1, r3
 8001e82:	480b      	ldr	r0, [pc, #44]	; (8001eb0 <MX_GPIO_Init+0x15c>)
 8001e84:	f001 fb80 	bl	8003588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e90:	2300      	movs	r3, #0
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001e94:	f107 031c 	add.w	r3, r7, #28
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <MX_GPIO_Init+0x15c>)
 8001e9c:	f001 fb74 	bl	8003588 <HAL_GPIO_Init>

}
 8001ea0:	bf00      	nop
 8001ea2:	3730      	adds	r7, #48	; 0x30
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	58024400 	.word	0x58024400
 8001eac:	58020400 	.word	0x58020400
 8001eb0:	58021800 	.word	0x58021800
 8001eb4:	11110000 	.word	0x11110000
 8001eb8:	58020800 	.word	0x58020800

08001ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ec0:	f000 fb8a 	bl	80025d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ec4:	f000 f836 	bl	8001f34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ec8:	f7ff ff44 	bl	8001d54 <MX_GPIO_Init>
  MX_ETH_Init();
 8001ecc:	f7ff fe08 	bl	8001ae0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001ed0:	f000 fa30 	bl	8002334 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001ed4:	f000 facc 	bl	8002470 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  /* Modbus Slave initialization */
        ModbusH.uiModbusType = SLAVE_RTU;
 8001ed8:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <main+0x6c>)
 8001eda:	2203      	movs	r2, #3
 8001edc:	701a      	strb	r2, [r3, #0]
        ModbusH.port =  &huart3; // This is the UART port connected to STLINK in the NUCLEO F429
 8001ede:	4b12      	ldr	r3, [pc, #72]	; (8001f28 <main+0x6c>)
 8001ee0:	4a12      	ldr	r2, [pc, #72]	; (8001f2c <main+0x70>)
 8001ee2:	605a      	str	r2, [r3, #4]
        ModbusH.u8id = 1; //slave ID
 8001ee4:	4b10      	ldr	r3, [pc, #64]	; (8001f28 <main+0x6c>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	721a      	strb	r2, [r3, #8]
        ModbusH.u16timeOut = 1000;
 8001eea:	4b0f      	ldr	r3, [pc, #60]	; (8001f28 <main+0x6c>)
 8001eec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ef0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        ModbusH.EN_Port = NULL; // No RS485
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <main+0x6c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	60da      	str	r2, [r3, #12]
         //ModbusH2.EN_Port = LD2_GPIO_Port; // RS485 Enable
         //ModbusH2.EN_Pin = LD2_Pin; // RS485 Enable
        ModbusH.u32overTime = 0;
 8001efa:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <main+0x6c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	66da      	str	r2, [r3, #108]	; 0x6c
        ModbusH.au16regs = ModbusDATA;
 8001f00:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <main+0x6c>)
 8001f02:	4a0b      	ldr	r2, [pc, #44]	; (8001f30 <main+0x74>)
 8001f04:	659a      	str	r2, [r3, #88]	; 0x58
        ModbusH.u8regsize= sizeof(ModbusDATA)/sizeof(ModbusDATA[0]);
 8001f06:	4b08      	ldr	r3, [pc, #32]	; (8001f28 <main+0x6c>)
 8001f08:	2208      	movs	r2, #8
 8001f0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
         //Initialize Modbus library
        ModbusInit(&ModbusH);
 8001f0e:	4806      	ldr	r0, [pc, #24]	; (8001f28 <main+0x6c>)
 8001f10:	f7fe fb66 	bl	80005e0 <ModbusInit>
        //Start capturing traffic on serial Port
        ModbusStart(&ModbusH);
 8001f14:	4804      	ldr	r0, [pc, #16]	; (8001f28 <main+0x6c>)
 8001f16:	f7fe fbed 	bl	80006f4 <ModbusStart>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001f1a:	f006 fd71 	bl	8008a00 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001f1e:	f7ff feff 	bl	8001d20 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001f22:	f006 fda1 	bl	8008a68 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f26:	e7fe      	b.n	8001f26 <main+0x6a>
 8001f28:	24004aac 	.word	0x24004aac
 8001f2c:	24004b94 	.word	0x24004b94
 8001f30:	24004b38 	.word	0x24004b38

08001f34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b0cc      	sub	sp, #304	; 0x130
 8001f38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f3a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f3e:	224c      	movs	r2, #76	; 0x4c
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f00a f959 	bl	800c1fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f48:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001f4c:	2220      	movs	r2, #32
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f00a f952 	bl	800c1fa <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f56:	f107 0308 	add.w	r3, r7, #8
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	23bc      	movs	r3, #188	; 0xbc
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2100      	movs	r1, #0
 8001f62:	f00a f94a 	bl	800c1fa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001f66:	2002      	movs	r0, #2
 8001f68:	f001 fe20 	bl	8003bac <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f6c:	1d3b      	adds	r3, r7, #4
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	4b49      	ldr	r3, [pc, #292]	; (8002098 <SystemClock_Config+0x164>)
 8001f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f76:	4a48      	ldr	r2, [pc, #288]	; (8002098 <SystemClock_Config+0x164>)
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001f7e:	4b46      	ldr	r3, [pc, #280]	; (8002098 <SystemClock_Config+0x164>)
 8001f80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f82:	f003 0201 	and.w	r2, r3, #1
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	601a      	str	r2, [r3, #0]
 8001f8a:	4b44      	ldr	r3, [pc, #272]	; (800209c <SystemClock_Config+0x168>)
 8001f8c:	699b      	ldr	r3, [r3, #24]
 8001f8e:	4a43      	ldr	r2, [pc, #268]	; (800209c <SystemClock_Config+0x168>)
 8001f90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f94:	6193      	str	r3, [r2, #24]
 8001f96:	4b41      	ldr	r3, [pc, #260]	; (800209c <SystemClock_Config+0x168>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	1d3b      	adds	r3, r7, #4
 8001fa4:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001fa6:	bf00      	nop
 8001fa8:	4b3c      	ldr	r3, [pc, #240]	; (800209c <SystemClock_Config+0x168>)
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fb4:	d1f8      	bne.n	8001fa8 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001fbc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001fc0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 8001fd6:	2318      	movs	r3, #24
 8001fd8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001fe2:	2304      	movs	r3, #4
 8001fe4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001fe8:	2302      	movs	r3, #2
 8001fea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001fee:	230c      	movs	r3, #12
 8001ff0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002000:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002004:	4618      	mov	r0, r3
 8002006:	f001 fe1b 	bl	8003c40 <HAL_RCC_OscConfig>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8002010:	f000 f85a 	bl	80020c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002014:	233f      	movs	r3, #63	; 0x3f
 8002016:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800201a:	2303      	movs	r3, #3
 800201c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002020:	2300      	movs	r3, #0
 8002022:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8002026:	2300      	movs	r3, #0
 8002028:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800202c:	2300      	movs	r3, #0
 800202e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002032:	2300      	movs	r3, #0
 8002034:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8002038:	2300      	movs	r3, #0
 800203a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800203e:	2300      	movs	r3, #0
 8002040:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002044:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002048:	2101      	movs	r1, #1
 800204a:	4618      	mov	r0, r3
 800204c:	f002 fa08 	bl	8004460 <HAL_RCC_ClockConfig>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d001      	beq.n	800205a <SystemClock_Config+0x126>
  {
    Error_Handler();
 8002056:	f000 f837 	bl	80020c8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 800205a:	f107 0308 	add.w	r3, r7, #8
 800205e:	4a10      	ldr	r2, [pc, #64]	; (80020a0 <SystemClock_Config+0x16c>)
 8002060:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002062:	f107 0308 	add.w	r3, r7, #8
 8002066:	2200      	movs	r2, #0
 8002068:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800206a:	f107 0308 	add.w	r3, r7, #8
 800206e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002076:	f107 0308 	add.w	r3, r7, #8
 800207a:	4618      	mov	r0, r3
 800207c:	f002 fdb6 	bl	8004bec <HAL_RCCEx_PeriphCLKConfig>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <SystemClock_Config+0x156>
  {
    Error_Handler();
 8002086:	f000 f81f 	bl	80020c8 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 800208a:	f001 fdc9 	bl	8003c20 <HAL_PWREx_EnableUSBVoltageDetector>
}
 800208e:	bf00      	nop
 8002090:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	58000400 	.word	0x58000400
 800209c:	58024800 	.word	0x58024800
 80020a0:	00040002 	.word	0x00040002

080020a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a04      	ldr	r2, [pc, #16]	; (80020c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020b6:	f000 facb 	bl	8002650 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020ba:	bf00      	nop
 80020bc:	3708      	adds	r7, #8
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	40014800 	.word	0x40014800

080020c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020cc:	bf00      	nop
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
	...

080020d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020de:	4b0a      	ldr	r3, [pc, #40]	; (8002108 <HAL_MspInit+0x30>)
 80020e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020e4:	4a08      	ldr	r2, [pc, #32]	; (8002108 <HAL_MspInit+0x30>)
 80020e6:	f043 0302 	orr.w	r3, r3, #2
 80020ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_MspInit+0x30>)
 80020f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	607b      	str	r3, [r7, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr
 8002108:	58024400 	.word	0x58024400

0800210c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b08e      	sub	sp, #56	; 0x38
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002114:	2300      	movs	r3, #0
 8002116:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t              uwPrescalerValue = 0;
 8002118:	2300      	movs	r3, #0
 800211a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 800211c:	2200      	movs	r2, #0
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	2076      	movs	r0, #118	; 0x76
 8002122:	f000 fbaf 	bl	8002884 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8002126:	2076      	movs	r0, #118	; 0x76
 8002128:	f000 fbc6 	bl	80028b8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 800212c:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <HAL_InitTick+0xa4>)
 800212e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002132:	4a1f      	ldr	r2, [pc, #124]	; (80021b0 <HAL_InitTick+0xa4>)
 8002134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002138:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800213c:	4b1c      	ldr	r3, [pc, #112]	; (80021b0 <HAL_InitTick+0xa4>)
 800213e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800214a:	f107 020c 	add.w	r2, r7, #12
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	4611      	mov	r1, r2
 8002154:	4618      	mov	r0, r3
 8002156:	f002 fd07 	bl	8004b68 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800215a:	f002 fcef 	bl	8004b3c <HAL_RCC_GetPCLK2Freq>
 800215e:	6378      	str	r0, [r7, #52]	; 0x34

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8002160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002162:	4a14      	ldr	r2, [pc, #80]	; (80021b4 <HAL_InitTick+0xa8>)
 8002164:	fba2 2303 	umull	r2, r3, r2, r3
 8002168:	0c9b      	lsrs	r3, r3, #18
 800216a:	3b01      	subs	r3, #1
 800216c:	633b      	str	r3, [r7, #48]	; 0x30

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 800216e:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_InitTick+0xac>)
 8002170:	4a12      	ldr	r2, [pc, #72]	; (80021bc <HAL_InitTick+0xb0>)
 8002172:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000 / 1000) - 1;
 8002174:	4b10      	ldr	r3, [pc, #64]	; (80021b8 <HAL_InitTick+0xac>)
 8002176:	f240 32e7 	movw	r2, #999	; 0x3e7
 800217a:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 800217c:	4a0e      	ldr	r2, [pc, #56]	; (80021b8 <HAL_InitTick+0xac>)
 800217e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002180:	6053      	str	r3, [r2, #4]
  htim17.Init.ClockDivision = 0;
 8002182:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <HAL_InitTick+0xac>)
 8002184:	2200      	movs	r2, #0
 8002186:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002188:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_InitTick+0xac>)
 800218a:	2200      	movs	r2, #0
 800218c:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 800218e:	480a      	ldr	r0, [pc, #40]	; (80021b8 <HAL_InitTick+0xac>)
 8002190:	f004 f82c 	bl	80061ec <HAL_TIM_Base_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d104      	bne.n	80021a4 <HAL_InitTick+0x98>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
 800219a:	4807      	ldr	r0, [pc, #28]	; (80021b8 <HAL_InitTick+0xac>)
 800219c:	f004 f888 	bl	80062b0 <HAL_TIM_Base_Start_IT>
 80021a0:	4603      	mov	r3, r0
 80021a2:	e000      	b.n	80021a6 <HAL_InitTick+0x9a>
  }

  /* Return function status */
  return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3738      	adds	r7, #56	; 0x38
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	58024400 	.word	0x58024400
 80021b4:	431bde83 	.word	0x431bde83
 80021b8:	24004b48 	.word	0x24004b48
 80021bc:	40014800 	.word	0x40014800

080021c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021d2:	e7fe      	b.n	80021d2 <HardFault_Handler+0x4>

080021d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021d8:	e7fe      	b.n	80021d8 <MemManage_Handler+0x4>

080021da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <BusFault_Handler+0x4>

080021e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <UsageFault_Handler+0x4>

080021e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <USART3_IRQHandler+0x10>)
 80021fa:	f004 fc3b 	bl	8006a74 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	24004b94 	.word	0x24004b94

08002208 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <TIM17_IRQHandler+0x10>)
 800220e:	f004 f885 	bl	800631c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	24004b48 	.word	0x24004b48

0800221c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002220:	4b39      	ldr	r3, [pc, #228]	; (8002308 <SystemInit+0xec>)
 8002222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002226:	4a38      	ldr	r2, [pc, #224]	; (8002308 <SystemInit+0xec>)
 8002228:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800222c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002230:	4b36      	ldr	r3, [pc, #216]	; (800230c <SystemInit+0xf0>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 030f 	and.w	r3, r3, #15
 8002238:	2b06      	cmp	r3, #6
 800223a:	d807      	bhi.n	800224c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800223c:	4b33      	ldr	r3, [pc, #204]	; (800230c <SystemInit+0xf0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f023 030f 	bic.w	r3, r3, #15
 8002244:	4a31      	ldr	r2, [pc, #196]	; (800230c <SystemInit+0xf0>)
 8002246:	f043 0307 	orr.w	r3, r3, #7
 800224a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800224c:	4b30      	ldr	r3, [pc, #192]	; (8002310 <SystemInit+0xf4>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a2f      	ldr	r2, [pc, #188]	; (8002310 <SystemInit+0xf4>)
 8002252:	f043 0301 	orr.w	r3, r3, #1
 8002256:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002258:	4b2d      	ldr	r3, [pc, #180]	; (8002310 <SystemInit+0xf4>)
 800225a:	2200      	movs	r2, #0
 800225c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800225e:	4b2c      	ldr	r3, [pc, #176]	; (8002310 <SystemInit+0xf4>)
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	492b      	ldr	r1, [pc, #172]	; (8002310 <SystemInit+0xf4>)
 8002264:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <SystemInit+0xf8>)
 8002266:	4013      	ands	r3, r2
 8002268:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800226a:	4b28      	ldr	r3, [pc, #160]	; (800230c <SystemInit+0xf0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	2b07      	cmp	r3, #7
 8002274:	d907      	bls.n	8002286 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002276:	4b25      	ldr	r3, [pc, #148]	; (800230c <SystemInit+0xf0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f023 030f 	bic.w	r3, r3, #15
 800227e:	4a23      	ldr	r2, [pc, #140]	; (800230c <SystemInit+0xf0>)
 8002280:	f043 0307 	orr.w	r3, r3, #7
 8002284:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002286:	4b22      	ldr	r3, [pc, #136]	; (8002310 <SystemInit+0xf4>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800228c:	4b20      	ldr	r3, [pc, #128]	; (8002310 <SystemInit+0xf4>)
 800228e:	2200      	movs	r2, #0
 8002290:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002292:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <SystemInit+0xf4>)
 8002294:	2200      	movs	r2, #0
 8002296:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <SystemInit+0xf4>)
 800229a:	4a1f      	ldr	r2, [pc, #124]	; (8002318 <SystemInit+0xfc>)
 800229c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800229e:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <SystemInit+0xf4>)
 80022a0:	4a1e      	ldr	r2, [pc, #120]	; (800231c <SystemInit+0x100>)
 80022a2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80022a4:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <SystemInit+0xf4>)
 80022a6:	4a1e      	ldr	r2, [pc, #120]	; (8002320 <SystemInit+0x104>)
 80022a8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80022aa:	4b19      	ldr	r3, [pc, #100]	; (8002310 <SystemInit+0xf4>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80022b0:	4b17      	ldr	r3, [pc, #92]	; (8002310 <SystemInit+0xf4>)
 80022b2:	4a1b      	ldr	r2, [pc, #108]	; (8002320 <SystemInit+0x104>)
 80022b4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80022b6:	4b16      	ldr	r3, [pc, #88]	; (8002310 <SystemInit+0xf4>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <SystemInit+0xf4>)
 80022be:	4a18      	ldr	r2, [pc, #96]	; (8002320 <SystemInit+0x104>)
 80022c0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80022c2:	4b13      	ldr	r3, [pc, #76]	; (8002310 <SystemInit+0xf4>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022c8:	4b11      	ldr	r3, [pc, #68]	; (8002310 <SystemInit+0xf4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a10      	ldr	r2, [pc, #64]	; (8002310 <SystemInit+0xf4>)
 80022ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022d2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80022d4:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <SystemInit+0xf4>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80022da:	4b12      	ldr	r3, [pc, #72]	; (8002324 <SystemInit+0x108>)
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	4b12      	ldr	r3, [pc, #72]	; (8002328 <SystemInit+0x10c>)
 80022e0:	4013      	ands	r3, r2
 80022e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022e6:	d202      	bcs.n	80022ee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80022e8:	4b10      	ldr	r3, [pc, #64]	; (800232c <SystemInit+0x110>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80022ee:	4b10      	ldr	r3, [pc, #64]	; (8002330 <SystemInit+0x114>)
 80022f0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80022f4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022f6:	4b04      	ldr	r3, [pc, #16]	; (8002308 <SystemInit+0xec>)
 80022f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80022fc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	e000ed00 	.word	0xe000ed00
 800230c:	52002000 	.word	0x52002000
 8002310:	58024400 	.word	0x58024400
 8002314:	eaf6ed7f 	.word	0xeaf6ed7f
 8002318:	02020200 	.word	0x02020200
 800231c:	01ff0000 	.word	0x01ff0000
 8002320:	01010280 	.word	0x01010280
 8002324:	5c001000 	.word	0x5c001000
 8002328:	ffff0000 	.word	0xffff0000
 800232c:	51008108 	.word	0x51008108
 8002330:	52004000 	.word	0x52004000

08002334 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002338:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <MX_USART3_UART_Init+0x90>)
 800233a:	4a23      	ldr	r2, [pc, #140]	; (80023c8 <MX_USART3_UART_Init+0x94>)
 800233c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800233e:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <MX_USART3_UART_Init+0x90>)
 8002340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002344:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002346:	4b1f      	ldr	r3, [pc, #124]	; (80023c4 <MX_USART3_UART_Init+0x90>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800234c:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <MX_USART3_UART_Init+0x90>)
 800234e:	2200      	movs	r2, #0
 8002350:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002352:	4b1c      	ldr	r3, [pc, #112]	; (80023c4 <MX_USART3_UART_Init+0x90>)
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002358:	4b1a      	ldr	r3, [pc, #104]	; (80023c4 <MX_USART3_UART_Init+0x90>)
 800235a:	220c      	movs	r2, #12
 800235c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800235e:	4b19      	ldr	r3, [pc, #100]	; (80023c4 <MX_USART3_UART_Init+0x90>)
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002364:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <MX_USART3_UART_Init+0x90>)
 8002366:	2200      	movs	r2, #0
 8002368:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800236a:	4b16      	ldr	r3, [pc, #88]	; (80023c4 <MX_USART3_UART_Init+0x90>)
 800236c:	2200      	movs	r2, #0
 800236e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002370:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <MX_USART3_UART_Init+0x90>)
 8002372:	2200      	movs	r2, #0
 8002374:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002376:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <MX_USART3_UART_Init+0x90>)
 8002378:	2200      	movs	r2, #0
 800237a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800237c:	4811      	ldr	r0, [pc, #68]	; (80023c4 <MX_USART3_UART_Init+0x90>)
 800237e:	f004 f9cd 	bl	800671c <HAL_UART_Init>
 8002382:	4603      	mov	r3, r0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d001      	beq.n	800238c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002388:	f7ff fe9e 	bl	80020c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800238c:	2100      	movs	r1, #0
 800238e:	480d      	ldr	r0, [pc, #52]	; (80023c4 <MX_USART3_UART_Init+0x90>)
 8002390:	f005 ff9f 	bl	80082d2 <HAL_UARTEx_SetTxFifoThreshold>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800239a:	f7ff fe95 	bl	80020c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800239e:	2100      	movs	r1, #0
 80023a0:	4808      	ldr	r0, [pc, #32]	; (80023c4 <MX_USART3_UART_Init+0x90>)
 80023a2:	f005 ffd4 	bl	800834e <HAL_UARTEx_SetRxFifoThreshold>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80023ac:	f7ff fe8c 	bl	80020c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80023b0:	4804      	ldr	r0, [pc, #16]	; (80023c4 <MX_USART3_UART_Init+0x90>)
 80023b2:	f005 ff55 	bl	8008260 <HAL_UARTEx_DisableFifoMode>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80023bc:	f7ff fe84 	bl	80020c8 <Error_Handler>
  }

}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	24004b94 	.word	0x24004b94
 80023c8:	40004800 	.word	0x40004800

080023cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b08a      	sub	sp, #40	; 0x28
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d4:	f107 0314 	add.w	r3, r7, #20
 80023d8:	2200      	movs	r2, #0
 80023da:	601a      	str	r2, [r3, #0]
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	609a      	str	r2, [r3, #8]
 80023e0:	60da      	str	r2, [r3, #12]
 80023e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1e      	ldr	r2, [pc, #120]	; (8002464 <HAL_UART_MspInit+0x98>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d136      	bne.n	800245c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023ee:	4b1e      	ldr	r3, [pc, #120]	; (8002468 <HAL_UART_MspInit+0x9c>)
 80023f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023f4:	4a1c      	ldr	r2, [pc, #112]	; (8002468 <HAL_UART_MspInit+0x9c>)
 80023f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023fa:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023fe:	4b1a      	ldr	r3, [pc, #104]	; (8002468 <HAL_UART_MspInit+0x9c>)
 8002400:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002404:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002408:	613b      	str	r3, [r7, #16]
 800240a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800240c:	4b16      	ldr	r3, [pc, #88]	; (8002468 <HAL_UART_MspInit+0x9c>)
 800240e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002412:	4a15      	ldr	r2, [pc, #84]	; (8002468 <HAL_UART_MspInit+0x9c>)
 8002414:	f043 0308 	orr.w	r3, r3, #8
 8002418:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800241c:	4b12      	ldr	r3, [pc, #72]	; (8002468 <HAL_UART_MspInit+0x9c>)
 800241e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800242a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800242e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002430:	2302      	movs	r3, #2
 8002432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800243c:	2307      	movs	r3, #7
 800243e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002440:	f107 0314 	add.w	r3, r7, #20
 8002444:	4619      	mov	r1, r3
 8002446:	4809      	ldr	r0, [pc, #36]	; (800246c <HAL_UART_MspInit+0xa0>)
 8002448:	f001 f89e 	bl	8003588 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800244c:	2200      	movs	r2, #0
 800244e:	2105      	movs	r1, #5
 8002450:	2027      	movs	r0, #39	; 0x27
 8002452:	f000 fa17 	bl	8002884 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002456:	2027      	movs	r0, #39	; 0x27
 8002458:	f000 fa2e 	bl	80028b8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800245c:	bf00      	nop
 800245e:	3728      	adds	r7, #40	; 0x28
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40004800 	.word	0x40004800
 8002468:	58024400 	.word	0x58024400
 800246c:	58020c00 	.word	0x58020c00

08002470 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002474:	4b15      	ldr	r3, [pc, #84]	; (80024cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002476:	4a16      	ldr	r2, [pc, #88]	; (80024d0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002478:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800247a:	4b14      	ldr	r3, [pc, #80]	; (80024cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800247c:	2209      	movs	r2, #9
 800247e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002480:	4b12      	ldr	r3, [pc, #72]	; (80024cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002482:	2202      	movs	r2, #2
 8002484:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002486:	4b11      	ldr	r3, [pc, #68]	; (80024cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002488:	2200      	movs	r2, #0
 800248a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800248c:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800248e:	2202      	movs	r2, #2
 8002490:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8002492:	4b0e      	ldr	r3, [pc, #56]	; (80024cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002494:	2201      	movs	r2, #1
 8002496:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800249a:	2200      	movs	r2, #0
 800249c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80024a4:	4b09      	ldr	r3, [pc, #36]	; (80024cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80024b0:	4b06      	ldr	r3, [pc, #24]	; (80024cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80024b6:	4805      	ldr	r0, [pc, #20]	; (80024cc <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80024b8:	f001 fa2f 	bl	800391a <HAL_PCD_Init>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80024c2:	f7ff fe01 	bl	80020c8 <Error_Handler>
  }

}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	24004c20 	.word	0x24004c20
 80024d0:	40080000 	.word	0x40080000

080024d4 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a21      	ldr	r2, [pc, #132]	; (8002578 <HAL_PCD_MspInit+0xa4>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d13b      	bne.n	800256e <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f6:	4b21      	ldr	r3, [pc, #132]	; (800257c <HAL_PCD_MspInit+0xa8>)
 80024f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024fc:	4a1f      	ldr	r2, [pc, #124]	; (800257c <HAL_PCD_MspInit+0xa8>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_PCD_MspInit+0xa8>)
 8002508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002514:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002518:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800251a:	2302      	movs	r3, #2
 800251c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251e:	2300      	movs	r3, #0
 8002520:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002522:	2300      	movs	r3, #0
 8002524:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002526:	230a      	movs	r3, #10
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800252a:	f107 0314 	add.w	r3, r7, #20
 800252e:	4619      	mov	r1, r3
 8002530:	4813      	ldr	r0, [pc, #76]	; (8002580 <HAL_PCD_MspInit+0xac>)
 8002532:	f001 f829 	bl	8003588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002536:	f44f 7300 	mov.w	r3, #512	; 0x200
 800253a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800253c:	2300      	movs	r3, #0
 800253e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002540:	2300      	movs	r3, #0
 8002542:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	4619      	mov	r1, r3
 800254a:	480d      	ldr	r0, [pc, #52]	; (8002580 <HAL_PCD_MspInit+0xac>)
 800254c:	f001 f81c 	bl	8003588 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002550:	4b0a      	ldr	r3, [pc, #40]	; (800257c <HAL_PCD_MspInit+0xa8>)
 8002552:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002556:	4a09      	ldr	r2, [pc, #36]	; (800257c <HAL_PCD_MspInit+0xa8>)
 8002558:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800255c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <HAL_PCD_MspInit+0xa8>)
 8002562:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002566:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800256e:	bf00      	nop
 8002570:	3728      	adds	r7, #40	; 0x28
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40080000 	.word	0x40080000
 800257c:	58024400 	.word	0x58024400
 8002580:	58020000 	.word	0x58020000

08002584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80025bc <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002588:	f7ff fe48 	bl	800221c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800258c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800258e:	e003      	b.n	8002598 <LoopCopyDataInit>

08002590 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8002592:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002594:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002596:	3104      	adds	r1, #4

08002598 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002598:	480a      	ldr	r0, [pc, #40]	; (80025c4 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800259a:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800259c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800259e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80025a0:	d3f6      	bcc.n	8002590 <CopyDataInit>
  ldr  r2, =_sbss
 80025a2:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80025a4:	e002      	b.n	80025ac <LoopFillZerobss>

080025a6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80025a6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80025a8:	f842 3b04 	str.w	r3, [r2], #4

080025ac <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80025ae:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80025b0:	d3f9      	bcc.n	80025a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025b2:	f009 fdf3 	bl	800c19c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025b6:	f7ff fc81 	bl	8001ebc <main>
  bx  lr    
 80025ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025bc:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80025c0:	0800c3a8 	.word	0x0800c3a8
  ldr  r0, =_sdata
 80025c4:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80025c8:	24000014 	.word	0x24000014
  ldr  r2, =_sbss
 80025cc:	240000d4 	.word	0x240000d4
  ldr  r3, = _ebss
 80025d0:	2400506c 	.word	0x2400506c

080025d4 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025d4:	e7fe      	b.n	80025d4 <ADC3_IRQHandler>
	...

080025d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025de:	2003      	movs	r0, #3
 80025e0:	f000 f945 	bl	800286e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80025e4:	f002 f8f2 	bl	80047cc <HAL_RCC_GetSysClockFreq>
 80025e8:	4601      	mov	r1, r0
 80025ea:	4b15      	ldr	r3, [pc, #84]	; (8002640 <HAL_Init+0x68>)
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	4a13      	ldr	r2, [pc, #76]	; (8002644 <HAL_Init+0x6c>)
 80025f6:	5cd3      	ldrb	r3, [r2, r3]
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	fa21 f303 	lsr.w	r3, r1, r3
 8002600:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002602:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <HAL_Init+0x68>)
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	f003 030f 	and.w	r3, r3, #15
 800260a:	4a0e      	ldr	r2, [pc, #56]	; (8002644 <HAL_Init+0x6c>)
 800260c:	5cd3      	ldrb	r3, [r2, r3]
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
 8002618:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <HAL_Init+0x70>)
 800261a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800261c:	4a0b      	ldr	r2, [pc, #44]	; (800264c <HAL_Init+0x74>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002622:	2000      	movs	r0, #0
 8002624:	f7ff fd72 	bl	800210c <HAL_InitTick>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e002      	b.n	8002638 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002632:	f7ff fd51 	bl	80020d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	58024400 	.word	0x58024400
 8002644:	0800c370 	.word	0x0800c370
 8002648:	24000004 	.word	0x24000004
 800264c:	24000000 	.word	0x24000000

08002650 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002654:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_IncTick+0x20>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	461a      	mov	r2, r3
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_IncTick+0x24>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4413      	add	r3, r2
 8002660:	4a04      	ldr	r2, [pc, #16]	; (8002674 <HAL_IncTick+0x24>)
 8002662:	6013      	str	r3, [r2, #0]
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	2400000c 	.word	0x2400000c
 8002674:	24005028 	.word	0x24005028

08002678 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  return uwTick;
 800267c:	4b03      	ldr	r3, [pc, #12]	; (800268c <HAL_GetTick+0x14>)
 800267e:	681b      	ldr	r3, [r3, #0]
}
 8002680:	4618      	mov	r0, r3
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	24005028 	.word	0x24005028

08002690 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002698:	f7ff ffee 	bl	8002678 <HAL_GetTick>
 800269c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a8:	d005      	beq.n	80026b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_Delay+0x40>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	461a      	mov	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	4413      	add	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80026b6:	bf00      	nop
 80026b8:	f7ff ffde 	bl	8002678 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	d8f7      	bhi.n	80026b8 <HAL_Delay+0x28>
  {
  }
}
 80026c8:	bf00      	nop
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	2400000c 	.word	0x2400000c

080026d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80026d8:	4b03      	ldr	r3, [pc, #12]	; (80026e8 <HAL_GetREVID+0x14>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	0c1b      	lsrs	r3, r3, #16
}
 80026de:	4618      	mov	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	5c001000 	.word	0x5c001000

080026ec <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80026f4:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80026fc:	4904      	ldr	r1, [pc, #16]	; (8002710 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4313      	orrs	r3, r2
 8002702:	604b      	str	r3, [r1, #4]
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	58000400 	.word	0x58000400

08002714 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002714:	b480      	push	{r7}
 8002716:	b085      	sub	sp, #20
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <__NVIC_SetPriorityGrouping+0x40>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002730:	4013      	ands	r3, r2
 8002732:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <__NVIC_SetPriorityGrouping+0x44>)
 800273e:	4313      	orrs	r3, r2
 8002740:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002742:	4a04      	ldr	r2, [pc, #16]	; (8002754 <__NVIC_SetPriorityGrouping+0x40>)
 8002744:	68bb      	ldr	r3, [r7, #8]
 8002746:	60d3      	str	r3, [r2, #12]
}
 8002748:	bf00      	nop
 800274a:	3714      	adds	r7, #20
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr
 8002754:	e000ed00 	.word	0xe000ed00
 8002758:	05fa0000 	.word	0x05fa0000

0800275c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002760:	4b04      	ldr	r3, [pc, #16]	; (8002774 <__NVIC_GetPriorityGrouping+0x18>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	0a1b      	lsrs	r3, r3, #8
 8002766:	f003 0307 	and.w	r3, r3, #7
}
 800276a:	4618      	mov	r0, r3
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	e000ed00 	.word	0xe000ed00

08002778 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002786:	2b00      	cmp	r3, #0
 8002788:	db0b      	blt.n	80027a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	f003 021f 	and.w	r2, r3, #31
 8002790:	4907      	ldr	r1, [pc, #28]	; (80027b0 <__NVIC_EnableIRQ+0x38>)
 8002792:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002796:	095b      	lsrs	r3, r3, #5
 8002798:	2001      	movs	r0, #1
 800279a:	fa00 f202 	lsl.w	r2, r0, r2
 800279e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000e100 	.word	0xe000e100

080027b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	6039      	str	r1, [r7, #0]
 80027be:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80027c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	db0a      	blt.n	80027de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	b2da      	uxtb	r2, r3
 80027cc:	490c      	ldr	r1, [pc, #48]	; (8002800 <__NVIC_SetPriority+0x4c>)
 80027ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027d2:	0112      	lsls	r2, r2, #4
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	440b      	add	r3, r1
 80027d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027dc:	e00a      	b.n	80027f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4908      	ldr	r1, [pc, #32]	; (8002804 <__NVIC_SetPriority+0x50>)
 80027e4:	88fb      	ldrh	r3, [r7, #6]
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	3b04      	subs	r3, #4
 80027ec:	0112      	lsls	r2, r2, #4
 80027ee:	b2d2      	uxtb	r2, r2
 80027f0:	440b      	add	r3, r1
 80027f2:	761a      	strb	r2, [r3, #24]
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000e100 	.word	0xe000e100
 8002804:	e000ed00 	.word	0xe000ed00

08002808 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002808:	b480      	push	{r7}
 800280a:	b089      	sub	sp, #36	; 0x24
 800280c:	af00      	add	r7, sp, #0
 800280e:	60f8      	str	r0, [r7, #12]
 8002810:	60b9      	str	r1, [r7, #8]
 8002812:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f003 0307 	and.w	r3, r3, #7
 800281a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	f1c3 0307 	rsb	r3, r3, #7
 8002822:	2b04      	cmp	r3, #4
 8002824:	bf28      	it	cs
 8002826:	2304      	movcs	r3, #4
 8002828:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	3304      	adds	r3, #4
 800282e:	2b06      	cmp	r3, #6
 8002830:	d902      	bls.n	8002838 <NVIC_EncodePriority+0x30>
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	3b03      	subs	r3, #3
 8002836:	e000      	b.n	800283a <NVIC_EncodePriority+0x32>
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800283c:	f04f 32ff 	mov.w	r2, #4294967295
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	401a      	ands	r2, r3
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002850:	f04f 31ff 	mov.w	r1, #4294967295
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	fa01 f303 	lsl.w	r3, r1, r3
 800285a:	43d9      	mvns	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002860:	4313      	orrs	r3, r2
         );
}
 8002862:	4618      	mov	r0, r3
 8002864:	3724      	adds	r7, #36	; 0x24
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr

0800286e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800286e:	b580      	push	{r7, lr}
 8002870:	b082      	sub	sp, #8
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff ff4c 	bl	8002714 <__NVIC_SetPriorityGrouping>
}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	4603      	mov	r3, r0
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002892:	f7ff ff63 	bl	800275c <__NVIC_GetPriorityGrouping>
 8002896:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	68b9      	ldr	r1, [r7, #8]
 800289c:	6978      	ldr	r0, [r7, #20]
 800289e:	f7ff ffb3 	bl	8002808 <NVIC_EncodePriority>
 80028a2:	4602      	mov	r2, r0
 80028a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80028a8:	4611      	mov	r1, r2
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7ff ff82 	bl	80027b4 <__NVIC_SetPriority>
}
 80028b0:	bf00      	nop
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff ff56 	bl	8002778 <__NVIC_EnableIRQ>
}
 80028cc:	bf00      	nop
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e205      	b.n	8002cf2 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d004      	beq.n	80028fc <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2280      	movs	r2, #128	; 0x80
 80028f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e1fa      	b.n	8002cf2 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a8c      	ldr	r2, [pc, #560]	; (8002b34 <HAL_DMA_Abort_IT+0x260>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d04a      	beq.n	800299c <HAL_DMA_Abort_IT+0xc8>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a8b      	ldr	r2, [pc, #556]	; (8002b38 <HAL_DMA_Abort_IT+0x264>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d045      	beq.n	800299c <HAL_DMA_Abort_IT+0xc8>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a89      	ldr	r2, [pc, #548]	; (8002b3c <HAL_DMA_Abort_IT+0x268>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d040      	beq.n	800299c <HAL_DMA_Abort_IT+0xc8>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a88      	ldr	r2, [pc, #544]	; (8002b40 <HAL_DMA_Abort_IT+0x26c>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d03b      	beq.n	800299c <HAL_DMA_Abort_IT+0xc8>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a86      	ldr	r2, [pc, #536]	; (8002b44 <HAL_DMA_Abort_IT+0x270>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d036      	beq.n	800299c <HAL_DMA_Abort_IT+0xc8>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a85      	ldr	r2, [pc, #532]	; (8002b48 <HAL_DMA_Abort_IT+0x274>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d031      	beq.n	800299c <HAL_DMA_Abort_IT+0xc8>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a83      	ldr	r2, [pc, #524]	; (8002b4c <HAL_DMA_Abort_IT+0x278>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d02c      	beq.n	800299c <HAL_DMA_Abort_IT+0xc8>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a82      	ldr	r2, [pc, #520]	; (8002b50 <HAL_DMA_Abort_IT+0x27c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d027      	beq.n	800299c <HAL_DMA_Abort_IT+0xc8>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a80      	ldr	r2, [pc, #512]	; (8002b54 <HAL_DMA_Abort_IT+0x280>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d022      	beq.n	800299c <HAL_DMA_Abort_IT+0xc8>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a7f      	ldr	r2, [pc, #508]	; (8002b58 <HAL_DMA_Abort_IT+0x284>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d01d      	beq.n	800299c <HAL_DMA_Abort_IT+0xc8>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a7d      	ldr	r2, [pc, #500]	; (8002b5c <HAL_DMA_Abort_IT+0x288>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d018      	beq.n	800299c <HAL_DMA_Abort_IT+0xc8>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a7c      	ldr	r2, [pc, #496]	; (8002b60 <HAL_DMA_Abort_IT+0x28c>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d013      	beq.n	800299c <HAL_DMA_Abort_IT+0xc8>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a7a      	ldr	r2, [pc, #488]	; (8002b64 <HAL_DMA_Abort_IT+0x290>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00e      	beq.n	800299c <HAL_DMA_Abort_IT+0xc8>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a79      	ldr	r2, [pc, #484]	; (8002b68 <HAL_DMA_Abort_IT+0x294>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d009      	beq.n	800299c <HAL_DMA_Abort_IT+0xc8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a77      	ldr	r2, [pc, #476]	; (8002b6c <HAL_DMA_Abort_IT+0x298>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d004      	beq.n	800299c <HAL_DMA_Abort_IT+0xc8>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a76      	ldr	r2, [pc, #472]	; (8002b70 <HAL_DMA_Abort_IT+0x29c>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d101      	bne.n	80029a0 <HAL_DMA_Abort_IT+0xcc>
 800299c:	2301      	movs	r3, #1
 800299e:	e000      	b.n	80029a2 <HAL_DMA_Abort_IT+0xce>
 80029a0:	2300      	movs	r3, #0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d065      	beq.n	8002a72 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2204      	movs	r2, #4
 80029aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a60      	ldr	r2, [pc, #384]	; (8002b34 <HAL_DMA_Abort_IT+0x260>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d04a      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x17a>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a5e      	ldr	r2, [pc, #376]	; (8002b38 <HAL_DMA_Abort_IT+0x264>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d045      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x17a>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a5d      	ldr	r2, [pc, #372]	; (8002b3c <HAL_DMA_Abort_IT+0x268>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d040      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x17a>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a5b      	ldr	r2, [pc, #364]	; (8002b40 <HAL_DMA_Abort_IT+0x26c>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d03b      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x17a>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a5a      	ldr	r2, [pc, #360]	; (8002b44 <HAL_DMA_Abort_IT+0x270>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d036      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x17a>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a58      	ldr	r2, [pc, #352]	; (8002b48 <HAL_DMA_Abort_IT+0x274>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d031      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x17a>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a57      	ldr	r2, [pc, #348]	; (8002b4c <HAL_DMA_Abort_IT+0x278>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d02c      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x17a>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a55      	ldr	r2, [pc, #340]	; (8002b50 <HAL_DMA_Abort_IT+0x27c>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d027      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x17a>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a54      	ldr	r2, [pc, #336]	; (8002b54 <HAL_DMA_Abort_IT+0x280>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d022      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x17a>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a52      	ldr	r2, [pc, #328]	; (8002b58 <HAL_DMA_Abort_IT+0x284>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d01d      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x17a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a51      	ldr	r2, [pc, #324]	; (8002b5c <HAL_DMA_Abort_IT+0x288>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d018      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x17a>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a4f      	ldr	r2, [pc, #316]	; (8002b60 <HAL_DMA_Abort_IT+0x28c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x17a>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a4e      	ldr	r2, [pc, #312]	; (8002b64 <HAL_DMA_Abort_IT+0x290>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d00e      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x17a>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a4c      	ldr	r2, [pc, #304]	; (8002b68 <HAL_DMA_Abort_IT+0x294>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d009      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x17a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a4b      	ldr	r2, [pc, #300]	; (8002b6c <HAL_DMA_Abort_IT+0x298>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d004      	beq.n	8002a4e <HAL_DMA_Abort_IT+0x17a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a49      	ldr	r2, [pc, #292]	; (8002b70 <HAL_DMA_Abort_IT+0x29c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d108      	bne.n	8002a60 <HAL_DMA_Abort_IT+0x18c>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 0201 	bic.w	r2, r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	e147      	b.n	8002cf0 <HAL_DMA_Abort_IT+0x41c>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f022 0201 	bic.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	e13e      	b.n	8002cf0 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 020e 	bic.w	r2, r2, #14
 8002a80:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a2b      	ldr	r2, [pc, #172]	; (8002b34 <HAL_DMA_Abort_IT+0x260>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d04a      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x24e>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a29      	ldr	r2, [pc, #164]	; (8002b38 <HAL_DMA_Abort_IT+0x264>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d045      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x24e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a28      	ldr	r2, [pc, #160]	; (8002b3c <HAL_DMA_Abort_IT+0x268>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d040      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x24e>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a26      	ldr	r2, [pc, #152]	; (8002b40 <HAL_DMA_Abort_IT+0x26c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d03b      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x24e>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a25      	ldr	r2, [pc, #148]	; (8002b44 <HAL_DMA_Abort_IT+0x270>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d036      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x24e>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a23      	ldr	r2, [pc, #140]	; (8002b48 <HAL_DMA_Abort_IT+0x274>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d031      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x24e>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a22      	ldr	r2, [pc, #136]	; (8002b4c <HAL_DMA_Abort_IT+0x278>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d02c      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x24e>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a20      	ldr	r2, [pc, #128]	; (8002b50 <HAL_DMA_Abort_IT+0x27c>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d027      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x24e>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a1f      	ldr	r2, [pc, #124]	; (8002b54 <HAL_DMA_Abort_IT+0x280>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d022      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x24e>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a1d      	ldr	r2, [pc, #116]	; (8002b58 <HAL_DMA_Abort_IT+0x284>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d01d      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x24e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a1c      	ldr	r2, [pc, #112]	; (8002b5c <HAL_DMA_Abort_IT+0x288>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d018      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x24e>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a1a      	ldr	r2, [pc, #104]	; (8002b60 <HAL_DMA_Abort_IT+0x28c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x24e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a19      	ldr	r2, [pc, #100]	; (8002b64 <HAL_DMA_Abort_IT+0x290>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d00e      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x24e>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a17      	ldr	r2, [pc, #92]	; (8002b68 <HAL_DMA_Abort_IT+0x294>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d009      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x24e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a16      	ldr	r2, [pc, #88]	; (8002b6c <HAL_DMA_Abort_IT+0x298>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d004      	beq.n	8002b22 <HAL_DMA_Abort_IT+0x24e>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a14      	ldr	r2, [pc, #80]	; (8002b70 <HAL_DMA_Abort_IT+0x29c>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d128      	bne.n	8002b74 <HAL_DMA_Abort_IT+0x2a0>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0201 	bic.w	r2, r2, #1
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e027      	b.n	8002b84 <HAL_DMA_Abort_IT+0x2b0>
 8002b34:	40020010 	.word	0x40020010
 8002b38:	40020028 	.word	0x40020028
 8002b3c:	40020040 	.word	0x40020040
 8002b40:	40020058 	.word	0x40020058
 8002b44:	40020070 	.word	0x40020070
 8002b48:	40020088 	.word	0x40020088
 8002b4c:	400200a0 	.word	0x400200a0
 8002b50:	400200b8 	.word	0x400200b8
 8002b54:	40020410 	.word	0x40020410
 8002b58:	40020428 	.word	0x40020428
 8002b5c:	40020440 	.word	0x40020440
 8002b60:	40020458 	.word	0x40020458
 8002b64:	40020470 	.word	0x40020470
 8002b68:	40020488 	.word	0x40020488
 8002b6c:	400204a0 	.word	0x400204a0
 8002b70:	400204b8 	.word	0x400204b8
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f022 0201 	bic.w	r2, r2, #1
 8002b82:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a5c      	ldr	r2, [pc, #368]	; (8002cfc <HAL_DMA_Abort_IT+0x428>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d072      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a5b      	ldr	r2, [pc, #364]	; (8002d00 <HAL_DMA_Abort_IT+0x42c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d06d      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a59      	ldr	r2, [pc, #356]	; (8002d04 <HAL_DMA_Abort_IT+0x430>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d068      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a58      	ldr	r2, [pc, #352]	; (8002d08 <HAL_DMA_Abort_IT+0x434>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d063      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a56      	ldr	r2, [pc, #344]	; (8002d0c <HAL_DMA_Abort_IT+0x438>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d05e      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a55      	ldr	r2, [pc, #340]	; (8002d10 <HAL_DMA_Abort_IT+0x43c>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d059      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a53      	ldr	r2, [pc, #332]	; (8002d14 <HAL_DMA_Abort_IT+0x440>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d054      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a52      	ldr	r2, [pc, #328]	; (8002d18 <HAL_DMA_Abort_IT+0x444>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d04f      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a50      	ldr	r2, [pc, #320]	; (8002d1c <HAL_DMA_Abort_IT+0x448>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d04a      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a4f      	ldr	r2, [pc, #316]	; (8002d20 <HAL_DMA_Abort_IT+0x44c>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d045      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a4d      	ldr	r2, [pc, #308]	; (8002d24 <HAL_DMA_Abort_IT+0x450>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d040      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a4c      	ldr	r2, [pc, #304]	; (8002d28 <HAL_DMA_Abort_IT+0x454>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d03b      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a4a      	ldr	r2, [pc, #296]	; (8002d2c <HAL_DMA_Abort_IT+0x458>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d036      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a49      	ldr	r2, [pc, #292]	; (8002d30 <HAL_DMA_Abort_IT+0x45c>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d031      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a47      	ldr	r2, [pc, #284]	; (8002d34 <HAL_DMA_Abort_IT+0x460>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d02c      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a46      	ldr	r2, [pc, #280]	; (8002d38 <HAL_DMA_Abort_IT+0x464>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d027      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a44      	ldr	r2, [pc, #272]	; (8002d3c <HAL_DMA_Abort_IT+0x468>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d022      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a43      	ldr	r2, [pc, #268]	; (8002d40 <HAL_DMA_Abort_IT+0x46c>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d01d      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a41      	ldr	r2, [pc, #260]	; (8002d44 <HAL_DMA_Abort_IT+0x470>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d018      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a40      	ldr	r2, [pc, #256]	; (8002d48 <HAL_DMA_Abort_IT+0x474>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d013      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a3e      	ldr	r2, [pc, #248]	; (8002d4c <HAL_DMA_Abort_IT+0x478>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00e      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a3d      	ldr	r2, [pc, #244]	; (8002d50 <HAL_DMA_Abort_IT+0x47c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d009      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a3b      	ldr	r2, [pc, #236]	; (8002d54 <HAL_DMA_Abort_IT+0x480>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d004      	beq.n	8002c74 <HAL_DMA_Abort_IT+0x3a0>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a3a      	ldr	r2, [pc, #232]	; (8002d58 <HAL_DMA_Abort_IT+0x484>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d101      	bne.n	8002c78 <HAL_DMA_Abort_IT+0x3a4>
 8002c74:	2301      	movs	r3, #1
 8002c76:	e000      	b.n	8002c7a <HAL_DMA_Abort_IT+0x3a6>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d028      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c8c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c92:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ca8:	687a      	ldr	r2, [r7, #4]
 8002caa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002cac:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cc4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002cce:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2201      	movs	r2, #1
 8002cdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40020010 	.word	0x40020010
 8002d00:	40020028 	.word	0x40020028
 8002d04:	40020040 	.word	0x40020040
 8002d08:	40020058 	.word	0x40020058
 8002d0c:	40020070 	.word	0x40020070
 8002d10:	40020088 	.word	0x40020088
 8002d14:	400200a0 	.word	0x400200a0
 8002d18:	400200b8 	.word	0x400200b8
 8002d1c:	40020410 	.word	0x40020410
 8002d20:	40020428 	.word	0x40020428
 8002d24:	40020440 	.word	0x40020440
 8002d28:	40020458 	.word	0x40020458
 8002d2c:	40020470 	.word	0x40020470
 8002d30:	40020488 	.word	0x40020488
 8002d34:	400204a0 	.word	0x400204a0
 8002d38:	400204b8 	.word	0x400204b8
 8002d3c:	58025408 	.word	0x58025408
 8002d40:	5802541c 	.word	0x5802541c
 8002d44:	58025430 	.word	0x58025430
 8002d48:	58025444 	.word	0x58025444
 8002d4c:	58025458 	.word	0x58025458
 8002d50:	5802546c 	.word	0x5802546c
 8002d54:	58025480 	.word	0x58025480
 8002d58:	58025494 	.word	0x58025494

08002d5c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e0c6      	b.n	8002efc <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d102      	bne.n	8002d7c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fe ff04 	bl	8001b84 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2223      	movs	r2, #35	; 0x23
 8002d80:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d82:	4b60      	ldr	r3, [pc, #384]	; (8002f04 <HAL_ETH_Init+0x1a8>)
 8002d84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d88:	4a5e      	ldr	r2, [pc, #376]	; (8002f04 <HAL_ETH_Init+0x1a8>)
 8002d8a:	f043 0302 	orr.w	r3, r3, #2
 8002d8e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002d92:	4b5c      	ldr	r3, [pc, #368]	; (8002f04 <HAL_ETH_Init+0x1a8>)
 8002d94:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	60bb      	str	r3, [r7, #8]
 8002d9e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	7a1b      	ldrb	r3, [r3, #8]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d103      	bne.n	8002db0 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002da8:	2000      	movs	r0, #0
 8002daa:	f7ff fc9f 	bl	80026ec <HAL_SYSCFG_ETHInterfaceSelect>
 8002dae:	e003      	b.n	8002db8 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8002db0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8002db4:	f7ff fc9a 	bl	80026ec <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
 8002dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dd0:	f7ff fc52 	bl	8002678 <HAL_GetTick>
 8002dd4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002dd6:	e00f      	b.n	8002df8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8002dd8:	f7ff fc4e 	bl	8002678 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002de6:	d907      	bls.n	8002df8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2204      	movs	r2, #4
 8002dec:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	22e0      	movs	r2, #224	; 0xe0
 8002df2:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8002df4:	2301      	movs	r3, #1
 8002df6:	e081      	b.n	8002efc <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1e6      	bne.n	8002dd8 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fac0 	bl	8003390 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8002e10:	f001 fe4e 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 8002e14:	4602      	mov	r2, r0
 8002e16:	4b3c      	ldr	r3, [pc, #240]	; (8002f08 <HAL_ETH_Init+0x1ac>)
 8002e18:	fba3 2302 	umull	r2, r3, r3, r2
 8002e1c:	0c9a      	lsrs	r2, r3, #18
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3a01      	subs	r2, #1
 8002e24:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 fa13 	bl	8003254 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002e44:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002e48:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d007      	beq.n	8002e66 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	22e0      	movs	r2, #224	; 0xe0
 8002e60:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e04a      	b.n	8002efc <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	f241 1308 	movw	r3, #4360	; 0x1108
 8002e6e:	4413      	add	r3, r2
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	4b26      	ldr	r3, [pc, #152]	; (8002f0c <HAL_ETH_Init+0x1b0>)
 8002e74:	4013      	ands	r3, r2
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6952      	ldr	r2, [r2, #20]
 8002e7a:	0052      	lsls	r2, r2, #1
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	6809      	ldr	r1, [r1, #0]
 8002e80:	431a      	orrs	r2, r3
 8002e82:	f241 1308 	movw	r3, #4360	; 0x1108
 8002e86:	440b      	add	r3, r1
 8002e88:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 fad8 	bl	8003440 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fb1c 	bl	80034ce <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	3305      	adds	r3, #5
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	021a      	lsls	r2, r3, #8
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	430a      	orrs	r2, r1
 8002eb0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	3303      	adds	r3, #3
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	061a      	lsls	r2, r3, #24
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	041b      	lsls	r3, r3, #16
 8002ec8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	3301      	adds	r3, #1
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002ed4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8002ee2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8002ee4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2210      	movs	r2, #16
 8002ef8:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	58024400 	.word	0x58024400
 8002f08:	431bde83 	.word	0x431bde83
 8002f0c:	ffff8001 	.word	0xffff8001

08002f10 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 8002f22:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	791b      	ldrb	r3, [r3, #4]
 8002f28:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002f2a:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	7b1b      	ldrb	r3, [r3, #12]
 8002f30:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002f32:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	7b5b      	ldrb	r3, [r3, #13]
 8002f38:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002f3a:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	7b9b      	ldrb	r3, [r3, #14]
 8002f40:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002f42:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	7bdb      	ldrb	r3, [r3, #15]
 8002f48:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002f4a:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	7c12      	ldrb	r2, [r2, #16]
 8002f50:	2a00      	cmp	r2, #0
 8002f52:	d102      	bne.n	8002f5a <ETH_SetMACConfig+0x4a>
 8002f54:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002f58:	e000      	b.n	8002f5c <ETH_SetMACConfig+0x4c>
 8002f5a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002f5c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	7c52      	ldrb	r2, [r2, #17]
 8002f62:	2a00      	cmp	r2, #0
 8002f64:	d102      	bne.n	8002f6c <ETH_SetMACConfig+0x5c>
 8002f66:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f6a:	e000      	b.n	8002f6e <ETH_SetMACConfig+0x5e>
 8002f6c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002f6e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	7c9b      	ldrb	r3, [r3, #18]
 8002f74:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002f76:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002f7c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8002f82:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	7f1b      	ldrb	r3, [r3, #28]
 8002f88:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002f8a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	7f5b      	ldrb	r3, [r3, #29]
 8002f90:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002f92:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	7f92      	ldrb	r2, [r2, #30]
 8002f98:	2a00      	cmp	r2, #0
 8002f9a:	d102      	bne.n	8002fa2 <ETH_SetMACConfig+0x92>
 8002f9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fa0:	e000      	b.n	8002fa4 <ETH_SetMACConfig+0x94>
 8002fa2:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002fa4:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	7fdb      	ldrb	r3, [r3, #31]
 8002faa:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002fac:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002fae:	683a      	ldr	r2, [r7, #0]
 8002fb0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002fb4:	2a00      	cmp	r2, #0
 8002fb6:	d102      	bne.n	8002fbe <ETH_SetMACConfig+0xae>
 8002fb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002fbc:	e000      	b.n	8002fc0 <ETH_SetMACConfig+0xb0>
 8002fbe:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002fc0:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002fc6:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002fce:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8002fd0:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	4b56      	ldr	r3, [pc, #344]	; (800313c <ETH_SetMACConfig+0x22c>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	68f9      	ldr	r1, [r7, #12]
 8002fea:	430b      	orrs	r3, r1
 8002fec:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ffa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002ffc:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003004:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 8003006:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800300e:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 8003010:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003018:	2a00      	cmp	r2, #0
 800301a:	d102      	bne.n	8003022 <ETH_SetMACConfig+0x112>
 800301c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003020:	e000      	b.n	8003024 <ETH_SetMACConfig+0x114>
 8003022:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8003024:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800302a:	4313      	orrs	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	4b42      	ldr	r3, [pc, #264]	; (8003140 <ETH_SetMACConfig+0x230>)
 8003036:	4013      	ands	r3, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6812      	ldr	r2, [r2, #0]
 800303c:	68f9      	ldr	r1, [r7, #12]
 800303e:	430b      	orrs	r3, r1
 8003040:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003048:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800304e:	4313      	orrs	r3, r2
 8003050:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	4b3a      	ldr	r3, [pc, #232]	; (8003144 <ETH_SetMACConfig+0x234>)
 800305a:	4013      	ands	r3, r2
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	68f9      	ldr	r1, [r7, #12]
 8003062:	430b      	orrs	r3, r1
 8003064:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800306c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003072:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800307a:	2a00      	cmp	r2, #0
 800307c:	d101      	bne.n	8003082 <ETH_SetMACConfig+0x172>
 800307e:	2280      	movs	r2, #128	; 0x80
 8003080:	e000      	b.n	8003084 <ETH_SetMACConfig+0x174>
 8003082:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003084:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800308c:	4313      	orrs	r3, r2
 800308e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003096:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800309a:	4013      	ands	r3, r2
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6812      	ldr	r2, [r2, #0]
 80030a0:	68f9      	ldr	r1, [r7, #12]
 80030a2:	430b      	orrs	r3, r1
 80030a4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80030ac:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80030b4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80030b6:	4313      	orrs	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c2:	f023 0103 	bic.w	r1, r3, #3
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80030da:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80030f6:	2a00      	cmp	r2, #0
 80030f8:	d101      	bne.n	80030fe <ETH_SetMACConfig+0x1ee>
 80030fa:	2240      	movs	r2, #64	; 0x40
 80030fc:	e000      	b.n	8003100 <ETH_SetMACConfig+0x1f0>
 80030fe:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8003100:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8003108:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800310a:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8003112:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8003114:	4313      	orrs	r3, r2
 8003116:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8003120:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	430a      	orrs	r2, r1
 800312c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8003130:	bf00      	nop
 8003132:	3714      	adds	r7, #20
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	00048083 	.word	0x00048083
 8003140:	c0f88000 	.word	0xc0f88000
 8003144:	fffffef0 	.word	0xfffffef0

08003148 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4b38      	ldr	r3, [pc, #224]	; (8003240 <ETH_SetDMAConfig+0xf8>)
 800315e:	4013      	ands	r3, r2
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	6812      	ldr	r2, [r2, #0]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	6809      	ldr	r1, [r1, #0]
 8003168:	431a      	orrs	r2, r3
 800316a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800316e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	791b      	ldrb	r3, [r3, #4]
 8003174:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800317a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	7b1b      	ldrb	r3, [r3, #12]
 8003180:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8003182:	4313      	orrs	r3, r2
 8003184:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	f241 0304 	movw	r3, #4100	; 0x1004
 800318e:	4413      	add	r3, r2
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	4b2c      	ldr	r3, [pc, #176]	; (8003244 <ETH_SetDMAConfig+0xfc>)
 8003194:	4013      	ands	r3, r2
 8003196:	687a      	ldr	r2, [r7, #4]
 8003198:	6811      	ldr	r1, [r2, #0]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	431a      	orrs	r2, r3
 800319e:	f241 0304 	movw	r3, #4100	; 0x1004
 80031a2:	440b      	add	r3, r1
 80031a4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	7b5b      	ldrb	r3, [r3, #13]
 80031aa:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	4b22      	ldr	r3, [pc, #136]	; (8003248 <ETH_SetDMAConfig+0x100>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	6811      	ldr	r1, [r2, #0]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	431a      	orrs	r2, r3
 80031ca:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80031ce:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	7d1b      	ldrb	r3, [r3, #20]
 80031d8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80031da:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	7f5b      	ldrb	r3, [r3, #29]
 80031e0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80031e2:	4313      	orrs	r3, r2
 80031e4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	f241 1304 	movw	r3, #4356	; 0x1104
 80031ee:	4413      	add	r3, r2
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	4b16      	ldr	r3, [pc, #88]	; (800324c <ETH_SetDMAConfig+0x104>)
 80031f4:	4013      	ands	r3, r2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	6811      	ldr	r1, [r2, #0]
 80031fa:	68fa      	ldr	r2, [r7, #12]
 80031fc:	431a      	orrs	r2, r3
 80031fe:	f241 1304 	movw	r3, #4356	; 0x1104
 8003202:	440b      	add	r3, r1
 8003204:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	7f1b      	ldrb	r3, [r3, #28]
 800320a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8003210:	4313      	orrs	r3, r2
 8003212:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	f241 1308 	movw	r3, #4360	; 0x1108
 800321c:	4413      	add	r3, r2
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <ETH_SetDMAConfig+0x108>)
 8003222:	4013      	ands	r3, r2
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6811      	ldr	r1, [r2, #0]
 8003228:	68fa      	ldr	r2, [r7, #12]
 800322a:	431a      	orrs	r2, r3
 800322c:	f241 1308 	movw	r3, #4360	; 0x1108
 8003230:	440b      	add	r3, r1
 8003232:	601a      	str	r2, [r3, #0]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	ffff87fd 	.word	0xffff87fd
 8003244:	ffff2ffe 	.word	0xffff2ffe
 8003248:	fffec000 	.word	0xfffec000
 800324c:	ffc0efef 	.word	0xffc0efef
 8003250:	7fc0ffff 	.word	0x7fc0ffff

08003254 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b0a4      	sub	sp, #144	; 0x90
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800325c:	2301      	movs	r3, #1
 800325e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003262:	2300      	movs	r3, #0
 8003264:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8003266:	2300      	movs	r3, #0
 8003268:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800326c:	2300      	movs	r3, #0
 800326e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8003272:	2301      	movs	r3, #1
 8003274:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8003278:	2301      	movs	r3, #1
 800327a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800327e:	2301      	movs	r3, #1
 8003280:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8003284:	2300      	movs	r3, #0
 8003286:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800328a:	2301      	movs	r3, #1
 800328c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003290:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003294:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8003296:	2300      	movs	r3, #0
 8003298:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800329c:	2300      	movs	r3, #0
 800329e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80032a0:	2300      	movs	r3, #0
 80032a2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80032a6:	2300      	movs	r3, #0
 80032a8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80032ac:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80032b0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80032b2:	2300      	movs	r3, #0
 80032b4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80032b8:	2300      	movs	r3, #0
 80032ba:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80032bc:	2301      	movs	r3, #1
 80032be:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80032c2:	2300      	movs	r3, #0
 80032c4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80032c8:	2300      	movs	r3, #0
 80032ca:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80032ce:	2300      	movs	r3, #0
 80032d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80032d6:	2300      	movs	r3, #0
 80032d8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80032da:	2300      	movs	r3, #0
 80032dc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80032e0:	2300      	movs	r3, #0
 80032e2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80032e6:	2301      	movs	r3, #1
 80032e8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80032ec:	2320      	movs	r3, #32
 80032ee:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80032fe:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8003302:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003304:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003308:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800330a:	2300      	movs	r3, #0
 800330c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8003310:	2302      	movs	r3, #2
 8003312:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003316:	2300      	movs	r3, #0
 8003318:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800331c:	2300      	movs	r3, #0
 800331e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8003322:	2300      	movs	r3, #0
 8003324:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800332e:	2300      	movs	r3, #0
 8003330:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8003332:	2301      	movs	r3, #1
 8003334:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003338:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800333c:	4619      	mov	r1, r3
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f7ff fde6 	bl	8002f10 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003344:	2301      	movs	r3, #1
 8003346:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003348:	2301      	movs	r3, #1
 800334a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800334c:	2300      	movs	r3, #0
 800334e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8003350:	2300      	movs	r3, #0
 8003352:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8003356:	2300      	movs	r3, #0
 8003358:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800335a:	2300      	movs	r3, #0
 800335c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800335e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003362:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8003364:	2300      	movs	r3, #0
 8003366:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003368:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800336c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800336e:	2300      	movs	r3, #0
 8003370:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8003374:	f44f 7306 	mov.w	r3, #536	; 0x218
 8003378:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800337a:	f107 0308 	add.w	r3, r7, #8
 800337e:	4619      	mov	r1, r3
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f7ff fee1 	bl	8003148 <ETH_SetDMAConfig>
}
 8003386:	bf00      	nop
 8003388:	3790      	adds	r7, #144	; 0x90
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80033a0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033a8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80033aa:	f001 fb81 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 80033ae:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	4a1e      	ldr	r2, [pc, #120]	; (800342c <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d908      	bls.n	80033ca <ETH_MAC_MDIO_ClkConfig+0x3a>
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	4a1d      	ldr	r2, [pc, #116]	; (8003430 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d804      	bhi.n	80033ca <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	e027      	b.n	800341a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	4a18      	ldr	r2, [pc, #96]	; (8003430 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d908      	bls.n	80033e4 <ETH_MAC_MDIO_ClkConfig+0x54>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	4a17      	ldr	r2, [pc, #92]	; (8003434 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d804      	bhi.n	80033e4 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	e01a      	b.n	800341a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4a13      	ldr	r2, [pc, #76]	; (8003434 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d903      	bls.n	80033f4 <ETH_MAC_MDIO_ClkConfig+0x64>
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4a12      	ldr	r2, [pc, #72]	; (8003438 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d911      	bls.n	8003418 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	4a10      	ldr	r2, [pc, #64]	; (8003438 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d908      	bls.n	800340e <ETH_MAC_MDIO_ClkConfig+0x7e>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	4a0f      	ldr	r2, [pc, #60]	; (800343c <ETH_MAC_MDIO_ClkConfig+0xac>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d804      	bhi.n	800340e <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	e005      	b.n	800341a <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	e000      	b.n	800341a <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003418:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68fa      	ldr	r2, [r7, #12]
 8003420:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003424:	bf00      	nop
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}
 800342c:	01312cff 	.word	0x01312cff
 8003430:	02160ebf 	.word	0x02160ebf
 8003434:	039386ff 	.word	0x039386ff
 8003438:	05f5e0ff 	.word	0x05f5e0ff
 800343c:	08f0d17f 	.word	0x08f0d17f

08003440 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]
 800344c:	e01d      	b.n	800348a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68d9      	ldr	r1, [r3, #12]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4613      	mov	r3, r2
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	4413      	add	r3, r2
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	440b      	add	r3, r1
 800345e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	2200      	movs	r2, #0
 800346a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	2200      	movs	r2, #0
 8003470:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2200      	movs	r2, #0
 8003476:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003478:	68b9      	ldr	r1, [r7, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	3206      	adds	r2, #6
 8003480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	3301      	adds	r3, #1
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2b03      	cmp	r3, #3
 800348e:	d9de      	bls.n	800344e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	f241 132c 	movw	r3, #4396	; 0x112c
 800349e:	4413      	add	r3, r2
 80034a0:	2203      	movs	r2, #3
 80034a2:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	68d9      	ldr	r1, [r3, #12]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	f241 1314 	movw	r3, #4372	; 0x1114
 80034b0:	4413      	add	r3, r2
 80034b2:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	68da      	ldr	r2, [r3, #12]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80034c0:	601a      	str	r2, [r3, #0]
}
 80034c2:	bf00      	nop
 80034c4:	3714      	adds	r7, #20
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr

080034ce <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b085      	sub	sp, #20
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	e024      	b.n	8003526 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6919      	ldr	r1, [r3, #16]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4613      	mov	r3, r2
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	4413      	add	r3, r2
 80034e8:	00db      	lsls	r3, r3, #3
 80034ea:	440b      	add	r3, r1
 80034ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2200      	movs	r2, #0
 80034f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2200      	movs	r2, #0
 80034fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	2200      	movs	r2, #0
 8003504:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2200      	movs	r2, #0
 8003510:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	330a      	adds	r3, #10
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	3301      	adds	r3, #1
 8003524:	60fb      	str	r3, [r7, #12]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2b03      	cmp	r3, #3
 800352a:	d9d7      	bls.n	80034dc <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	f241 1330 	movw	r3, #4400	; 0x1130
 8003552:	4413      	add	r3, r2
 8003554:	2203      	movs	r2, #3
 8003556:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6919      	ldr	r1, [r3, #16]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	f241 131c 	movw	r3, #4380	; 0x111c
 8003564:	4413      	add	r3, r2
 8003566:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	f241 1328 	movw	r3, #4392	; 0x1128
 8003578:	4413      	add	r3, r2
 800357a:	6019      	str	r1, [r3, #0]
}
 800357c:	bf00      	nop
 800357e:	3714      	adds	r7, #20
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003588:	b480      	push	{r7}
 800358a:	b089      	sub	sp, #36	; 0x24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003592:	2300      	movs	r3, #0
 8003594:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003596:	4b89      	ldr	r3, [pc, #548]	; (80037bc <HAL_GPIO_Init+0x234>)
 8003598:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800359a:	e194      	b.n	80038c6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	2101      	movs	r1, #1
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	fa01 f303 	lsl.w	r3, r1, r3
 80035a8:	4013      	ands	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f000 8186 	beq.w	80038c0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d00b      	beq.n	80035d4 <HAL_GPIO_Init+0x4c>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d007      	beq.n	80035d4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80035c8:	2b11      	cmp	r3, #17
 80035ca:	d003      	beq.n	80035d4 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	2b12      	cmp	r3, #18
 80035d2:	d130      	bne.n	8003636 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	2203      	movs	r2, #3
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43db      	mvns	r3, r3
 80035e6:	69ba      	ldr	r2, [r7, #24]
 80035e8:	4013      	ands	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	005b      	lsls	r3, r3, #1
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800360a:	2201      	movs	r2, #1
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43db      	mvns	r3, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4013      	ands	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	091b      	lsrs	r3, r3, #4
 8003620:	f003 0201 	and.w	r2, r3, #1
 8003624:	69fb      	ldr	r3, [r7, #28]
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	2203      	movs	r2, #3
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4013      	ands	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	689a      	ldr	r2, [r3, #8]
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	4313      	orrs	r3, r2
 800365e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d003      	beq.n	8003676 <HAL_GPIO_Init+0xee>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b12      	cmp	r3, #18
 8003674:	d123      	bne.n	80036be <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	08da      	lsrs	r2, r3, #3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	3208      	adds	r2, #8
 800367e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003682:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	f003 0307 	and.w	r3, r3, #7
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	220f      	movs	r2, #15
 800368e:	fa02 f303 	lsl.w	r3, r2, r3
 8003692:	43db      	mvns	r3, r3
 8003694:	69ba      	ldr	r2, [r7, #24]
 8003696:	4013      	ands	r3, r2
 8003698:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	691a      	ldr	r2, [r3, #16]
 800369e:	69fb      	ldr	r3, [r7, #28]
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	fa02 f303 	lsl.w	r3, r2, r3
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	08da      	lsrs	r2, r3, #3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3208      	adds	r2, #8
 80036b8:	69b9      	ldr	r1, [r7, #24]
 80036ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	2203      	movs	r2, #3
 80036ca:	fa02 f303 	lsl.w	r3, r2, r3
 80036ce:	43db      	mvns	r3, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 0203 	and.w	r2, r3, #3
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	005b      	lsls	r3, r3, #1
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	69ba      	ldr	r2, [r7, #24]
 80036f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 80e0 	beq.w	80038c0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003700:	4b2f      	ldr	r3, [pc, #188]	; (80037c0 <HAL_GPIO_Init+0x238>)
 8003702:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003706:	4a2e      	ldr	r2, [pc, #184]	; (80037c0 <HAL_GPIO_Init+0x238>)
 8003708:	f043 0302 	orr.w	r3, r3, #2
 800370c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003710:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <HAL_GPIO_Init+0x238>)
 8003712:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800371e:	4a29      	ldr	r2, [pc, #164]	; (80037c4 <HAL_GPIO_Init+0x23c>)
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	089b      	lsrs	r3, r3, #2
 8003724:	3302      	adds	r3, #2
 8003726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800372a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f003 0303 	and.w	r3, r3, #3
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	220f      	movs	r2, #15
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43db      	mvns	r3, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4013      	ands	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a20      	ldr	r2, [pc, #128]	; (80037c8 <HAL_GPIO_Init+0x240>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d052      	beq.n	80037f0 <HAL_GPIO_Init+0x268>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a1f      	ldr	r2, [pc, #124]	; (80037cc <HAL_GPIO_Init+0x244>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d031      	beq.n	80037b6 <HAL_GPIO_Init+0x22e>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a1e      	ldr	r2, [pc, #120]	; (80037d0 <HAL_GPIO_Init+0x248>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d02b      	beq.n	80037b2 <HAL_GPIO_Init+0x22a>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a1d      	ldr	r2, [pc, #116]	; (80037d4 <HAL_GPIO_Init+0x24c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d025      	beq.n	80037ae <HAL_GPIO_Init+0x226>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a1c      	ldr	r2, [pc, #112]	; (80037d8 <HAL_GPIO_Init+0x250>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d01f      	beq.n	80037aa <HAL_GPIO_Init+0x222>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a1b      	ldr	r2, [pc, #108]	; (80037dc <HAL_GPIO_Init+0x254>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d019      	beq.n	80037a6 <HAL_GPIO_Init+0x21e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a1a      	ldr	r2, [pc, #104]	; (80037e0 <HAL_GPIO_Init+0x258>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d013      	beq.n	80037a2 <HAL_GPIO_Init+0x21a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a19      	ldr	r2, [pc, #100]	; (80037e4 <HAL_GPIO_Init+0x25c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00d      	beq.n	800379e <HAL_GPIO_Init+0x216>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a18      	ldr	r2, [pc, #96]	; (80037e8 <HAL_GPIO_Init+0x260>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d007      	beq.n	800379a <HAL_GPIO_Init+0x212>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a17      	ldr	r2, [pc, #92]	; (80037ec <HAL_GPIO_Init+0x264>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d101      	bne.n	8003796 <HAL_GPIO_Init+0x20e>
 8003792:	2309      	movs	r3, #9
 8003794:	e02d      	b.n	80037f2 <HAL_GPIO_Init+0x26a>
 8003796:	230a      	movs	r3, #10
 8003798:	e02b      	b.n	80037f2 <HAL_GPIO_Init+0x26a>
 800379a:	2308      	movs	r3, #8
 800379c:	e029      	b.n	80037f2 <HAL_GPIO_Init+0x26a>
 800379e:	2307      	movs	r3, #7
 80037a0:	e027      	b.n	80037f2 <HAL_GPIO_Init+0x26a>
 80037a2:	2306      	movs	r3, #6
 80037a4:	e025      	b.n	80037f2 <HAL_GPIO_Init+0x26a>
 80037a6:	2305      	movs	r3, #5
 80037a8:	e023      	b.n	80037f2 <HAL_GPIO_Init+0x26a>
 80037aa:	2304      	movs	r3, #4
 80037ac:	e021      	b.n	80037f2 <HAL_GPIO_Init+0x26a>
 80037ae:	2303      	movs	r3, #3
 80037b0:	e01f      	b.n	80037f2 <HAL_GPIO_Init+0x26a>
 80037b2:	2302      	movs	r3, #2
 80037b4:	e01d      	b.n	80037f2 <HAL_GPIO_Init+0x26a>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e01b      	b.n	80037f2 <HAL_GPIO_Init+0x26a>
 80037ba:	bf00      	nop
 80037bc:	58000080 	.word	0x58000080
 80037c0:	58024400 	.word	0x58024400
 80037c4:	58000400 	.word	0x58000400
 80037c8:	58020000 	.word	0x58020000
 80037cc:	58020400 	.word	0x58020400
 80037d0:	58020800 	.word	0x58020800
 80037d4:	58020c00 	.word	0x58020c00
 80037d8:	58021000 	.word	0x58021000
 80037dc:	58021400 	.word	0x58021400
 80037e0:	58021800 	.word	0x58021800
 80037e4:	58021c00 	.word	0x58021c00
 80037e8:	58022000 	.word	0x58022000
 80037ec:	58022400 	.word	0x58022400
 80037f0:	2300      	movs	r3, #0
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	f002 0203 	and.w	r2, r2, #3
 80037f8:	0092      	lsls	r2, r2, #2
 80037fa:	4093      	lsls	r3, r2
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003802:	4938      	ldr	r1, [pc, #224]	; (80038e4 <HAL_GPIO_Init+0x35c>)
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	089b      	lsrs	r3, r3, #2
 8003808:	3302      	adds	r3, #2
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	4313      	orrs	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	69ba      	ldr	r2, [r7, #24]
 8003838:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	43db      	mvns	r3, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4013      	ands	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	43db      	mvns	r3, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4013      	ands	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	4313      	orrs	r3, r2
 8003888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800388a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80038b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	3301      	adds	r3, #1
 80038c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	fa22 f303 	lsr.w	r3, r2, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f47f ae63 	bne.w	800359c <HAL_GPIO_Init+0x14>
  }
}
 80038d6:	bf00      	nop
 80038d8:	3724      	adds	r7, #36	; 0x24
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	58000400 	.word	0x58000400

080038e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	807b      	strh	r3, [r7, #2]
 80038f4:	4613      	mov	r3, r2
 80038f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80038f8:	787b      	ldrb	r3, [r7, #1]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80038fe:	887a      	ldrh	r2, [r7, #2]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003904:	e003      	b.n	800390e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003906:	887b      	ldrh	r3, [r7, #2]
 8003908:	041a      	lsls	r2, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	619a      	str	r2, [r3, #24]
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr

0800391a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800391a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800391c:	b08f      	sub	sp, #60	; 0x3c
 800391e:	af0a      	add	r7, sp, #40	; 0x28
 8003920:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e116      	b.n	8003b5a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b00      	cmp	r3, #0
 800393c:	d106      	bne.n	800394c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7fe fdc4 	bl	80024d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2203      	movs	r2, #3
 8003950:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d102      	bne.n	8003966 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f004 fdf8 	bl	8008560 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	603b      	str	r3, [r7, #0]
 8003976:	687e      	ldr	r6, [r7, #4]
 8003978:	466d      	mov	r5, sp
 800397a:	f106 0410 	add.w	r4, r6, #16
 800397e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003980:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003982:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003984:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003986:	e894 0003 	ldmia.w	r4, {r0, r1}
 800398a:	e885 0003 	stmia.w	r5, {r0, r1}
 800398e:	1d33      	adds	r3, r6, #4
 8003990:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003992:	6838      	ldr	r0, [r7, #0]
 8003994:	f004 fd82 	bl	800849c <USB_CoreInit>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d005      	beq.n	80039aa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2202      	movs	r2, #2
 80039a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e0d7      	b.n	8003b5a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2100      	movs	r1, #0
 80039b0:	4618      	mov	r0, r3
 80039b2:	f004 fde6 	bl	8008582 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b6:	2300      	movs	r3, #0
 80039b8:	73fb      	strb	r3, [r7, #15]
 80039ba:	e04a      	b.n	8003a52 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80039bc:	7bfa      	ldrb	r2, [r7, #15]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	333d      	adds	r3, #61	; 0x3d
 80039cc:	2201      	movs	r2, #1
 80039ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80039d0:	7bfa      	ldrb	r2, [r7, #15]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	333c      	adds	r3, #60	; 0x3c
 80039e0:	7bfa      	ldrb	r2, [r7, #15]
 80039e2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039e4:	7bfa      	ldrb	r2, [r7, #15]
 80039e6:	7bfb      	ldrb	r3, [r7, #15]
 80039e8:	b298      	uxth	r0, r3
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	3342      	adds	r3, #66	; 0x42
 80039f8:	4602      	mov	r2, r0
 80039fa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039fc:	7bfa      	ldrb	r2, [r7, #15]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	00db      	lsls	r3, r3, #3
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	333f      	adds	r3, #63	; 0x3f
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a10:	7bfa      	ldrb	r2, [r7, #15]
 8003a12:	6879      	ldr	r1, [r7, #4]
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	3344      	adds	r3, #68	; 0x44
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003a24:	7bfa      	ldrb	r2, [r7, #15]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	3348      	adds	r3, #72	; 0x48
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a38:	7bfa      	ldrb	r2, [r7, #15]
 8003a3a:	6879      	ldr	r1, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	440b      	add	r3, r1
 8003a46:	3350      	adds	r3, #80	; 0x50
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	3301      	adds	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
 8003a52:	7bfa      	ldrb	r2, [r7, #15]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d3af      	bcc.n	80039bc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]
 8003a60:	e044      	b.n	8003aec <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a62:	7bfa      	ldrb	r2, [r7, #15]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	00db      	lsls	r3, r3, #3
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a78:	7bfa      	ldrb	r2, [r7, #15]
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	00db      	lsls	r3, r3, #3
 8003a80:	1a9b      	subs	r3, r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003a8a:	7bfa      	ldrb	r2, [r7, #15]
 8003a8c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a8e:	7bfa      	ldrb	r2, [r7, #15]
 8003a90:	6879      	ldr	r1, [r7, #4]
 8003a92:	4613      	mov	r3, r2
 8003a94:	00db      	lsls	r3, r3, #3
 8003a96:	1a9b      	subs	r3, r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003aa4:	7bfa      	ldrb	r2, [r7, #15]
 8003aa6:	6879      	ldr	r1, [r7, #4]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	00db      	lsls	r3, r3, #3
 8003aac:	1a9b      	subs	r3, r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	6879      	ldr	r1, [r7, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	1a9b      	subs	r3, r3, r2
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	440b      	add	r3, r1
 8003ac8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ae6:	7bfb      	ldrb	r3, [r7, #15]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
 8003aec:	7bfa      	ldrb	r2, [r7, #15]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d3b5      	bcc.n	8003a62 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	687e      	ldr	r6, [r7, #4]
 8003afe:	466d      	mov	r5, sp
 8003b00:	f106 0410 	add.w	r4, r6, #16
 8003b04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b10:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b14:	1d33      	adds	r3, r6, #4
 8003b16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b18:	6838      	ldr	r0, [r7, #0]
 8003b1a:	f004 fd5d 	bl	80085d8 <USB_DevInit>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2202      	movs	r2, #2
 8003b28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e014      	b.n	8003b5a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d102      	bne.n	8003b4e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f80b 	bl	8003b64 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f004 feff 	bl	8008956 <USB_DevDisconnect>

  return HAL_OK;
 8003b58:	2300      	movs	r3, #0
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003b64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003b92:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <HAL_PCDEx_ActivateLPM+0x44>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	10000003 	.word	0x10000003

08003bac <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003bb4:	4b19      	ldr	r3, [pc, #100]	; (8003c1c <HAL_PWREx_ConfigSupply+0x70>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0304 	and.w	r3, r3, #4
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d00a      	beq.n	8003bd6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003bc0:	4b16      	ldr	r3, [pc, #88]	; (8003c1c <HAL_PWREx_ConfigSupply+0x70>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0307 	and.w	r3, r3, #7
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d001      	beq.n	8003bd2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e01f      	b.n	8003c12 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	e01d      	b.n	8003c12 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003bd6:	4b11      	ldr	r3, [pc, #68]	; (8003c1c <HAL_PWREx_ConfigSupply+0x70>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f023 0207 	bic.w	r2, r3, #7
 8003bde:	490f      	ldr	r1, [pc, #60]	; (8003c1c <HAL_PWREx_ConfigSupply+0x70>)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8003be6:	f7fe fd47 	bl	8002678 <HAL_GetTick>
 8003bea:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003bec:	e009      	b.n	8003c02 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003bee:	f7fe fd43 	bl	8002678 <HAL_GetTick>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	1ad3      	subs	r3, r2, r3
 8003bf8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003bfc:	d901      	bls.n	8003c02 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e007      	b.n	8003c12 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003c02:	4b06      	ldr	r3, [pc, #24]	; (8003c1c <HAL_PWREx_ConfigSupply+0x70>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c0e:	d1ee      	bne.n	8003bee <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	58024800 	.word	0x58024800

08003c20 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8003c24:	4b05      	ldr	r3, [pc, #20]	; (8003c3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4a04      	ldr	r2, [pc, #16]	; (8003c3c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8003c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c2e:	60d3      	str	r3, [r2, #12]
}
 8003c30:	bf00      	nop
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	58024800 	.word	0x58024800

08003c40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b08c      	sub	sp, #48	; 0x30
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d101      	bne.n	8003c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e3ff      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8087 	beq.w	8003d6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c60:	4b99      	ldr	r3, [pc, #612]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c68:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003c6a:	4b97      	ldr	r3, [pc, #604]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	2b10      	cmp	r3, #16
 8003c74:	d007      	beq.n	8003c86 <HAL_RCC_OscConfig+0x46>
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	2b18      	cmp	r3, #24
 8003c7a:	d110      	bne.n	8003c9e <HAL_RCC_OscConfig+0x5e>
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	f003 0303 	and.w	r3, r3, #3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d10b      	bne.n	8003c9e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c86:	4b90      	ldr	r3, [pc, #576]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d06c      	beq.n	8003d6c <HAL_RCC_OscConfig+0x12c>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d168      	bne.n	8003d6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e3d9      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	685b      	ldr	r3, [r3, #4]
 8003ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ca6:	d106      	bne.n	8003cb6 <HAL_RCC_OscConfig+0x76>
 8003ca8:	4b87      	ldr	r3, [pc, #540]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a86      	ldr	r2, [pc, #536]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	e02e      	b.n	8003d14 <HAL_RCC_OscConfig+0xd4>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10c      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x98>
 8003cbe:	4b82      	ldr	r3, [pc, #520]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a81      	ldr	r2, [pc, #516]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cc8:	6013      	str	r3, [r2, #0]
 8003cca:	4b7f      	ldr	r3, [pc, #508]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a7e      	ldr	r2, [pc, #504]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cd4:	6013      	str	r3, [r2, #0]
 8003cd6:	e01d      	b.n	8003d14 <HAL_RCC_OscConfig+0xd4>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCC_OscConfig+0xbc>
 8003ce2:	4b79      	ldr	r3, [pc, #484]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a78      	ldr	r2, [pc, #480]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cec:	6013      	str	r3, [r2, #0]
 8003cee:	4b76      	ldr	r3, [pc, #472]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a75      	ldr	r2, [pc, #468]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cf8:	6013      	str	r3, [r2, #0]
 8003cfa:	e00b      	b.n	8003d14 <HAL_RCC_OscConfig+0xd4>
 8003cfc:	4b72      	ldr	r3, [pc, #456]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a71      	ldr	r2, [pc, #452]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d06:	6013      	str	r3, [r2, #0]
 8003d08:	4b6f      	ldr	r3, [pc, #444]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a6e      	ldr	r2, [pc, #440]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d013      	beq.n	8003d44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fe fcac 	bl	8002678 <HAL_GetTick>
 8003d20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d24:	f7fe fca8 	bl	8002678 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b64      	cmp	r3, #100	; 0x64
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e38d      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003d36:	4b64      	ldr	r3, [pc, #400]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d0f0      	beq.n	8003d24 <HAL_RCC_OscConfig+0xe4>
 8003d42:	e014      	b.n	8003d6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d44:	f7fe fc98 	bl	8002678 <HAL_GetTick>
 8003d48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d4c:	f7fe fc94 	bl	8002678 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b64      	cmp	r3, #100	; 0x64
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e379      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003d5e:	4b5a      	ldr	r3, [pc, #360]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1f0      	bne.n	8003d4c <HAL_RCC_OscConfig+0x10c>
 8003d6a:	e000      	b.n	8003d6e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0302 	and.w	r3, r3, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f000 80ae 	beq.w	8003ed8 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d7c:	4b52      	ldr	r3, [pc, #328]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003d84:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003d86:	4b50      	ldr	r3, [pc, #320]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d8a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <HAL_RCC_OscConfig+0x162>
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	2b18      	cmp	r3, #24
 8003d96:	d13a      	bne.n	8003e0e <HAL_RCC_OscConfig+0x1ce>
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	f003 0303 	and.w	r3, r3, #3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d135      	bne.n	8003e0e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003da2:	4b49      	ldr	r3, [pc, #292]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0304 	and.w	r3, r3, #4
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d005      	beq.n	8003dba <HAL_RCC_OscConfig+0x17a>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e34b      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dba:	f7fe fc8b 	bl	80026d4 <HAL_GetREVID>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	f241 0303 	movw	r3, #4099	; 0x1003
 8003dc4:	429a      	cmp	r2, r3
 8003dc6:	d817      	bhi.n	8003df8 <HAL_RCC_OscConfig+0x1b8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	2b40      	cmp	r3, #64	; 0x40
 8003dce:	d108      	bne.n	8003de2 <HAL_RCC_OscConfig+0x1a2>
 8003dd0:	4b3d      	ldr	r3, [pc, #244]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003dd8:	4a3b      	ldr	r2, [pc, #236]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dde:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003de0:	e07a      	b.n	8003ed8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de2:	4b39      	ldr	r3, [pc, #228]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	031b      	lsls	r3, r3, #12
 8003df0:	4935      	ldr	r1, [pc, #212]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003df6:	e06f      	b.n	8003ed8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003df8:	4b33      	ldr	r3, [pc, #204]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	061b      	lsls	r3, r3, #24
 8003e06:	4930      	ldr	r1, [pc, #192]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e0c:	e064      	b.n	8003ed8 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	68db      	ldr	r3, [r3, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d045      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003e16:	4b2c      	ldr	r3, [pc, #176]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 0219 	bic.w	r2, r3, #25
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	4929      	ldr	r1, [pc, #164]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fe fc26 	bl	8002678 <HAL_GetTick>
 8003e2c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e2e:	e008      	b.n	8003e42 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e30:	f7fe fc22 	bl	8002678 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	2b02      	cmp	r3, #2
 8003e3c:	d901      	bls.n	8003e42 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e307      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e42:	4b21      	ldr	r3, [pc, #132]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f0      	beq.n	8003e30 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e4e:	f7fe fc41 	bl	80026d4 <HAL_GetREVID>
 8003e52:	4602      	mov	r2, r0
 8003e54:	f241 0303 	movw	r3, #4099	; 0x1003
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d817      	bhi.n	8003e8c <HAL_RCC_OscConfig+0x24c>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	2b40      	cmp	r3, #64	; 0x40
 8003e62:	d108      	bne.n	8003e76 <HAL_RCC_OscConfig+0x236>
 8003e64:	4b18      	ldr	r3, [pc, #96]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003e6c:	4a16      	ldr	r2, [pc, #88]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003e6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e72:	6053      	str	r3, [r2, #4]
 8003e74:	e030      	b.n	8003ed8 <HAL_RCC_OscConfig+0x298>
 8003e76:	4b14      	ldr	r3, [pc, #80]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	031b      	lsls	r3, r3, #12
 8003e84:	4910      	ldr	r1, [pc, #64]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	604b      	str	r3, [r1, #4]
 8003e8a:	e025      	b.n	8003ed8 <HAL_RCC_OscConfig+0x298>
 8003e8c:	4b0e      	ldr	r3, [pc, #56]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	061b      	lsls	r3, r3, #24
 8003e9a:	490b      	ldr	r1, [pc, #44]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]
 8003ea0:	e01a      	b.n	8003ed8 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea2:	4b09      	ldr	r3, [pc, #36]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a08      	ldr	r2, [pc, #32]	; (8003ec8 <HAL_RCC_OscConfig+0x288>)
 8003ea8:	f023 0301 	bic.w	r3, r3, #1
 8003eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eae:	f7fe fbe3 	bl	8002678 <HAL_GetTick>
 8003eb2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003eb4:	e00a      	b.n	8003ecc <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003eb6:	f7fe fbdf 	bl	8002678 <HAL_GetTick>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	1ad3      	subs	r3, r2, r3
 8003ec0:	2b02      	cmp	r3, #2
 8003ec2:	d903      	bls.n	8003ecc <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e2c4      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
 8003ec8:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ecc:	4ba4      	ldr	r3, [pc, #656]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0304 	and.w	r3, r3, #4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1ee      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0310 	and.w	r3, r3, #16
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 80a9 	beq.w	8004038 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ee6:	4b9e      	ldr	r3, [pc, #632]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003eee:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003ef0:	4b9b      	ldr	r3, [pc, #620]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d007      	beq.n	8003f0c <HAL_RCC_OscConfig+0x2cc>
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	2b18      	cmp	r3, #24
 8003f00:	d13a      	bne.n	8003f78 <HAL_RCC_OscConfig+0x338>
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d135      	bne.n	8003f78 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f0c:	4b94      	ldr	r3, [pc, #592]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_RCC_OscConfig+0x2e4>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	2b80      	cmp	r3, #128	; 0x80
 8003f1e:	d001      	beq.n	8003f24 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e296      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f24:	f7fe fbd6 	bl	80026d4 <HAL_GetREVID>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	f241 0303 	movw	r3, #4099	; 0x1003
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d817      	bhi.n	8003f62 <HAL_RCC_OscConfig+0x322>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a1b      	ldr	r3, [r3, #32]
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d108      	bne.n	8003f4c <HAL_RCC_OscConfig+0x30c>
 8003f3a:	4b89      	ldr	r3, [pc, #548]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003f42:	4a87      	ldr	r2, [pc, #540]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8003f44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f48:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f4a:	e075      	b.n	8004038 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f4c:	4b84      	ldr	r3, [pc, #528]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a1b      	ldr	r3, [r3, #32]
 8003f58:	069b      	lsls	r3, r3, #26
 8003f5a:	4981      	ldr	r1, [pc, #516]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f60:	e06a      	b.n	8004038 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003f62:	4b7f      	ldr	r3, [pc, #508]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8003f64:	68db      	ldr	r3, [r3, #12]
 8003f66:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	061b      	lsls	r3, r3, #24
 8003f70:	497b      	ldr	r1, [pc, #492]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003f76:	e05f      	b.n	8004038 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d042      	beq.n	8004006 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003f80:	4b77      	ldr	r3, [pc, #476]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a76      	ldr	r2, [pc, #472]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8003f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fe fb74 	bl	8002678 <HAL_GetTick>
 8003f90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003f94:	f7fe fb70 	bl	8002678 <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e255      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003fa6:	4b6e      	ldr	r3, [pc, #440]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003fb2:	f7fe fb8f 	bl	80026d4 <HAL_GetREVID>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	f241 0303 	movw	r3, #4099	; 0x1003
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d817      	bhi.n	8003ff0 <HAL_RCC_OscConfig+0x3b0>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	2b20      	cmp	r3, #32
 8003fc6:	d108      	bne.n	8003fda <HAL_RCC_OscConfig+0x39a>
 8003fc8:	4b65      	ldr	r3, [pc, #404]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003fd0:	4a63      	ldr	r2, [pc, #396]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8003fd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fd6:	6053      	str	r3, [r2, #4]
 8003fd8:	e02e      	b.n	8004038 <HAL_RCC_OscConfig+0x3f8>
 8003fda:	4b61      	ldr	r3, [pc, #388]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	069b      	lsls	r3, r3, #26
 8003fe8:	495d      	ldr	r1, [pc, #372]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	604b      	str	r3, [r1, #4]
 8003fee:	e023      	b.n	8004038 <HAL_RCC_OscConfig+0x3f8>
 8003ff0:	4b5b      	ldr	r3, [pc, #364]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a1b      	ldr	r3, [r3, #32]
 8003ffc:	061b      	lsls	r3, r3, #24
 8003ffe:	4958      	ldr	r1, [pc, #352]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8004000:	4313      	orrs	r3, r2
 8004002:	60cb      	str	r3, [r1, #12]
 8004004:	e018      	b.n	8004038 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004006:	4b56      	ldr	r3, [pc, #344]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a55      	ldr	r2, [pc, #340]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 800400c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004012:	f7fe fb31 	bl	8002678 <HAL_GetTick>
 8004016:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004018:	e008      	b.n	800402c <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800401a:	f7fe fb2d 	bl	8002678 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e212      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800402c:	4b4c      	ldr	r3, [pc, #304]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f0      	bne.n	800401a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d036      	beq.n	80040b2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d019      	beq.n	8004080 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800404c:	4b44      	ldr	r3, [pc, #272]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 800404e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004050:	4a43      	ldr	r2, [pc, #268]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8004052:	f043 0301 	orr.w	r3, r3, #1
 8004056:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004058:	f7fe fb0e 	bl	8002678 <HAL_GetTick>
 800405c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800405e:	e008      	b.n	8004072 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004060:	f7fe fb0a 	bl	8002678 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e1ef      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004072:	4b3b      	ldr	r3, [pc, #236]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8004074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f0      	beq.n	8004060 <HAL_RCC_OscConfig+0x420>
 800407e:	e018      	b.n	80040b2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004080:	4b37      	ldr	r3, [pc, #220]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8004082:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004084:	4a36      	ldr	r2, [pc, #216]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8004086:	f023 0301 	bic.w	r3, r3, #1
 800408a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408c:	f7fe faf4 	bl	8002678 <HAL_GetTick>
 8004090:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004092:	e008      	b.n	80040a6 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004094:	f7fe faf0 	bl	8002678 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d901      	bls.n	80040a6 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80040a2:	2303      	movs	r3, #3
 80040a4:	e1d5      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80040a6:	4b2e      	ldr	r3, [pc, #184]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 80040a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1f0      	bne.n	8004094 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d036      	beq.n	800412c <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d019      	beq.n	80040fa <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040c6:	4b26      	ldr	r3, [pc, #152]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a25      	ldr	r2, [pc, #148]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 80040cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80040d0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80040d2:	f7fe fad1 	bl	8002678 <HAL_GetTick>
 80040d6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80040da:	f7fe facd 	bl	8002678 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e1b2      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80040ec:	4b1c      	ldr	r3, [pc, #112]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x49a>
 80040f8:	e018      	b.n	800412c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040fa:	4b19      	ldr	r3, [pc, #100]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a18      	ldr	r2, [pc, #96]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8004100:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004104:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004106:	f7fe fab7 	bl	8002678 <HAL_GetTick>
 800410a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800410e:	f7fe fab3 	bl	8002678 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e198      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004120:	4b0f      	ldr	r3, [pc, #60]	; (8004160 <HAL_RCC_OscConfig+0x520>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d1f0      	bne.n	800410e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0304 	and.w	r3, r3, #4
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 8085 	beq.w	8004244 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800413a:	4b0a      	ldr	r3, [pc, #40]	; (8004164 <HAL_RCC_OscConfig+0x524>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a09      	ldr	r2, [pc, #36]	; (8004164 <HAL_RCC_OscConfig+0x524>)
 8004140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004144:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004146:	f7fe fa97 	bl	8002678 <HAL_GetTick>
 800414a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800414c:	e00c      	b.n	8004168 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800414e:	f7fe fa93 	bl	8002678 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b64      	cmp	r3, #100	; 0x64
 800415a:	d905      	bls.n	8004168 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e178      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
 8004160:	58024400 	.word	0x58024400
 8004164:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004168:	4b96      	ldr	r3, [pc, #600]	; (80043c4 <HAL_RCC_OscConfig+0x784>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004170:	2b00      	cmp	r3, #0
 8004172:	d0ec      	beq.n	800414e <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d106      	bne.n	800418a <HAL_RCC_OscConfig+0x54a>
 800417c:	4b92      	ldr	r3, [pc, #584]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 800417e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004180:	4a91      	ldr	r2, [pc, #580]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 8004182:	f043 0301 	orr.w	r3, r3, #1
 8004186:	6713      	str	r3, [r2, #112]	; 0x70
 8004188:	e02d      	b.n	80041e6 <HAL_RCC_OscConfig+0x5a6>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d10c      	bne.n	80041ac <HAL_RCC_OscConfig+0x56c>
 8004192:	4b8d      	ldr	r3, [pc, #564]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 8004194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004196:	4a8c      	ldr	r2, [pc, #560]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	6713      	str	r3, [r2, #112]	; 0x70
 800419e:	4b8a      	ldr	r3, [pc, #552]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	4a89      	ldr	r2, [pc, #548]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 80041a4:	f023 0304 	bic.w	r3, r3, #4
 80041a8:	6713      	str	r3, [r2, #112]	; 0x70
 80041aa:	e01c      	b.n	80041e6 <HAL_RCC_OscConfig+0x5a6>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b05      	cmp	r3, #5
 80041b2:	d10c      	bne.n	80041ce <HAL_RCC_OscConfig+0x58e>
 80041b4:	4b84      	ldr	r3, [pc, #528]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 80041b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b8:	4a83      	ldr	r2, [pc, #524]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 80041ba:	f043 0304 	orr.w	r3, r3, #4
 80041be:	6713      	str	r3, [r2, #112]	; 0x70
 80041c0:	4b81      	ldr	r3, [pc, #516]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 80041c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c4:	4a80      	ldr	r2, [pc, #512]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 80041c6:	f043 0301 	orr.w	r3, r3, #1
 80041ca:	6713      	str	r3, [r2, #112]	; 0x70
 80041cc:	e00b      	b.n	80041e6 <HAL_RCC_OscConfig+0x5a6>
 80041ce:	4b7e      	ldr	r3, [pc, #504]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d2:	4a7d      	ldr	r2, [pc, #500]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 80041d4:	f023 0301 	bic.w	r3, r3, #1
 80041d8:	6713      	str	r3, [r2, #112]	; 0x70
 80041da:	4b7b      	ldr	r3, [pc, #492]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 80041dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041de:	4a7a      	ldr	r2, [pc, #488]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 80041e0:	f023 0304 	bic.w	r3, r3, #4
 80041e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d015      	beq.n	800421a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ee:	f7fe fa43 	bl	8002678 <HAL_GetTick>
 80041f2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041f4:	e00a      	b.n	800420c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041f6:	f7fe fa3f 	bl	8002678 <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	f241 3288 	movw	r2, #5000	; 0x1388
 8004204:	4293      	cmp	r3, r2
 8004206:	d901      	bls.n	800420c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8004208:	2303      	movs	r3, #3
 800420a:	e122      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800420c:	4b6e      	ldr	r3, [pc, #440]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 800420e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d0ee      	beq.n	80041f6 <HAL_RCC_OscConfig+0x5b6>
 8004218:	e014      	b.n	8004244 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421a:	f7fe fa2d 	bl	8002678 <HAL_GetTick>
 800421e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004220:	e00a      	b.n	8004238 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004222:	f7fe fa29 	bl	8002678 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004230:	4293      	cmp	r3, r2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e10c      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004238:	4b63      	ldr	r3, [pc, #396]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 800423a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1ee      	bne.n	8004222 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 8101 	beq.w	8004450 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800424e:	4b5e      	ldr	r3, [pc, #376]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004256:	2b18      	cmp	r3, #24
 8004258:	f000 80bc 	beq.w	80043d4 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	2b02      	cmp	r3, #2
 8004262:	f040 8095 	bne.w	8004390 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004266:	4b58      	ldr	r3, [pc, #352]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a57      	ldr	r2, [pc, #348]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 800426c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004272:	f7fe fa01 	bl	8002678 <HAL_GetTick>
 8004276:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004278:	e008      	b.n	800428c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800427a:	f7fe f9fd 	bl	8002678 <HAL_GetTick>
 800427e:	4602      	mov	r2, r0
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	1ad3      	subs	r3, r2, r3
 8004284:	2b02      	cmp	r3, #2
 8004286:	d901      	bls.n	800428c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004288:	2303      	movs	r3, #3
 800428a:	e0e2      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800428c:	4b4e      	ldr	r3, [pc, #312]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004294:	2b00      	cmp	r3, #0
 8004296:	d1f0      	bne.n	800427a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004298:	4b4b      	ldr	r3, [pc, #300]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 800429a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800429c:	4b4b      	ldr	r3, [pc, #300]	; (80043cc <HAL_RCC_OscConfig+0x78c>)
 800429e:	4013      	ands	r3, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80042a8:	0112      	lsls	r2, r2, #4
 80042aa:	430a      	orrs	r2, r1
 80042ac:	4946      	ldr	r1, [pc, #280]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	628b      	str	r3, [r1, #40]	; 0x28
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b6:	3b01      	subs	r3, #1
 80042b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c0:	3b01      	subs	r3, #1
 80042c2:	025b      	lsls	r3, r3, #9
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	3b01      	subs	r3, #1
 80042ce:	041b      	lsls	r3, r3, #16
 80042d0:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80042d4:	431a      	orrs	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042da:	3b01      	subs	r3, #1
 80042dc:	061b      	lsls	r3, r3, #24
 80042de:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80042e2:	4939      	ldr	r1, [pc, #228]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 80042e4:	4313      	orrs	r3, r2
 80042e6:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80042e8:	4b37      	ldr	r3, [pc, #220]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	4a36      	ldr	r2, [pc, #216]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 80042ee:	f023 0301 	bic.w	r3, r3, #1
 80042f2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80042f4:	4b34      	ldr	r3, [pc, #208]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 80042f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042f8:	4b35      	ldr	r3, [pc, #212]	; (80043d0 <HAL_RCC_OscConfig+0x790>)
 80042fa:	4013      	ands	r3, r2
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004300:	00d2      	lsls	r2, r2, #3
 8004302:	4931      	ldr	r1, [pc, #196]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 8004304:	4313      	orrs	r3, r2
 8004306:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004308:	4b2f      	ldr	r3, [pc, #188]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	f023 020c 	bic.w	r2, r3, #12
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004314:	492c      	ldr	r1, [pc, #176]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 8004316:	4313      	orrs	r3, r2
 8004318:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800431a:	4b2b      	ldr	r3, [pc, #172]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431e:	f023 0202 	bic.w	r2, r3, #2
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004326:	4928      	ldr	r1, [pc, #160]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 8004328:	4313      	orrs	r3, r2
 800432a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800432c:	4b26      	ldr	r3, [pc, #152]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	4a25      	ldr	r2, [pc, #148]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 8004332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004336:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004338:	4b23      	ldr	r3, [pc, #140]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 800433a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433c:	4a22      	ldr	r2, [pc, #136]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 800433e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004342:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004344:	4b20      	ldr	r3, [pc, #128]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	4a1f      	ldr	r2, [pc, #124]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 800434a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800434e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8004350:	4b1d      	ldr	r3, [pc, #116]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	4a1c      	ldr	r2, [pc, #112]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 8004356:	f043 0301 	orr.w	r3, r3, #1
 800435a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800435c:	4b1a      	ldr	r3, [pc, #104]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a19      	ldr	r2, [pc, #100]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 8004362:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004366:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004368:	f7fe f986 	bl	8002678 <HAL_GetTick>
 800436c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800436e:	e008      	b.n	8004382 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004370:	f7fe f982 	bl	8002678 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	2b02      	cmp	r3, #2
 800437c:	d901      	bls.n	8004382 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e067      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004382:	4b11      	ldr	r3, [pc, #68]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d0f0      	beq.n	8004370 <HAL_RCC_OscConfig+0x730>
 800438e:	e05f      	b.n	8004450 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004390:	4b0d      	ldr	r3, [pc, #52]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a0c      	ldr	r2, [pc, #48]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 8004396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800439a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800439c:	f7fe f96c 	bl	8002678 <HAL_GetTick>
 80043a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043a4:	f7fe f968 	bl	8002678 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e04d      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80043b6:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <HAL_RCC_OscConfig+0x788>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x764>
 80043c2:	e045      	b.n	8004450 <HAL_RCC_OscConfig+0x810>
 80043c4:	58024800 	.word	0x58024800
 80043c8:	58024400 	.word	0x58024400
 80043cc:	fffffc0c 	.word	0xfffffc0c
 80043d0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80043d4:	4b21      	ldr	r3, [pc, #132]	; (800445c <HAL_RCC_OscConfig+0x81c>)
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80043da:	4b20      	ldr	r3, [pc, #128]	; (800445c <HAL_RCC_OscConfig+0x81c>)
 80043dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043de:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d031      	beq.n	800444c <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f003 0203 	and.w	r2, r3, #3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d12a      	bne.n	800444c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	091b      	lsrs	r3, r3, #4
 80043fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004402:	429a      	cmp	r2, r3
 8004404:	d122      	bne.n	800444c <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004410:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d11a      	bne.n	800444c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	0a5b      	lsrs	r3, r3, #9
 800441a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004422:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004424:	429a      	cmp	r2, r3
 8004426:	d111      	bne.n	800444c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	0c1b      	lsrs	r3, r3, #16
 800442c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004434:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004436:	429a      	cmp	r2, r3
 8004438:	d108      	bne.n	800444c <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	0e1b      	lsrs	r3, r3, #24
 800443e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004446:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d001      	beq.n	8004450 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e000      	b.n	8004452 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3730      	adds	r7, #48	; 0x30
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	58024400 	.word	0x58024400

08004460 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d101      	bne.n	8004474 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e19c      	b.n	80047ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004474:	4b8a      	ldr	r3, [pc, #552]	; (80046a0 <HAL_RCC_ClockConfig+0x240>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 030f 	and.w	r3, r3, #15
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d910      	bls.n	80044a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004482:	4b87      	ldr	r3, [pc, #540]	; (80046a0 <HAL_RCC_ClockConfig+0x240>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f023 020f 	bic.w	r2, r3, #15
 800448a:	4985      	ldr	r1, [pc, #532]	; (80046a0 <HAL_RCC_ClockConfig+0x240>)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	4313      	orrs	r3, r2
 8004490:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004492:	4b83      	ldr	r3, [pc, #524]	; (80046a0 <HAL_RCC_ClockConfig+0x240>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 030f 	and.w	r3, r3, #15
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	429a      	cmp	r2, r3
 800449e:	d001      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e184      	b.n	80047ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d010      	beq.n	80044d2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	4b7b      	ldr	r3, [pc, #492]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044bc:	429a      	cmp	r2, r3
 80044be:	d908      	bls.n	80044d2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80044c0:	4b78      	ldr	r3, [pc, #480]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	4975      	ldr	r1, [pc, #468]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 80044ce:	4313      	orrs	r3, r2
 80044d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d010      	beq.n	8004500 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	4b70      	ldr	r3, [pc, #448]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d908      	bls.n	8004500 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80044ee:	4b6d      	ldr	r3, [pc, #436]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	496a      	ldr	r1, [pc, #424]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b00      	cmp	r3, #0
 800450a:	d010      	beq.n	800452e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699a      	ldr	r2, [r3, #24]
 8004510:	4b64      	ldr	r3, [pc, #400]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 8004512:	69db      	ldr	r3, [r3, #28]
 8004514:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004518:	429a      	cmp	r2, r3
 800451a:	d908      	bls.n	800452e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800451c:	4b61      	ldr	r3, [pc, #388]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 800451e:	69db      	ldr	r3, [r3, #28]
 8004520:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	495e      	ldr	r1, [pc, #376]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 800452a:	4313      	orrs	r3, r2
 800452c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d010      	beq.n	800455c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69da      	ldr	r2, [r3, #28]
 800453e:	4b59      	ldr	r3, [pc, #356]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004546:	429a      	cmp	r2, r3
 8004548:	d908      	bls.n	800455c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800454a:	4b56      	ldr	r3, [pc, #344]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 800454c:	6a1b      	ldr	r3, [r3, #32]
 800454e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	4953      	ldr	r1, [pc, #332]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 8004558:	4313      	orrs	r3, r2
 800455a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d010      	beq.n	800458a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68da      	ldr	r2, [r3, #12]
 800456c:	4b4d      	ldr	r3, [pc, #308]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 800456e:	699b      	ldr	r3, [r3, #24]
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	429a      	cmp	r2, r3
 8004576:	d908      	bls.n	800458a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004578:	4b4a      	ldr	r3, [pc, #296]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 800457a:	699b      	ldr	r3, [r3, #24]
 800457c:	f023 020f 	bic.w	r2, r3, #15
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	4947      	ldr	r1, [pc, #284]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 8004586:	4313      	orrs	r3, r2
 8004588:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d055      	beq.n	8004642 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004596:	4b43      	ldr	r3, [pc, #268]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	4940      	ldr	r1, [pc, #256]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d107      	bne.n	80045c0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80045b0:	4b3c      	ldr	r3, [pc, #240]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d121      	bne.n	8004600 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e0f6      	b.n	80047ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	2b03      	cmp	r3, #3
 80045c6:	d107      	bne.n	80045d8 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80045c8:	4b36      	ldr	r3, [pc, #216]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d115      	bne.n	8004600 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e0ea      	b.n	80047ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b01      	cmp	r3, #1
 80045de:	d107      	bne.n	80045f0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80045e0:	4b30      	ldr	r3, [pc, #192]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80045ec:	2301      	movs	r3, #1
 80045ee:	e0de      	b.n	80047ae <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80045f0:	4b2c      	ldr	r3, [pc, #176]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d101      	bne.n	8004600 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e0d6      	b.n	80047ae <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004600:	4b28      	ldr	r3, [pc, #160]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	f023 0207 	bic.w	r2, r3, #7
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	4925      	ldr	r1, [pc, #148]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 800460e:	4313      	orrs	r3, r2
 8004610:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004612:	f7fe f831 	bl	8002678 <HAL_GetTick>
 8004616:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004618:	e00a      	b.n	8004630 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800461a:	f7fe f82d 	bl	8002678 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	f241 3288 	movw	r2, #5000	; 0x1388
 8004628:	4293      	cmp	r3, r2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e0be      	b.n	80047ae <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004630:	4b1c      	ldr	r3, [pc, #112]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	00db      	lsls	r3, r3, #3
 800463e:	429a      	cmp	r2, r3
 8004640:	d1eb      	bne.n	800461a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d010      	beq.n	8004670 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	4b14      	ldr	r3, [pc, #80]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	f003 030f 	and.w	r3, r3, #15
 800465a:	429a      	cmp	r2, r3
 800465c:	d208      	bcs.n	8004670 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800465e:	4b11      	ldr	r3, [pc, #68]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	f023 020f 	bic.w	r2, r3, #15
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	490e      	ldr	r1, [pc, #56]	; (80046a4 <HAL_RCC_ClockConfig+0x244>)
 800466c:	4313      	orrs	r3, r2
 800466e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004670:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <HAL_RCC_ClockConfig+0x240>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f003 030f 	and.w	r3, r3, #15
 8004678:	683a      	ldr	r2, [r7, #0]
 800467a:	429a      	cmp	r2, r3
 800467c:	d214      	bcs.n	80046a8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800467e:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <HAL_RCC_ClockConfig+0x240>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f023 020f 	bic.w	r2, r3, #15
 8004686:	4906      	ldr	r1, [pc, #24]	; (80046a0 <HAL_RCC_ClockConfig+0x240>)
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800468e:	4b04      	ldr	r3, [pc, #16]	; (80046a0 <HAL_RCC_ClockConfig+0x240>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d005      	beq.n	80046a8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e086      	b.n	80047ae <HAL_RCC_ClockConfig+0x34e>
 80046a0:	52002000 	.word	0x52002000
 80046a4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d010      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691a      	ldr	r2, [r3, #16]
 80046b8:	4b3f      	ldr	r3, [pc, #252]	; (80047b8 <HAL_RCC_ClockConfig+0x358>)
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d208      	bcs.n	80046d6 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80046c4:	4b3c      	ldr	r3, [pc, #240]	; (80047b8 <HAL_RCC_ClockConfig+0x358>)
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	4939      	ldr	r1, [pc, #228]	; (80047b8 <HAL_RCC_ClockConfig+0x358>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d010      	beq.n	8004704 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695a      	ldr	r2, [r3, #20]
 80046e6:	4b34      	ldr	r3, [pc, #208]	; (80047b8 <HAL_RCC_ClockConfig+0x358>)
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d208      	bcs.n	8004704 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80046f2:	4b31      	ldr	r3, [pc, #196]	; (80047b8 <HAL_RCC_ClockConfig+0x358>)
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	492e      	ldr	r1, [pc, #184]	; (80047b8 <HAL_RCC_ClockConfig+0x358>)
 8004700:	4313      	orrs	r3, r2
 8004702:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b00      	cmp	r3, #0
 800470e:	d010      	beq.n	8004732 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	699a      	ldr	r2, [r3, #24]
 8004714:	4b28      	ldr	r3, [pc, #160]	; (80047b8 <HAL_RCC_ClockConfig+0x358>)
 8004716:	69db      	ldr	r3, [r3, #28]
 8004718:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800471c:	429a      	cmp	r2, r3
 800471e:	d208      	bcs.n	8004732 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004720:	4b25      	ldr	r3, [pc, #148]	; (80047b8 <HAL_RCC_ClockConfig+0x358>)
 8004722:	69db      	ldr	r3, [r3, #28]
 8004724:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	4922      	ldr	r1, [pc, #136]	; (80047b8 <HAL_RCC_ClockConfig+0x358>)
 800472e:	4313      	orrs	r3, r2
 8004730:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0320 	and.w	r3, r3, #32
 800473a:	2b00      	cmp	r3, #0
 800473c:	d010      	beq.n	8004760 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69da      	ldr	r2, [r3, #28]
 8004742:	4b1d      	ldr	r3, [pc, #116]	; (80047b8 <HAL_RCC_ClockConfig+0x358>)
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800474a:	429a      	cmp	r2, r3
 800474c:	d208      	bcs.n	8004760 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800474e:	4b1a      	ldr	r3, [pc, #104]	; (80047b8 <HAL_RCC_ClockConfig+0x358>)
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	4917      	ldr	r1, [pc, #92]	; (80047b8 <HAL_RCC_ClockConfig+0x358>)
 800475c:	4313      	orrs	r3, r2
 800475e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004760:	f000 f834 	bl	80047cc <HAL_RCC_GetSysClockFreq>
 8004764:	4601      	mov	r1, r0
 8004766:	4b14      	ldr	r3, [pc, #80]	; (80047b8 <HAL_RCC_ClockConfig+0x358>)
 8004768:	699b      	ldr	r3, [r3, #24]
 800476a:	0a1b      	lsrs	r3, r3, #8
 800476c:	f003 030f 	and.w	r3, r3, #15
 8004770:	4a12      	ldr	r2, [pc, #72]	; (80047bc <HAL_RCC_ClockConfig+0x35c>)
 8004772:	5cd3      	ldrb	r3, [r2, r3]
 8004774:	f003 031f 	and.w	r3, r3, #31
 8004778:	fa21 f303 	lsr.w	r3, r1, r3
 800477c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800477e:	4b0e      	ldr	r3, [pc, #56]	; (80047b8 <HAL_RCC_ClockConfig+0x358>)
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	4a0d      	ldr	r2, [pc, #52]	; (80047bc <HAL_RCC_ClockConfig+0x35c>)
 8004788:	5cd3      	ldrb	r3, [r2, r3]
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	fa22 f303 	lsr.w	r3, r2, r3
 8004794:	4a0a      	ldr	r2, [pc, #40]	; (80047c0 <HAL_RCC_ClockConfig+0x360>)
 8004796:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004798:	4a0a      	ldr	r2, [pc, #40]	; (80047c4 <HAL_RCC_ClockConfig+0x364>)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800479e:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <HAL_RCC_ClockConfig+0x368>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7fd fcb2 	bl	800210c <HAL_InitTick>
 80047a8:	4603      	mov	r3, r0
 80047aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	58024400 	.word	0x58024400
 80047bc:	0800c370 	.word	0x0800c370
 80047c0:	24000004 	.word	0x24000004
 80047c4:	24000000 	.word	0x24000000
 80047c8:	24000008 	.word	0x24000008

080047cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b089      	sub	sp, #36	; 0x24
 80047d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047d2:	4baf      	ldr	r3, [pc, #700]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047da:	2b18      	cmp	r3, #24
 80047dc:	f200 814e 	bhi.w	8004a7c <HAL_RCC_GetSysClockFreq+0x2b0>
 80047e0:	a201      	add	r2, pc, #4	; (adr r2, 80047e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80047e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047e6:	bf00      	nop
 80047e8:	0800484d 	.word	0x0800484d
 80047ec:	08004a7d 	.word	0x08004a7d
 80047f0:	08004a7d 	.word	0x08004a7d
 80047f4:	08004a7d 	.word	0x08004a7d
 80047f8:	08004a7d 	.word	0x08004a7d
 80047fc:	08004a7d 	.word	0x08004a7d
 8004800:	08004a7d 	.word	0x08004a7d
 8004804:	08004a7d 	.word	0x08004a7d
 8004808:	08004873 	.word	0x08004873
 800480c:	08004a7d 	.word	0x08004a7d
 8004810:	08004a7d 	.word	0x08004a7d
 8004814:	08004a7d 	.word	0x08004a7d
 8004818:	08004a7d 	.word	0x08004a7d
 800481c:	08004a7d 	.word	0x08004a7d
 8004820:	08004a7d 	.word	0x08004a7d
 8004824:	08004a7d 	.word	0x08004a7d
 8004828:	08004879 	.word	0x08004879
 800482c:	08004a7d 	.word	0x08004a7d
 8004830:	08004a7d 	.word	0x08004a7d
 8004834:	08004a7d 	.word	0x08004a7d
 8004838:	08004a7d 	.word	0x08004a7d
 800483c:	08004a7d 	.word	0x08004a7d
 8004840:	08004a7d 	.word	0x08004a7d
 8004844:	08004a7d 	.word	0x08004a7d
 8004848:	0800487f 	.word	0x0800487f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800484c:	4b90      	ldr	r3, [pc, #576]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0320 	and.w	r3, r3, #32
 8004854:	2b00      	cmp	r3, #0
 8004856:	d009      	beq.n	800486c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004858:	4b8d      	ldr	r3, [pc, #564]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	08db      	lsrs	r3, r3, #3
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	4a8c      	ldr	r2, [pc, #560]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8004864:	fa22 f303 	lsr.w	r3, r2, r3
 8004868:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800486a:	e10a      	b.n	8004a82 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800486c:	4b89      	ldr	r3, [pc, #548]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800486e:	61bb      	str	r3, [r7, #24]
    break;
 8004870:	e107      	b.n	8004a82 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8004872:	4b89      	ldr	r3, [pc, #548]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004874:	61bb      	str	r3, [r7, #24]
    break;
 8004876:	e104      	b.n	8004a82 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8004878:	4b88      	ldr	r3, [pc, #544]	; (8004a9c <HAL_RCC_GetSysClockFreq+0x2d0>)
 800487a:	61bb      	str	r3, [r7, #24]
    break;
 800487c:	e101      	b.n	8004a82 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800487e:	4b84      	ldr	r3, [pc, #528]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8004888:	4b81      	ldr	r3, [pc, #516]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800488a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800488c:	091b      	lsrs	r3, r3, #4
 800488e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004892:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004894:	4b7e      	ldr	r3, [pc, #504]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800489e:	4b7c      	ldr	r3, [pc, #496]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80048a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a2:	08db      	lsrs	r3, r3, #3
 80048a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	fb02 f303 	mul.w	r3, r2, r3
 80048ae:	ee07 3a90 	vmov	s15, r3
 80048b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f000 80da 	beq.w	8004a76 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d05a      	beq.n	800497e <HAL_RCC_GetSysClockFreq+0x1b2>
 80048c8:	2b01      	cmp	r3, #1
 80048ca:	d302      	bcc.n	80048d2 <HAL_RCC_GetSysClockFreq+0x106>
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d078      	beq.n	80049c2 <HAL_RCC_GetSysClockFreq+0x1f6>
 80048d0:	e099      	b.n	8004a06 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048d2:	4b6f      	ldr	r3, [pc, #444]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d02d      	beq.n	800493a <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80048de:	4b6c      	ldr	r3, [pc, #432]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	08db      	lsrs	r3, r3, #3
 80048e4:	f003 0303 	and.w	r3, r3, #3
 80048e8:	4a6a      	ldr	r2, [pc, #424]	; (8004a94 <HAL_RCC_GetSysClockFreq+0x2c8>)
 80048ea:	fa22 f303 	lsr.w	r3, r2, r3
 80048ee:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	ee07 3a90 	vmov	s15, r3
 80048f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	ee07 3a90 	vmov	s15, r3
 8004900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004908:	4b61      	ldr	r3, [pc, #388]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800490a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800490c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004910:	ee07 3a90 	vmov	s15, r3
 8004914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004918:	ed97 6a02 	vldr	s12, [r7, #8]
 800491c:	eddf 5a60 	vldr	s11, [pc, #384]	; 8004aa0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004920:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004924:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004928:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800492c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004934:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8004938:	e087      	b.n	8004a4a <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	ee07 3a90 	vmov	s15, r3
 8004940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004944:	eddf 6a57 	vldr	s13, [pc, #348]	; 8004aa4 <HAL_RCC_GetSysClockFreq+0x2d8>
 8004948:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494c:	4b50      	ldr	r3, [pc, #320]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800494e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004954:	ee07 3a90 	vmov	s15, r3
 8004958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495c:	ed97 6a02 	vldr	s12, [r7, #8]
 8004960:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8004aa0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004964:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004968:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800496c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004970:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004978:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800497c:	e065      	b.n	8004a4a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004988:	eddf 6a47 	vldr	s13, [pc, #284]	; 8004aa8 <HAL_RCC_GetSysClockFreq+0x2dc>
 800498c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004990:	4b3f      	ldr	r3, [pc, #252]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004998:	ee07 3a90 	vmov	s15, r3
 800499c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80049a4:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8004aa0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80049a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049c0:	e043      	b.n	8004a4a <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	ee07 3a90 	vmov	s15, r3
 80049c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049cc:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004aac <HAL_RCC_GetSysClockFreq+0x2e0>
 80049d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d4:	4b2e      	ldr	r3, [pc, #184]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80049d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049dc:	ee07 3a90 	vmov	s15, r3
 80049e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80049e8:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8004aa0 <HAL_RCC_GetSysClockFreq+0x2d4>
 80049ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a00:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a04:	e021      	b.n	8004a4a <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	ee07 3a90 	vmov	s15, r3
 8004a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a10:	eddf 6a25 	vldr	s13, [pc, #148]	; 8004aa8 <HAL_RCC_GetSysClockFreq+0x2dc>
 8004a14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a18:	4b1d      	ldr	r3, [pc, #116]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a20:	ee07 3a90 	vmov	s15, r3
 8004a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a28:	ed97 6a02 	vldr	s12, [r7, #8]
 8004a2c:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8004aa0 <HAL_RCC_GetSysClockFreq+0x2d4>
 8004a30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a44:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a48:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8004a4a:	4b11      	ldr	r3, [pc, #68]	; (8004a90 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8004a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4e:	0a5b      	lsrs	r3, r3, #9
 8004a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a54:	3301      	adds	r3, #1
 8004a56:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	ee07 3a90 	vmov	s15, r3
 8004a5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004a62:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a6e:	ee17 3a90 	vmov	r3, s15
 8004a72:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8004a74:	e005      	b.n	8004a82 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8004a76:	2300      	movs	r3, #0
 8004a78:	61bb      	str	r3, [r7, #24]
    break;
 8004a7a:	e002      	b.n	8004a82 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8004a7c:	4b06      	ldr	r3, [pc, #24]	; (8004a98 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8004a7e:	61bb      	str	r3, [r7, #24]
    break;
 8004a80:	bf00      	nop
  }

  return sysclockfreq;
 8004a82:	69bb      	ldr	r3, [r7, #24]
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3724      	adds	r7, #36	; 0x24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr
 8004a90:	58024400 	.word	0x58024400
 8004a94:	03d09000 	.word	0x03d09000
 8004a98:	003d0900 	.word	0x003d0900
 8004a9c:	007a1200 	.word	0x007a1200
 8004aa0:	46000000 	.word	0x46000000
 8004aa4:	4c742400 	.word	0x4c742400
 8004aa8:	4a742400 	.word	0x4a742400
 8004aac:	4af42400 	.word	0x4af42400

08004ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004ab6:	f7ff fe89 	bl	80047cc <HAL_RCC_GetSysClockFreq>
 8004aba:	4601      	mov	r1, r0
 8004abc:	4b10      	ldr	r3, [pc, #64]	; (8004b00 <HAL_RCC_GetHCLKFreq+0x50>)
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	0a1b      	lsrs	r3, r3, #8
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	4a0f      	ldr	r2, [pc, #60]	; (8004b04 <HAL_RCC_GetHCLKFreq+0x54>)
 8004ac8:	5cd3      	ldrb	r3, [r2, r3]
 8004aca:	f003 031f 	and.w	r3, r3, #31
 8004ace:	fa21 f303 	lsr.w	r3, r1, r3
 8004ad2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004ad4:	4b0a      	ldr	r3, [pc, #40]	; (8004b00 <HAL_RCC_GetHCLKFreq+0x50>)
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	f003 030f 	and.w	r3, r3, #15
 8004adc:	4a09      	ldr	r2, [pc, #36]	; (8004b04 <HAL_RCC_GetHCLKFreq+0x54>)
 8004ade:	5cd3      	ldrb	r3, [r2, r3]
 8004ae0:	f003 031f 	and.w	r3, r3, #31
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8004aea:	4a07      	ldr	r2, [pc, #28]	; (8004b08 <HAL_RCC_GetHCLKFreq+0x58>)
 8004aec:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004aee:	4a07      	ldr	r2, [pc, #28]	; (8004b0c <HAL_RCC_GetHCLKFreq+0x5c>)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004af4:	4b04      	ldr	r3, [pc, #16]	; (8004b08 <HAL_RCC_GetHCLKFreq+0x58>)
 8004af6:	681b      	ldr	r3, [r3, #0]
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	58024400 	.word	0x58024400
 8004b04:	0800c370 	.word	0x0800c370
 8004b08:	24000004 	.word	0x24000004
 8004b0c:	24000000 	.word	0x24000000

08004b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004b14:	f7ff ffcc 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 8004b18:	4601      	mov	r1, r0
 8004b1a:	4b06      	ldr	r3, [pc, #24]	; (8004b34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b1c:	69db      	ldr	r3, [r3, #28]
 8004b1e:	091b      	lsrs	r3, r3, #4
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	4a04      	ldr	r2, [pc, #16]	; (8004b38 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b26:	5cd3      	ldrb	r3, [r2, r3]
 8004b28:	f003 031f 	and.w	r3, r3, #31
 8004b2c:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	58024400 	.word	0x58024400
 8004b38:	0800c370 	.word	0x0800c370

08004b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004b40:	f7ff ffb6 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 8004b44:	4601      	mov	r1, r0
 8004b46:	4b06      	ldr	r3, [pc, #24]	; (8004b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b48:	69db      	ldr	r3, [r3, #28]
 8004b4a:	0a1b      	lsrs	r3, r3, #8
 8004b4c:	f003 0307 	and.w	r3, r3, #7
 8004b50:	4a04      	ldr	r2, [pc, #16]	; (8004b64 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b52:	5cd3      	ldrb	r3, [r2, r3]
 8004b54:	f003 031f 	and.w	r3, r3, #31
 8004b58:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	58024400 	.word	0x58024400
 8004b64:	0800c370 	.word	0x0800c370

08004b68 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	223f      	movs	r2, #63	; 0x3f
 8004b76:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004b78:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <HAL_RCC_GetClockConfig+0x7c>)
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	f003 0207 	and.w	r2, r3, #7
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8004b84:	4b17      	ldr	r3, [pc, #92]	; (8004be4 <HAL_RCC_GetClockConfig+0x7c>)
 8004b86:	699b      	ldr	r3, [r3, #24]
 8004b88:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8004b90:	4b14      	ldr	r3, [pc, #80]	; (8004be4 <HAL_RCC_GetClockConfig+0x7c>)
 8004b92:	699b      	ldr	r3, [r3, #24]
 8004b94:	f003 020f 	and.w	r2, r3, #15
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8004b9c:	4b11      	ldr	r3, [pc, #68]	; (8004be4 <HAL_RCC_GetClockConfig+0x7c>)
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8004ba8:	4b0e      	ldr	r3, [pc, #56]	; (8004be4 <HAL_RCC_GetClockConfig+0x7c>)
 8004baa:	69db      	ldr	r3, [r3, #28]
 8004bac:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <HAL_RCC_GetClockConfig+0x7c>)
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8004bc0:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <HAL_RCC_GetClockConfig+0x7c>)
 8004bc2:	6a1b      	ldr	r3, [r3, #32]
 8004bc4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <HAL_RCC_GetClockConfig+0x80>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 020f 	and.w	r2, r3, #15
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	601a      	str	r2, [r3, #0]
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	58024400 	.word	0x58024400
 8004be8:	52002000 	.word	0x52002000

08004bec <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b086      	sub	sp, #24
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d03d      	beq.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c10:	d013      	beq.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8004c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c16:	d802      	bhi.n	8004c1e <HAL_RCCEx_PeriphCLKConfig+0x32>
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d007      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8004c1c:	e01f      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x72>
 8004c1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c22:	d013      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x60>
 8004c24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004c28:	d01c      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8004c2a:	e018      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c2c:	4baf      	ldr	r3, [pc, #700]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	4aae      	ldr	r2, [pc, #696]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c38:	e015      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	2102      	movs	r1, #2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f001 f96f 	bl	8005f24 <RCCEx_PLL2_Config>
 8004c46:	4603      	mov	r3, r0
 8004c48:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c4a:	e00c      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3324      	adds	r3, #36	; 0x24
 8004c50:	2102      	movs	r1, #2
 8004c52:	4618      	mov	r0, r3
 8004c54:	f001 fa18 	bl	8006088 <RCCEx_PLL3_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8004c5c:	e003      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	75fb      	strb	r3, [r7, #23]
      break;
 8004c62:	e000      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8004c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c66:	7dfb      	ldrb	r3, [r7, #23]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d109      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004c6c:	4b9f      	ldr	r3, [pc, #636]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c78:	499c      	ldr	r1, [pc, #624]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	650b      	str	r3, [r1, #80]	; 0x50
 8004c7e:	e001      	b.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c80:	7dfb      	ldrb	r3, [r7, #23]
 8004c82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d03d      	beq.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d826      	bhi.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8004c98:	a201      	add	r2, pc, #4	; (adr r2, 8004ca0 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8004c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c9e:	bf00      	nop
 8004ca0:	08004cb5 	.word	0x08004cb5
 8004ca4:	08004cc3 	.word	0x08004cc3
 8004ca8:	08004cd5 	.word	0x08004cd5
 8004cac:	08004ced 	.word	0x08004ced
 8004cb0:	08004ced 	.word	0x08004ced
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004cb4:	4b8d      	ldr	r3, [pc, #564]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb8:	4a8c      	ldr	r2, [pc, #560]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004cbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cc0:	e015      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	3304      	adds	r3, #4
 8004cc6:	2100      	movs	r1, #0
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f001 f92b 	bl	8005f24 <RCCEx_PLL2_Config>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004cd2:	e00c      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	3324      	adds	r3, #36	; 0x24
 8004cd8:	2100      	movs	r1, #0
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 f9d4 	bl	8006088 <RCCEx_PLL3_Config>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004ce4:	e003      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cea:	e000      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8004cec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004cee:	7dfb      	ldrb	r3, [r7, #23]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d109      	bne.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cf4:	4b7d      	ldr	r3, [pc, #500]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004cf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf8:	f023 0207 	bic.w	r2, r3, #7
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d00:	497a      	ldr	r1, [pc, #488]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	650b      	str	r3, [r1, #80]	; 0x50
 8004d06:	e001      	b.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d08:	7dfb      	ldrb	r3, [r7, #23]
 8004d0a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d03e      	beq.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1c:	2b80      	cmp	r3, #128	; 0x80
 8004d1e:	d01c      	beq.n	8004d5a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8004d20:	2b80      	cmp	r3, #128	; 0x80
 8004d22:	d804      	bhi.n	8004d2e <HAL_RCCEx_PeriphCLKConfig+0x142>
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d008      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004d28:	2b40      	cmp	r3, #64	; 0x40
 8004d2a:	d00d      	beq.n	8004d48 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004d2c:	e01e      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x180>
 8004d2e:	2bc0      	cmp	r3, #192	; 0xc0
 8004d30:	d01f      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8004d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d36:	d01e      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004d38:	e018      	b.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d3a:	4b6c      	ldr	r3, [pc, #432]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3e:	4a6b      	ldr	r2, [pc, #428]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d46:	e017      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	3304      	adds	r3, #4
 8004d4c:	2100      	movs	r1, #0
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f001 f8e8 	bl	8005f24 <RCCEx_PLL2_Config>
 8004d54:	4603      	mov	r3, r0
 8004d56:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d58:	e00e      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3324      	adds	r3, #36	; 0x24
 8004d5e:	2100      	movs	r1, #0
 8004d60:	4618      	mov	r0, r3
 8004d62:	f001 f991 	bl	8006088 <RCCEx_PLL3_Config>
 8004d66:	4603      	mov	r3, r0
 8004d68:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004d6a:	e005      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8004d70:	e002      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004d72:	bf00      	nop
 8004d74:	e000      	b.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8004d76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004d78:	7dfb      	ldrb	r3, [r7, #23]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d109      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004d7e:	4b5b      	ldr	r3, [pc, #364]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d82:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8a:	4958      	ldr	r1, [pc, #352]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	650b      	str	r3, [r1, #80]	; 0x50
 8004d90:	e001      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
 8004d94:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d044      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004da8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dac:	d01f      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004db2:	d805      	bhi.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d00a      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8004db8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004dbc:	d00e      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8004dbe:	e01f      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8004dc0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004dc4:	d01f      	beq.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8004dc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004dca:	d01e      	beq.n	8004e0a <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8004dcc:	e018      	b.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dce:	4b47      	ldr	r3, [pc, #284]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd2:	4a46      	ldr	r2, [pc, #280]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004dda:	e017      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3304      	adds	r3, #4
 8004de0:	2100      	movs	r1, #0
 8004de2:	4618      	mov	r0, r3
 8004de4:	f001 f89e 	bl	8005f24 <RCCEx_PLL2_Config>
 8004de8:	4603      	mov	r3, r0
 8004dea:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004dec:	e00e      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3324      	adds	r3, #36	; 0x24
 8004df2:	2100      	movs	r1, #0
 8004df4:	4618      	mov	r0, r3
 8004df6:	f001 f947 	bl	8006088 <RCCEx_PLL3_Config>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004dfe:	e005      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	75fb      	strb	r3, [r7, #23]
      break;
 8004e04:	e002      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004e06:	bf00      	nop
 8004e08:	e000      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8004e0a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e0c:	7dfb      	ldrb	r3, [r7, #23]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10a      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004e12:	4b36      	ldr	r3, [pc, #216]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e16:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e20:	4932      	ldr	r1, [pc, #200]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e22:	4313      	orrs	r3, r2
 8004e24:	658b      	str	r3, [r1, #88]	; 0x58
 8004e26:	e001      	b.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e28:	7dfb      	ldrb	r3, [r7, #23]
 8004e2a:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d044      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004e3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e42:	d01f      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004e44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e48:	d805      	bhi.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d00a      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8004e4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e52:	d00e      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8004e54:	e01f      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8004e56:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004e5a:	d01f      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8004e5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e60:	d01e      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004e62:	e018      	b.n	8004e96 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e64:	4b21      	ldr	r3, [pc, #132]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e68:	4a20      	ldr	r2, [pc, #128]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e6e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e70:	e017      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	3304      	adds	r3, #4
 8004e76:	2100      	movs	r1, #0
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f001 f853 	bl	8005f24 <RCCEx_PLL2_Config>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004e82:	e00e      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3324      	adds	r3, #36	; 0x24
 8004e88:	2100      	movs	r1, #0
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f001 f8fc 	bl	8006088 <RCCEx_PLL3_Config>
 8004e90:	4603      	mov	r3, r0
 8004e92:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004e94:	e005      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	75fb      	strb	r3, [r7, #23]
      break;
 8004e9a:	e002      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004e9c:	bf00      	nop
 8004e9e:	e000      	b.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ea2:	7dfb      	ldrb	r3, [r7, #23]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d10a      	bne.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004ea8:	4b10      	ldr	r3, [pc, #64]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004eb6:	490d      	ldr	r1, [pc, #52]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	658b      	str	r3, [r1, #88]	; 0x58
 8004ebc:	e001      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ebe:	7dfb      	ldrb	r3, [r7, #23]
 8004ec0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d035      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ed2:	2b10      	cmp	r3, #16
 8004ed4:	d00c      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x304>
 8004ed6:	2b10      	cmp	r3, #16
 8004ed8:	d802      	bhi.n	8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d01b      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004ede:	e017      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d00c      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004ee4:	2b30      	cmp	r3, #48	; 0x30
 8004ee6:	d018      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8004ee8:	e012      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004eea:	bf00      	nop
 8004eec:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ef0:	4baf      	ldr	r3, [pc, #700]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef4:	4aae      	ldr	r2, [pc, #696]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004ef6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004efa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004efc:	e00e      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	3304      	adds	r3, #4
 8004f02:	2102      	movs	r1, #2
 8004f04:	4618      	mov	r0, r3
 8004f06:	f001 f80d 	bl	8005f24 <RCCEx_PLL2_Config>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004f0e:	e005      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	75fb      	strb	r3, [r7, #23]
      break;
 8004f14:	e002      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004f16:	bf00      	nop
 8004f18:	e000      	b.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8004f1a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f1c:	7dfb      	ldrb	r3, [r7, #23]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d109      	bne.n	8004f36 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004f22:	4ba3      	ldr	r3, [pc, #652]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f26:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f2e:	49a0      	ldr	r1, [pc, #640]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004f34:	e001      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f36:	7dfb      	ldrb	r3, [r7, #23]
 8004f38:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d042      	beq.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f4e:	d01f      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8004f50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f54:	d805      	bhi.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d00a      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8004f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f5e:	d00e      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x392>
 8004f60:	e01f      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 8004f62:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004f66:	d01f      	beq.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004f68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f6c:	d01e      	beq.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8004f6e:	e018      	b.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004f70:	4b8f      	ldr	r3, [pc, #572]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	4a8e      	ldr	r2, [pc, #568]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004f7c:	e017      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3304      	adds	r3, #4
 8004f82:	2100      	movs	r1, #0
 8004f84:	4618      	mov	r0, r3
 8004f86:	f000 ffcd 	bl	8005f24 <RCCEx_PLL2_Config>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004f8e:	e00e      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	3324      	adds	r3, #36	; 0x24
 8004f94:	2100      	movs	r1, #0
 8004f96:	4618      	mov	r0, r3
 8004f98:	f001 f876 	bl	8006088 <RCCEx_PLL3_Config>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004fa0:	e005      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	75fb      	strb	r3, [r7, #23]
      break;
 8004fa6:	e002      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004fa8:	bf00      	nop
 8004faa:	e000      	b.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004fac:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fae:	7dfb      	ldrb	r3, [r7, #23]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d109      	bne.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004fb4:	4b7e      	ldr	r3, [pc, #504]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fb8:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fc0:	497b      	ldr	r1, [pc, #492]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	650b      	str	r3, [r1, #80]	; 0x50
 8004fc6:	e001      	b.n	8004fcc <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fc8:	7dfb      	ldrb	r3, [r7, #23]
 8004fca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d042      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fdc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fe0:	d01b      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004fe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004fe6:	d805      	bhi.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x408>
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d022      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ff0:	d00a      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004ff2:	e01b      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004ff4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ff8:	d01d      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 8004ffa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ffe:	d01c      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8005000:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005004:	d01b      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x452>
 8005006:	e011      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3304      	adds	r3, #4
 800500c:	2101      	movs	r1, #1
 800500e:	4618      	mov	r0, r3
 8005010:	f000 ff88 	bl	8005f24 <RCCEx_PLL2_Config>
 8005014:	4603      	mov	r3, r0
 8005016:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005018:	e012      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3324      	adds	r3, #36	; 0x24
 800501e:	2101      	movs	r1, #1
 8005020:	4618      	mov	r0, r3
 8005022:	f001 f831 	bl	8006088 <RCCEx_PLL3_Config>
 8005026:	4603      	mov	r3, r0
 8005028:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800502a:	e009      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	75fb      	strb	r3, [r7, #23]
      break;
 8005030:	e006      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005032:	bf00      	nop
 8005034:	e004      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8005036:	bf00      	nop
 8005038:	e002      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800503a:	bf00      	nop
 800503c:	e000      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800503e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005040:	7dfb      	ldrb	r3, [r7, #23]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d109      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005046:	4b5a      	ldr	r3, [pc, #360]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800504a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005052:	4957      	ldr	r1, [pc, #348]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005054:	4313      	orrs	r3, r2
 8005056:	650b      	str	r3, [r1, #80]	; 0x50
 8005058:	e001      	b.n	800505e <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800505a:	7dfb      	ldrb	r3, [r7, #23]
 800505c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d044      	beq.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005070:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005074:	d01b      	beq.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005076:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800507a:	d805      	bhi.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800507c:	2b00      	cmp	r3, #0
 800507e:	d022      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8005080:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005084:	d00a      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005086:	e01b      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8005088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800508c:	d01d      	beq.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800508e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005092:	d01c      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8005094:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005098:	d01b      	beq.n	80050d2 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800509a:	e011      	b.n	80050c0 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	3304      	adds	r3, #4
 80050a0:	2101      	movs	r1, #1
 80050a2:	4618      	mov	r0, r3
 80050a4:	f000 ff3e 	bl	8005f24 <RCCEx_PLL2_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80050ac:	e012      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	3324      	adds	r3, #36	; 0x24
 80050b2:	2101      	movs	r1, #1
 80050b4:	4618      	mov	r0, r3
 80050b6:	f000 ffe7 	bl	8006088 <RCCEx_PLL3_Config>
 80050ba:	4603      	mov	r3, r0
 80050bc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80050be:	e009      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	75fb      	strb	r3, [r7, #23]
      break;
 80050c4:	e006      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80050c6:	bf00      	nop
 80050c8:	e004      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80050ca:	bf00      	nop
 80050cc:	e002      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80050ce:	bf00      	nop
 80050d0:	e000      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80050d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050d4:	7dfb      	ldrb	r3, [r7, #23]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d10a      	bne.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80050da:	4b35      	ldr	r3, [pc, #212]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050de:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80050e8:	4931      	ldr	r1, [pc, #196]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	658b      	str	r3, [r1, #88]	; 0x58
 80050ee:	e001      	b.n	80050f4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f0:	7dfb      	ldrb	r3, [r7, #23]
 80050f2:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d02d      	beq.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005104:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005108:	d005      	beq.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800510a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800510e:	d009      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8005110:	2b00      	cmp	r3, #0
 8005112:	d013      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8005114:	e00f      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005116:	4b26      	ldr	r3, [pc, #152]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800511a:	4a25      	ldr	r2, [pc, #148]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800511c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005120:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005122:	e00c      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3304      	adds	r3, #4
 8005128:	2101      	movs	r1, #1
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fefa 	bl	8005f24 <RCCEx_PLL2_Config>
 8005130:	4603      	mov	r3, r0
 8005132:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8005134:	e003      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	75fb      	strb	r3, [r7, #23]
      break;
 800513a:	e000      	b.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800513c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800513e:	7dfb      	ldrb	r3, [r7, #23]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d109      	bne.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005144:	4b1a      	ldr	r3, [pc, #104]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005148:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005150:	4917      	ldr	r1, [pc, #92]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8005152:	4313      	orrs	r3, r2
 8005154:	650b      	str	r3, [r1, #80]	; 0x50
 8005156:	e001      	b.n	800515c <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005158:	7dfb      	ldrb	r3, [r7, #23]
 800515a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d035      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800516c:	2b03      	cmp	r3, #3
 800516e:	d81b      	bhi.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8005170:	a201      	add	r2, pc, #4	; (adr r2, 8005178 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 8005172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005176:	bf00      	nop
 8005178:	080051b5 	.word	0x080051b5
 800517c:	08005189 	.word	0x08005189
 8005180:	08005197 	.word	0x08005197
 8005184:	080051b5 	.word	0x080051b5
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005188:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	4a08      	ldr	r2, [pc, #32]	; (80051b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800518e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005192:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8005194:	e00f      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	3304      	adds	r3, #4
 800519a:	2102      	movs	r1, #2
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fec1 	bl	8005f24 <RCCEx_PLL2_Config>
 80051a2:	4603      	mov	r3, r0
 80051a4:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80051a6:	e006      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	75fb      	strb	r3, [r7, #23]
      break;
 80051ac:	e003      	b.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80051ae:	bf00      	nop
 80051b0:	58024400 	.word	0x58024400
      break;
 80051b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051b6:	7dfb      	ldrb	r3, [r7, #23]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d109      	bne.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80051bc:	4bba      	ldr	r3, [pc, #744]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80051be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c0:	f023 0203 	bic.w	r2, r3, #3
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c8:	49b7      	ldr	r1, [pc, #732]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	64cb      	str	r3, [r1, #76]	; 0x4c
 80051ce:	e001      	b.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d0:	7dfb      	ldrb	r3, [r7, #23]
 80051d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	f000 8086 	beq.w	80052ee <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051e2:	4bb2      	ldr	r3, [pc, #712]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4ab1      	ldr	r2, [pc, #708]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80051e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051ee:	f7fd fa43 	bl	8002678 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80051f4:	e009      	b.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051f6:	f7fd fa3f 	bl	8002678 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b64      	cmp	r3, #100	; 0x64
 8005202:	d902      	bls.n	800520a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	75fb      	strb	r3, [r7, #23]
        break;
 8005208:	e005      	b.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800520a:	4ba8      	ldr	r3, [pc, #672]	; (80054ac <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0ef      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 8005216:	7dfb      	ldrb	r3, [r7, #23]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d166      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800521c:	4ba2      	ldr	r3, [pc, #648]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800521e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8005226:	4053      	eors	r3, r2
 8005228:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800522c:	2b00      	cmp	r3, #0
 800522e:	d013      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005230:	4b9d      	ldr	r3, [pc, #628]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005234:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005238:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800523a:	4b9b      	ldr	r3, [pc, #620]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800523c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523e:	4a9a      	ldr	r2, [pc, #616]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005244:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005246:	4b98      	ldr	r3, [pc, #608]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800524a:	4a97      	ldr	r2, [pc, #604]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800524c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005250:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005252:	4a95      	ldr	r2, [pc, #596]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800525e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005262:	d115      	bne.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005264:	f7fd fa08 	bl	8002678 <HAL_GetTick>
 8005268:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800526a:	e00b      	b.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526c:	f7fd fa04 	bl	8002678 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	f241 3288 	movw	r2, #5000	; 0x1388
 800527a:	4293      	cmp	r3, r2
 800527c:	d902      	bls.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	75fb      	strb	r3, [r7, #23]
            break;
 8005282:	e005      	b.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005284:	4b88      	ldr	r3, [pc, #544]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005288:	f003 0302 	and.w	r3, r3, #2
 800528c:	2b00      	cmp	r3, #0
 800528e:	d0ed      	beq.n	800526c <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8005290:	7dfb      	ldrb	r3, [r7, #23]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d126      	bne.n	80052e4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800529c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052a4:	d10d      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 80052a6:	4b80      	ldr	r3, [pc, #512]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052b4:	0919      	lsrs	r1, r3, #4
 80052b6:	4b7e      	ldr	r3, [pc, #504]	; (80054b0 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80052b8:	400b      	ands	r3, r1
 80052ba:	497b      	ldr	r1, [pc, #492]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052bc:	4313      	orrs	r3, r2
 80052be:	610b      	str	r3, [r1, #16]
 80052c0:	e005      	b.n	80052ce <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80052c2:	4b79      	ldr	r3, [pc, #484]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	4a78      	ldr	r2, [pc, #480]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80052cc:	6113      	str	r3, [r2, #16]
 80052ce:	4b76      	ldr	r3, [pc, #472]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052d0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80052d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052dc:	4972      	ldr	r1, [pc, #456]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	670b      	str	r3, [r1, #112]	; 0x70
 80052e2:	e004      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052e4:	7dfb      	ldrb	r3, [r7, #23]
 80052e6:	75bb      	strb	r3, [r7, #22]
 80052e8:	e001      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052ea:	7dfb      	ldrb	r3, [r7, #23]
 80052ec:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d07d      	beq.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052fe:	2b28      	cmp	r3, #40	; 0x28
 8005300:	d866      	bhi.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8005302:	a201      	add	r2, pc, #4	; (adr r2, 8005308 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005308:	080053d7 	.word	0x080053d7
 800530c:	080053d1 	.word	0x080053d1
 8005310:	080053d1 	.word	0x080053d1
 8005314:	080053d1 	.word	0x080053d1
 8005318:	080053d1 	.word	0x080053d1
 800531c:	080053d1 	.word	0x080053d1
 8005320:	080053d1 	.word	0x080053d1
 8005324:	080053d1 	.word	0x080053d1
 8005328:	080053ad 	.word	0x080053ad
 800532c:	080053d1 	.word	0x080053d1
 8005330:	080053d1 	.word	0x080053d1
 8005334:	080053d1 	.word	0x080053d1
 8005338:	080053d1 	.word	0x080053d1
 800533c:	080053d1 	.word	0x080053d1
 8005340:	080053d1 	.word	0x080053d1
 8005344:	080053d1 	.word	0x080053d1
 8005348:	080053bf 	.word	0x080053bf
 800534c:	080053d1 	.word	0x080053d1
 8005350:	080053d1 	.word	0x080053d1
 8005354:	080053d1 	.word	0x080053d1
 8005358:	080053d1 	.word	0x080053d1
 800535c:	080053d1 	.word	0x080053d1
 8005360:	080053d1 	.word	0x080053d1
 8005364:	080053d1 	.word	0x080053d1
 8005368:	080053d7 	.word	0x080053d7
 800536c:	080053d1 	.word	0x080053d1
 8005370:	080053d1 	.word	0x080053d1
 8005374:	080053d1 	.word	0x080053d1
 8005378:	080053d1 	.word	0x080053d1
 800537c:	080053d1 	.word	0x080053d1
 8005380:	080053d1 	.word	0x080053d1
 8005384:	080053d1 	.word	0x080053d1
 8005388:	080053d7 	.word	0x080053d7
 800538c:	080053d1 	.word	0x080053d1
 8005390:	080053d1 	.word	0x080053d1
 8005394:	080053d1 	.word	0x080053d1
 8005398:	080053d1 	.word	0x080053d1
 800539c:	080053d1 	.word	0x080053d1
 80053a0:	080053d1 	.word	0x080053d1
 80053a4:	080053d1 	.word	0x080053d1
 80053a8:	080053d7 	.word	0x080053d7
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3304      	adds	r3, #4
 80053b0:	2101      	movs	r1, #1
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fdb6 	bl	8005f24 <RCCEx_PLL2_Config>
 80053b8:	4603      	mov	r3, r0
 80053ba:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80053bc:	e00c      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	3324      	adds	r3, #36	; 0x24
 80053c2:	2101      	movs	r1, #1
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 fe5f 	bl	8006088 <RCCEx_PLL3_Config>
 80053ca:	4603      	mov	r3, r0
 80053cc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80053ce:	e003      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	75fb      	strb	r3, [r7, #23]
      break;
 80053d4:	e000      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80053d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d109      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80053de:	4b32      	ldr	r3, [pc, #200]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80053e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053e2:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053ea:	492f      	ldr	r1, [pc, #188]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	654b      	str	r3, [r1, #84]	; 0x54
 80053f0:	e001      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053f2:	7dfb      	ldrb	r3, [r7, #23]
 80053f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0302 	and.w	r3, r3, #2
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d037      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005406:	2b05      	cmp	r3, #5
 8005408:	d820      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x860>
 800540a:	a201      	add	r2, pc, #4	; (adr r2, 8005410 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800540c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005410:	08005453 	.word	0x08005453
 8005414:	08005429 	.word	0x08005429
 8005418:	0800543b 	.word	0x0800543b
 800541c:	08005453 	.word	0x08005453
 8005420:	08005453 	.word	0x08005453
 8005424:	08005453 	.word	0x08005453
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	3304      	adds	r3, #4
 800542c:	2101      	movs	r1, #1
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fd78 	bl	8005f24 <RCCEx_PLL2_Config>
 8005434:	4603      	mov	r3, r0
 8005436:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8005438:	e00c      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3324      	adds	r3, #36	; 0x24
 800543e:	2101      	movs	r1, #1
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fe21 	bl	8006088 <RCCEx_PLL3_Config>
 8005446:	4603      	mov	r3, r0
 8005448:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800544a:	e003      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	75fb      	strb	r3, [r7, #23]
      break;
 8005450:	e000      	b.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8005452:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005454:	7dfb      	ldrb	r3, [r7, #23]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d109      	bne.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800545a:	4b13      	ldr	r3, [pc, #76]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800545c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545e:	f023 0207 	bic.w	r2, r3, #7
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005466:	4910      	ldr	r1, [pc, #64]	; (80054a8 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8005468:	4313      	orrs	r3, r2
 800546a:	654b      	str	r3, [r1, #84]	; 0x54
 800546c:	e001      	b.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800546e:	7dfb      	ldrb	r3, [r7, #23]
 8005470:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0304 	and.w	r3, r3, #4
 800547a:	2b00      	cmp	r3, #0
 800547c:	d040      	beq.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005484:	2b05      	cmp	r3, #5
 8005486:	d827      	bhi.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8005488:	a201      	add	r2, pc, #4	; (adr r2, 8005490 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800548a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800548e:	bf00      	nop
 8005490:	080054df 	.word	0x080054df
 8005494:	080054b5 	.word	0x080054b5
 8005498:	080054c7 	.word	0x080054c7
 800549c:	080054df 	.word	0x080054df
 80054a0:	080054df 	.word	0x080054df
 80054a4:	080054df 	.word	0x080054df
 80054a8:	58024400 	.word	0x58024400
 80054ac:	58024800 	.word	0x58024800
 80054b0:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	3304      	adds	r3, #4
 80054b8:	2101      	movs	r1, #1
 80054ba:	4618      	mov	r0, r3
 80054bc:	f000 fd32 	bl	8005f24 <RCCEx_PLL2_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80054c4:	e00c      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3324      	adds	r3, #36	; 0x24
 80054ca:	2101      	movs	r1, #1
 80054cc:	4618      	mov	r0, r3
 80054ce:	f000 fddb 	bl	8006088 <RCCEx_PLL3_Config>
 80054d2:	4603      	mov	r3, r0
 80054d4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80054d6:	e003      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	75fb      	strb	r3, [r7, #23]
      break;
 80054dc:	e000      	b.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80054de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80054e0:	7dfb      	ldrb	r3, [r7, #23]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10a      	bne.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054e6:	4bb2      	ldr	r3, [pc, #712]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80054e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054ea:	f023 0207 	bic.w	r2, r3, #7
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f4:	49ae      	ldr	r1, [pc, #696]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	658b      	str	r3, [r1, #88]	; 0x58
 80054fa:	e001      	b.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054fc:	7dfb      	ldrb	r3, [r7, #23]
 80054fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0320 	and.w	r3, r3, #32
 8005508:	2b00      	cmp	r3, #0
 800550a:	d044      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005512:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005516:	d01b      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8005518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800551c:	d805      	bhi.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800551e:	2b00      	cmp	r3, #0
 8005520:	d022      	beq.n	8005568 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8005522:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005526:	d00a      	beq.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x952>
 8005528:	e01b      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800552a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552e:	d01d      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x980>
 8005530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005534:	d01c      	beq.n	8005570 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8005536:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800553a:	d01b      	beq.n	8005574 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800553c:	e011      	b.n	8005562 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	3304      	adds	r3, #4
 8005542:	2100      	movs	r1, #0
 8005544:	4618      	mov	r0, r3
 8005546:	f000 fced 	bl	8005f24 <RCCEx_PLL2_Config>
 800554a:	4603      	mov	r3, r0
 800554c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800554e:	e012      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3324      	adds	r3, #36	; 0x24
 8005554:	2102      	movs	r1, #2
 8005556:	4618      	mov	r0, r3
 8005558:	f000 fd96 	bl	8006088 <RCCEx_PLL3_Config>
 800555c:	4603      	mov	r3, r0
 800555e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8005560:	e009      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	75fb      	strb	r3, [r7, #23]
      break;
 8005566:	e006      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005568:	bf00      	nop
 800556a:	e004      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800556c:	bf00      	nop
 800556e:	e002      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005570:	bf00      	nop
 8005572:	e000      	b.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8005574:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005576:	7dfb      	ldrb	r3, [r7, #23]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d10a      	bne.n	8005592 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800557c:	4b8c      	ldr	r3, [pc, #560]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800557e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005580:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800558a:	4989      	ldr	r1, [pc, #548]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800558c:	4313      	orrs	r3, r2
 800558e:	654b      	str	r3, [r1, #84]	; 0x54
 8005590:	e001      	b.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005592:	7dfb      	ldrb	r3, [r7, #23]
 8005594:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d044      	beq.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ac:	d01b      	beq.n	80055e6 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 80055ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055b2:	d805      	bhi.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d022      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0xa12>
 80055b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055bc:	d00a      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 80055be:	e01b      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 80055c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055c4:	d01d      	beq.n	8005602 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80055c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80055ca:	d01c      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80055cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055d0:	d01b      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80055d2:	e011      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	3304      	adds	r3, #4
 80055d8:	2100      	movs	r1, #0
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fca2 	bl	8005f24 <RCCEx_PLL2_Config>
 80055e0:	4603      	mov	r3, r0
 80055e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80055e4:	e012      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	3324      	adds	r3, #36	; 0x24
 80055ea:	2102      	movs	r1, #2
 80055ec:	4618      	mov	r0, r3
 80055ee:	f000 fd4b 	bl	8006088 <RCCEx_PLL3_Config>
 80055f2:	4603      	mov	r3, r0
 80055f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80055f6:	e009      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	75fb      	strb	r3, [r7, #23]
      break;
 80055fc:	e006      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80055fe:	bf00      	nop
 8005600:	e004      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005602:	bf00      	nop
 8005604:	e002      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8005606:	bf00      	nop
 8005608:	e000      	b.n	800560c <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800560a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800560c:	7dfb      	ldrb	r3, [r7, #23]
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10a      	bne.n	8005628 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005612:	4b67      	ldr	r3, [pc, #412]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005616:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005620:	4963      	ldr	r1, [pc, #396]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005622:	4313      	orrs	r3, r2
 8005624:	658b      	str	r3, [r1, #88]	; 0x58
 8005626:	e001      	b.n	800562c <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005628:	7dfb      	ldrb	r3, [r7, #23]
 800562a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005634:	2b00      	cmp	r3, #0
 8005636:	d044      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800563e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005642:	d01b      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8005644:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005648:	d805      	bhi.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d022      	beq.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800564e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005652:	d00a      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8005654:	e01b      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8005656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800565a:	d01d      	beq.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800565c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8005660:	d01c      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8005662:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8005666:	d01b      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8005668:	e011      	b.n	800568e <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	3304      	adds	r3, #4
 800566e:	2100      	movs	r1, #0
 8005670:	4618      	mov	r0, r3
 8005672:	f000 fc57 	bl	8005f24 <RCCEx_PLL2_Config>
 8005676:	4603      	mov	r3, r0
 8005678:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800567a:	e012      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	3324      	adds	r3, #36	; 0x24
 8005680:	2102      	movs	r1, #2
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fd00 	bl	8006088 <RCCEx_PLL3_Config>
 8005688:	4603      	mov	r3, r0
 800568a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800568c:	e009      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	75fb      	strb	r3, [r7, #23]
      break;
 8005692:	e006      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005694:	bf00      	nop
 8005696:	e004      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8005698:	bf00      	nop
 800569a:	e002      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800569c:	bf00      	nop
 800569e:	e000      	b.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 80056a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056a2:	7dfb      	ldrb	r3, [r7, #23]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80056a8:	4b41      	ldr	r3, [pc, #260]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80056aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056b6:	493e      	ldr	r1, [pc, #248]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	658b      	str	r3, [r1, #88]	; 0x58
 80056bc:	e001      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056be:	7dfb      	ldrb	r3, [r7, #23]
 80056c0:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f003 0308 	and.w	r3, r3, #8
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d01a      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056d8:	d10a      	bne.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	3324      	adds	r3, #36	; 0x24
 80056de:	2102      	movs	r1, #2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fcd1 	bl	8006088 <RCCEx_PLL3_Config>
 80056e6:	4603      	mov	r3, r0
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80056f0:	4b2f      	ldr	r3, [pc, #188]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80056f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056f4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056fe:	492c      	ldr	r1, [pc, #176]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005700:	4313      	orrs	r3, r2
 8005702:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0310 	and.w	r3, r3, #16
 800570c:	2b00      	cmp	r3, #0
 800570e:	d01a      	beq.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800571a:	d10a      	bne.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	3324      	adds	r3, #36	; 0x24
 8005720:	2102      	movs	r1, #2
 8005722:	4618      	mov	r0, r3
 8005724:	f000 fcb0 	bl	8006088 <RCCEx_PLL3_Config>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005732:	4b1f      	ldr	r3, [pc, #124]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005736:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005740:	491b      	ldr	r1, [pc, #108]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8005742:	4313      	orrs	r3, r2
 8005744:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800574e:	2b00      	cmp	r3, #0
 8005750:	d032      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800575c:	d00d      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800575e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005762:	d016      	beq.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8005764:	2b00      	cmp	r3, #0
 8005766:	d111      	bne.n	800578c <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	3304      	adds	r3, #4
 800576c:	2100      	movs	r1, #0
 800576e:	4618      	mov	r0, r3
 8005770:	f000 fbd8 	bl	8005f24 <RCCEx_PLL2_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8005778:	e00c      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3324      	adds	r3, #36	; 0x24
 800577e:	2102      	movs	r1, #2
 8005780:	4618      	mov	r0, r3
 8005782:	f000 fc81 	bl	8006088 <RCCEx_PLL3_Config>
 8005786:	4603      	mov	r3, r0
 8005788:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800578a:	e003      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	75fb      	strb	r3, [r7, #23]
      break;
 8005790:	e000      	b.n	8005794 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8005792:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005794:	7dfb      	ldrb	r3, [r7, #23]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10c      	bne.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800579a:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800579c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800579e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80057a8:	4901      	ldr	r1, [pc, #4]	; (80057b0 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	658b      	str	r3, [r1, #88]	; 0x58
 80057ae:	e003      	b.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 80057b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057b4:	7dfb      	ldrb	r3, [r7, #23]
 80057b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d02f      	beq.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057ce:	d00c      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80057d0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80057d4:	d015      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 80057d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057da:	d10f      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80057dc:	4b79      	ldr	r3, [pc, #484]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	4a78      	ldr	r2, [pc, #480]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80057e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057e6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80057e8:	e00c      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	3324      	adds	r3, #36	; 0x24
 80057ee:	2101      	movs	r1, #1
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 fc49 	bl	8006088 <RCCEx_PLL3_Config>
 80057f6:	4603      	mov	r3, r0
 80057f8:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80057fa:	e003      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005800:	e000      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8005802:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005804:	7dfb      	ldrb	r3, [r7, #23]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d10a      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800580a:	4b6e      	ldr	r3, [pc, #440]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800580c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800580e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005818:	496a      	ldr	r1, [pc, #424]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800581a:	4313      	orrs	r3, r2
 800581c:	654b      	str	r3, [r1, #84]	; 0x54
 800581e:	e001      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005820:	7dfb      	ldrb	r3, [r7, #23]
 8005822:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d029      	beq.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8005838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800583c:	d007      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800583e:	e00f      	b.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005840:	4b60      	ldr	r3, [pc, #384]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005844:	4a5f      	ldr	r2, [pc, #380]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800584a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800584c:	e00b      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	3304      	adds	r3, #4
 8005852:	2102      	movs	r1, #2
 8005854:	4618      	mov	r0, r3
 8005856:	f000 fb65 	bl	8005f24 <RCCEx_PLL2_Config>
 800585a:	4603      	mov	r3, r0
 800585c:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800585e:	e002      	b.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8005860:	2301      	movs	r3, #1
 8005862:	75fb      	strb	r3, [r7, #23]
      break;
 8005864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005866:	7dfb      	ldrb	r3, [r7, #23]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d109      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800586c:	4b55      	ldr	r3, [pc, #340]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800586e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005870:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005878:	4952      	ldr	r1, [pc, #328]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800587a:	4313      	orrs	r3, r2
 800587c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800587e:	e001      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005880:	7dfb      	ldrb	r3, [r7, #23]
 8005882:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d00a      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3324      	adds	r3, #36	; 0x24
 8005894:	2102      	movs	r1, #2
 8005896:	4618      	mov	r0, r3
 8005898:	f000 fbf6 	bl	8006088 <RCCEx_PLL3_Config>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d02f      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058ba:	d00c      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80058bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80058c0:	d802      	bhi.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d011      	beq.n	80058ea <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 80058c6:	e00d      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 80058c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058cc:	d00f      	beq.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0xd02>
 80058ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80058d2:	d00e      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 80058d4:	e006      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058d6:	4b3b      	ldr	r3, [pc, #236]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80058d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058da:	4a3a      	ldr	r2, [pc, #232]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80058dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80058e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80058e2:	e007      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	75fb      	strb	r3, [r7, #23]
      break;
 80058e8:	e004      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80058ea:	bf00      	nop
 80058ec:	e002      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80058ee:	bf00      	nop
 80058f0:	e000      	b.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 80058f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80058f4:	7dfb      	ldrb	r3, [r7, #23]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d109      	bne.n	800590e <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80058fa:	4b32      	ldr	r3, [pc, #200]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80058fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005906:	492f      	ldr	r1, [pc, #188]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005908:	4313      	orrs	r3, r2
 800590a:	654b      	str	r3, [r1, #84]	; 0x54
 800590c:	e001      	b.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800590e:	7dfb      	ldrb	r3, [r7, #23]
 8005910:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800591a:	2b00      	cmp	r3, #0
 800591c:	d008      	beq.n	8005930 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800591e:	4b29      	ldr	r3, [pc, #164]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005922:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800592a:	4926      	ldr	r1, [pc, #152]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800592c:	4313      	orrs	r3, r2
 800592e:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005938:	2b00      	cmp	r3, #0
 800593a:	d009      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800593c:	4b21      	ldr	r3, [pc, #132]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800594a:	491e      	ldr	r1, [pc, #120]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800594c:	4313      	orrs	r3, r2
 800594e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d008      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800595c:	4b19      	ldr	r3, [pc, #100]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800595e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005960:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005968:	4916      	ldr	r1, [pc, #88]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800596a:	4313      	orrs	r3, r2
 800596c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00d      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800597a:	4b12      	ldr	r3, [pc, #72]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800597c:	691b      	ldr	r3, [r3, #16]
 800597e:	4a11      	ldr	r2, [pc, #68]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005980:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005984:	6113      	str	r3, [r2, #16]
 8005986:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005988:	691a      	ldr	r2, [r3, #16]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005990:	490c      	ldr	r1, [pc, #48]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8005992:	4313      	orrs	r3, r2
 8005994:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	da08      	bge.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800599e:	4b09      	ldr	r3, [pc, #36]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80059a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059aa:	4906      	ldr	r1, [pc, #24]	; (80059c4 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80059b0:	7dbb      	ldrb	r3, [r7, #22]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	e000      	b.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3718      	adds	r7, #24
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	58024400 	.word	0x58024400

080059c8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80059cc:	f7ff f870 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 80059d0:	4601      	mov	r1, r0
 80059d2:	4b06      	ldr	r3, [pc, #24]	; (80059ec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	091b      	lsrs	r3, r3, #4
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	4a04      	ldr	r2, [pc, #16]	; (80059f0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80059de:	5cd3      	ldrb	r3, [r2, r3]
 80059e0:	f003 031f 	and.w	r3, r3, #31
 80059e4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	58024400 	.word	0x58024400
 80059f0:	0800c370 	.word	0x0800c370

080059f4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b089      	sub	sp, #36	; 0x24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059fc:	4b9d      	ldr	r3, [pc, #628]	; (8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8005a06:	4b9b      	ldr	r3, [pc, #620]	; (8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	0b1b      	lsrs	r3, r3, #12
 8005a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005a12:	4b98      	ldr	r3, [pc, #608]	; (8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	091b      	lsrs	r3, r3, #4
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8005a1e:	4b95      	ldr	r3, [pc, #596]	; (8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a22:	08db      	lsrs	r3, r3, #3
 8005a24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	fb02 f303 	mul.w	r3, r2, r3
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 810a 	beq.w	8005c56 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d05a      	beq.n	8005afe <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d302      	bcc.n	8005a52 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d078      	beq.n	8005b42 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8005a50:	e099      	b.n	8005b86 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a52:	4b88      	ldr	r3, [pc, #544]	; (8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 0320 	and.w	r3, r3, #32
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d02d      	beq.n	8005aba <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005a5e:	4b85      	ldr	r3, [pc, #532]	; (8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	08db      	lsrs	r3, r3, #3
 8005a64:	f003 0303 	and.w	r3, r3, #3
 8005a68:	4a83      	ldr	r2, [pc, #524]	; (8005c78 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8005a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a6e:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	ee07 3a90 	vmov	s15, r3
 8005a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	ee07 3a90 	vmov	s15, r3
 8005a80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a88:	4b7a      	ldr	r3, [pc, #488]	; (8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a90:	ee07 3a90 	vmov	s15, r3
 8005a94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a98:	ed97 6a03 	vldr	s12, [r7, #12]
 8005a9c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005aa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005aa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005aac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ab4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005ab8:	e087      	b.n	8005bca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	ee07 3a90 	vmov	s15, r3
 8005ac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ac4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005c80 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8005ac8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005acc:	4b69      	ldr	r3, [pc, #420]	; (8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ad4:	ee07 3a90 	vmov	s15, r3
 8005ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005adc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ae0:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005ae4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ae8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005af0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005af8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005afc:	e065      	b.n	8005bca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	ee07 3a90 	vmov	s15, r3
 8005b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b08:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b10:	4b58      	ldr	r3, [pc, #352]	; (8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b18:	ee07 3a90 	vmov	s15, r3
 8005b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b20:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b24:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005b28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b40:	e043      	b.n	8005bca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	ee07 3a90 	vmov	s15, r3
 8005b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b4c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005c88 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8005b50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b54:	4b47      	ldr	r3, [pc, #284]	; (8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b5c:	ee07 3a90 	vmov	s15, r3
 8005b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b64:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b68:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005b6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005b78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b80:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005b84:	e021      	b.n	8005bca <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	ee07 3a90 	vmov	s15, r3
 8005b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b90:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005c84 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8005b94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b98:	4b36      	ldr	r3, [pc, #216]	; (8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ba0:	ee07 3a90 	vmov	s15, r3
 8005ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005ba8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bac:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005c7c <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8005bb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005bbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bc4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005bc8:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8005bca:	4b2a      	ldr	r3, [pc, #168]	; (8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bce:	0a5b      	lsrs	r3, r3, #9
 8005bd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005bd4:	ee07 3a90 	vmov	s15, r3
 8005bd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005be0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005be4:	edd7 6a07 	vldr	s13, [r7, #28]
 8005be8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bf0:	ee17 2a90 	vmov	r2, s15
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8005bf8:	4b1e      	ldr	r3, [pc, #120]	; (8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfc:	0c1b      	lsrs	r3, r3, #16
 8005bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c12:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c1e:	ee17 2a90 	vmov	r2, s15
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8005c26:	4b13      	ldr	r3, [pc, #76]	; (8005c74 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	0e1b      	lsrs	r3, r3, #24
 8005c2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c30:	ee07 3a90 	vmov	s15, r3
 8005c34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c40:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c4c:	ee17 2a90 	vmov	r2, s15
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005c54:	e008      	b.n	8005c68 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	609a      	str	r2, [r3, #8]
}
 8005c68:	bf00      	nop
 8005c6a:	3724      	adds	r7, #36	; 0x24
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr
 8005c74:	58024400 	.word	0x58024400
 8005c78:	03d09000 	.word	0x03d09000
 8005c7c:	46000000 	.word	0x46000000
 8005c80:	4c742400 	.word	0x4c742400
 8005c84:	4a742400 	.word	0x4a742400
 8005c88:	4af42400 	.word	0x4af42400

08005c8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b089      	sub	sp, #36	; 0x24
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005c94:	4b9d      	ldr	r3, [pc, #628]	; (8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c98:	f003 0303 	and.w	r3, r3, #3
 8005c9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005c9e:	4b9b      	ldr	r3, [pc, #620]	; (8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca2:	0d1b      	lsrs	r3, r3, #20
 8005ca4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ca8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005caa:	4b98      	ldr	r3, [pc, #608]	; (8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cae:	0a1b      	lsrs	r3, r3, #8
 8005cb0:	f003 0301 	and.w	r3, r3, #1
 8005cb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8005cb6:	4b95      	ldr	r3, [pc, #596]	; (8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cba:	08db      	lsrs	r3, r3, #3
 8005cbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	fb02 f303 	mul.w	r3, r2, r3
 8005cc6:	ee07 3a90 	vmov	s15, r3
 8005cca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 810a 	beq.w	8005eee <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d05a      	beq.n	8005d96 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d302      	bcc.n	8005cea <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8005ce4:	2b02      	cmp	r3, #2
 8005ce6:	d078      	beq.n	8005dda <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8005ce8:	e099      	b.n	8005e1e <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cea:	4b88      	ldr	r3, [pc, #544]	; (8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d02d      	beq.n	8005d52 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cf6:	4b85      	ldr	r3, [pc, #532]	; (8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	08db      	lsrs	r3, r3, #3
 8005cfc:	f003 0303 	and.w	r3, r3, #3
 8005d00:	4a83      	ldr	r2, [pc, #524]	; (8005f10 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8005d02:	fa22 f303 	lsr.w	r3, r2, r3
 8005d06:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	ee07 3a90 	vmov	s15, r3
 8005d18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d20:	4b7a      	ldr	r3, [pc, #488]	; (8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d28:	ee07 3a90 	vmov	s15, r3
 8005d2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d30:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d34:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005f14 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005d38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d4c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8005d50:	e087      	b.n	8005e62 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	ee07 3a90 	vmov	s15, r3
 8005d58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d5c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8005f18 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8005d60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d64:	4b69      	ldr	r3, [pc, #420]	; (8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d6c:	ee07 3a90 	vmov	s15, r3
 8005d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d74:	ed97 6a03 	vldr	s12, [r7, #12]
 8005d78:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005f14 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005d7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005d94:	e065      	b.n	8005e62 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	ee07 3a90 	vmov	s15, r3
 8005d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8005f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005da8:	4b58      	ldr	r3, [pc, #352]	; (8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db0:	ee07 3a90 	vmov	s15, r3
 8005db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005db8:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dbc:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005f14 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005dc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005dd8:	e043      	b.n	8005e62 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	ee07 3a90 	vmov	s15, r3
 8005de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8005f20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8005de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dec:	4b47      	ldr	r3, [pc, #284]	; (8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df4:	ee07 3a90 	vmov	s15, r3
 8005df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dfc:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e00:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005f14 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e18:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e1c:	e021      	b.n	8005e62 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	ee07 3a90 	vmov	s15, r3
 8005e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e28:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8005f1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8005e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e30:	4b36      	ldr	r3, [pc, #216]	; (8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e38:	ee07 3a90 	vmov	s15, r3
 8005e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e40:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e44:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005f14 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8005e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e5c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005e60:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005e62:	4b2a      	ldr	r3, [pc, #168]	; (8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e66:	0a5b      	lsrs	r3, r3, #9
 8005e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e6c:	ee07 3a90 	vmov	s15, r3
 8005e70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005e78:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005e7c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005e80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e88:	ee17 2a90 	vmov	r2, s15
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005e90:	4b1e      	ldr	r3, [pc, #120]	; (8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e94:	0c1b      	lsrs	r3, r3, #16
 8005e96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e9a:	ee07 3a90 	vmov	s15, r3
 8005e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ea2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ea6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005eaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8005eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eb6:	ee17 2a90 	vmov	r2, s15
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005ebe:	4b13      	ldr	r3, [pc, #76]	; (8005f0c <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec2:	0e1b      	lsrs	r3, r3, #24
 8005ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ec8:	ee07 3a90 	vmov	s15, r3
 8005ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ed0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005ed4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005ed8:	edd7 6a07 	vldr	s13, [r7, #28]
 8005edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ee4:	ee17 2a90 	vmov	r2, s15
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005eec:	e008      	b.n	8005f00 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	609a      	str	r2, [r3, #8]
}
 8005f00:	bf00      	nop
 8005f02:	3724      	adds	r7, #36	; 0x24
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	58024400 	.word	0x58024400
 8005f10:	03d09000 	.word	0x03d09000
 8005f14:	46000000 	.word	0x46000000
 8005f18:	4c742400 	.word	0x4c742400
 8005f1c:	4a742400 	.word	0x4a742400
 8005f20:	4af42400 	.word	0x4af42400

08005f24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005f32:	4b53      	ldr	r3, [pc, #332]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	f003 0303 	and.w	r3, r3, #3
 8005f3a:	2b03      	cmp	r3, #3
 8005f3c:	d101      	bne.n	8005f42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e099      	b.n	8006076 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005f42:	4b4f      	ldr	r3, [pc, #316]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a4e      	ldr	r2, [pc, #312]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8005f48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005f4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f4e:	f7fc fb93 	bl	8002678 <HAL_GetTick>
 8005f52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f54:	e008      	b.n	8005f68 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8005f56:	f7fc fb8f 	bl	8002678 <HAL_GetTick>
 8005f5a:	4602      	mov	r2, r0
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	1ad3      	subs	r3, r2, r3
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d901      	bls.n	8005f68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e086      	b.n	8006076 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005f68:	4b45      	ldr	r3, [pc, #276]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1f0      	bne.n	8005f56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005f74:	4b42      	ldr	r3, [pc, #264]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8005f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	031b      	lsls	r3, r3, #12
 8005f82:	493f      	ldr	r1, [pc, #252]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	628b      	str	r3, [r1, #40]	; 0x28
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	3b01      	subs	r3, #1
 8005f98:	025b      	lsls	r3, r3, #9
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	3b01      	subs	r3, #1
 8005fa4:	041b      	lsls	r3, r3, #16
 8005fa6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005faa:	431a      	orrs	r2, r3
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	061b      	lsls	r3, r3, #24
 8005fb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005fb8:	4931      	ldr	r1, [pc, #196]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005fbe:	4b30      	ldr	r3, [pc, #192]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8005fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	492d      	ldr	r1, [pc, #180]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005fd0:	4b2b      	ldr	r3, [pc, #172]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	f023 0220 	bic.w	r2, r3, #32
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	4928      	ldr	r1, [pc, #160]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005fe2:	4b27      	ldr	r3, [pc, #156]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8005fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe6:	4a26      	ldr	r2, [pc, #152]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8005fe8:	f023 0310 	bic.w	r3, r3, #16
 8005fec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005fee:	4b24      	ldr	r3, [pc, #144]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8005ff0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ff2:	4b24      	ldr	r3, [pc, #144]	; (8006084 <RCCEx_PLL2_Config+0x160>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	69d2      	ldr	r2, [r2, #28]
 8005ffa:	00d2      	lsls	r2, r2, #3
 8005ffc:	4920      	ldr	r1, [pc, #128]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006002:	4b1f      	ldr	r3, [pc, #124]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8006004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006006:	4a1e      	ldr	r2, [pc, #120]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8006008:	f043 0310 	orr.w	r3, r3, #16
 800600c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d106      	bne.n	8006022 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006014:	4b1a      	ldr	r3, [pc, #104]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8006016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006018:	4a19      	ldr	r2, [pc, #100]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 800601a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800601e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006020:	e00f      	b.n	8006042 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d106      	bne.n	8006036 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006028:	4b15      	ldr	r3, [pc, #84]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 800602a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602c:	4a14      	ldr	r2, [pc, #80]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 800602e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006032:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006034:	e005      	b.n	8006042 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006036:	4b12      	ldr	r3, [pc, #72]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8006038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800603a:	4a11      	ldr	r2, [pc, #68]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 800603c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006040:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006042:	4b0f      	ldr	r3, [pc, #60]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a0e      	ldr	r2, [pc, #56]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 8006048:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800604c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800604e:	f7fc fb13 	bl	8002678 <HAL_GetTick>
 8006052:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006054:	e008      	b.n	8006068 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006056:	f7fc fb0f 	bl	8002678 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d901      	bls.n	8006068 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e006      	b.n	8006076 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006068:	4b05      	ldr	r3, [pc, #20]	; (8006080 <RCCEx_PLL2_Config+0x15c>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0f0      	beq.n	8006056 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006074:	7bfb      	ldrb	r3, [r7, #15]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	58024400 	.word	0x58024400
 8006084:	ffff0007 	.word	0xffff0007

08006088 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006096:	4b53      	ldr	r3, [pc, #332]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 8006098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	2b03      	cmp	r3, #3
 80060a0:	d101      	bne.n	80060a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e099      	b.n	80061da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80060a6:	4b4f      	ldr	r3, [pc, #316]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a4e      	ldr	r2, [pc, #312]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 80060ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060b2:	f7fc fae1 	bl	8002678 <HAL_GetTick>
 80060b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060b8:	e008      	b.n	80060cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80060ba:	f7fc fadd 	bl	8002678 <HAL_GetTick>
 80060be:	4602      	mov	r2, r0
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	1ad3      	subs	r3, r2, r3
 80060c4:	2b02      	cmp	r3, #2
 80060c6:	d901      	bls.n	80060cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e086      	b.n	80061da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80060cc:	4b45      	ldr	r3, [pc, #276]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d1f0      	bne.n	80060ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80060d8:	4b42      	ldr	r3, [pc, #264]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 80060da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	051b      	lsls	r3, r3, #20
 80060e6:	493f      	ldr	r1, [pc, #252]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	628b      	str	r3, [r1, #40]	; 0x28
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	3b01      	subs	r3, #1
 80060f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	3b01      	subs	r3, #1
 80060fc:	025b      	lsls	r3, r3, #9
 80060fe:	b29b      	uxth	r3, r3
 8006100:	431a      	orrs	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	3b01      	subs	r3, #1
 8006108:	041b      	lsls	r3, r3, #16
 800610a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800610e:	431a      	orrs	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	691b      	ldr	r3, [r3, #16]
 8006114:	3b01      	subs	r3, #1
 8006116:	061b      	lsls	r3, r3, #24
 8006118:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800611c:	4931      	ldr	r1, [pc, #196]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 800611e:	4313      	orrs	r3, r2
 8006120:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006122:	4b30      	ldr	r3, [pc, #192]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 8006124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006126:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	695b      	ldr	r3, [r3, #20]
 800612e:	492d      	ldr	r1, [pc, #180]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 8006130:	4313      	orrs	r3, r2
 8006132:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006134:	4b2b      	ldr	r3, [pc, #172]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 8006136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006138:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	4928      	ldr	r1, [pc, #160]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 8006142:	4313      	orrs	r3, r2
 8006144:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006146:	4b27      	ldr	r3, [pc, #156]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	4a26      	ldr	r2, [pc, #152]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 800614c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006150:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006152:	4b24      	ldr	r3, [pc, #144]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 8006154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006156:	4b24      	ldr	r3, [pc, #144]	; (80061e8 <RCCEx_PLL3_Config+0x160>)
 8006158:	4013      	ands	r3, r2
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	69d2      	ldr	r2, [r2, #28]
 800615e:	00d2      	lsls	r2, r2, #3
 8006160:	4920      	ldr	r1, [pc, #128]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 8006162:	4313      	orrs	r3, r2
 8006164:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006166:	4b1f      	ldr	r3, [pc, #124]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 8006168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616a:	4a1e      	ldr	r2, [pc, #120]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 800616c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006170:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d106      	bne.n	8006186 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006178:	4b1a      	ldr	r3, [pc, #104]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	4a19      	ldr	r2, [pc, #100]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 800617e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006182:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006184:	e00f      	b.n	80061a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b01      	cmp	r3, #1
 800618a:	d106      	bne.n	800619a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800618c:	4b15      	ldr	r3, [pc, #84]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	4a14      	ldr	r2, [pc, #80]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 8006192:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006196:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006198:	e005      	b.n	80061a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800619a:	4b12      	ldr	r3, [pc, #72]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 800619c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800619e:	4a11      	ldr	r2, [pc, #68]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 80061a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80061a6:	4b0f      	ldr	r3, [pc, #60]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a0e      	ldr	r2, [pc, #56]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 80061ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061b2:	f7fc fa61 	bl	8002678 <HAL_GetTick>
 80061b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061b8:	e008      	b.n	80061cc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80061ba:	f7fc fa5d 	bl	8002678 <HAL_GetTick>
 80061be:	4602      	mov	r2, r0
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	1ad3      	subs	r3, r2, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d901      	bls.n	80061cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e006      	b.n	80061da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80061cc:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <RCCEx_PLL3_Config+0x15c>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d0f0      	beq.n	80061ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3710      	adds	r7, #16
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	58024400 	.word	0x58024400
 80061e8:	ffff0007 	.word	0xffff0007

080061ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d101      	bne.n	80061fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e049      	b.n	8006292 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d106      	bne.n	8006218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f841 	bl	800629a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2202      	movs	r2, #2
 800621c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681a      	ldr	r2, [r3, #0]
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3304      	adds	r3, #4
 8006228:	4619      	mov	r1, r3
 800622a:	4610      	mov	r0, r2
 800622c:	f000 f9be 	bl	80065ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2201      	movs	r2, #1
 8006264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2201      	movs	r2, #1
 800626c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2201      	movs	r2, #1
 800627c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2201      	movs	r2, #1
 8006284:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800629a:	b480      	push	{r7}
 800629c:	b083      	sub	sp, #12
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80062a2:	bf00      	nop
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr
	...

080062b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d001      	beq.n	80062c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062c4:	2301      	movs	r3, #1
 80062c6:	e021      	b.n	800630c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68da      	ldr	r2, [r3, #12]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f042 0201 	orr.w	r2, r2, #1
 80062de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	689a      	ldr	r2, [r3, #8]
 80062e6:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <HAL_TIM_Base_Start_IT+0x68>)
 80062e8:	4013      	ands	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b06      	cmp	r3, #6
 80062f0:	d00b      	beq.n	800630a <HAL_TIM_Base_Start_IT+0x5a>
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f8:	d007      	beq.n	800630a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f042 0201 	orr.w	r2, r2, #1
 8006308:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	00010007 	.word	0x00010007

0800631c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b082      	sub	sp, #8
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	f003 0302 	and.w	r3, r3, #2
 800632e:	2b02      	cmp	r3, #2
 8006330:	d122      	bne.n	8006378 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	f003 0302 	and.w	r3, r3, #2
 800633c:	2b02      	cmp	r3, #2
 800633e:	d11b      	bne.n	8006378 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f06f 0202 	mvn.w	r2, #2
 8006348:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2201      	movs	r2, #1
 800634e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	2b00      	cmp	r3, #0
 800635c:	d003      	beq.n	8006366 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 f905 	bl	800656e <HAL_TIM_IC_CaptureCallback>
 8006364:	e005      	b.n	8006372 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f000 f8f7 	bl	800655a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f908 	bl	8006582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	f003 0304 	and.w	r3, r3, #4
 8006382:	2b04      	cmp	r3, #4
 8006384:	d122      	bne.n	80063cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	f003 0304 	and.w	r3, r3, #4
 8006390:	2b04      	cmp	r3, #4
 8006392:	d11b      	bne.n	80063cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f06f 0204 	mvn.w	r2, #4
 800639c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2202      	movs	r2, #2
 80063a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f8db 	bl	800656e <HAL_TIM_IC_CaptureCallback>
 80063b8:	e005      	b.n	80063c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f8cd 	bl	800655a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f8de 	bl	8006582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	f003 0308 	and.w	r3, r3, #8
 80063d6:	2b08      	cmp	r3, #8
 80063d8:	d122      	bne.n	8006420 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f003 0308 	and.w	r3, r3, #8
 80063e4:	2b08      	cmp	r3, #8
 80063e6:	d11b      	bne.n	8006420 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f06f 0208 	mvn.w	r2, #8
 80063f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2204      	movs	r2, #4
 80063f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	f003 0303 	and.w	r3, r3, #3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d003      	beq.n	800640e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 f8b1 	bl	800656e <HAL_TIM_IC_CaptureCallback>
 800640c:	e005      	b.n	800641a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f8a3 	bl	800655a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 f8b4 	bl	8006582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	691b      	ldr	r3, [r3, #16]
 8006426:	f003 0310 	and.w	r3, r3, #16
 800642a:	2b10      	cmp	r3, #16
 800642c:	d122      	bne.n	8006474 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	f003 0310 	and.w	r3, r3, #16
 8006438:	2b10      	cmp	r3, #16
 800643a:	d11b      	bne.n	8006474 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f06f 0210 	mvn.w	r2, #16
 8006444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2208      	movs	r2, #8
 800644a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f887 	bl	800656e <HAL_TIM_IC_CaptureCallback>
 8006460:	e005      	b.n	800646e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f879 	bl	800655a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f88a 	bl	8006582 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b01      	cmp	r3, #1
 8006480:	d10e      	bne.n	80064a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b01      	cmp	r3, #1
 800648e:	d107      	bne.n	80064a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f06f 0201 	mvn.w	r2, #1
 8006498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f7fb fe02 	bl	80020a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064aa:	2b80      	cmp	r3, #128	; 0x80
 80064ac:	d10e      	bne.n	80064cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064b8:	2b80      	cmp	r3, #128	; 0x80
 80064ba:	d107      	bne.n	80064cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80064c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f914 	bl	80066f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80064da:	d10e      	bne.n	80064fa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064e6:	2b80      	cmp	r3, #128	; 0x80
 80064e8:	d107      	bne.n	80064fa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80064f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80064f4:	6878      	ldr	r0, [r7, #4]
 80064f6:	f000 f907 	bl	8006708 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006504:	2b40      	cmp	r3, #64	; 0x40
 8006506:	d10e      	bne.n	8006526 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	68db      	ldr	r3, [r3, #12]
 800650e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006512:	2b40      	cmp	r3, #64	; 0x40
 8006514:	d107      	bne.n	8006526 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800651e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f838 	bl	8006596 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	f003 0320 	and.w	r3, r3, #32
 8006530:	2b20      	cmp	r3, #32
 8006532:	d10e      	bne.n	8006552 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	2b20      	cmp	r3, #32
 8006540:	d107      	bne.n	8006552 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f06f 0220 	mvn.w	r2, #32
 800654a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f8c7 	bl	80066e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006552:	bf00      	nop
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800655a:	b480      	push	{r7}
 800655c:	b083      	sub	sp, #12
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006562:	bf00      	nop
 8006564:	370c      	adds	r7, #12
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr

0800656e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800656e:	b480      	push	{r7}
 8006570:	b083      	sub	sp, #12
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006576:	bf00      	nop
 8006578:	370c      	adds	r7, #12
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006582:	b480      	push	{r7}
 8006584:	b083      	sub	sp, #12
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800658a:	bf00      	nop
 800658c:	370c      	adds	r7, #12
 800658e:	46bd      	mov	sp, r7
 8006590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006594:	4770      	bx	lr

08006596 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006596:	b480      	push	{r7}
 8006598:	b083      	sub	sp, #12
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800659e:	bf00      	nop
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
	...

080065ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a40      	ldr	r2, [pc, #256]	; (80066c0 <TIM_Base_SetConfig+0x114>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d013      	beq.n	80065ec <TIM_Base_SetConfig+0x40>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ca:	d00f      	beq.n	80065ec <TIM_Base_SetConfig+0x40>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a3d      	ldr	r2, [pc, #244]	; (80066c4 <TIM_Base_SetConfig+0x118>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d00b      	beq.n	80065ec <TIM_Base_SetConfig+0x40>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a3c      	ldr	r2, [pc, #240]	; (80066c8 <TIM_Base_SetConfig+0x11c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d007      	beq.n	80065ec <TIM_Base_SetConfig+0x40>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a3b      	ldr	r2, [pc, #236]	; (80066cc <TIM_Base_SetConfig+0x120>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d003      	beq.n	80065ec <TIM_Base_SetConfig+0x40>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a3a      	ldr	r2, [pc, #232]	; (80066d0 <TIM_Base_SetConfig+0x124>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d108      	bne.n	80065fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	4a2f      	ldr	r2, [pc, #188]	; (80066c0 <TIM_Base_SetConfig+0x114>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d01f      	beq.n	8006646 <TIM_Base_SetConfig+0x9a>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800660c:	d01b      	beq.n	8006646 <TIM_Base_SetConfig+0x9a>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a2c      	ldr	r2, [pc, #176]	; (80066c4 <TIM_Base_SetConfig+0x118>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d017      	beq.n	8006646 <TIM_Base_SetConfig+0x9a>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a2b      	ldr	r2, [pc, #172]	; (80066c8 <TIM_Base_SetConfig+0x11c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d013      	beq.n	8006646 <TIM_Base_SetConfig+0x9a>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a2a      	ldr	r2, [pc, #168]	; (80066cc <TIM_Base_SetConfig+0x120>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00f      	beq.n	8006646 <TIM_Base_SetConfig+0x9a>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a29      	ldr	r2, [pc, #164]	; (80066d0 <TIM_Base_SetConfig+0x124>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00b      	beq.n	8006646 <TIM_Base_SetConfig+0x9a>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a28      	ldr	r2, [pc, #160]	; (80066d4 <TIM_Base_SetConfig+0x128>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d007      	beq.n	8006646 <TIM_Base_SetConfig+0x9a>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a27      	ldr	r2, [pc, #156]	; (80066d8 <TIM_Base_SetConfig+0x12c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d003      	beq.n	8006646 <TIM_Base_SetConfig+0x9a>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a26      	ldr	r2, [pc, #152]	; (80066dc <TIM_Base_SetConfig+0x130>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d108      	bne.n	8006658 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800664c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4313      	orrs	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a10      	ldr	r2, [pc, #64]	; (80066c0 <TIM_Base_SetConfig+0x114>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d00f      	beq.n	80066a4 <TIM_Base_SetConfig+0xf8>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a12      	ldr	r2, [pc, #72]	; (80066d0 <TIM_Base_SetConfig+0x124>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00b      	beq.n	80066a4 <TIM_Base_SetConfig+0xf8>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a11      	ldr	r2, [pc, #68]	; (80066d4 <TIM_Base_SetConfig+0x128>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d007      	beq.n	80066a4 <TIM_Base_SetConfig+0xf8>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a10      	ldr	r2, [pc, #64]	; (80066d8 <TIM_Base_SetConfig+0x12c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d003      	beq.n	80066a4 <TIM_Base_SetConfig+0xf8>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a0f      	ldr	r2, [pc, #60]	; (80066dc <TIM_Base_SetConfig+0x130>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d103      	bne.n	80066ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	691a      	ldr	r2, [r3, #16]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2201      	movs	r2, #1
 80066b0:	615a      	str	r2, [r3, #20]
}
 80066b2:	bf00      	nop
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	40010000 	.word	0x40010000
 80066c4:	40000400 	.word	0x40000400
 80066c8:	40000800 	.word	0x40000800
 80066cc:	40000c00 	.word	0x40000c00
 80066d0:	40010400 	.word	0x40010400
 80066d4:	40014000 	.word	0x40014000
 80066d8:	40014400 	.word	0x40014400
 80066dc:	40014800 	.word	0x40014800

080066e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006710:	bf00      	nop
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b082      	sub	sp, #8
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d101      	bne.n	800672e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e042      	b.n	80067b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006734:	2b00      	cmp	r3, #0
 8006736:	d106      	bne.n	8006746 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7fb fe43 	bl	80023cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	2224      	movs	r2, #36	; 0x24
 800674a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f022 0201 	bic.w	r2, r2, #1
 800675c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fb28 	bl	8006db4 <UART_SetConfig>
 8006764:	4603      	mov	r3, r0
 8006766:	2b01      	cmp	r3, #1
 8006768:	d101      	bne.n	800676e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800676a:	2301      	movs	r3, #1
 800676c:	e022      	b.n	80067b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006772:	2b00      	cmp	r3, #0
 8006774:	d002      	beq.n	800677c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f001 f8cc 	bl	8007914 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800678a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800679a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f042 0201 	orr.w	r2, r2, #1
 80067aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f001 f953 	bl	8007a58 <UART_CheckIdleState>
 80067b2:	4603      	mov	r3, r0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80067bc:	b480      	push	{r7}
 80067be:	b085      	sub	sp, #20
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	4613      	mov	r3, r2
 80067c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80067d0:	2b20      	cmp	r3, #32
 80067d2:	d168      	bne.n	80068a6 <HAL_UART_Transmit_IT+0xea>
  {
    if ((pData == NULL) || (Size == 0U))
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d002      	beq.n	80067e0 <HAL_UART_Transmit_IT+0x24>
 80067da:	88fb      	ldrh	r3, [r7, #6]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e061      	b.n	80068a8 <HAL_UART_Transmit_IT+0xec>
    }

    __HAL_LOCK(huart);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d101      	bne.n	80067f2 <HAL_UART_Transmit_IT+0x36>
 80067ee:	2302      	movs	r3, #2
 80067f0:	e05a      	b.n	80068a8 <HAL_UART_Transmit_IT+0xec>
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2201      	movs	r2, #1
 80067f6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pTxBuffPtr  = pData;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	68ba      	ldr	r2, [r7, #8]
 80067fe:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	88fa      	ldrh	r2, [r7, #6]
 8006804:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	88fa      	ldrh	r2, [r7, #6]
 800680c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2221      	movs	r2, #33	; 0x21
 8006822:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800682a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800682e:	d11c      	bne.n	800686a <HAL_UART_Transmit_IT+0xae>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006838:	d107      	bne.n	800684a <HAL_UART_Transmit_IT+0x8e>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d103      	bne.n	800684a <HAL_UART_Transmit_IT+0x8e>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	4a1b      	ldr	r2, [pc, #108]	; (80068b4 <HAL_UART_Transmit_IT+0xf8>)
 8006846:	671a      	str	r2, [r3, #112]	; 0x70
 8006848:	e002      	b.n	8006850 <HAL_UART_Transmit_IT+0x94>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4a1a      	ldr	r2, [pc, #104]	; (80068b8 <HAL_UART_Transmit_IT+0xfc>)
 800684e:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	689a      	ldr	r2, [r3, #8]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006866:	609a      	str	r2, [r3, #8]
 8006868:	e01b      	b.n	80068a2 <HAL_UART_Transmit_IT+0xe6>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006872:	d107      	bne.n	8006884 <HAL_UART_Transmit_IT+0xc8>
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	691b      	ldr	r3, [r3, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d103      	bne.n	8006884 <HAL_UART_Transmit_IT+0xc8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4a0f      	ldr	r2, [pc, #60]	; (80068bc <HAL_UART_Transmit_IT+0x100>)
 8006880:	671a      	str	r2, [r3, #112]	; 0x70
 8006882:	e002      	b.n	800688a <HAL_UART_Transmit_IT+0xce>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	4a0e      	ldr	r2, [pc, #56]	; (80068c0 <HAL_UART_Transmit_IT+0x104>)
 8006888:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80068a0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80068a2:	2300      	movs	r3, #0
 80068a4:	e000      	b.n	80068a8 <HAL_UART_Transmit_IT+0xec>
  }
  else
  {
    return HAL_BUSY;
 80068a6:	2302      	movs	r3, #2
  }
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3714      	adds	r7, #20
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	08007de9 	.word	0x08007de9
 80068b8:	08007d4f 	.word	0x08007d4f
 80068bc:	08007cd1 	.word	0x08007cd1
 80068c0:	08007c5d 	.word	0x08007c5d

080068c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b085      	sub	sp, #20
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	4613      	mov	r3, r2
 80068d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80068d8:	2b20      	cmp	r3, #32
 80068da:	f040 80bc 	bne.w	8006a56 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d002      	beq.n	80068ea <HAL_UART_Receive_IT+0x26>
 80068e4:	88fb      	ldrh	r3, [r7, #6]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d101      	bne.n	80068ee <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e0b4      	b.n	8006a58 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d101      	bne.n	80068fc <HAL_UART_Receive_IT+0x38>
 80068f8:	2302      	movs	r3, #2
 80068fa:	e0ad      	b.n	8006a58 <HAL_UART_Receive_IT+0x194>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2201      	movs	r2, #1
 8006900:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	68ba      	ldr	r2, [r7, #8]
 8006908:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	88fa      	ldrh	r2, [r7, #6]
 800690e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	88fa      	ldrh	r2, [r7, #6]
 8006916:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2200      	movs	r2, #0
 800691e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006928:	d10e      	bne.n	8006948 <HAL_UART_Receive_IT+0x84>
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d105      	bne.n	800693e <HAL_UART_Receive_IT+0x7a>
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006938:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800693c:	e02d      	b.n	800699a <HAL_UART_Receive_IT+0xd6>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	22ff      	movs	r2, #255	; 0xff
 8006942:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006946:	e028      	b.n	800699a <HAL_UART_Receive_IT+0xd6>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10d      	bne.n	800696c <HAL_UART_Receive_IT+0xa8>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	691b      	ldr	r3, [r3, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d104      	bne.n	8006962 <HAL_UART_Receive_IT+0x9e>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	22ff      	movs	r2, #255	; 0xff
 800695c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006960:	e01b      	b.n	800699a <HAL_UART_Receive_IT+0xd6>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	227f      	movs	r2, #127	; 0x7f
 8006966:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800696a:	e016      	b.n	800699a <HAL_UART_Receive_IT+0xd6>
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006974:	d10d      	bne.n	8006992 <HAL_UART_Receive_IT+0xce>
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d104      	bne.n	8006988 <HAL_UART_Receive_IT+0xc4>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	227f      	movs	r2, #127	; 0x7f
 8006982:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006986:	e008      	b.n	800699a <HAL_UART_Receive_IT+0xd6>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	223f      	movs	r2, #63	; 0x3f
 800698c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006990:	e003      	b.n	800699a <HAL_UART_Receive_IT+0xd6>
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2222      	movs	r2, #34	; 0x22
 80069a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f042 0201 	orr.w	r2, r2, #1
 80069b8:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80069c2:	d12a      	bne.n	8006a1a <HAL_UART_Receive_IT+0x156>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80069ca:	88fa      	ldrh	r2, [r7, #6]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d324      	bcc.n	8006a1a <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069d8:	d107      	bne.n	80069ea <HAL_UART_Receive_IT+0x126>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d103      	bne.n	80069ea <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4a1f      	ldr	r2, [pc, #124]	; (8006a64 <HAL_UART_Receive_IT+0x1a0>)
 80069e6:	66da      	str	r2, [r3, #108]	; 0x6c
 80069e8:	e002      	b.n	80069f0 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	4a1e      	ldr	r2, [pc, #120]	; (8006a68 <HAL_UART_Receive_IT+0x1a4>)
 80069ee:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a06:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	689a      	ldr	r2, [r3, #8]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006a16:	609a      	str	r2, [r3, #8]
 8006a18:	e01b      	b.n	8006a52 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a22:	d107      	bne.n	8006a34 <HAL_UART_Receive_IT+0x170>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d103      	bne.n	8006a34 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4a0f      	ldr	r2, [pc, #60]	; (8006a6c <HAL_UART_Receive_IT+0x1a8>)
 8006a30:	66da      	str	r2, [r3, #108]	; 0x6c
 8006a32:	e002      	b.n	8006a3a <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4a0e      	ldr	r2, [pc, #56]	; (8006a70 <HAL_UART_Receive_IT+0x1ac>)
 8006a38:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006a50:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8006a52:	2300      	movs	r3, #0
 8006a54:	e000      	b.n	8006a58 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8006a56:	2302      	movs	r3, #2
  }
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3714      	adds	r7, #20
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr
 8006a64:	0800811d 	.word	0x0800811d
 8006a68:	08008015 	.word	0x08008015
 8006a6c:	08007f6b 	.word	0x08007f6b
 8006a70:	08007ec1 	.word	0x08007ec1

08006a74 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b088      	sub	sp, #32
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006a94:	69fa      	ldr	r2, [r7, #28]
 8006a96:	f640 030f 	movw	r3, #2063	; 0x80f
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d118      	bne.n	8006ad6 <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	f003 0320 	and.w	r3, r3, #32
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d013      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	f003 0320 	and.w	r3, r3, #32
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d104      	bne.n	8006ac2 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d009      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 8145 	beq.w	8006d56 <HAL_UART_IRQHandler+0x2e2>
      {
        huart->RxISR(huart);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	4798      	blx	r3
      }
      return;
 8006ad4:	e13f      	b.n	8006d56 <HAL_UART_IRQHandler+0x2e2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 80e8 	beq.w	8006cae <HAL_UART_IRQHandler+0x23a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006ade:	697a      	ldr	r2, [r7, #20]
 8006ae0:	4ba1      	ldr	r3, [pc, #644]	; (8006d68 <HAL_UART_IRQHandler+0x2f4>)
 8006ae2:	4013      	ands	r3, r2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d105      	bne.n	8006af4 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	4ba0      	ldr	r3, [pc, #640]	; (8006d6c <HAL_UART_IRQHandler+0x2f8>)
 8006aec:	4013      	ands	r3, r2
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	f000 80dd 	beq.w	8006cae <HAL_UART_IRQHandler+0x23a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d010      	beq.n	8006b20 <HAL_UART_IRQHandler+0xac>
 8006afe:	69bb      	ldr	r3, [r7, #24]
 8006b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d00b      	beq.n	8006b20 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b16:	f043 0201 	orr.w	r2, r3, #1
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d010      	beq.n	8006b4c <HAL_UART_IRQHandler+0xd8>
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00b      	beq.n	8006b4c <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2202      	movs	r2, #2
 8006b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b42:	f043 0204 	orr.w	r2, r3, #4
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	f003 0304 	and.w	r3, r3, #4
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d010      	beq.n	8006b78 <HAL_UART_IRQHandler+0x104>
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	f003 0301 	and.w	r3, r3, #1
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00b      	beq.n	8006b78 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2204      	movs	r2, #4
 8006b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b6e:	f043 0202 	orr.w	r2, r3, #2
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	f003 0308 	and.w	r3, r3, #8
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d015      	beq.n	8006bae <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b82:	69bb      	ldr	r3, [r7, #24]
 8006b84:	f003 0320 	and.w	r3, r3, #32
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d104      	bne.n	8006b96 <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	4b76      	ldr	r3, [pc, #472]	; (8006d68 <HAL_UART_IRQHandler+0x2f4>)
 8006b90:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00b      	beq.n	8006bae <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2208      	movs	r2, #8
 8006b9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba4:	f043 0208 	orr.w	r2, r3, #8
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d011      	beq.n	8006bdc <HAL_UART_IRQHandler+0x168>
 8006bb8:	69bb      	ldr	r3, [r7, #24]
 8006bba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00c      	beq.n	8006bdc <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bd2:	f043 0220 	orr.w	r2, r3, #32
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	f000 80b9 	beq.w	8006d5a <HAL_UART_IRQHandler+0x2e6>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	f003 0320 	and.w	r3, r3, #32
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d011      	beq.n	8006c16 <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	f003 0320 	and.w	r3, r3, #32
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d104      	bne.n	8006c06 <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d007      	beq.n	8006c16 <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c1c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c28:	2b40      	cmp	r3, #64	; 0x40
 8006c2a:	d004      	beq.n	8006c36 <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d031      	beq.n	8006c9a <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 ffd6 	bl	8007be8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c46:	2b40      	cmp	r3, #64	; 0x40
 8006c48:	d123      	bne.n	8006c92 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689a      	ldr	r2, [r3, #8]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c58:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d013      	beq.n	8006c8a <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c66:	4a42      	ldr	r2, [pc, #264]	; (8006d70 <HAL_UART_IRQHandler+0x2fc>)
 8006c68:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fb fe30 	bl	80028d4 <HAL_DMA_Abort_IT>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d017      	beq.n	8006caa <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8006c84:	4610      	mov	r0, r2
 8006c86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c88:	e00f      	b.n	8006caa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f872 	bl	8006d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c90:	e00b      	b.n	8006caa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f86e 	bl	8006d74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c98:	e007      	b.n	8006caa <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 f86a 	bl	8006d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8006ca8:	e057      	b.n	8006d5a <HAL_UART_IRQHandler+0x2e6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006caa:	bf00      	nop
    return;
 8006cac:	e055      	b.n	8006d5a <HAL_UART_IRQHandler+0x2e6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d00d      	beq.n	8006cd4 <HAL_UART_IRQHandler+0x260>
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d008      	beq.n	8006cd4 <HAL_UART_IRQHandler+0x260>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006cca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f001 faa9 	bl	8008224 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cd2:	e045      	b.n	8006d60 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d012      	beq.n	8006d04 <HAL_UART_IRQHandler+0x290>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d104      	bne.n	8006cf2 <HAL_UART_IRQHandler+0x27e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d008      	beq.n	8006d04 <HAL_UART_IRQHandler+0x290>
  {
    if (huart->TxISR != NULL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d031      	beq.n	8006d5e <HAL_UART_IRQHandler+0x2ea>
    {
      huart->TxISR(huart);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfe:	6878      	ldr	r0, [r7, #4]
 8006d00:	4798      	blx	r3
    }
    return;
 8006d02:	e02c      	b.n	8006d5e <HAL_UART_IRQHandler+0x2ea>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d008      	beq.n	8006d20 <HAL_UART_IRQHandler+0x2ac>
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <HAL_UART_IRQHandler+0x2ac>
  {
    UART_EndTransmit_IT(huart);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f001 f8b7 	bl	8007e8c <UART_EndTransmit_IT>
    return;
 8006d1e:	e01f      	b.n	8006d60 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d008      	beq.n	8006d3c <HAL_UART_IRQHandler+0x2c8>
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d003      	beq.n	8006d3c <HAL_UART_IRQHandler+0x2c8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f001 fa89 	bl	800824c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d3a:	e011      	b.n	8006d60 <HAL_UART_IRQHandler+0x2ec>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d00c      	beq.n	8006d60 <HAL_UART_IRQHandler+0x2ec>
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	da09      	bge.n	8006d60 <HAL_UART_IRQHandler+0x2ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f001 fa73 	bl	8008238 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d52:	bf00      	nop
 8006d54:	e004      	b.n	8006d60 <HAL_UART_IRQHandler+0x2ec>
      return;
 8006d56:	bf00      	nop
 8006d58:	e002      	b.n	8006d60 <HAL_UART_IRQHandler+0x2ec>
    return;
 8006d5a:	bf00      	nop
 8006d5c:	e000      	b.n	8006d60 <HAL_UART_IRQHandler+0x2ec>
    return;
 8006d5e:	bf00      	nop
  }
}
 8006d60:	3720      	adds	r7, #32
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	10000001 	.word	0x10000001
 8006d6c:	04000120 	.word	0x04000120
 8006d70:	08007c31 	.word	0x08007c31

08006d74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d96:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d9e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	4313      	orrs	r3, r2
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3714      	adds	r7, #20
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
	...

08006db4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006db4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006db8:	b08e      	sub	sp, #56	; 0x38
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	689a      	ldr	r2, [r3, #8]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	691b      	ldr	r3, [r3, #16]
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	431a      	orrs	r2, r3
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006de0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006de2:	4313      	orrs	r3, r2
 8006de4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	4bc1      	ldr	r3, [pc, #772]	; (80070f4 <UART_SetConfig+0x340>)
 8006dee:	4013      	ands	r3, r2
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	6812      	ldr	r2, [r2, #0]
 8006df4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006df6:	430b      	orrs	r3, r1
 8006df8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	68da      	ldr	r2, [r3, #12]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	430a      	orrs	r2, r1
 8006e0e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4ab7      	ldr	r2, [pc, #732]	; (80070f8 <UART_SetConfig+0x344>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d004      	beq.n	8006e2a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006e26:	4313      	orrs	r3, r2
 8006e28:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	689a      	ldr	r2, [r3, #8]
 8006e30:	4bb2      	ldr	r3, [pc, #712]	; (80070fc <UART_SetConfig+0x348>)
 8006e32:	4013      	ands	r3, r2
 8006e34:	687a      	ldr	r2, [r7, #4]
 8006e36:	6812      	ldr	r2, [r2, #0]
 8006e38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006e3a:	430b      	orrs	r3, r1
 8006e3c:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e44:	f023 010f 	bic.w	r1, r3, #15
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4aa9      	ldr	r2, [pc, #676]	; (8007100 <UART_SetConfig+0x34c>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d177      	bne.n	8006f4e <UART_SetConfig+0x19a>
 8006e5e:	4ba9      	ldr	r3, [pc, #676]	; (8007104 <UART_SetConfig+0x350>)
 8006e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e62:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e66:	2b28      	cmp	r3, #40	; 0x28
 8006e68:	d86c      	bhi.n	8006f44 <UART_SetConfig+0x190>
 8006e6a:	a201      	add	r2, pc, #4	; (adr r2, 8006e70 <UART_SetConfig+0xbc>)
 8006e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e70:	08006f15 	.word	0x08006f15
 8006e74:	08006f45 	.word	0x08006f45
 8006e78:	08006f45 	.word	0x08006f45
 8006e7c:	08006f45 	.word	0x08006f45
 8006e80:	08006f45 	.word	0x08006f45
 8006e84:	08006f45 	.word	0x08006f45
 8006e88:	08006f45 	.word	0x08006f45
 8006e8c:	08006f45 	.word	0x08006f45
 8006e90:	08006f1d 	.word	0x08006f1d
 8006e94:	08006f45 	.word	0x08006f45
 8006e98:	08006f45 	.word	0x08006f45
 8006e9c:	08006f45 	.word	0x08006f45
 8006ea0:	08006f45 	.word	0x08006f45
 8006ea4:	08006f45 	.word	0x08006f45
 8006ea8:	08006f45 	.word	0x08006f45
 8006eac:	08006f45 	.word	0x08006f45
 8006eb0:	08006f25 	.word	0x08006f25
 8006eb4:	08006f45 	.word	0x08006f45
 8006eb8:	08006f45 	.word	0x08006f45
 8006ebc:	08006f45 	.word	0x08006f45
 8006ec0:	08006f45 	.word	0x08006f45
 8006ec4:	08006f45 	.word	0x08006f45
 8006ec8:	08006f45 	.word	0x08006f45
 8006ecc:	08006f45 	.word	0x08006f45
 8006ed0:	08006f2d 	.word	0x08006f2d
 8006ed4:	08006f45 	.word	0x08006f45
 8006ed8:	08006f45 	.word	0x08006f45
 8006edc:	08006f45 	.word	0x08006f45
 8006ee0:	08006f45 	.word	0x08006f45
 8006ee4:	08006f45 	.word	0x08006f45
 8006ee8:	08006f45 	.word	0x08006f45
 8006eec:	08006f45 	.word	0x08006f45
 8006ef0:	08006f35 	.word	0x08006f35
 8006ef4:	08006f45 	.word	0x08006f45
 8006ef8:	08006f45 	.word	0x08006f45
 8006efc:	08006f45 	.word	0x08006f45
 8006f00:	08006f45 	.word	0x08006f45
 8006f04:	08006f45 	.word	0x08006f45
 8006f08:	08006f45 	.word	0x08006f45
 8006f0c:	08006f45 	.word	0x08006f45
 8006f10:	08006f3d 	.word	0x08006f3d
 8006f14:	2301      	movs	r3, #1
 8006f16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f1a:	e233      	b.n	8007384 <UART_SetConfig+0x5d0>
 8006f1c:	2304      	movs	r3, #4
 8006f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f22:	e22f      	b.n	8007384 <UART_SetConfig+0x5d0>
 8006f24:	2308      	movs	r3, #8
 8006f26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f2a:	e22b      	b.n	8007384 <UART_SetConfig+0x5d0>
 8006f2c:	2310      	movs	r3, #16
 8006f2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f32:	e227      	b.n	8007384 <UART_SetConfig+0x5d0>
 8006f34:	2320      	movs	r3, #32
 8006f36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f3a:	e223      	b.n	8007384 <UART_SetConfig+0x5d0>
 8006f3c:	2340      	movs	r3, #64	; 0x40
 8006f3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f42:	e21f      	b.n	8007384 <UART_SetConfig+0x5d0>
 8006f44:	2380      	movs	r3, #128	; 0x80
 8006f46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f4a:	bf00      	nop
 8006f4c:	e21a      	b.n	8007384 <UART_SetConfig+0x5d0>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a6d      	ldr	r2, [pc, #436]	; (8007108 <UART_SetConfig+0x354>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d132      	bne.n	8006fbe <UART_SetConfig+0x20a>
 8006f58:	4b6a      	ldr	r3, [pc, #424]	; (8007104 <UART_SetConfig+0x350>)
 8006f5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f5c:	f003 0307 	and.w	r3, r3, #7
 8006f60:	2b05      	cmp	r3, #5
 8006f62:	d827      	bhi.n	8006fb4 <UART_SetConfig+0x200>
 8006f64:	a201      	add	r2, pc, #4	; (adr r2, 8006f6c <UART_SetConfig+0x1b8>)
 8006f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f6a:	bf00      	nop
 8006f6c:	08006f85 	.word	0x08006f85
 8006f70:	08006f8d 	.word	0x08006f8d
 8006f74:	08006f95 	.word	0x08006f95
 8006f78:	08006f9d 	.word	0x08006f9d
 8006f7c:	08006fa5 	.word	0x08006fa5
 8006f80:	08006fad 	.word	0x08006fad
 8006f84:	2300      	movs	r3, #0
 8006f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f8a:	e1fb      	b.n	8007384 <UART_SetConfig+0x5d0>
 8006f8c:	2304      	movs	r3, #4
 8006f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f92:	e1f7      	b.n	8007384 <UART_SetConfig+0x5d0>
 8006f94:	2308      	movs	r3, #8
 8006f96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006f9a:	e1f3      	b.n	8007384 <UART_SetConfig+0x5d0>
 8006f9c:	2310      	movs	r3, #16
 8006f9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fa2:	e1ef      	b.n	8007384 <UART_SetConfig+0x5d0>
 8006fa4:	2320      	movs	r3, #32
 8006fa6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006faa:	e1eb      	b.n	8007384 <UART_SetConfig+0x5d0>
 8006fac:	2340      	movs	r3, #64	; 0x40
 8006fae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fb2:	e1e7      	b.n	8007384 <UART_SetConfig+0x5d0>
 8006fb4:	2380      	movs	r3, #128	; 0x80
 8006fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006fba:	bf00      	nop
 8006fbc:	e1e2      	b.n	8007384 <UART_SetConfig+0x5d0>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a52      	ldr	r2, [pc, #328]	; (800710c <UART_SetConfig+0x358>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d132      	bne.n	800702e <UART_SetConfig+0x27a>
 8006fc8:	4b4e      	ldr	r3, [pc, #312]	; (8007104 <UART_SetConfig+0x350>)
 8006fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fcc:	f003 0307 	and.w	r3, r3, #7
 8006fd0:	2b05      	cmp	r3, #5
 8006fd2:	d827      	bhi.n	8007024 <UART_SetConfig+0x270>
 8006fd4:	a201      	add	r2, pc, #4	; (adr r2, 8006fdc <UART_SetConfig+0x228>)
 8006fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fda:	bf00      	nop
 8006fdc:	08006ff5 	.word	0x08006ff5
 8006fe0:	08006ffd 	.word	0x08006ffd
 8006fe4:	08007005 	.word	0x08007005
 8006fe8:	0800700d 	.word	0x0800700d
 8006fec:	08007015 	.word	0x08007015
 8006ff0:	0800701d 	.word	0x0800701d
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006ffa:	e1c3      	b.n	8007384 <UART_SetConfig+0x5d0>
 8006ffc:	2304      	movs	r3, #4
 8006ffe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007002:	e1bf      	b.n	8007384 <UART_SetConfig+0x5d0>
 8007004:	2308      	movs	r3, #8
 8007006:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800700a:	e1bb      	b.n	8007384 <UART_SetConfig+0x5d0>
 800700c:	2310      	movs	r3, #16
 800700e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007012:	e1b7      	b.n	8007384 <UART_SetConfig+0x5d0>
 8007014:	2320      	movs	r3, #32
 8007016:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800701a:	e1b3      	b.n	8007384 <UART_SetConfig+0x5d0>
 800701c:	2340      	movs	r3, #64	; 0x40
 800701e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007022:	e1af      	b.n	8007384 <UART_SetConfig+0x5d0>
 8007024:	2380      	movs	r3, #128	; 0x80
 8007026:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800702a:	bf00      	nop
 800702c:	e1aa      	b.n	8007384 <UART_SetConfig+0x5d0>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a37      	ldr	r2, [pc, #220]	; (8007110 <UART_SetConfig+0x35c>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d132      	bne.n	800709e <UART_SetConfig+0x2ea>
 8007038:	4b32      	ldr	r3, [pc, #200]	; (8007104 <UART_SetConfig+0x350>)
 800703a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703c:	f003 0307 	and.w	r3, r3, #7
 8007040:	2b05      	cmp	r3, #5
 8007042:	d827      	bhi.n	8007094 <UART_SetConfig+0x2e0>
 8007044:	a201      	add	r2, pc, #4	; (adr r2, 800704c <UART_SetConfig+0x298>)
 8007046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704a:	bf00      	nop
 800704c:	08007065 	.word	0x08007065
 8007050:	0800706d 	.word	0x0800706d
 8007054:	08007075 	.word	0x08007075
 8007058:	0800707d 	.word	0x0800707d
 800705c:	08007085 	.word	0x08007085
 8007060:	0800708d 	.word	0x0800708d
 8007064:	2300      	movs	r3, #0
 8007066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800706a:	e18b      	b.n	8007384 <UART_SetConfig+0x5d0>
 800706c:	2304      	movs	r3, #4
 800706e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007072:	e187      	b.n	8007384 <UART_SetConfig+0x5d0>
 8007074:	2308      	movs	r3, #8
 8007076:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800707a:	e183      	b.n	8007384 <UART_SetConfig+0x5d0>
 800707c:	2310      	movs	r3, #16
 800707e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007082:	e17f      	b.n	8007384 <UART_SetConfig+0x5d0>
 8007084:	2320      	movs	r3, #32
 8007086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800708a:	e17b      	b.n	8007384 <UART_SetConfig+0x5d0>
 800708c:	2340      	movs	r3, #64	; 0x40
 800708e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007092:	e177      	b.n	8007384 <UART_SetConfig+0x5d0>
 8007094:	2380      	movs	r3, #128	; 0x80
 8007096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800709a:	bf00      	nop
 800709c:	e172      	b.n	8007384 <UART_SetConfig+0x5d0>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a1c      	ldr	r2, [pc, #112]	; (8007114 <UART_SetConfig+0x360>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d144      	bne.n	8007132 <UART_SetConfig+0x37e>
 80070a8:	4b16      	ldr	r3, [pc, #88]	; (8007104 <UART_SetConfig+0x350>)
 80070aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	2b05      	cmp	r3, #5
 80070b2:	d839      	bhi.n	8007128 <UART_SetConfig+0x374>
 80070b4:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <UART_SetConfig+0x308>)
 80070b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ba:	bf00      	nop
 80070bc:	080070d5 	.word	0x080070d5
 80070c0:	080070dd 	.word	0x080070dd
 80070c4:	080070e5 	.word	0x080070e5
 80070c8:	080070ed 	.word	0x080070ed
 80070cc:	08007119 	.word	0x08007119
 80070d0:	08007121 	.word	0x08007121
 80070d4:	2300      	movs	r3, #0
 80070d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070da:	e153      	b.n	8007384 <UART_SetConfig+0x5d0>
 80070dc:	2304      	movs	r3, #4
 80070de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070e2:	e14f      	b.n	8007384 <UART_SetConfig+0x5d0>
 80070e4:	2308      	movs	r3, #8
 80070e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070ea:	e14b      	b.n	8007384 <UART_SetConfig+0x5d0>
 80070ec:	2310      	movs	r3, #16
 80070ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80070f2:	e147      	b.n	8007384 <UART_SetConfig+0x5d0>
 80070f4:	cfff69f3 	.word	0xcfff69f3
 80070f8:	58000c00 	.word	0x58000c00
 80070fc:	11fff4ff 	.word	0x11fff4ff
 8007100:	40011000 	.word	0x40011000
 8007104:	58024400 	.word	0x58024400
 8007108:	40004400 	.word	0x40004400
 800710c:	40004800 	.word	0x40004800
 8007110:	40004c00 	.word	0x40004c00
 8007114:	40005000 	.word	0x40005000
 8007118:	2320      	movs	r3, #32
 800711a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800711e:	e131      	b.n	8007384 <UART_SetConfig+0x5d0>
 8007120:	2340      	movs	r3, #64	; 0x40
 8007122:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007126:	e12d      	b.n	8007384 <UART_SetConfig+0x5d0>
 8007128:	2380      	movs	r3, #128	; 0x80
 800712a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800712e:	bf00      	nop
 8007130:	e128      	b.n	8007384 <UART_SetConfig+0x5d0>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4ab6      	ldr	r2, [pc, #728]	; (8007410 <UART_SetConfig+0x65c>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d178      	bne.n	800722e <UART_SetConfig+0x47a>
 800713c:	4bb5      	ldr	r3, [pc, #724]	; (8007414 <UART_SetConfig+0x660>)
 800713e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007140:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007144:	2b28      	cmp	r3, #40	; 0x28
 8007146:	d86d      	bhi.n	8007224 <UART_SetConfig+0x470>
 8007148:	a201      	add	r2, pc, #4	; (adr r2, 8007150 <UART_SetConfig+0x39c>)
 800714a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714e:	bf00      	nop
 8007150:	080071f5 	.word	0x080071f5
 8007154:	08007225 	.word	0x08007225
 8007158:	08007225 	.word	0x08007225
 800715c:	08007225 	.word	0x08007225
 8007160:	08007225 	.word	0x08007225
 8007164:	08007225 	.word	0x08007225
 8007168:	08007225 	.word	0x08007225
 800716c:	08007225 	.word	0x08007225
 8007170:	080071fd 	.word	0x080071fd
 8007174:	08007225 	.word	0x08007225
 8007178:	08007225 	.word	0x08007225
 800717c:	08007225 	.word	0x08007225
 8007180:	08007225 	.word	0x08007225
 8007184:	08007225 	.word	0x08007225
 8007188:	08007225 	.word	0x08007225
 800718c:	08007225 	.word	0x08007225
 8007190:	08007205 	.word	0x08007205
 8007194:	08007225 	.word	0x08007225
 8007198:	08007225 	.word	0x08007225
 800719c:	08007225 	.word	0x08007225
 80071a0:	08007225 	.word	0x08007225
 80071a4:	08007225 	.word	0x08007225
 80071a8:	08007225 	.word	0x08007225
 80071ac:	08007225 	.word	0x08007225
 80071b0:	0800720d 	.word	0x0800720d
 80071b4:	08007225 	.word	0x08007225
 80071b8:	08007225 	.word	0x08007225
 80071bc:	08007225 	.word	0x08007225
 80071c0:	08007225 	.word	0x08007225
 80071c4:	08007225 	.word	0x08007225
 80071c8:	08007225 	.word	0x08007225
 80071cc:	08007225 	.word	0x08007225
 80071d0:	08007215 	.word	0x08007215
 80071d4:	08007225 	.word	0x08007225
 80071d8:	08007225 	.word	0x08007225
 80071dc:	08007225 	.word	0x08007225
 80071e0:	08007225 	.word	0x08007225
 80071e4:	08007225 	.word	0x08007225
 80071e8:	08007225 	.word	0x08007225
 80071ec:	08007225 	.word	0x08007225
 80071f0:	0800721d 	.word	0x0800721d
 80071f4:	2301      	movs	r3, #1
 80071f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80071fa:	e0c3      	b.n	8007384 <UART_SetConfig+0x5d0>
 80071fc:	2304      	movs	r3, #4
 80071fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007202:	e0bf      	b.n	8007384 <UART_SetConfig+0x5d0>
 8007204:	2308      	movs	r3, #8
 8007206:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800720a:	e0bb      	b.n	8007384 <UART_SetConfig+0x5d0>
 800720c:	2310      	movs	r3, #16
 800720e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007212:	e0b7      	b.n	8007384 <UART_SetConfig+0x5d0>
 8007214:	2320      	movs	r3, #32
 8007216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800721a:	e0b3      	b.n	8007384 <UART_SetConfig+0x5d0>
 800721c:	2340      	movs	r3, #64	; 0x40
 800721e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007222:	e0af      	b.n	8007384 <UART_SetConfig+0x5d0>
 8007224:	2380      	movs	r3, #128	; 0x80
 8007226:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800722a:	bf00      	nop
 800722c:	e0aa      	b.n	8007384 <UART_SetConfig+0x5d0>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a79      	ldr	r2, [pc, #484]	; (8007418 <UART_SetConfig+0x664>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d132      	bne.n	800729e <UART_SetConfig+0x4ea>
 8007238:	4b76      	ldr	r3, [pc, #472]	; (8007414 <UART_SetConfig+0x660>)
 800723a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800723c:	f003 0307 	and.w	r3, r3, #7
 8007240:	2b05      	cmp	r3, #5
 8007242:	d827      	bhi.n	8007294 <UART_SetConfig+0x4e0>
 8007244:	a201      	add	r2, pc, #4	; (adr r2, 800724c <UART_SetConfig+0x498>)
 8007246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724a:	bf00      	nop
 800724c:	08007265 	.word	0x08007265
 8007250:	0800726d 	.word	0x0800726d
 8007254:	08007275 	.word	0x08007275
 8007258:	0800727d 	.word	0x0800727d
 800725c:	08007285 	.word	0x08007285
 8007260:	0800728d 	.word	0x0800728d
 8007264:	2300      	movs	r3, #0
 8007266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800726a:	e08b      	b.n	8007384 <UART_SetConfig+0x5d0>
 800726c:	2304      	movs	r3, #4
 800726e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007272:	e087      	b.n	8007384 <UART_SetConfig+0x5d0>
 8007274:	2308      	movs	r3, #8
 8007276:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800727a:	e083      	b.n	8007384 <UART_SetConfig+0x5d0>
 800727c:	2310      	movs	r3, #16
 800727e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007282:	e07f      	b.n	8007384 <UART_SetConfig+0x5d0>
 8007284:	2320      	movs	r3, #32
 8007286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800728a:	e07b      	b.n	8007384 <UART_SetConfig+0x5d0>
 800728c:	2340      	movs	r3, #64	; 0x40
 800728e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007292:	e077      	b.n	8007384 <UART_SetConfig+0x5d0>
 8007294:	2380      	movs	r3, #128	; 0x80
 8007296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800729a:	bf00      	nop
 800729c:	e072      	b.n	8007384 <UART_SetConfig+0x5d0>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a5e      	ldr	r2, [pc, #376]	; (800741c <UART_SetConfig+0x668>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d132      	bne.n	800730e <UART_SetConfig+0x55a>
 80072a8:	4b5a      	ldr	r3, [pc, #360]	; (8007414 <UART_SetConfig+0x660>)
 80072aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072ac:	f003 0307 	and.w	r3, r3, #7
 80072b0:	2b05      	cmp	r3, #5
 80072b2:	d827      	bhi.n	8007304 <UART_SetConfig+0x550>
 80072b4:	a201      	add	r2, pc, #4	; (adr r2, 80072bc <UART_SetConfig+0x508>)
 80072b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ba:	bf00      	nop
 80072bc:	080072d5 	.word	0x080072d5
 80072c0:	080072dd 	.word	0x080072dd
 80072c4:	080072e5 	.word	0x080072e5
 80072c8:	080072ed 	.word	0x080072ed
 80072cc:	080072f5 	.word	0x080072f5
 80072d0:	080072fd 	.word	0x080072fd
 80072d4:	2300      	movs	r3, #0
 80072d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072da:	e053      	b.n	8007384 <UART_SetConfig+0x5d0>
 80072dc:	2304      	movs	r3, #4
 80072de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072e2:	e04f      	b.n	8007384 <UART_SetConfig+0x5d0>
 80072e4:	2308      	movs	r3, #8
 80072e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072ea:	e04b      	b.n	8007384 <UART_SetConfig+0x5d0>
 80072ec:	2310      	movs	r3, #16
 80072ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072f2:	e047      	b.n	8007384 <UART_SetConfig+0x5d0>
 80072f4:	2320      	movs	r3, #32
 80072f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80072fa:	e043      	b.n	8007384 <UART_SetConfig+0x5d0>
 80072fc:	2340      	movs	r3, #64	; 0x40
 80072fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007302:	e03f      	b.n	8007384 <UART_SetConfig+0x5d0>
 8007304:	2380      	movs	r3, #128	; 0x80
 8007306:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800730a:	bf00      	nop
 800730c:	e03a      	b.n	8007384 <UART_SetConfig+0x5d0>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a43      	ldr	r2, [pc, #268]	; (8007420 <UART_SetConfig+0x66c>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d132      	bne.n	800737e <UART_SetConfig+0x5ca>
 8007318:	4b3e      	ldr	r3, [pc, #248]	; (8007414 <UART_SetConfig+0x660>)
 800731a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800731c:	f003 0307 	and.w	r3, r3, #7
 8007320:	2b05      	cmp	r3, #5
 8007322:	d827      	bhi.n	8007374 <UART_SetConfig+0x5c0>
 8007324:	a201      	add	r2, pc, #4	; (adr r2, 800732c <UART_SetConfig+0x578>)
 8007326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800732a:	bf00      	nop
 800732c:	08007345 	.word	0x08007345
 8007330:	0800734d 	.word	0x0800734d
 8007334:	08007355 	.word	0x08007355
 8007338:	0800735d 	.word	0x0800735d
 800733c:	08007365 	.word	0x08007365
 8007340:	0800736d 	.word	0x0800736d
 8007344:	2302      	movs	r3, #2
 8007346:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800734a:	e01b      	b.n	8007384 <UART_SetConfig+0x5d0>
 800734c:	2304      	movs	r3, #4
 800734e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007352:	e017      	b.n	8007384 <UART_SetConfig+0x5d0>
 8007354:	2308      	movs	r3, #8
 8007356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800735a:	e013      	b.n	8007384 <UART_SetConfig+0x5d0>
 800735c:	2310      	movs	r3, #16
 800735e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007362:	e00f      	b.n	8007384 <UART_SetConfig+0x5d0>
 8007364:	2320      	movs	r3, #32
 8007366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800736a:	e00b      	b.n	8007384 <UART_SetConfig+0x5d0>
 800736c:	2340      	movs	r3, #64	; 0x40
 800736e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007372:	e007      	b.n	8007384 <UART_SetConfig+0x5d0>
 8007374:	2380      	movs	r3, #128	; 0x80
 8007376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800737a:	bf00      	nop
 800737c:	e002      	b.n	8007384 <UART_SetConfig+0x5d0>
 800737e:	2380      	movs	r3, #128	; 0x80
 8007380:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a25      	ldr	r2, [pc, #148]	; (8007420 <UART_SetConfig+0x66c>)
 800738a:	4293      	cmp	r3, r2
 800738c:	f040 80b8 	bne.w	8007500 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007390:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007394:	2b08      	cmp	r3, #8
 8007396:	d019      	beq.n	80073cc <UART_SetConfig+0x618>
 8007398:	2b08      	cmp	r3, #8
 800739a:	dc04      	bgt.n	80073a6 <UART_SetConfig+0x5f2>
 800739c:	2b02      	cmp	r3, #2
 800739e:	d009      	beq.n	80073b4 <UART_SetConfig+0x600>
 80073a0:	2b04      	cmp	r3, #4
 80073a2:	d00b      	beq.n	80073bc <UART_SetConfig+0x608>
 80073a4:	e042      	b.n	800742c <UART_SetConfig+0x678>
 80073a6:	2b20      	cmp	r3, #32
 80073a8:	d02b      	beq.n	8007402 <UART_SetConfig+0x64e>
 80073aa:	2b40      	cmp	r3, #64	; 0x40
 80073ac:	d02c      	beq.n	8007408 <UART_SetConfig+0x654>
 80073ae:	2b10      	cmp	r3, #16
 80073b0:	d014      	beq.n	80073dc <UART_SetConfig+0x628>
 80073b2:	e03b      	b.n	800742c <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80073b4:	f7fe fb08 	bl	80059c8 <HAL_RCCEx_GetD3PCLK1Freq>
 80073b8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80073ba:	e03d      	b.n	8007438 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073bc:	f107 0314 	add.w	r3, r7, #20
 80073c0:	4618      	mov	r0, r3
 80073c2:	f7fe fb17 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073ca:	e035      	b.n	8007438 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073cc:	f107 0308 	add.w	r3, r7, #8
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7fe fc5b 	bl	8005c8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80073da:	e02d      	b.n	8007438 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80073dc:	4b0d      	ldr	r3, [pc, #52]	; (8007414 <UART_SetConfig+0x660>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0320 	and.w	r3, r3, #32
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d009      	beq.n	80073fc <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80073e8:	4b0a      	ldr	r3, [pc, #40]	; (8007414 <UART_SetConfig+0x660>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	08db      	lsrs	r3, r3, #3
 80073ee:	f003 0303 	and.w	r3, r3, #3
 80073f2:	4a0c      	ldr	r2, [pc, #48]	; (8007424 <UART_SetConfig+0x670>)
 80073f4:	fa22 f303 	lsr.w	r3, r2, r3
 80073f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073fa:	e01d      	b.n	8007438 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80073fc:	4b09      	ldr	r3, [pc, #36]	; (8007424 <UART_SetConfig+0x670>)
 80073fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007400:	e01a      	b.n	8007438 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007402:	4b09      	ldr	r3, [pc, #36]	; (8007428 <UART_SetConfig+0x674>)
 8007404:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007406:	e017      	b.n	8007438 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007408:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800740c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800740e:	e013      	b.n	8007438 <UART_SetConfig+0x684>
 8007410:	40011400 	.word	0x40011400
 8007414:	58024400 	.word	0x58024400
 8007418:	40007800 	.word	0x40007800
 800741c:	40007c00 	.word	0x40007c00
 8007420:	58000c00 	.word	0x58000c00
 8007424:	03d09000 	.word	0x03d09000
 8007428:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800742c:	2300      	movs	r3, #0
 800742e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8007436:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 824d 	beq.w	80078da <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007444:	4aad      	ldr	r2, [pc, #692]	; (80076fc <UART_SetConfig+0x948>)
 8007446:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800744a:	461a      	mov	r2, r3
 800744c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800744e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007452:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685a      	ldr	r2, [r3, #4]
 8007458:	4613      	mov	r3, r2
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	4413      	add	r3, r2
 800745e:	6a3a      	ldr	r2, [r7, #32]
 8007460:	429a      	cmp	r2, r3
 8007462:	d305      	bcc.n	8007470 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800746a:	6a3a      	ldr	r2, [r7, #32]
 800746c:	429a      	cmp	r2, r3
 800746e:	d903      	bls.n	8007478 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8007476:	e230      	b.n	80078da <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747a:	4618      	mov	r0, r3
 800747c:	f04f 0100 	mov.w	r1, #0
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007484:	4a9d      	ldr	r2, [pc, #628]	; (80076fc <UART_SetConfig+0x948>)
 8007486:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800748a:	b29b      	uxth	r3, r3
 800748c:	f04f 0400 	mov.w	r4, #0
 8007490:	461a      	mov	r2, r3
 8007492:	4623      	mov	r3, r4
 8007494:	f7f8 ff24 	bl	80002e0 <__aeabi_uldivmod>
 8007498:	4603      	mov	r3, r0
 800749a:	460c      	mov	r4, r1
 800749c:	4619      	mov	r1, r3
 800749e:	4622      	mov	r2, r4
 80074a0:	f04f 0300 	mov.w	r3, #0
 80074a4:	f04f 0400 	mov.w	r4, #0
 80074a8:	0214      	lsls	r4, r2, #8
 80074aa:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80074ae:	020b      	lsls	r3, r1, #8
 80074b0:	687a      	ldr	r2, [r7, #4]
 80074b2:	6852      	ldr	r2, [r2, #4]
 80074b4:	0852      	lsrs	r2, r2, #1
 80074b6:	4611      	mov	r1, r2
 80074b8:	f04f 0200 	mov.w	r2, #0
 80074bc:	eb13 0b01 	adds.w	fp, r3, r1
 80074c0:	eb44 0c02 	adc.w	ip, r4, r2
 80074c4:	4658      	mov	r0, fp
 80074c6:	4661      	mov	r1, ip
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	f04f 0400 	mov.w	r4, #0
 80074d0:	461a      	mov	r2, r3
 80074d2:	4623      	mov	r3, r4
 80074d4:	f7f8 ff04 	bl	80002e0 <__aeabi_uldivmod>
 80074d8:	4603      	mov	r3, r0
 80074da:	460c      	mov	r4, r1
 80074dc:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80074de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074e4:	d308      	bcc.n	80074f8 <UART_SetConfig+0x744>
 80074e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ec:	d204      	bcs.n	80074f8 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074f4:	60da      	str	r2, [r3, #12]
 80074f6:	e1f0      	b.n	80078da <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80074fe:	e1ec      	b.n	80078da <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	69db      	ldr	r3, [r3, #28]
 8007504:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007508:	f040 8100 	bne.w	800770c <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800750c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007510:	2b40      	cmp	r3, #64	; 0x40
 8007512:	f200 80b7 	bhi.w	8007684 <UART_SetConfig+0x8d0>
 8007516:	a201      	add	r2, pc, #4	; (adr r2, 800751c <UART_SetConfig+0x768>)
 8007518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800751c:	08007621 	.word	0x08007621
 8007520:	08007629 	.word	0x08007629
 8007524:	08007685 	.word	0x08007685
 8007528:	08007685 	.word	0x08007685
 800752c:	08007631 	.word	0x08007631
 8007530:	08007685 	.word	0x08007685
 8007534:	08007685 	.word	0x08007685
 8007538:	08007685 	.word	0x08007685
 800753c:	08007641 	.word	0x08007641
 8007540:	08007685 	.word	0x08007685
 8007544:	08007685 	.word	0x08007685
 8007548:	08007685 	.word	0x08007685
 800754c:	08007685 	.word	0x08007685
 8007550:	08007685 	.word	0x08007685
 8007554:	08007685 	.word	0x08007685
 8007558:	08007685 	.word	0x08007685
 800755c:	08007651 	.word	0x08007651
 8007560:	08007685 	.word	0x08007685
 8007564:	08007685 	.word	0x08007685
 8007568:	08007685 	.word	0x08007685
 800756c:	08007685 	.word	0x08007685
 8007570:	08007685 	.word	0x08007685
 8007574:	08007685 	.word	0x08007685
 8007578:	08007685 	.word	0x08007685
 800757c:	08007685 	.word	0x08007685
 8007580:	08007685 	.word	0x08007685
 8007584:	08007685 	.word	0x08007685
 8007588:	08007685 	.word	0x08007685
 800758c:	08007685 	.word	0x08007685
 8007590:	08007685 	.word	0x08007685
 8007594:	08007685 	.word	0x08007685
 8007598:	08007685 	.word	0x08007685
 800759c:	08007677 	.word	0x08007677
 80075a0:	08007685 	.word	0x08007685
 80075a4:	08007685 	.word	0x08007685
 80075a8:	08007685 	.word	0x08007685
 80075ac:	08007685 	.word	0x08007685
 80075b0:	08007685 	.word	0x08007685
 80075b4:	08007685 	.word	0x08007685
 80075b8:	08007685 	.word	0x08007685
 80075bc:	08007685 	.word	0x08007685
 80075c0:	08007685 	.word	0x08007685
 80075c4:	08007685 	.word	0x08007685
 80075c8:	08007685 	.word	0x08007685
 80075cc:	08007685 	.word	0x08007685
 80075d0:	08007685 	.word	0x08007685
 80075d4:	08007685 	.word	0x08007685
 80075d8:	08007685 	.word	0x08007685
 80075dc:	08007685 	.word	0x08007685
 80075e0:	08007685 	.word	0x08007685
 80075e4:	08007685 	.word	0x08007685
 80075e8:	08007685 	.word	0x08007685
 80075ec:	08007685 	.word	0x08007685
 80075f0:	08007685 	.word	0x08007685
 80075f4:	08007685 	.word	0x08007685
 80075f8:	08007685 	.word	0x08007685
 80075fc:	08007685 	.word	0x08007685
 8007600:	08007685 	.word	0x08007685
 8007604:	08007685 	.word	0x08007685
 8007608:	08007685 	.word	0x08007685
 800760c:	08007685 	.word	0x08007685
 8007610:	08007685 	.word	0x08007685
 8007614:	08007685 	.word	0x08007685
 8007618:	08007685 	.word	0x08007685
 800761c:	0800767d 	.word	0x0800767d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007620:	f7fd fa76 	bl	8004b10 <HAL_RCC_GetPCLK1Freq>
 8007624:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007626:	e033      	b.n	8007690 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007628:	f7fd fa88 	bl	8004b3c <HAL_RCC_GetPCLK2Freq>
 800762c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800762e:	e02f      	b.n	8007690 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007630:	f107 0314 	add.w	r3, r7, #20
 8007634:	4618      	mov	r0, r3
 8007636:	f7fe f9dd 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800763e:	e027      	b.n	8007690 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007640:	f107 0308 	add.w	r3, r7, #8
 8007644:	4618      	mov	r0, r3
 8007646:	f7fe fb21 	bl	8005c8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800764e:	e01f      	b.n	8007690 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007650:	4b2b      	ldr	r3, [pc, #172]	; (8007700 <UART_SetConfig+0x94c>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0320 	and.w	r3, r3, #32
 8007658:	2b00      	cmp	r3, #0
 800765a:	d009      	beq.n	8007670 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800765c:	4b28      	ldr	r3, [pc, #160]	; (8007700 <UART_SetConfig+0x94c>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	08db      	lsrs	r3, r3, #3
 8007662:	f003 0303 	and.w	r3, r3, #3
 8007666:	4a27      	ldr	r2, [pc, #156]	; (8007704 <UART_SetConfig+0x950>)
 8007668:	fa22 f303 	lsr.w	r3, r2, r3
 800766c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800766e:	e00f      	b.n	8007690 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8007670:	4b24      	ldr	r3, [pc, #144]	; (8007704 <UART_SetConfig+0x950>)
 8007672:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007674:	e00c      	b.n	8007690 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007676:	4b24      	ldr	r3, [pc, #144]	; (8007708 <UART_SetConfig+0x954>)
 8007678:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800767a:	e009      	b.n	8007690 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800767c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007680:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007682:	e005      	b.n	8007690 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8007684:	2300      	movs	r3, #0
 8007686:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007688:	2301      	movs	r3, #1
 800768a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800768e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 8121 	beq.w	80078da <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	4a17      	ldr	r2, [pc, #92]	; (80076fc <UART_SetConfig+0x948>)
 800769e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80076a2:	461a      	mov	r2, r3
 80076a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80076aa:	005a      	lsls	r2, r3, #1
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	085b      	lsrs	r3, r3, #1
 80076b2:	441a      	add	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	685b      	ldr	r3, [r3, #4]
 80076b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80076bc:	b29b      	uxth	r3, r3
 80076be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c2:	2b0f      	cmp	r3, #15
 80076c4:	d916      	bls.n	80076f4 <UART_SetConfig+0x940>
 80076c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076cc:	d212      	bcs.n	80076f4 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80076ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	f023 030f 	bic.w	r3, r3, #15
 80076d6:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80076d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076da:	085b      	lsrs	r3, r3, #1
 80076dc:	b29b      	uxth	r3, r3
 80076de:	f003 0307 	and.w	r3, r3, #7
 80076e2:	b29a      	uxth	r2, r3
 80076e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80076e6:	4313      	orrs	r3, r2
 80076e8:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80076f0:	60da      	str	r2, [r3, #12]
 80076f2:	e0f2      	b.n	80078da <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80076fa:	e0ee      	b.n	80078da <UART_SetConfig+0xb26>
 80076fc:	0800c380 	.word	0x0800c380
 8007700:	58024400 	.word	0x58024400
 8007704:	03d09000 	.word	0x03d09000
 8007708:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800770c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007710:	2b40      	cmp	r3, #64	; 0x40
 8007712:	f200 80b7 	bhi.w	8007884 <UART_SetConfig+0xad0>
 8007716:	a201      	add	r2, pc, #4	; (adr r2, 800771c <UART_SetConfig+0x968>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	08007821 	.word	0x08007821
 8007720:	08007829 	.word	0x08007829
 8007724:	08007885 	.word	0x08007885
 8007728:	08007885 	.word	0x08007885
 800772c:	08007831 	.word	0x08007831
 8007730:	08007885 	.word	0x08007885
 8007734:	08007885 	.word	0x08007885
 8007738:	08007885 	.word	0x08007885
 800773c:	08007841 	.word	0x08007841
 8007740:	08007885 	.word	0x08007885
 8007744:	08007885 	.word	0x08007885
 8007748:	08007885 	.word	0x08007885
 800774c:	08007885 	.word	0x08007885
 8007750:	08007885 	.word	0x08007885
 8007754:	08007885 	.word	0x08007885
 8007758:	08007885 	.word	0x08007885
 800775c:	08007851 	.word	0x08007851
 8007760:	08007885 	.word	0x08007885
 8007764:	08007885 	.word	0x08007885
 8007768:	08007885 	.word	0x08007885
 800776c:	08007885 	.word	0x08007885
 8007770:	08007885 	.word	0x08007885
 8007774:	08007885 	.word	0x08007885
 8007778:	08007885 	.word	0x08007885
 800777c:	08007885 	.word	0x08007885
 8007780:	08007885 	.word	0x08007885
 8007784:	08007885 	.word	0x08007885
 8007788:	08007885 	.word	0x08007885
 800778c:	08007885 	.word	0x08007885
 8007790:	08007885 	.word	0x08007885
 8007794:	08007885 	.word	0x08007885
 8007798:	08007885 	.word	0x08007885
 800779c:	08007877 	.word	0x08007877
 80077a0:	08007885 	.word	0x08007885
 80077a4:	08007885 	.word	0x08007885
 80077a8:	08007885 	.word	0x08007885
 80077ac:	08007885 	.word	0x08007885
 80077b0:	08007885 	.word	0x08007885
 80077b4:	08007885 	.word	0x08007885
 80077b8:	08007885 	.word	0x08007885
 80077bc:	08007885 	.word	0x08007885
 80077c0:	08007885 	.word	0x08007885
 80077c4:	08007885 	.word	0x08007885
 80077c8:	08007885 	.word	0x08007885
 80077cc:	08007885 	.word	0x08007885
 80077d0:	08007885 	.word	0x08007885
 80077d4:	08007885 	.word	0x08007885
 80077d8:	08007885 	.word	0x08007885
 80077dc:	08007885 	.word	0x08007885
 80077e0:	08007885 	.word	0x08007885
 80077e4:	08007885 	.word	0x08007885
 80077e8:	08007885 	.word	0x08007885
 80077ec:	08007885 	.word	0x08007885
 80077f0:	08007885 	.word	0x08007885
 80077f4:	08007885 	.word	0x08007885
 80077f8:	08007885 	.word	0x08007885
 80077fc:	08007885 	.word	0x08007885
 8007800:	08007885 	.word	0x08007885
 8007804:	08007885 	.word	0x08007885
 8007808:	08007885 	.word	0x08007885
 800780c:	08007885 	.word	0x08007885
 8007810:	08007885 	.word	0x08007885
 8007814:	08007885 	.word	0x08007885
 8007818:	08007885 	.word	0x08007885
 800781c:	0800787d 	.word	0x0800787d
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007820:	f7fd f976 	bl	8004b10 <HAL_RCC_GetPCLK1Freq>
 8007824:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8007826:	e033      	b.n	8007890 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007828:	f7fd f988 	bl	8004b3c <HAL_RCC_GetPCLK2Freq>
 800782c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800782e:	e02f      	b.n	8007890 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007830:	f107 0314 	add.w	r3, r7, #20
 8007834:	4618      	mov	r0, r3
 8007836:	f7fe f8dd 	bl	80059f4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800783a:	69bb      	ldr	r3, [r7, #24]
 800783c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800783e:	e027      	b.n	8007890 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007840:	f107 0308 	add.w	r3, r7, #8
 8007844:	4618      	mov	r0, r3
 8007846:	f7fe fa21 	bl	8005c8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800784e:	e01f      	b.n	8007890 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007850:	4b2c      	ldr	r3, [pc, #176]	; (8007904 <UART_SetConfig+0xb50>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0320 	and.w	r3, r3, #32
 8007858:	2b00      	cmp	r3, #0
 800785a:	d009      	beq.n	8007870 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800785c:	4b29      	ldr	r3, [pc, #164]	; (8007904 <UART_SetConfig+0xb50>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	08db      	lsrs	r3, r3, #3
 8007862:	f003 0303 	and.w	r3, r3, #3
 8007866:	4a28      	ldr	r2, [pc, #160]	; (8007908 <UART_SetConfig+0xb54>)
 8007868:	fa22 f303 	lsr.w	r3, r2, r3
 800786c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800786e:	e00f      	b.n	8007890 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8007870:	4b25      	ldr	r3, [pc, #148]	; (8007908 <UART_SetConfig+0xb54>)
 8007872:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007874:	e00c      	b.n	8007890 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007876:	4b25      	ldr	r3, [pc, #148]	; (800790c <UART_SetConfig+0xb58>)
 8007878:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800787a:	e009      	b.n	8007890 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800787c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007880:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8007882:	e005      	b.n	8007890 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8007884:	2300      	movs	r3, #0
 8007886:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800788e:	bf00      	nop
    }

    if (pclk != 0U)
 8007890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007892:	2b00      	cmp	r3, #0
 8007894:	d021      	beq.n	80078da <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789a:	4a1d      	ldr	r2, [pc, #116]	; (8007910 <UART_SetConfig+0xb5c>)
 800789c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80078a0:	461a      	mov	r2, r3
 80078a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a4:	fbb3 f2f2 	udiv	r2, r3, r2
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	085b      	lsrs	r3, r3, #1
 80078ae:	441a      	add	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b8:	b29b      	uxth	r3, r3
 80078ba:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078be:	2b0f      	cmp	r3, #15
 80078c0:	d908      	bls.n	80078d4 <UART_SetConfig+0xb20>
 80078c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078c8:	d204      	bcs.n	80078d4 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078d0:	60da      	str	r2, [r3, #12]
 80078d2:	e002      	b.n	80078da <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2200      	movs	r2, #0
 80078f4:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80078f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3738      	adds	r7, #56	; 0x38
 80078fe:	46bd      	mov	sp, r7
 8007900:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8007904:	58024400 	.word	0x58024400
 8007908:	03d09000 	.word	0x03d09000
 800790c:	003d0900 	.word	0x003d0900
 8007910:	0800c380 	.word	0x0800c380

08007914 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007920:	f003 0301 	and.w	r3, r3, #1
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00a      	beq.n	800793e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	430a      	orrs	r2, r1
 800793c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00a      	beq.n	8007960 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	430a      	orrs	r2, r1
 800795e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007964:	f003 0304 	and.w	r3, r3, #4
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00a      	beq.n	8007982 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	685b      	ldr	r3, [r3, #4]
 8007972:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	430a      	orrs	r2, r1
 8007980:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007986:	f003 0308 	and.w	r3, r3, #8
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00a      	beq.n	80079a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	430a      	orrs	r2, r1
 80079a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a8:	f003 0310 	and.w	r3, r3, #16
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00a      	beq.n	80079c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	430a      	orrs	r2, r1
 80079c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ca:	f003 0320 	and.w	r3, r3, #32
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00a      	beq.n	80079e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	430a      	orrs	r2, r1
 80079e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d01a      	beq.n	8007a2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a12:	d10a      	bne.n	8007a2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	430a      	orrs	r2, r1
 8007a28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00a      	beq.n	8007a4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	605a      	str	r2, [r3, #4]
  }
}
 8007a4c:	bf00      	nop
 8007a4e:	370c      	adds	r7, #12
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af02      	add	r7, sp, #8
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2200      	movs	r2, #0
 8007a64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8007a68:	f7fa fe06 	bl	8002678 <HAL_GetTick>
 8007a6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0308 	and.w	r3, r3, #8
 8007a78:	2b08      	cmp	r3, #8
 8007a7a:	d10e      	bne.n	8007a9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a80:	9300      	str	r3, [sp, #0]
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f82c 	bl	8007ae8 <UART_WaitOnFlagUntilTimeout>
 8007a90:	4603      	mov	r3, r0
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d001      	beq.n	8007a9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e022      	b.n	8007ae0 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f003 0304 	and.w	r3, r3, #4
 8007aa4:	2b04      	cmp	r3, #4
 8007aa6:	d10e      	bne.n	8007ac6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007aa8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007aac:	9300      	str	r3, [sp, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 f816 	bl	8007ae8 <UART_WaitOnFlagUntilTimeout>
 8007abc:	4603      	mov	r3, r0
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d001      	beq.n	8007ac6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ac2:	2303      	movs	r3, #3
 8007ac4:	e00c      	b.n	8007ae0 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2220      	movs	r2, #32
 8007ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007ade:	2300      	movs	r3, #0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	60f8      	str	r0, [r7, #12]
 8007af0:	60b9      	str	r1, [r7, #8]
 8007af2:	603b      	str	r3, [r7, #0]
 8007af4:	4613      	mov	r3, r2
 8007af6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007af8:	e062      	b.n	8007bc0 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007afa:	69bb      	ldr	r3, [r7, #24]
 8007afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b00:	d05e      	beq.n	8007bc0 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b02:	f7fa fdb9 	bl	8002678 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	429a      	cmp	r2, r3
 8007b10:	d302      	bcc.n	8007b18 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d11d      	bne.n	8007b54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b26:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	689a      	ldr	r2, [r3, #8]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f022 0201 	bic.w	r2, r2, #1
 8007b36:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2220      	movs	r2, #32
 8007b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2220      	movs	r2, #32
 8007b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e045      	b.n	8007be0 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0304 	and.w	r3, r3, #4
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d02e      	beq.n	8007bc0 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	69db      	ldr	r3, [r3, #28]
 8007b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b70:	d126      	bne.n	8007bc0 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b7a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007b8a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689a      	ldr	r2, [r3, #8]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f022 0201 	bic.w	r2, r2, #1
 8007b9a:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	2220      	movs	r2, #32
 8007ba8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	2220      	movs	r2, #32
 8007bb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8007bbc:	2303      	movs	r3, #3
 8007bbe:	e00f      	b.n	8007be0 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	69da      	ldr	r2, [r3, #28]
 8007bc6:	68bb      	ldr	r3, [r7, #8]
 8007bc8:	4013      	ands	r3, r2
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	bf0c      	ite	eq
 8007bd0:	2301      	moveq	r3, #1
 8007bd2:	2300      	movne	r3, #0
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	79fb      	ldrb	r3, [r7, #7]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d08d      	beq.n	8007afa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b083      	sub	sp, #12
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007bfe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6899      	ldr	r1, [r3, #8]
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	4b08      	ldr	r3, [pc, #32]	; (8007c2c <UART_EndRxTransfer+0x44>)
 8007c0c:	400b      	ands	r3, r1
 8007c0e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	effffffe 	.word	0xeffffffe

08007c30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	2200      	movs	r2, #0
 8007c42:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f7ff f890 	bl	8006d74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c54:	bf00      	nop
 8007c56:	3710      	adds	r7, #16
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c6a:	2b21      	cmp	r3, #33	; 0x21
 8007c6c:	d12a      	bne.n	8007cc4 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d110      	bne.n	8007c9c <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	681a      	ldr	r2, [r3, #0]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c88:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007c98:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007c9a:	e013      	b.n	8007cc4 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ca0:	781a      	ldrb	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cac:	1c5a      	adds	r2, r3, #1
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	3b01      	subs	r3, #1
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007cc4:	bf00      	nop
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cde:	2b21      	cmp	r3, #33	; 0x21
 8007ce0:	d12f      	bne.n	8007d42 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d110      	bne.n	8007d10 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007cfc:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d0c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007d0e:	e018      	b.n	8007d42 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d14:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	881b      	ldrh	r3, [r3, #0]
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d24:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d2a:	1c9a      	adds	r2, r3, #2
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	3b01      	subs	r3, #1
 8007d3a:	b29a      	uxth	r2, r3
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007d42:	bf00      	nop
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b085      	sub	sp, #20
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d5c:	2b21      	cmp	r3, #33	; 0x21
 8007d5e:	d13d      	bne.n	8007ddc <UART_TxISR_8BIT_FIFOEN+0x8e>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007d66:	81fb      	strh	r3, [r7, #14]
 8007d68:	e035      	b.n	8007dd6 <UART_TxISR_8BIT_FIFOEN+0x88>
    {
      if (huart->TxXferCount == 0U)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d111      	bne.n	8007d9a <UART_TxISR_8BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007d84:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007d94:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8007d96:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8007d98:	e020      	b.n	8007ddc <UART_TxISR_8BIT_FIFOEN+0x8e>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	69db      	ldr	r3, [r3, #28]
 8007da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d013      	beq.n	8007dd0 <UART_TxISR_8BIT_FIFOEN+0x82>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dac:	781a      	ldrb	r2, [r3, #0]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007db8:	1c5a      	adds	r2, r3, #1
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	b29a      	uxth	r2, r3
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007dd0:	89fb      	ldrh	r3, [r7, #14]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	81fb      	strh	r3, [r7, #14]
 8007dd6:	89fb      	ldrh	r3, [r7, #14]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1c6      	bne.n	8007d6a <UART_TxISR_8BIT_FIFOEN+0x1c>
}
 8007ddc:	bf00      	nop
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007df6:	2b21      	cmp	r3, #33	; 0x21
 8007df8:	d142      	bne.n	8007e80 <UART_TxISR_16BIT_FIFOEN+0x98>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007e00:	81fb      	strh	r3, [r7, #14]
 8007e02:	e03a      	b.n	8007e7a <UART_TxISR_16BIT_FIFOEN+0x92>
    {
      if (huart->TxXferCount == 0U)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d111      	bne.n	8007e34 <UART_TxISR_16BIT_FIFOEN+0x4c>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689a      	ldr	r2, [r3, #8]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007e1e:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e2e:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8007e30:	bf00      	nop
      {
        /* Nothing to do */
      }
    }
  }
}
 8007e32:	e025      	b.n	8007e80 <UART_TxISR_16BIT_FIFOEN+0x98>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d018      	beq.n	8007e74 <UART_TxISR_16BIT_FIFOEN+0x8c>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e46:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	881b      	ldrh	r3, [r3, #0]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e56:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e5c:	1c9a      	adds	r2, r3, #2
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	b29a      	uxth	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007e74:	89fb      	ldrh	r3, [r7, #14]
 8007e76:	3b01      	subs	r3, #1
 8007e78:	81fb      	strh	r3, [r7, #14]
 8007e7a:	89fb      	ldrh	r3, [r7, #14]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d1c1      	bne.n	8007e04 <UART_TxISR_16BIT_FIFOEN+0x1c>
}
 8007e80:	bf00      	nop
 8007e82:	3714      	adds	r7, #20
 8007e84:	46bd      	mov	sp, r7
 8007e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8a:	4770      	bx	lr

08007e8c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b082      	sub	sp, #8
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ea2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2220      	movs	r2, #32
 8007ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f7f9 fde4 	bl	8001a80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007eb8:	bf00      	nop
 8007eba:	3708      	adds	r7, #8
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ece:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ed6:	2b22      	cmp	r3, #34	; 0x22
 8007ed8:	d13b      	bne.n	8007f52 <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee0:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007ee2:	89bb      	ldrh	r3, [r7, #12]
 8007ee4:	b2d9      	uxtb	r1, r3
 8007ee6:	89fb      	ldrh	r3, [r7, #14]
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007eee:	400a      	ands	r2, r1
 8007ef0:	b2d2      	uxtb	r2, r2
 8007ef2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	3b01      	subs	r3, #1
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f16:	b29b      	uxth	r3, r3
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d122      	bne.n	8007f62 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007f2a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689a      	ldr	r2, [r3, #8]
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f022 0201 	bic.w	r2, r2, #1
 8007f3a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	2220      	movs	r2, #32
 8007f40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7f9 f8b0 	bl	80010b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007f50:	e007      	b.n	8007f62 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	699a      	ldr	r2, [r3, #24]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f042 0208 	orr.w	r2, r2, #8
 8007f60:	619a      	str	r2, [r3, #24]
}
 8007f62:	bf00      	nop
 8007f64:	3710      	adds	r7, #16
 8007f66:	46bd      	mov	sp, r7
 8007f68:	bd80      	pop	{r7, pc}

08007f6a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007f6a:	b580      	push	{r7, lr}
 8007f6c:	b084      	sub	sp, #16
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f78:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f80:	2b22      	cmp	r3, #34	; 0x22
 8007f82:	d13b      	bne.n	8007ffc <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8a:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f90:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8007f92:	89ba      	ldrh	r2, [r7, #12]
 8007f94:	89fb      	ldrh	r3, [r7, #14]
 8007f96:	4013      	ands	r3, r2
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	68bb      	ldr	r3, [r7, #8]
 8007f9c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007fa2:	1c9a      	adds	r2, r3, #2
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	3b01      	subs	r3, #1
 8007fb2:	b29a      	uxth	r2, r3
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d122      	bne.n	800800c <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007fd4:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	689a      	ldr	r2, [r3, #8]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f022 0201 	bic.w	r2, r2, #1
 8007fe4:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2220      	movs	r2, #32
 8007fea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8007ff4:	6878      	ldr	r0, [r7, #4]
 8007ff6:	f7f9 f85b 	bl	80010b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ffa:	e007      	b.n	800800c <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	699a      	ldr	r2, [r3, #24]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f042 0208 	orr.w	r2, r2, #8
 800800a:	619a      	str	r2, [r3, #24]
}
 800800c:	bf00      	nop
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008022:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800802a:	2b22      	cmp	r3, #34	; 0x22
 800802c:	d166      	bne.n	80080fc <UART_RxISR_8BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008034:	81fb      	strh	r3, [r7, #14]
 8008036:	e03d      	b.n	80080b4 <UART_RxISR_8BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800803e:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008040:	893b      	ldrh	r3, [r7, #8]
 8008042:	b2d9      	uxtb	r1, r3
 8008044:	89bb      	ldrh	r3, [r7, #12]
 8008046:	b2da      	uxtb	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800804c:	400a      	ands	r2, r1
 800804e:	b2d2      	uxtb	r2, r2
 8008050:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008056:	1c5a      	adds	r2, r3, #1
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008062:	b29b      	uxth	r3, r3
 8008064:	3b01      	subs	r3, #1
 8008066:	b29a      	uxth	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008074:	b29b      	uxth	r3, r3
 8008076:	2b00      	cmp	r3, #0
 8008078:	d119      	bne.n	80080ae <UART_RxISR_8BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008088:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	6899      	ldr	r1, [r3, #8]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	4b1f      	ldr	r3, [pc, #124]	; (8008114 <UART_RxISR_8BIT_FIFOEN+0x100>)
 8008096:	400b      	ands	r3, r1
 8008098:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2220      	movs	r2, #32
 800809e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7f9 f801 	bl	80010b0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80080ae:	89fb      	ldrh	r3, [r7, #14]
 80080b0:	3b01      	subs	r3, #1
 80080b2:	81fb      	strh	r3, [r7, #14]
 80080b4:	89fb      	ldrh	r3, [r7, #14]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1be      	bne.n	8008038 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080c0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80080c2:	897b      	ldrh	r3, [r7, #10]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d021      	beq.n	800810c <UART_RxISR_8BIT_FIFOEN+0xf8>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80080ce:	897a      	ldrh	r2, [r7, #10]
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d21b      	bcs.n	800810c <UART_RxISR_8BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	689a      	ldr	r2, [r3, #8]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80080e2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4a0c      	ldr	r2, [pc, #48]	; (8008118 <UART_RxISR_8BIT_FIFOEN+0x104>)
 80080e8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f042 0220 	orr.w	r2, r2, #32
 80080f8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080fa:	e007      	b.n	800810c <UART_RxISR_8BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	699a      	ldr	r2, [r3, #24]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f042 0208 	orr.w	r2, r2, #8
 800810a:	619a      	str	r2, [r3, #24]
}
 800810c:	bf00      	nop
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}
 8008114:	effffffe 	.word	0xeffffffe
 8008118:	08007ec1 	.word	0x08007ec1

0800811c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b086      	sub	sp, #24
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800812a:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008132:	2b22      	cmp	r3, #34	; 0x22
 8008134:	d166      	bne.n	8008204 <UART_RxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800813c:	82fb      	strh	r3, [r7, #22]
 800813e:	e03d      	b.n	80081bc <UART_RxISR_16BIT_FIFOEN+0xa0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008146:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800814c:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 800814e:	8a3a      	ldrh	r2, [r7, #16]
 8008150:	8abb      	ldrh	r3, [r7, #20]
 8008152:	4013      	ands	r3, r2
 8008154:	b29a      	uxth	r2, r3
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800815e:	1c9a      	adds	r2, r3, #2
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800816a:	b29b      	uxth	r3, r3
 800816c:	3b01      	subs	r3, #1
 800816e:	b29a      	uxth	r2, r3
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800817c:	b29b      	uxth	r3, r3
 800817e:	2b00      	cmp	r3, #0
 8008180:	d119      	bne.n	80081b6 <UART_RxISR_16BIT_FIFOEN+0x9a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	681a      	ldr	r2, [r3, #0]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008190:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	6899      	ldr	r1, [r3, #8]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681a      	ldr	r2, [r3, #0]
 800819c:	4b1f      	ldr	r3, [pc, #124]	; (800821c <UART_RxISR_16BIT_FIFOEN+0x100>)
 800819e:	400b      	ands	r3, r1
 80081a0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2220      	movs	r2, #32
 80081a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f7f8 ff7d 	bl	80010b0 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 80081b6:	8afb      	ldrh	r3, [r7, #22]
 80081b8:	3b01      	subs	r3, #1
 80081ba:	82fb      	strh	r3, [r7, #22]
 80081bc:	8afb      	ldrh	r3, [r7, #22]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d1be      	bne.n	8008140 <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081c8:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80081ca:	8a7b      	ldrh	r3, [r7, #18]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d021      	beq.n	8008214 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80081d6:	8a7a      	ldrh	r2, [r7, #18]
 80081d8:	429a      	cmp	r2, r3
 80081da:	d21b      	bcs.n	8008214 <UART_RxISR_16BIT_FIFOEN+0xf8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	689a      	ldr	r2, [r3, #8]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80081ea:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	4a0c      	ldr	r2, [pc, #48]	; (8008220 <UART_RxISR_16BIT_FIFOEN+0x104>)
 80081f0:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f042 0220 	orr.w	r2, r2, #32
 8008200:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008202:	e007      	b.n	8008214 <UART_RxISR_16BIT_FIFOEN+0xf8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	699a      	ldr	r2, [r3, #24]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f042 0208 	orr.w	r2, r2, #8
 8008212:	619a      	str	r2, [r3, #24]
}
 8008214:	bf00      	nop
 8008216:	3718      	adds	r7, #24
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}
 800821c:	effffffe 	.word	0xeffffffe
 8008220:	08007f6b 	.word	0x08007f6b

08008224 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800826e:	2b01      	cmp	r3, #1
 8008270:	d101      	bne.n	8008276 <HAL_UARTEx_DisableFifoMode+0x16>
 8008272:	2302      	movs	r3, #2
 8008274:	e027      	b.n	80082c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2201      	movs	r2, #1
 800827a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2224      	movs	r2, #36	; 0x24
 8008282:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f022 0201 	bic.w	r2, r2, #1
 800829c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80082a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68fa      	ldr	r2, [r7, #12]
 80082b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2220      	movs	r2, #32
 80082b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2200      	movs	r2, #0
 80082c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80082c4:	2300      	movs	r3, #0
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b084      	sub	sp, #16
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
 80082da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	d101      	bne.n	80082ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80082e6:	2302      	movs	r3, #2
 80082e8:	e02d      	b.n	8008346 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2224      	movs	r2, #36	; 0x24
 80082f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f022 0201 	bic.w	r2, r2, #1
 8008310:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	689b      	ldr	r3, [r3, #8]
 8008318:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	683a      	ldr	r2, [r7, #0]
 8008322:	430a      	orrs	r2, r1
 8008324:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f850 	bl	80083cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2220      	movs	r2, #32
 8008338:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2200      	movs	r2, #0
 8008340:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3710      	adds	r7, #16
 800834a:	46bd      	mov	sp, r7
 800834c:	bd80      	pop	{r7, pc}

0800834e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800834e:	b580      	push	{r7, lr}
 8008350:	b084      	sub	sp, #16
 8008352:	af00      	add	r7, sp, #0
 8008354:	6078      	str	r0, [r7, #4]
 8008356:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800835e:	2b01      	cmp	r3, #1
 8008360:	d101      	bne.n	8008366 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008362:	2302      	movs	r3, #2
 8008364:	e02d      	b.n	80083c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2224      	movs	r2, #36	; 0x24
 8008372:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	681a      	ldr	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f022 0201 	bic.w	r2, r2, #1
 800838c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	683a      	ldr	r2, [r7, #0]
 800839e:	430a      	orrs	r2, r1
 80083a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	f000 f812 	bl	80083cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2220      	movs	r2, #32
 80083b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2200      	movs	r2, #0
 80083bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80083c0:	2300      	movs	r3, #0
}
 80083c2:	4618      	mov	r0, r3
 80083c4:	3710      	adds	r7, #16
 80083c6:	46bd      	mov	sp, r7
 80083c8:	bd80      	pop	{r7, pc}
	...

080083cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b089      	sub	sp, #36	; 0x24
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80083d4:	4a2f      	ldr	r2, [pc, #188]	; (8008494 <UARTEx_SetNbDataToProcess+0xc8>)
 80083d6:	f107 0314 	add.w	r3, r7, #20
 80083da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083de:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80083e2:	4a2d      	ldr	r2, [pc, #180]	; (8008498 <UARTEx_SetNbDataToProcess+0xcc>)
 80083e4:	f107 030c 	add.w	r3, r7, #12
 80083e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80083ec:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d108      	bne.n	800840a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008408:	e03d      	b.n	8008486 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800840a:	2310      	movs	r3, #16
 800840c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800840e:	2310      	movs	r3, #16
 8008410:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	689b      	ldr	r3, [r3, #8]
 8008418:	0e5b      	lsrs	r3, r3, #25
 800841a:	b2db      	uxtb	r3, r3
 800841c:	f003 0307 	and.w	r3, r3, #7
 8008420:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	0f5b      	lsrs	r3, r3, #29
 800842a:	b2db      	uxtb	r3, r3
 800842c:	f003 0307 	and.w	r3, r3, #7
 8008430:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8008432:	7fbb      	ldrb	r3, [r7, #30]
 8008434:	7f3a      	ldrb	r2, [r7, #28]
 8008436:	f107 0120 	add.w	r1, r7, #32
 800843a:	440a      	add	r2, r1
 800843c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8008440:	fb02 f303 	mul.w	r3, r2, r3
 8008444:	7f3a      	ldrb	r2, [r7, #28]
 8008446:	f107 0120 	add.w	r1, r7, #32
 800844a:	440a      	add	r2, r1
 800844c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8008450:	fb93 f3f2 	sdiv	r3, r3, r2
 8008454:	b29a      	uxth	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800845c:	7ffb      	ldrb	r3, [r7, #31]
 800845e:	7f7a      	ldrb	r2, [r7, #29]
 8008460:	f107 0120 	add.w	r1, r7, #32
 8008464:	440a      	add	r2, r1
 8008466:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800846a:	fb02 f303 	mul.w	r3, r2, r3
 800846e:	7f7a      	ldrb	r2, [r7, #29]
 8008470:	f107 0120 	add.w	r1, r7, #32
 8008474:	440a      	add	r2, r1
 8008476:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800847a:	fb93 f3f2 	sdiv	r3, r3, r2
 800847e:	b29a      	uxth	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008486:	bf00      	nop
 8008488:	3724      	adds	r7, #36	; 0x24
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop
 8008494:	0800c294 	.word	0x0800c294
 8008498:	0800c29c 	.word	0x0800c29c

0800849c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800849c:	b084      	sub	sp, #16
 800849e:	b580      	push	{r7, lr}
 80084a0:	b084      	sub	sp, #16
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	f107 001c 	add.w	r0, r7, #28
 80084aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80084ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d120      	bne.n	80084f6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68da      	ldr	r2, [r3, #12]
 80084c4:	4b25      	ldr	r3, [pc, #148]	; (800855c <USB_CoreInit+0xc0>)
 80084c6:	4013      	ands	r3, r2
 80084c8:	687a      	ldr	r2, [r7, #4]
 80084ca:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80084d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d105      	bne.n	80084ea <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	68db      	ldr	r3, [r3, #12]
 80084e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 fa4c 	bl	8008988 <USB_CoreReset>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73fb      	strb	r3, [r7, #15]
 80084f4:	e01a      	b.n	800852c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f000 fa40 	bl	8008988 <USB_CoreReset>
 8008508:	4603      	mov	r3, r0
 800850a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800850c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800850e:	2b00      	cmp	r3, #0
 8008510:	d106      	bne.n	8008520 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008516:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	639a      	str	r2, [r3, #56]	; 0x38
 800851e:	e005      	b.n	800852c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008524:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	2b01      	cmp	r3, #1
 8008530:	d10b      	bne.n	800854a <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f043 0206 	orr.w	r2, r3, #6
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	689b      	ldr	r3, [r3, #8]
 8008542:	f043 0220 	orr.w	r2, r3, #32
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800854a:	7bfb      	ldrb	r3, [r7, #15]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008556:	b004      	add	sp, #16
 8008558:	4770      	bx	lr
 800855a:	bf00      	nop
 800855c:	ffbdffbf 	.word	0xffbdffbf

08008560 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008560:	b480      	push	{r7}
 8008562:	b083      	sub	sp, #12
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f023 0201 	bic.w	r2, r3, #1
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008582:	b580      	push	{r7, lr}
 8008584:	b082      	sub	sp, #8
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
 800858a:	460b      	mov	r3, r1
 800858c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	68db      	ldr	r3, [r3, #12]
 8008592:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800859a:	78fb      	ldrb	r3, [r7, #3]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d106      	bne.n	80085ae <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	68db      	ldr	r3, [r3, #12]
 80085a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	60da      	str	r2, [r3, #12]
 80085ac:	e00b      	b.n	80085c6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80085ae:	78fb      	ldrb	r3, [r7, #3]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d106      	bne.n	80085c2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	60da      	str	r2, [r3, #12]
 80085c0:	e001      	b.n	80085c6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e003      	b.n	80085ce <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80085c6:	2032      	movs	r0, #50	; 0x32
 80085c8:	f7fa f862 	bl	8002690 <HAL_Delay>

  return HAL_OK;
 80085cc:	2300      	movs	r3, #0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	3708      	adds	r7, #8
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}
	...

080085d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085d8:	b084      	sub	sp, #16
 80085da:	b580      	push	{r7, lr}
 80085dc:	b086      	sub	sp, #24
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
 80085e2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80085e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80085f2:	2300      	movs	r3, #0
 80085f4:	613b      	str	r3, [r7, #16]
 80085f6:	e009      	b.n	800860c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80085f8:	687a      	ldr	r2, [r7, #4]
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	3340      	adds	r3, #64	; 0x40
 80085fe:	009b      	lsls	r3, r3, #2
 8008600:	4413      	add	r3, r2
 8008602:	2200      	movs	r2, #0
 8008604:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	3301      	adds	r3, #1
 800860a:	613b      	str	r3, [r7, #16]
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	2b0e      	cmp	r3, #14
 8008610:	d9f2      	bls.n	80085f8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008612:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008614:	2b00      	cmp	r3, #0
 8008616:	d11c      	bne.n	8008652 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800861e:	685b      	ldr	r3, [r3, #4]
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008626:	f043 0302 	orr.w	r3, r3, #2
 800862a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008630:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	601a      	str	r2, [r3, #0]
 8008650:	e005      	b.n	800865e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008656:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008664:	461a      	mov	r2, r3
 8008666:	2300      	movs	r3, #0
 8008668:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008670:	4619      	mov	r1, r3
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008678:	461a      	mov	r2, r3
 800867a:	680b      	ldr	r3, [r1, #0]
 800867c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800867e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008680:	2b01      	cmp	r3, #1
 8008682:	d10c      	bne.n	800869e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008686:	2b00      	cmp	r3, #0
 8008688:	d104      	bne.n	8008694 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800868a:	2100      	movs	r1, #0
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f949 	bl	8008924 <USB_SetDevSpeed>
 8008692:	e008      	b.n	80086a6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008694:	2101      	movs	r1, #1
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f944 	bl	8008924 <USB_SetDevSpeed>
 800869c:	e003      	b.n	80086a6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800869e:	2103      	movs	r1, #3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f93f 	bl	8008924 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80086a6:	2110      	movs	r1, #16
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f8f3 	bl	8008894 <USB_FlushTxFifo>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d001      	beq.n	80086b8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80086b4:	2301      	movs	r3, #1
 80086b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 f911 	bl	80088e0 <USB_FlushRxFifo>
 80086be:	4603      	mov	r3, r0
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d001      	beq.n	80086c8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ce:	461a      	mov	r2, r3
 80086d0:	2300      	movs	r3, #0
 80086d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086da:	461a      	mov	r2, r3
 80086dc:	2300      	movs	r3, #0
 80086de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e6:	461a      	mov	r2, r3
 80086e8:	2300      	movs	r3, #0
 80086ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086ec:	2300      	movs	r3, #0
 80086ee:	613b      	str	r3, [r7, #16]
 80086f0:	e043      	b.n	800877a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	015a      	lsls	r2, r3, #5
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	4413      	add	r3, r2
 80086fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008704:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008708:	d118      	bne.n	800873c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d10a      	bne.n	8008726 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	015a      	lsls	r2, r3, #5
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	4413      	add	r3, r2
 8008718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800871c:	461a      	mov	r2, r3
 800871e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008722:	6013      	str	r3, [r2, #0]
 8008724:	e013      	b.n	800874e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	4413      	add	r3, r2
 800872e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008732:	461a      	mov	r2, r3
 8008734:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008738:	6013      	str	r3, [r2, #0]
 800873a:	e008      	b.n	800874e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800873c:	693b      	ldr	r3, [r7, #16]
 800873e:	015a      	lsls	r2, r3, #5
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	4413      	add	r3, r2
 8008744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008748:	461a      	mov	r2, r3
 800874a:	2300      	movs	r3, #0
 800874c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	4413      	add	r3, r2
 8008756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800875a:	461a      	mov	r2, r3
 800875c:	2300      	movs	r3, #0
 800875e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	015a      	lsls	r2, r3, #5
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	4413      	add	r3, r2
 8008768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800876c:	461a      	mov	r2, r3
 800876e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008772:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	3301      	adds	r3, #1
 8008778:	613b      	str	r3, [r7, #16]
 800877a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	429a      	cmp	r2, r3
 8008780:	d3b7      	bcc.n	80086f2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008782:	2300      	movs	r3, #0
 8008784:	613b      	str	r3, [r7, #16]
 8008786:	e043      	b.n	8008810 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008788:	693b      	ldr	r3, [r7, #16]
 800878a:	015a      	lsls	r2, r3, #5
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	4413      	add	r3, r2
 8008790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800879a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800879e:	d118      	bne.n	80087d2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10a      	bne.n	80087bc <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	015a      	lsls	r2, r3, #5
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	4413      	add	r3, r2
 80087ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087b2:	461a      	mov	r2, r3
 80087b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80087b8:	6013      	str	r3, [r2, #0]
 80087ba:	e013      	b.n	80087e4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	015a      	lsls	r2, r3, #5
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	4413      	add	r3, r2
 80087c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087c8:	461a      	mov	r2, r3
 80087ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80087ce:	6013      	str	r3, [r2, #0]
 80087d0:	e008      	b.n	80087e4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	015a      	lsls	r2, r3, #5
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	4413      	add	r3, r2
 80087da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087de:	461a      	mov	r2, r3
 80087e0:	2300      	movs	r3, #0
 80087e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	015a      	lsls	r2, r3, #5
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	4413      	add	r3, r2
 80087ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f0:	461a      	mov	r2, r3
 80087f2:	2300      	movs	r3, #0
 80087f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	015a      	lsls	r2, r3, #5
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	4413      	add	r3, r2
 80087fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008802:	461a      	mov	r2, r3
 8008804:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008808:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800880a:	693b      	ldr	r3, [r7, #16]
 800880c:	3301      	adds	r3, #1
 800880e:	613b      	str	r3, [r7, #16]
 8008810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	429a      	cmp	r2, r3
 8008816:	d3b7      	bcc.n	8008788 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	68fa      	ldr	r2, [r7, #12]
 8008822:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008826:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800882a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2200      	movs	r2, #0
 8008830:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008838:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	2b00      	cmp	r3, #0
 800883e:	d105      	bne.n	800884c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	f043 0210 	orr.w	r2, r3, #16
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	699a      	ldr	r2, [r3, #24]
 8008850:	4b0e      	ldr	r3, [pc, #56]	; (800888c <USB_DevInit+0x2b4>)
 8008852:	4313      	orrs	r3, r2
 8008854:	687a      	ldr	r2, [r7, #4]
 8008856:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800885a:	2b00      	cmp	r3, #0
 800885c:	d005      	beq.n	800886a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	f043 0208 	orr.w	r2, r3, #8
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800886a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800886c:	2b01      	cmp	r3, #1
 800886e:	d105      	bne.n	800887c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	699a      	ldr	r2, [r3, #24]
 8008874:	4b06      	ldr	r3, [pc, #24]	; (8008890 <USB_DevInit+0x2b8>)
 8008876:	4313      	orrs	r3, r2
 8008878:	687a      	ldr	r2, [r7, #4]
 800887a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800887c:	7dfb      	ldrb	r3, [r7, #23]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3718      	adds	r7, #24
 8008882:	46bd      	mov	sp, r7
 8008884:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008888:	b004      	add	sp, #16
 800888a:	4770      	bx	lr
 800888c:	803c3800 	.word	0x803c3800
 8008890:	40000004 	.word	0x40000004

08008894 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008894:	b480      	push	{r7}
 8008896:	b085      	sub	sp, #20
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800889e:	2300      	movs	r3, #0
 80088a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	019b      	lsls	r3, r3, #6
 80088a6:	f043 0220 	orr.w	r2, r3, #32
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3301      	adds	r3, #1
 80088b2:	60fb      	str	r3, [r7, #12]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	4a09      	ldr	r2, [pc, #36]	; (80088dc <USB_FlushTxFifo+0x48>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d901      	bls.n	80088c0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80088bc:	2303      	movs	r3, #3
 80088be:	e006      	b.n	80088ce <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	f003 0320 	and.w	r3, r3, #32
 80088c8:	2b20      	cmp	r3, #32
 80088ca:	d0f0      	beq.n	80088ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3714      	adds	r7, #20
 80088d2:	46bd      	mov	sp, r7
 80088d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d8:	4770      	bx	lr
 80088da:	bf00      	nop
 80088dc:	00030d40 	.word	0x00030d40

080088e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80088e8:	2300      	movs	r3, #0
 80088ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2210      	movs	r2, #16
 80088f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	3301      	adds	r3, #1
 80088f6:	60fb      	str	r3, [r7, #12]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	4a09      	ldr	r2, [pc, #36]	; (8008920 <USB_FlushRxFifo+0x40>)
 80088fc:	4293      	cmp	r3, r2
 80088fe:	d901      	bls.n	8008904 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008900:	2303      	movs	r3, #3
 8008902:	e006      	b.n	8008912 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	f003 0310 	and.w	r3, r3, #16
 800890c:	2b10      	cmp	r3, #16
 800890e:	d0f0      	beq.n	80088f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	00030d40 	.word	0x00030d40

08008924 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008924:	b480      	push	{r7}
 8008926:	b085      	sub	sp, #20
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	78fb      	ldrb	r3, [r7, #3]
 800893e:	68f9      	ldr	r1, [r7, #12]
 8008940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008944:	4313      	orrs	r3, r2
 8008946:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008948:	2300      	movs	r3, #0
}
 800894a:	4618      	mov	r0, r3
 800894c:	3714      	adds	r7, #20
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr

08008956 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008956:	b580      	push	{r7, lr}
 8008958:	b084      	sub	sp, #16
 800895a:	af00      	add	r7, sp, #0
 800895c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008968:	685b      	ldr	r3, [r3, #4]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008970:	f043 0302 	orr.w	r3, r3, #2
 8008974:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8008976:	2003      	movs	r0, #3
 8008978:	f7f9 fe8a 	bl	8002690 <HAL_Delay>

  return HAL_OK;
 800897c:	2300      	movs	r3, #0
}
 800897e:	4618      	mov	r0, r3
 8008980:	3710      	adds	r7, #16
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
	...

08008988 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8008990:	2300      	movs	r3, #0
 8008992:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	3301      	adds	r3, #1
 8008998:	60fb      	str	r3, [r7, #12]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	4a13      	ldr	r2, [pc, #76]	; (80089ec <USB_CoreReset+0x64>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d901      	bls.n	80089a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80089a2:	2303      	movs	r3, #3
 80089a4:	e01b      	b.n	80089de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	691b      	ldr	r3, [r3, #16]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	daf2      	bge.n	8008994 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80089ae:	2300      	movs	r3, #0
 80089b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	f043 0201 	orr.w	r2, r3, #1
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	3301      	adds	r3, #1
 80089c2:	60fb      	str	r3, [r7, #12]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	4a09      	ldr	r2, [pc, #36]	; (80089ec <USB_CoreReset+0x64>)
 80089c8:	4293      	cmp	r3, r2
 80089ca:	d901      	bls.n	80089d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80089cc:	2303      	movs	r3, #3
 80089ce:	e006      	b.n	80089de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	691b      	ldr	r3, [r3, #16]
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d0f0      	beq.n	80089be <USB_CoreReset+0x36>

  return HAL_OK;
 80089dc:	2300      	movs	r3, #0
}
 80089de:	4618      	mov	r0, r3
 80089e0:	3714      	adds	r7, #20
 80089e2:	46bd      	mov	sp, r7
 80089e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e8:	4770      	bx	lr
 80089ea:	bf00      	nop
 80089ec:	00030d40 	.word	0x00030d40

080089f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80089f0:	b480      	push	{r7}
 80089f2:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80089f4:	bf00      	nop
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
	...

08008a00 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008a00:	b480      	push	{r7}
 8008a02:	b085      	sub	sp, #20
 8008a04:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a06:	f3ef 8305 	mrs	r3, IPSR
 8008a0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d10f      	bne.n	8008a32 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a12:	f3ef 8310 	mrs	r3, PRIMASK
 8008a16:	607b      	str	r3, [r7, #4]
  return(result);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d105      	bne.n	8008a2a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8008a22:	603b      	str	r3, [r7, #0]
  return(result);
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d007      	beq.n	8008a3a <osKernelInitialize+0x3a>
 8008a2a:	4b0e      	ldr	r3, [pc, #56]	; (8008a64 <osKernelInitialize+0x64>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b02      	cmp	r3, #2
 8008a30:	d103      	bne.n	8008a3a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008a32:	f06f 0305 	mvn.w	r3, #5
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	e00c      	b.n	8008a54 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008a3a:	4b0a      	ldr	r3, [pc, #40]	; (8008a64 <osKernelInitialize+0x64>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d105      	bne.n	8008a4e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008a42:	4b08      	ldr	r3, [pc, #32]	; (8008a64 <osKernelInitialize+0x64>)
 8008a44:	2201      	movs	r2, #1
 8008a46:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	60fb      	str	r3, [r7, #12]
 8008a4c:	e002      	b.n	8008a54 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008a4e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a52:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008a54:	68fb      	ldr	r3, [r7, #12]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
 8008a62:	bf00      	nop
 8008a64:	240000f4 	.word	0x240000f4

08008a68 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a6e:	f3ef 8305 	mrs	r3, IPSR
 8008a72:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a74:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d10f      	bne.n	8008a9a <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a7a:	f3ef 8310 	mrs	r3, PRIMASK
 8008a7e:	607b      	str	r3, [r7, #4]
  return(result);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d105      	bne.n	8008a92 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a86:	f3ef 8311 	mrs	r3, BASEPRI
 8008a8a:	603b      	str	r3, [r7, #0]
  return(result);
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d007      	beq.n	8008aa2 <osKernelStart+0x3a>
 8008a92:	4b0f      	ldr	r3, [pc, #60]	; (8008ad0 <osKernelStart+0x68>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d103      	bne.n	8008aa2 <osKernelStart+0x3a>
    stat = osErrorISR;
 8008a9a:	f06f 0305 	mvn.w	r3, #5
 8008a9e:	60fb      	str	r3, [r7, #12]
 8008aa0:	e010      	b.n	8008ac4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008aa2:	4b0b      	ldr	r3, [pc, #44]	; (8008ad0 <osKernelStart+0x68>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b01      	cmp	r3, #1
 8008aa8:	d109      	bne.n	8008abe <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008aaa:	f7ff ffa1 	bl	80089f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008aae:	4b08      	ldr	r3, [pc, #32]	; (8008ad0 <osKernelStart+0x68>)
 8008ab0:	2202      	movs	r2, #2
 8008ab2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008ab4:	f001 fbc4 	bl	800a240 <vTaskStartScheduler>
      stat = osOK;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	60fb      	str	r3, [r7, #12]
 8008abc:	e002      	b.n	8008ac4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8008abe:	f04f 33ff 	mov.w	r3, #4294967295
 8008ac2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3710      	adds	r7, #16
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}
 8008ace:	bf00      	nop
 8008ad0:	240000f4 	.word	0x240000f4

08008ad4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b090      	sub	sp, #64	; 0x40
 8008ad8:	af04      	add	r7, sp, #16
 8008ada:	60f8      	str	r0, [r7, #12]
 8008adc:	60b9      	str	r1, [r7, #8]
 8008ade:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ae4:	f3ef 8305 	mrs	r3, IPSR
 8008ae8:	61fb      	str	r3, [r7, #28]
  return(result);
 8008aea:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	f040 808f 	bne.w	8008c10 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008af2:	f3ef 8310 	mrs	r3, PRIMASK
 8008af6:	61bb      	str	r3, [r7, #24]
  return(result);
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d105      	bne.n	8008b0a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008afe:	f3ef 8311 	mrs	r3, BASEPRI
 8008b02:	617b      	str	r3, [r7, #20]
  return(result);
 8008b04:	697b      	ldr	r3, [r7, #20]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d003      	beq.n	8008b12 <osThreadNew+0x3e>
 8008b0a:	4b44      	ldr	r3, [pc, #272]	; (8008c1c <osThreadNew+0x148>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d07e      	beq.n	8008c10 <osThreadNew+0x13c>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d07b      	beq.n	8008c10 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8008b18:	2380      	movs	r3, #128	; 0x80
 8008b1a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8008b1c:	2318      	movs	r3, #24
 8008b1e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8008b20:	2300      	movs	r3, #0
 8008b22:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8008b24:	f04f 33ff 	mov.w	r3, #4294967295
 8008b28:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d045      	beq.n	8008bbc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d002      	beq.n	8008b3e <osThreadNew+0x6a>
        name = attr->name;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	699b      	ldr	r3, [r3, #24]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d002      	beq.n	8008b4c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	699b      	ldr	r3, [r3, #24]
 8008b4a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d008      	beq.n	8008b64 <osThreadNew+0x90>
 8008b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b54:	2b38      	cmp	r3, #56	; 0x38
 8008b56:	d805      	bhi.n	8008b64 <osThreadNew+0x90>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	f003 0301 	and.w	r3, r3, #1
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <osThreadNew+0x94>
        return (NULL);
 8008b64:	2300      	movs	r3, #0
 8008b66:	e054      	b.n	8008c12 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	695b      	ldr	r3, [r3, #20]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d003      	beq.n	8008b78 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	695b      	ldr	r3, [r3, #20]
 8008b74:	089b      	lsrs	r3, r3, #2
 8008b76:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	689b      	ldr	r3, [r3, #8]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d00e      	beq.n	8008b9e <osThreadNew+0xca>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	2b5b      	cmp	r3, #91	; 0x5b
 8008b86:	d90a      	bls.n	8008b9e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d006      	beq.n	8008b9e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	695b      	ldr	r3, [r3, #20]
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d002      	beq.n	8008b9e <osThreadNew+0xca>
        mem = 1;
 8008b98:	2301      	movs	r3, #1
 8008b9a:	623b      	str	r3, [r7, #32]
 8008b9c:	e010      	b.n	8008bc0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	689b      	ldr	r3, [r3, #8]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d10c      	bne.n	8008bc0 <osThreadNew+0xec>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d108      	bne.n	8008bc0 <osThreadNew+0xec>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	691b      	ldr	r3, [r3, #16]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d104      	bne.n	8008bc0 <osThreadNew+0xec>
          mem = 0;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	623b      	str	r3, [r7, #32]
 8008bba:	e001      	b.n	8008bc0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008bc0:	6a3b      	ldr	r3, [r7, #32]
 8008bc2:	2b01      	cmp	r3, #1
 8008bc4:	d110      	bne.n	8008be8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008bce:	9202      	str	r2, [sp, #8]
 8008bd0:	9301      	str	r3, [sp, #4]
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bdc:	68f8      	ldr	r0, [r7, #12]
 8008bde:	f001 f95d 	bl	8009e9c <xTaskCreateStatic>
 8008be2:	4603      	mov	r3, r0
 8008be4:	613b      	str	r3, [r7, #16]
 8008be6:	e013      	b.n	8008c10 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8008be8:	6a3b      	ldr	r3, [r7, #32]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d110      	bne.n	8008c10 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf0:	b29a      	uxth	r2, r3
 8008bf2:	f107 0310 	add.w	r3, r7, #16
 8008bf6:	9301      	str	r3, [sp, #4]
 8008bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfa:	9300      	str	r3, [sp, #0]
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f001 f9a5 	bl	8009f50 <xTaskCreate>
 8008c06:	4603      	mov	r3, r0
 8008c08:	2b01      	cmp	r3, #1
 8008c0a:	d001      	beq.n	8008c10 <osThreadNew+0x13c>
          hTask = NULL;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008c10:	693b      	ldr	r3, [r7, #16]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3730      	adds	r7, #48	; 0x30
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	240000f4 	.word	0x240000f4

08008c20 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c28:	f3ef 8305 	mrs	r3, IPSR
 8008c2c:	613b      	str	r3, [r7, #16]
  return(result);
 8008c2e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10f      	bne.n	8008c54 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c34:	f3ef 8310 	mrs	r3, PRIMASK
 8008c38:	60fb      	str	r3, [r7, #12]
  return(result);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d105      	bne.n	8008c4c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008c40:	f3ef 8311 	mrs	r3, BASEPRI
 8008c44:	60bb      	str	r3, [r7, #8]
  return(result);
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d007      	beq.n	8008c5c <osDelay+0x3c>
 8008c4c:	4b0a      	ldr	r3, [pc, #40]	; (8008c78 <osDelay+0x58>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d103      	bne.n	8008c5c <osDelay+0x3c>
    stat = osErrorISR;
 8008c54:	f06f 0305 	mvn.w	r3, #5
 8008c58:	617b      	str	r3, [r7, #20]
 8008c5a:	e007      	b.n	8008c6c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d002      	beq.n	8008c6c <osDelay+0x4c>
      vTaskDelay(ticks);
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f001 fab6 	bl	800a1d8 <vTaskDelay>
    }
  }

  return (stat);
 8008c6c:	697b      	ldr	r3, [r7, #20]
}
 8008c6e:	4618      	mov	r0, r3
 8008c70:	3718      	adds	r7, #24
 8008c72:	46bd      	mov	sp, r7
 8008c74:	bd80      	pop	{r7, pc}
 8008c76:	bf00      	nop
 8008c78:	240000f4 	.word	0x240000f4

08008c7c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b08c      	sub	sp, #48	; 0x30
 8008c80:	af02      	add	r7, sp, #8
 8008c82:	60f8      	str	r0, [r7, #12]
 8008c84:	60b9      	str	r1, [r7, #8]
 8008c86:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c8c:	f3ef 8305 	mrs	r3, IPSR
 8008c90:	61bb      	str	r3, [r7, #24]
  return(result);
 8008c92:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f040 8087 	bne.w	8008da8 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c9a:	f3ef 8310 	mrs	r3, PRIMASK
 8008c9e:	617b      	str	r3, [r7, #20]
  return(result);
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d105      	bne.n	8008cb2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008ca6:	f3ef 8311 	mrs	r3, BASEPRI
 8008caa:	613b      	str	r3, [r7, #16]
  return(result);
 8008cac:	693b      	ldr	r3, [r7, #16]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d003      	beq.n	8008cba <osSemaphoreNew+0x3e>
 8008cb2:	4b40      	ldr	r3, [pc, #256]	; (8008db4 <osSemaphoreNew+0x138>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d076      	beq.n	8008da8 <osSemaphoreNew+0x12c>
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d073      	beq.n	8008da8 <osSemaphoreNew+0x12c>
 8008cc0:	68ba      	ldr	r2, [r7, #8]
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d86f      	bhi.n	8008da8 <osSemaphoreNew+0x12c>
    mem = -1;
 8008cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8008ccc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d015      	beq.n	8008d00 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d006      	beq.n	8008cea <osSemaphoreNew+0x6e>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	2b4f      	cmp	r3, #79	; 0x4f
 8008ce2:	d902      	bls.n	8008cea <osSemaphoreNew+0x6e>
        mem = 1;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	623b      	str	r3, [r7, #32]
 8008ce8:	e00c      	b.n	8008d04 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d108      	bne.n	8008d04 <osSemaphoreNew+0x88>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d104      	bne.n	8008d04 <osSemaphoreNew+0x88>
          mem = 0;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	623b      	str	r3, [r7, #32]
 8008cfe:	e001      	b.n	8008d04 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8008d00:	2300      	movs	r3, #0
 8008d02:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8008d04:	6a3b      	ldr	r3, [r7, #32]
 8008d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d0a:	d04d      	beq.n	8008da8 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d129      	bne.n	8008d66 <osSemaphoreNew+0xea>
        if (mem == 1) {
 8008d12:	6a3b      	ldr	r3, [r7, #32]
 8008d14:	2b01      	cmp	r3, #1
 8008d16:	d10b      	bne.n	8008d30 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	689a      	ldr	r2, [r3, #8]
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	9300      	str	r3, [sp, #0]
 8008d20:	4613      	mov	r3, r2
 8008d22:	2200      	movs	r2, #0
 8008d24:	2100      	movs	r1, #0
 8008d26:	2001      	movs	r0, #1
 8008d28:	f000 fa1c 	bl	8009164 <xQueueGenericCreateStatic>
 8008d2c:	6278      	str	r0, [r7, #36]	; 0x24
 8008d2e:	e005      	b.n	8008d3c <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008d30:	2203      	movs	r2, #3
 8008d32:	2100      	movs	r1, #0
 8008d34:	2001      	movs	r0, #1
 8008d36:	f000 fa88 	bl	800924a <xQueueGenericCreate>
 8008d3a:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d022      	beq.n	8008d88 <osSemaphoreNew+0x10c>
 8008d42:	68bb      	ldr	r3, [r7, #8]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d01f      	beq.n	8008d88 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008d48:	2300      	movs	r3, #0
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	2100      	movs	r1, #0
 8008d4e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d50:	f000 fb44 	bl	80093dc <xQueueGenericSend>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b01      	cmp	r3, #1
 8008d58:	d016      	beq.n	8008d88 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8008d5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008d5c:	f000 fecd 	bl	8009afa <vQueueDelete>
            hSemaphore = NULL;
 8008d60:	2300      	movs	r3, #0
 8008d62:	627b      	str	r3, [r7, #36]	; 0x24
 8008d64:	e010      	b.n	8008d88 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d108      	bne.n	8008d7e <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	461a      	mov	r2, r3
 8008d72:	68b9      	ldr	r1, [r7, #8]
 8008d74:	68f8      	ldr	r0, [r7, #12]
 8008d76:	f000 faca 	bl	800930e <xQueueCreateCountingSemaphoreStatic>
 8008d7a:	6278      	str	r0, [r7, #36]	; 0x24
 8008d7c:	e004      	b.n	8008d88 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008d7e:	68b9      	ldr	r1, [r7, #8]
 8008d80:	68f8      	ldr	r0, [r7, #12]
 8008d82:	f000 faf9 	bl	8009378 <xQueueCreateCountingSemaphore>
 8008d86:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00c      	beq.n	8008da8 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d003      	beq.n	8008d9c <osSemaphoreNew+0x120>
          name = attr->name;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	61fb      	str	r3, [r7, #28]
 8008d9a:	e001      	b.n	8008da0 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008da0:	69f9      	ldr	r1, [r7, #28]
 8008da2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008da4:	f000 fff4 	bl	8009d90 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3728      	adds	r7, #40	; 0x28
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	240000f4 	.word	0x240000f4

08008db8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b08c      	sub	sp, #48	; 0x30
 8008dbc:	af02      	add	r7, sp, #8
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
 8008dc2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008dc8:	f3ef 8305 	mrs	r3, IPSR
 8008dcc:	61bb      	str	r3, [r7, #24]
  return(result);
 8008dce:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d170      	bne.n	8008eb6 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8008dd8:	617b      	str	r3, [r7, #20]
  return(result);
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d105      	bne.n	8008dec <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008de0:	f3ef 8311 	mrs	r3, BASEPRI
 8008de4:	613b      	str	r3, [r7, #16]
  return(result);
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <osMessageQueueNew+0x3c>
 8008dec:	4b34      	ldr	r3, [pc, #208]	; (8008ec0 <osMessageQueueNew+0x108>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d060      	beq.n	8008eb6 <osMessageQueueNew+0xfe>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d05d      	beq.n	8008eb6 <osMessageQueueNew+0xfe>
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d05a      	beq.n	8008eb6 <osMessageQueueNew+0xfe>
    mem = -1;
 8008e00:	f04f 33ff 	mov.w	r3, #4294967295
 8008e04:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d029      	beq.n	8008e60 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d012      	beq.n	8008e3a <osMessageQueueNew+0x82>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	68db      	ldr	r3, [r3, #12]
 8008e18:	2b4f      	cmp	r3, #79	; 0x4f
 8008e1a:	d90e      	bls.n	8008e3a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00a      	beq.n	8008e3a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	695a      	ldr	r2, [r3, #20]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	68b9      	ldr	r1, [r7, #8]
 8008e2c:	fb01 f303 	mul.w	r3, r1, r3
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d302      	bcc.n	8008e3a <osMessageQueueNew+0x82>
        mem = 1;
 8008e34:	2301      	movs	r3, #1
 8008e36:	623b      	str	r3, [r7, #32]
 8008e38:	e014      	b.n	8008e64 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	689b      	ldr	r3, [r3, #8]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d110      	bne.n	8008e64 <osMessageQueueNew+0xac>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d10c      	bne.n	8008e64 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d108      	bne.n	8008e64 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	695b      	ldr	r3, [r3, #20]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d104      	bne.n	8008e64 <osMessageQueueNew+0xac>
          mem = 0;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	623b      	str	r3, [r7, #32]
 8008e5e:	e001      	b.n	8008e64 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8008e60:	2300      	movs	r3, #0
 8008e62:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008e64:	6a3b      	ldr	r3, [r7, #32]
 8008e66:	2b01      	cmp	r3, #1
 8008e68:	d10c      	bne.n	8008e84 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	691a      	ldr	r2, [r3, #16]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6899      	ldr	r1, [r3, #8]
 8008e72:	2300      	movs	r3, #0
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	460b      	mov	r3, r1
 8008e78:	68b9      	ldr	r1, [r7, #8]
 8008e7a:	68f8      	ldr	r0, [r7, #12]
 8008e7c:	f000 f972 	bl	8009164 <xQueueGenericCreateStatic>
 8008e80:	6278      	str	r0, [r7, #36]	; 0x24
 8008e82:	e008      	b.n	8008e96 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8008e84:	6a3b      	ldr	r3, [r7, #32]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d105      	bne.n	8008e96 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008e8a:	2200      	movs	r2, #0
 8008e8c:	68b9      	ldr	r1, [r7, #8]
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f000 f9db 	bl	800924a <xQueueGenericCreate>
 8008e94:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d00c      	beq.n	8008eb6 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d003      	beq.n	8008eaa <osMessageQueueNew+0xf2>
        name = attr->name;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	61fb      	str	r3, [r7, #28]
 8008ea8:	e001      	b.n	8008eae <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008eae:	69f9      	ldr	r1, [r7, #28]
 8008eb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008eb2:	f000 ff6d 	bl	8009d90 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008eb8:	4618      	mov	r0, r3
 8008eba:	3728      	adds	r7, #40	; 0x28
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}
 8008ec0:	240000f4 	.word	0x240000f4

08008ec4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ec4:	b480      	push	{r7}
 8008ec6:	b085      	sub	sp, #20
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	4a07      	ldr	r2, [pc, #28]	; (8008ef0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008ed4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	4a06      	ldr	r2, [pc, #24]	; (8008ef4 <vApplicationGetIdleTaskMemory+0x30>)
 8008eda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2280      	movs	r2, #128	; 0x80
 8008ee0:	601a      	str	r2, [r3, #0]
}
 8008ee2:	bf00      	nop
 8008ee4:	3714      	adds	r7, #20
 8008ee6:	46bd      	mov	sp, r7
 8008ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	240000f8 	.word	0x240000f8
 8008ef4:	24000154 	.word	0x24000154

08008ef8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008ef8:	b480      	push	{r7}
 8008efa:	b085      	sub	sp, #20
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60f8      	str	r0, [r7, #12]
 8008f00:	60b9      	str	r1, [r7, #8]
 8008f02:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4a07      	ldr	r2, [pc, #28]	; (8008f24 <vApplicationGetTimerTaskMemory+0x2c>)
 8008f08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	4a06      	ldr	r2, [pc, #24]	; (8008f28 <vApplicationGetTimerTaskMemory+0x30>)
 8008f0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f16:	601a      	str	r2, [r3, #0]
}
 8008f18:	bf00      	nop
 8008f1a:	3714      	adds	r7, #20
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr
 8008f24:	24000354 	.word	0x24000354
 8008f28:	240003b0 	.word	0x240003b0

08008f2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008f2c:	b480      	push	{r7}
 8008f2e:	b083      	sub	sp, #12
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f103 0208 	add.w	r2, r3, #8
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f04f 32ff 	mov.w	r2, #4294967295
 8008f44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	f103 0208 	add.w	r2, r3, #8
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f103 0208 	add.w	r2, r3, #8
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008f60:	bf00      	nop
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008f7a:	bf00      	nop
 8008f7c:	370c      	adds	r7, #12
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr

08008f86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f86:	b480      	push	{r7}
 8008f88:	b085      	sub	sp, #20
 8008f8a:	af00      	add	r7, sp, #0
 8008f8c:	6078      	str	r0, [r7, #4]
 8008f8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	685b      	ldr	r3, [r3, #4]
 8008f94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	68fa      	ldr	r2, [r7, #12]
 8008f9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	689a      	ldr	r2, [r3, #8]
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	683a      	ldr	r2, [r7, #0]
 8008faa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	687a      	ldr	r2, [r7, #4]
 8008fb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	1c5a      	adds	r2, r3, #1
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	601a      	str	r2, [r3, #0]
}
 8008fc2:	bf00      	nop
 8008fc4:	3714      	adds	r7, #20
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr

08008fce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008fce:	b480      	push	{r7}
 8008fd0:	b085      	sub	sp, #20
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
 8008fd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fe4:	d103      	bne.n	8008fee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	691b      	ldr	r3, [r3, #16]
 8008fea:	60fb      	str	r3, [r7, #12]
 8008fec:	e00c      	b.n	8009008 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	3308      	adds	r3, #8
 8008ff2:	60fb      	str	r3, [r7, #12]
 8008ff4:	e002      	b.n	8008ffc <vListInsert+0x2e>
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	685b      	ldr	r3, [r3, #4]
 8008ffa:	60fb      	str	r3, [r7, #12]
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	685b      	ldr	r3, [r3, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	429a      	cmp	r2, r3
 8009006:	d2f6      	bcs.n	8008ff6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	683a      	ldr	r2, [r7, #0]
 8009016:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	683a      	ldr	r2, [r7, #0]
 8009022:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	1c5a      	adds	r2, r3, #1
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	601a      	str	r2, [r3, #0]
}
 8009034:	bf00      	nop
 8009036:	3714      	adds	r7, #20
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009040:	b480      	push	{r7}
 8009042:	b085      	sub	sp, #20
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	691b      	ldr	r3, [r3, #16]
 800904c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	687a      	ldr	r2, [r7, #4]
 8009054:	6892      	ldr	r2, [r2, #8]
 8009056:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	687a      	ldr	r2, [r7, #4]
 800905e:	6852      	ldr	r2, [r2, #4]
 8009060:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	687a      	ldr	r2, [r7, #4]
 8009068:	429a      	cmp	r2, r3
 800906a:	d103      	bne.n	8009074 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	689a      	ldr	r2, [r3, #8]
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2200      	movs	r2, #0
 8009078:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	1e5a      	subs	r2, r3, #1
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
}
 8009088:	4618      	mov	r0, r3
 800908a:	3714      	adds	r7, #20
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr

08009094 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af00      	add	r7, sp, #0
 800909a:	6078      	str	r0, [r7, #4]
 800909c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d109      	bne.n	80090bc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80090a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ac:	f383 8811 	msr	BASEPRI, r3
 80090b0:	f3bf 8f6f 	isb	sy
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	60bb      	str	r3, [r7, #8]
 80090ba:	e7fe      	b.n	80090ba <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80090bc:	f002 fd7e 	bl	800bbbc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090c8:	68f9      	ldr	r1, [r7, #12]
 80090ca:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80090cc:	fb01 f303 	mul.w	r3, r1, r3
 80090d0:	441a      	add	r2, r3
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	2200      	movs	r2, #0
 80090da:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681a      	ldr	r2, [r3, #0]
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681a      	ldr	r2, [r3, #0]
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090ec:	3b01      	subs	r3, #1
 80090ee:	68f9      	ldr	r1, [r7, #12]
 80090f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80090f2:	fb01 f303 	mul.w	r3, r1, r3
 80090f6:	441a      	add	r2, r3
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	22ff      	movs	r2, #255	; 0xff
 8009100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	22ff      	movs	r2, #255	; 0xff
 8009108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d114      	bne.n	800913c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d01a      	beq.n	8009150 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	3310      	adds	r3, #16
 800911e:	4618      	mov	r0, r3
 8009120:	f001 fb20 	bl	800a764 <xTaskRemoveFromEventList>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d012      	beq.n	8009150 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800912a:	4b0d      	ldr	r3, [pc, #52]	; (8009160 <xQueueGenericReset+0xcc>)
 800912c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009130:	601a      	str	r2, [r3, #0]
 8009132:	f3bf 8f4f 	dsb	sy
 8009136:	f3bf 8f6f 	isb	sy
 800913a:	e009      	b.n	8009150 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	3310      	adds	r3, #16
 8009140:	4618      	mov	r0, r3
 8009142:	f7ff fef3 	bl	8008f2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	3324      	adds	r3, #36	; 0x24
 800914a:	4618      	mov	r0, r3
 800914c:	f7ff feee 	bl	8008f2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009150:	f002 fd62 	bl	800bc18 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009154:	2301      	movs	r3, #1
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
 800915e:	bf00      	nop
 8009160:	e000ed04 	.word	0xe000ed04

08009164 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009164:	b580      	push	{r7, lr}
 8009166:	b08e      	sub	sp, #56	; 0x38
 8009168:	af02      	add	r7, sp, #8
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
 8009170:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	d109      	bne.n	800918c <xQueueGenericCreateStatic+0x28>
 8009178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917c:	f383 8811 	msr	BASEPRI, r3
 8009180:	f3bf 8f6f 	isb	sy
 8009184:	f3bf 8f4f 	dsb	sy
 8009188:	62bb      	str	r3, [r7, #40]	; 0x28
 800918a:	e7fe      	b.n	800918a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d109      	bne.n	80091a6 <xQueueGenericCreateStatic+0x42>
 8009192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009196:	f383 8811 	msr	BASEPRI, r3
 800919a:	f3bf 8f6f 	isb	sy
 800919e:	f3bf 8f4f 	dsb	sy
 80091a2:	627b      	str	r3, [r7, #36]	; 0x24
 80091a4:	e7fe      	b.n	80091a4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <xQueueGenericCreateStatic+0x4e>
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d001      	beq.n	80091b6 <xQueueGenericCreateStatic+0x52>
 80091b2:	2301      	movs	r3, #1
 80091b4:	e000      	b.n	80091b8 <xQueueGenericCreateStatic+0x54>
 80091b6:	2300      	movs	r3, #0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d109      	bne.n	80091d0 <xQueueGenericCreateStatic+0x6c>
 80091bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c0:	f383 8811 	msr	BASEPRI, r3
 80091c4:	f3bf 8f6f 	isb	sy
 80091c8:	f3bf 8f4f 	dsb	sy
 80091cc:	623b      	str	r3, [r7, #32]
 80091ce:	e7fe      	b.n	80091ce <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d102      	bne.n	80091dc <xQueueGenericCreateStatic+0x78>
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d101      	bne.n	80091e0 <xQueueGenericCreateStatic+0x7c>
 80091dc:	2301      	movs	r3, #1
 80091de:	e000      	b.n	80091e2 <xQueueGenericCreateStatic+0x7e>
 80091e0:	2300      	movs	r3, #0
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d109      	bne.n	80091fa <xQueueGenericCreateStatic+0x96>
 80091e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	61fb      	str	r3, [r7, #28]
 80091f8:	e7fe      	b.n	80091f8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80091fa:	2350      	movs	r3, #80	; 0x50
 80091fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	2b50      	cmp	r3, #80	; 0x50
 8009202:	d009      	beq.n	8009218 <xQueueGenericCreateStatic+0xb4>
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	61bb      	str	r3, [r7, #24]
 8009216:	e7fe      	b.n	8009216 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009218:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800921e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009220:	2b00      	cmp	r3, #0
 8009222:	d00d      	beq.n	8009240 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009226:	2201      	movs	r2, #1
 8009228:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800922c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009232:	9300      	str	r3, [sp, #0]
 8009234:	4613      	mov	r3, r2
 8009236:	687a      	ldr	r2, [r7, #4]
 8009238:	68b9      	ldr	r1, [r7, #8]
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f000 f844 	bl	80092c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009242:	4618      	mov	r0, r3
 8009244:	3730      	adds	r7, #48	; 0x30
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800924a:	b580      	push	{r7, lr}
 800924c:	b08a      	sub	sp, #40	; 0x28
 800924e:	af02      	add	r7, sp, #8
 8009250:	60f8      	str	r0, [r7, #12]
 8009252:	60b9      	str	r1, [r7, #8]
 8009254:	4613      	mov	r3, r2
 8009256:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d109      	bne.n	8009272 <xQueueGenericCreate+0x28>
 800925e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	613b      	str	r3, [r7, #16]
 8009270:	e7fe      	b.n	8009270 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009272:	68bb      	ldr	r3, [r7, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d102      	bne.n	800927e <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8009278:	2300      	movs	r3, #0
 800927a:	61fb      	str	r3, [r7, #28]
 800927c:	e004      	b.n	8009288 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	68ba      	ldr	r2, [r7, #8]
 8009282:	fb02 f303 	mul.w	r3, r2, r3
 8009286:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009288:	69fb      	ldr	r3, [r7, #28]
 800928a:	3350      	adds	r3, #80	; 0x50
 800928c:	4618      	mov	r0, r3
 800928e:	f002 fdaf 	bl	800bdf0 <pvPortMalloc>
 8009292:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009294:	69bb      	ldr	r3, [r7, #24]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d011      	beq.n	80092be <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800929a:	69bb      	ldr	r3, [r7, #24]
 800929c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	3350      	adds	r3, #80	; 0x50
 80092a2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80092a4:	69bb      	ldr	r3, [r7, #24]
 80092a6:	2200      	movs	r2, #0
 80092a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80092ac:	79fa      	ldrb	r2, [r7, #7]
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	9300      	str	r3, [sp, #0]
 80092b2:	4613      	mov	r3, r2
 80092b4:	697a      	ldr	r2, [r7, #20]
 80092b6:	68b9      	ldr	r1, [r7, #8]
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 f805 	bl	80092c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80092be:	69bb      	ldr	r3, [r7, #24]
	}
 80092c0:	4618      	mov	r0, r3
 80092c2:	3720      	adds	r7, #32
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}

080092c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
 80092d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d103      	bne.n	80092e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	69ba      	ldr	r2, [r7, #24]
 80092e0:	601a      	str	r2, [r3, #0]
 80092e2:	e002      	b.n	80092ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	687a      	ldr	r2, [r7, #4]
 80092e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80092ea:	69bb      	ldr	r3, [r7, #24]
 80092ec:	68fa      	ldr	r2, [r7, #12]
 80092ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80092f0:	69bb      	ldr	r3, [r7, #24]
 80092f2:	68ba      	ldr	r2, [r7, #8]
 80092f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80092f6:	2101      	movs	r1, #1
 80092f8:	69b8      	ldr	r0, [r7, #24]
 80092fa:	f7ff fecb 	bl	8009094 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80092fe:	69bb      	ldr	r3, [r7, #24]
 8009300:	78fa      	ldrb	r2, [r7, #3]
 8009302:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009306:	bf00      	nop
 8009308:	3710      	adds	r7, #16
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}

0800930e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800930e:	b580      	push	{r7, lr}
 8009310:	b08a      	sub	sp, #40	; 0x28
 8009312:	af02      	add	r7, sp, #8
 8009314:	60f8      	str	r0, [r7, #12]
 8009316:	60b9      	str	r1, [r7, #8]
 8009318:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d109      	bne.n	8009334 <xQueueCreateCountingSemaphoreStatic+0x26>
 8009320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009324:	f383 8811 	msr	BASEPRI, r3
 8009328:	f3bf 8f6f 	isb	sy
 800932c:	f3bf 8f4f 	dsb	sy
 8009330:	61bb      	str	r3, [r7, #24]
 8009332:	e7fe      	b.n	8009332 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009334:	68ba      	ldr	r2, [r7, #8]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	429a      	cmp	r2, r3
 800933a:	d909      	bls.n	8009350 <xQueueCreateCountingSemaphoreStatic+0x42>
 800933c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	617b      	str	r3, [r7, #20]
 800934e:	e7fe      	b.n	800934e <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009350:	2302      	movs	r3, #2
 8009352:	9300      	str	r3, [sp, #0]
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	2100      	movs	r1, #0
 800935a:	68f8      	ldr	r0, [r7, #12]
 800935c:	f7ff ff02 	bl	8009164 <xQueueGenericCreateStatic>
 8009360:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d002      	beq.n	800936e <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009368:	69fb      	ldr	r3, [r7, #28]
 800936a:	68ba      	ldr	r2, [r7, #8]
 800936c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800936e:	69fb      	ldr	r3, [r7, #28]
	}
 8009370:	4618      	mov	r0, r3
 8009372:	3720      	adds	r7, #32
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009378:	b580      	push	{r7, lr}
 800937a:	b086      	sub	sp, #24
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d109      	bne.n	800939c <xQueueCreateCountingSemaphore+0x24>
 8009388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938c:	f383 8811 	msr	BASEPRI, r3
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	613b      	str	r3, [r7, #16]
 800939a:	e7fe      	b.n	800939a <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	429a      	cmp	r2, r3
 80093a2:	d909      	bls.n	80093b8 <xQueueCreateCountingSemaphore+0x40>
 80093a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a8:	f383 8811 	msr	BASEPRI, r3
 80093ac:	f3bf 8f6f 	isb	sy
 80093b0:	f3bf 8f4f 	dsb	sy
 80093b4:	60fb      	str	r3, [r7, #12]
 80093b6:	e7fe      	b.n	80093b6 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80093b8:	2202      	movs	r2, #2
 80093ba:	2100      	movs	r1, #0
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f7ff ff44 	bl	800924a <xQueueGenericCreate>
 80093c2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80093c4:	697b      	ldr	r3, [r7, #20]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d002      	beq.n	80093d0 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	683a      	ldr	r2, [r7, #0]
 80093ce:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80093d0:	697b      	ldr	r3, [r7, #20]
	}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3718      	adds	r7, #24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}
	...

080093dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b08e      	sub	sp, #56	; 0x38
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	607a      	str	r2, [r7, #4]
 80093e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80093ea:	2300      	movs	r3, #0
 80093ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80093f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d109      	bne.n	800940c <xQueueGenericSend+0x30>
 80093f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093fc:	f383 8811 	msr	BASEPRI, r3
 8009400:	f3bf 8f6f 	isb	sy
 8009404:	f3bf 8f4f 	dsb	sy
 8009408:	62bb      	str	r3, [r7, #40]	; 0x28
 800940a:	e7fe      	b.n	800940a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d103      	bne.n	800941a <xQueueGenericSend+0x3e>
 8009412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009416:	2b00      	cmp	r3, #0
 8009418:	d101      	bne.n	800941e <xQueueGenericSend+0x42>
 800941a:	2301      	movs	r3, #1
 800941c:	e000      	b.n	8009420 <xQueueGenericSend+0x44>
 800941e:	2300      	movs	r3, #0
 8009420:	2b00      	cmp	r3, #0
 8009422:	d109      	bne.n	8009438 <xQueueGenericSend+0x5c>
 8009424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009428:	f383 8811 	msr	BASEPRI, r3
 800942c:	f3bf 8f6f 	isb	sy
 8009430:	f3bf 8f4f 	dsb	sy
 8009434:	627b      	str	r3, [r7, #36]	; 0x24
 8009436:	e7fe      	b.n	8009436 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009438:	683b      	ldr	r3, [r7, #0]
 800943a:	2b02      	cmp	r3, #2
 800943c:	d103      	bne.n	8009446 <xQueueGenericSend+0x6a>
 800943e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009442:	2b01      	cmp	r3, #1
 8009444:	d101      	bne.n	800944a <xQueueGenericSend+0x6e>
 8009446:	2301      	movs	r3, #1
 8009448:	e000      	b.n	800944c <xQueueGenericSend+0x70>
 800944a:	2300      	movs	r3, #0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d109      	bne.n	8009464 <xQueueGenericSend+0x88>
 8009450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009454:	f383 8811 	msr	BASEPRI, r3
 8009458:	f3bf 8f6f 	isb	sy
 800945c:	f3bf 8f4f 	dsb	sy
 8009460:	623b      	str	r3, [r7, #32]
 8009462:	e7fe      	b.n	8009462 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009464:	f001 fb34 	bl	800aad0 <xTaskGetSchedulerState>
 8009468:	4603      	mov	r3, r0
 800946a:	2b00      	cmp	r3, #0
 800946c:	d102      	bne.n	8009474 <xQueueGenericSend+0x98>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d101      	bne.n	8009478 <xQueueGenericSend+0x9c>
 8009474:	2301      	movs	r3, #1
 8009476:	e000      	b.n	800947a <xQueueGenericSend+0x9e>
 8009478:	2300      	movs	r3, #0
 800947a:	2b00      	cmp	r3, #0
 800947c:	d109      	bne.n	8009492 <xQueueGenericSend+0xb6>
 800947e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009482:	f383 8811 	msr	BASEPRI, r3
 8009486:	f3bf 8f6f 	isb	sy
 800948a:	f3bf 8f4f 	dsb	sy
 800948e:	61fb      	str	r3, [r7, #28]
 8009490:	e7fe      	b.n	8009490 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009492:	f002 fb93 	bl	800bbbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800949a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800949e:	429a      	cmp	r2, r3
 80094a0:	d302      	bcc.n	80094a8 <xQueueGenericSend+0xcc>
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b02      	cmp	r3, #2
 80094a6:	d129      	bne.n	80094fc <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80094a8:	683a      	ldr	r2, [r7, #0]
 80094aa:	68b9      	ldr	r1, [r7, #8]
 80094ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80094ae:	f000 fb5e 	bl	8009b6e <prvCopyDataToQueue>
 80094b2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d010      	beq.n	80094de <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094be:	3324      	adds	r3, #36	; 0x24
 80094c0:	4618      	mov	r0, r3
 80094c2:	f001 f94f 	bl	800a764 <xTaskRemoveFromEventList>
 80094c6:	4603      	mov	r3, r0
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d013      	beq.n	80094f4 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80094cc:	4b3f      	ldr	r3, [pc, #252]	; (80095cc <xQueueGenericSend+0x1f0>)
 80094ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094d2:	601a      	str	r2, [r3, #0]
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	f3bf 8f6f 	isb	sy
 80094dc:	e00a      	b.n	80094f4 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80094de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d007      	beq.n	80094f4 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80094e4:	4b39      	ldr	r3, [pc, #228]	; (80095cc <xQueueGenericSend+0x1f0>)
 80094e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ea:	601a      	str	r2, [r3, #0]
 80094ec:	f3bf 8f4f 	dsb	sy
 80094f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80094f4:	f002 fb90 	bl	800bc18 <vPortExitCritical>
				return pdPASS;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e063      	b.n	80095c4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d103      	bne.n	800950a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009502:	f002 fb89 	bl	800bc18 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009506:	2300      	movs	r3, #0
 8009508:	e05c      	b.n	80095c4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800950a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800950c:	2b00      	cmp	r3, #0
 800950e:	d106      	bne.n	800951e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009510:	f107 0314 	add.w	r3, r7, #20
 8009514:	4618      	mov	r0, r3
 8009516:	f001 f987 	bl	800a828 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800951a:	2301      	movs	r3, #1
 800951c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800951e:	f002 fb7b 	bl	800bc18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009522:	f000 fef1 	bl	800a308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009526:	f002 fb49 	bl	800bbbc <vPortEnterCritical>
 800952a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800952c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009530:	b25b      	sxtb	r3, r3
 8009532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009536:	d103      	bne.n	8009540 <xQueueGenericSend+0x164>
 8009538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800953a:	2200      	movs	r2, #0
 800953c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009542:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009546:	b25b      	sxtb	r3, r3
 8009548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800954c:	d103      	bne.n	8009556 <xQueueGenericSend+0x17a>
 800954e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009550:	2200      	movs	r2, #0
 8009552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009556:	f002 fb5f 	bl	800bc18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800955a:	1d3a      	adds	r2, r7, #4
 800955c:	f107 0314 	add.w	r3, r7, #20
 8009560:	4611      	mov	r1, r2
 8009562:	4618      	mov	r0, r3
 8009564:	f001 f976 	bl	800a854 <xTaskCheckForTimeOut>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d124      	bne.n	80095b8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800956e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009570:	f000 fbf5 	bl	8009d5e <prvIsQueueFull>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d018      	beq.n	80095ac <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800957a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800957c:	3310      	adds	r3, #16
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	4611      	mov	r1, r2
 8009582:	4618      	mov	r0, r3
 8009584:	f001 f8a0 	bl	800a6c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009588:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800958a:	f000 fb80 	bl	8009c8e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800958e:	f000 fec9 	bl	800a324 <xTaskResumeAll>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	f47f af7c 	bne.w	8009492 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800959a:	4b0c      	ldr	r3, [pc, #48]	; (80095cc <xQueueGenericSend+0x1f0>)
 800959c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80095a0:	601a      	str	r2, [r3, #0]
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	f3bf 8f6f 	isb	sy
 80095aa:	e772      	b.n	8009492 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80095ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095ae:	f000 fb6e 	bl	8009c8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80095b2:	f000 feb7 	bl	800a324 <xTaskResumeAll>
 80095b6:	e76c      	b.n	8009492 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80095b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80095ba:	f000 fb68 	bl	8009c8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80095be:	f000 feb1 	bl	800a324 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80095c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3738      	adds	r7, #56	; 0x38
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	e000ed04 	.word	0xe000ed04

080095d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08e      	sub	sp, #56	; 0x38
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]
 80095dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80095e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d109      	bne.n	80095fc <xQueueGenericSendFromISR+0x2c>
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	627b      	str	r3, [r7, #36]	; 0x24
 80095fa:	e7fe      	b.n	80095fa <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d103      	bne.n	800960a <xQueueGenericSendFromISR+0x3a>
 8009602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009606:	2b00      	cmp	r3, #0
 8009608:	d101      	bne.n	800960e <xQueueGenericSendFromISR+0x3e>
 800960a:	2301      	movs	r3, #1
 800960c:	e000      	b.n	8009610 <xQueueGenericSendFromISR+0x40>
 800960e:	2300      	movs	r3, #0
 8009610:	2b00      	cmp	r3, #0
 8009612:	d109      	bne.n	8009628 <xQueueGenericSendFromISR+0x58>
 8009614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009618:	f383 8811 	msr	BASEPRI, r3
 800961c:	f3bf 8f6f 	isb	sy
 8009620:	f3bf 8f4f 	dsb	sy
 8009624:	623b      	str	r3, [r7, #32]
 8009626:	e7fe      	b.n	8009626 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	2b02      	cmp	r3, #2
 800962c:	d103      	bne.n	8009636 <xQueueGenericSendFromISR+0x66>
 800962e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009632:	2b01      	cmp	r3, #1
 8009634:	d101      	bne.n	800963a <xQueueGenericSendFromISR+0x6a>
 8009636:	2301      	movs	r3, #1
 8009638:	e000      	b.n	800963c <xQueueGenericSendFromISR+0x6c>
 800963a:	2300      	movs	r3, #0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d109      	bne.n	8009654 <xQueueGenericSendFromISR+0x84>
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	61fb      	str	r3, [r7, #28]
 8009652:	e7fe      	b.n	8009652 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009654:	f002 fb8e 	bl	800bd74 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009658:	f3ef 8211 	mrs	r2, BASEPRI
 800965c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009660:	f383 8811 	msr	BASEPRI, r3
 8009664:	f3bf 8f6f 	isb	sy
 8009668:	f3bf 8f4f 	dsb	sy
 800966c:	61ba      	str	r2, [r7, #24]
 800966e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009670:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009672:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800967c:	429a      	cmp	r2, r3
 800967e:	d302      	bcc.n	8009686 <xQueueGenericSendFromISR+0xb6>
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2b02      	cmp	r3, #2
 8009684:	d12c      	bne.n	80096e0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800968c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009690:	683a      	ldr	r2, [r7, #0]
 8009692:	68b9      	ldr	r1, [r7, #8]
 8009694:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009696:	f000 fa6a 	bl	8009b6e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800969a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800969e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096a2:	d112      	bne.n	80096ca <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80096a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d016      	beq.n	80096da <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80096ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ae:	3324      	adds	r3, #36	; 0x24
 80096b0:	4618      	mov	r0, r3
 80096b2:	f001 f857 	bl	800a764 <xTaskRemoveFromEventList>
 80096b6:	4603      	mov	r3, r0
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00e      	beq.n	80096da <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00b      	beq.n	80096da <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	2201      	movs	r2, #1
 80096c6:	601a      	str	r2, [r3, #0]
 80096c8:	e007      	b.n	80096da <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80096ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80096ce:	3301      	adds	r3, #1
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	b25a      	sxtb	r2, r3
 80096d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80096da:	2301      	movs	r3, #1
 80096dc:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80096de:	e001      	b.n	80096e4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80096e0:	2300      	movs	r3, #0
 80096e2:	637b      	str	r3, [r7, #52]	; 0x34
 80096e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096e6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80096ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80096f0:	4618      	mov	r0, r3
 80096f2:	3738      	adds	r7, #56	; 0x38
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b08c      	sub	sp, #48	; 0x30
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009704:	2300      	movs	r3, #0
 8009706:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800970c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800970e:	2b00      	cmp	r3, #0
 8009710:	d109      	bne.n	8009726 <xQueueReceive+0x2e>
	__asm volatile
 8009712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	623b      	str	r3, [r7, #32]
 8009724:	e7fe      	b.n	8009724 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009726:	68bb      	ldr	r3, [r7, #8]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d103      	bne.n	8009734 <xQueueReceive+0x3c>
 800972c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009730:	2b00      	cmp	r3, #0
 8009732:	d101      	bne.n	8009738 <xQueueReceive+0x40>
 8009734:	2301      	movs	r3, #1
 8009736:	e000      	b.n	800973a <xQueueReceive+0x42>
 8009738:	2300      	movs	r3, #0
 800973a:	2b00      	cmp	r3, #0
 800973c:	d109      	bne.n	8009752 <xQueueReceive+0x5a>
 800973e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009742:	f383 8811 	msr	BASEPRI, r3
 8009746:	f3bf 8f6f 	isb	sy
 800974a:	f3bf 8f4f 	dsb	sy
 800974e:	61fb      	str	r3, [r7, #28]
 8009750:	e7fe      	b.n	8009750 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009752:	f001 f9bd 	bl	800aad0 <xTaskGetSchedulerState>
 8009756:	4603      	mov	r3, r0
 8009758:	2b00      	cmp	r3, #0
 800975a:	d102      	bne.n	8009762 <xQueueReceive+0x6a>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d101      	bne.n	8009766 <xQueueReceive+0x6e>
 8009762:	2301      	movs	r3, #1
 8009764:	e000      	b.n	8009768 <xQueueReceive+0x70>
 8009766:	2300      	movs	r3, #0
 8009768:	2b00      	cmp	r3, #0
 800976a:	d109      	bne.n	8009780 <xQueueReceive+0x88>
 800976c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009770:	f383 8811 	msr	BASEPRI, r3
 8009774:	f3bf 8f6f 	isb	sy
 8009778:	f3bf 8f4f 	dsb	sy
 800977c:	61bb      	str	r3, [r7, #24]
 800977e:	e7fe      	b.n	800977e <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009780:	f002 fa1c 	bl	800bbbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009788:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978c:	2b00      	cmp	r3, #0
 800978e:	d01f      	beq.n	80097d0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009790:	68b9      	ldr	r1, [r7, #8]
 8009792:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009794:	f000 fa55 	bl	8009c42 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979a:	1e5a      	subs	r2, r3, #1
 800979c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800979e:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80097a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00f      	beq.n	80097c8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80097a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097aa:	3310      	adds	r3, #16
 80097ac:	4618      	mov	r0, r3
 80097ae:	f000 ffd9 	bl	800a764 <xTaskRemoveFromEventList>
 80097b2:	4603      	mov	r3, r0
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d007      	beq.n	80097c8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80097b8:	4b3c      	ldr	r3, [pc, #240]	; (80098ac <xQueueReceive+0x1b4>)
 80097ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80097c8:	f002 fa26 	bl	800bc18 <vPortExitCritical>
				return pdPASS;
 80097cc:	2301      	movs	r3, #1
 80097ce:	e069      	b.n	80098a4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d103      	bne.n	80097de <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80097d6:	f002 fa1f 	bl	800bc18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80097da:	2300      	movs	r3, #0
 80097dc:	e062      	b.n	80098a4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80097de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d106      	bne.n	80097f2 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097e4:	f107 0310 	add.w	r3, r7, #16
 80097e8:	4618      	mov	r0, r3
 80097ea:	f001 f81d 	bl	800a828 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097ee:	2301      	movs	r3, #1
 80097f0:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097f2:	f002 fa11 	bl	800bc18 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097f6:	f000 fd87 	bl	800a308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097fa:	f002 f9df 	bl	800bbbc <vPortEnterCritical>
 80097fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009800:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009804:	b25b      	sxtb	r3, r3
 8009806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800980a:	d103      	bne.n	8009814 <xQueueReceive+0x11c>
 800980c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980e:	2200      	movs	r2, #0
 8009810:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009816:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800981a:	b25b      	sxtb	r3, r3
 800981c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009820:	d103      	bne.n	800982a <xQueueReceive+0x132>
 8009822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009824:	2200      	movs	r2, #0
 8009826:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800982a:	f002 f9f5 	bl	800bc18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800982e:	1d3a      	adds	r2, r7, #4
 8009830:	f107 0310 	add.w	r3, r7, #16
 8009834:	4611      	mov	r1, r2
 8009836:	4618      	mov	r0, r3
 8009838:	f001 f80c 	bl	800a854 <xTaskCheckForTimeOut>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	d123      	bne.n	800988a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009842:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009844:	f000 fa75 	bl	8009d32 <prvIsQueueEmpty>
 8009848:	4603      	mov	r3, r0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d017      	beq.n	800987e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800984e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009850:	3324      	adds	r3, #36	; 0x24
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	4611      	mov	r1, r2
 8009856:	4618      	mov	r0, r3
 8009858:	f000 ff36 	bl	800a6c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800985c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800985e:	f000 fa16 	bl	8009c8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009862:	f000 fd5f 	bl	800a324 <xTaskResumeAll>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d189      	bne.n	8009780 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800986c:	4b0f      	ldr	r3, [pc, #60]	; (80098ac <xQueueReceive+0x1b4>)
 800986e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009872:	601a      	str	r2, [r3, #0]
 8009874:	f3bf 8f4f 	dsb	sy
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	e780      	b.n	8009780 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800987e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009880:	f000 fa05 	bl	8009c8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009884:	f000 fd4e 	bl	800a324 <xTaskResumeAll>
 8009888:	e77a      	b.n	8009780 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800988a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800988c:	f000 f9ff 	bl	8009c8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009890:	f000 fd48 	bl	800a324 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009896:	f000 fa4c 	bl	8009d32 <prvIsQueueEmpty>
 800989a:	4603      	mov	r3, r0
 800989c:	2b00      	cmp	r3, #0
 800989e:	f43f af6f 	beq.w	8009780 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80098a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3730      	adds	r7, #48	; 0x30
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	e000ed04 	.word	0xe000ed04

080098b0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b08e      	sub	sp, #56	; 0x38
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
 80098b8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80098ba:	2300      	movs	r3, #0
 80098bc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80098c2:	2300      	movs	r3, #0
 80098c4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80098c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d109      	bne.n	80098e0 <xQueueSemaphoreTake+0x30>
 80098cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d0:	f383 8811 	msr	BASEPRI, r3
 80098d4:	f3bf 8f6f 	isb	sy
 80098d8:	f3bf 8f4f 	dsb	sy
 80098dc:	623b      	str	r3, [r7, #32]
 80098de:	e7fe      	b.n	80098de <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80098e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d009      	beq.n	80098fc <xQueueSemaphoreTake+0x4c>
 80098e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ec:	f383 8811 	msr	BASEPRI, r3
 80098f0:	f3bf 8f6f 	isb	sy
 80098f4:	f3bf 8f4f 	dsb	sy
 80098f8:	61fb      	str	r3, [r7, #28]
 80098fa:	e7fe      	b.n	80098fa <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80098fc:	f001 f8e8 	bl	800aad0 <xTaskGetSchedulerState>
 8009900:	4603      	mov	r3, r0
 8009902:	2b00      	cmp	r3, #0
 8009904:	d102      	bne.n	800990c <xQueueSemaphoreTake+0x5c>
 8009906:	683b      	ldr	r3, [r7, #0]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d101      	bne.n	8009910 <xQueueSemaphoreTake+0x60>
 800990c:	2301      	movs	r3, #1
 800990e:	e000      	b.n	8009912 <xQueueSemaphoreTake+0x62>
 8009910:	2300      	movs	r3, #0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d109      	bne.n	800992a <xQueueSemaphoreTake+0x7a>
 8009916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	61bb      	str	r3, [r7, #24]
 8009928:	e7fe      	b.n	8009928 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800992a:	f002 f947 	bl	800bbbc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800992e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009932:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009936:	2b00      	cmp	r3, #0
 8009938:	d024      	beq.n	8009984 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800993a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993c:	1e5a      	subs	r2, r3, #1
 800993e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009940:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d104      	bne.n	8009954 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800994a:	f001 fa33 	bl	800adb4 <pvTaskIncrementMutexHeldCount>
 800994e:	4602      	mov	r2, r0
 8009950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009952:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009956:	691b      	ldr	r3, [r3, #16]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d00f      	beq.n	800997c <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800995c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995e:	3310      	adds	r3, #16
 8009960:	4618      	mov	r0, r3
 8009962:	f000 feff 	bl	800a764 <xTaskRemoveFromEventList>
 8009966:	4603      	mov	r3, r0
 8009968:	2b00      	cmp	r3, #0
 800996a:	d007      	beq.n	800997c <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800996c:	4b53      	ldr	r3, [pc, #332]	; (8009abc <xQueueSemaphoreTake+0x20c>)
 800996e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009972:	601a      	str	r2, [r3, #0]
 8009974:	f3bf 8f4f 	dsb	sy
 8009978:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800997c:	f002 f94c 	bl	800bc18 <vPortExitCritical>
				return pdPASS;
 8009980:	2301      	movs	r3, #1
 8009982:	e096      	b.n	8009ab2 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d110      	bne.n	80099ac <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800998a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998c:	2b00      	cmp	r3, #0
 800998e:	d009      	beq.n	80099a4 <xQueueSemaphoreTake+0xf4>
 8009990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009994:	f383 8811 	msr	BASEPRI, r3
 8009998:	f3bf 8f6f 	isb	sy
 800999c:	f3bf 8f4f 	dsb	sy
 80099a0:	617b      	str	r3, [r7, #20]
 80099a2:	e7fe      	b.n	80099a2 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80099a4:	f002 f938 	bl	800bc18 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80099a8:	2300      	movs	r3, #0
 80099aa:	e082      	b.n	8009ab2 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 80099ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d106      	bne.n	80099c0 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80099b2:	f107 030c 	add.w	r3, r7, #12
 80099b6:	4618      	mov	r0, r3
 80099b8:	f000 ff36 	bl	800a828 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80099bc:	2301      	movs	r3, #1
 80099be:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80099c0:	f002 f92a 	bl	800bc18 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80099c4:	f000 fca0 	bl	800a308 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80099c8:	f002 f8f8 	bl	800bbbc <vPortEnterCritical>
 80099cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099ce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80099d2:	b25b      	sxtb	r3, r3
 80099d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099d8:	d103      	bne.n	80099e2 <xQueueSemaphoreTake+0x132>
 80099da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099dc:	2200      	movs	r2, #0
 80099de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80099e8:	b25b      	sxtb	r3, r3
 80099ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ee:	d103      	bne.n	80099f8 <xQueueSemaphoreTake+0x148>
 80099f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f2:	2200      	movs	r2, #0
 80099f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099f8:	f002 f90e 	bl	800bc18 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80099fc:	463a      	mov	r2, r7
 80099fe:	f107 030c 	add.w	r3, r7, #12
 8009a02:	4611      	mov	r1, r2
 8009a04:	4618      	mov	r0, r3
 8009a06:	f000 ff25 	bl	800a854 <xTaskCheckForTimeOut>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d132      	bne.n	8009a76 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a12:	f000 f98e 	bl	8009d32 <prvIsQueueEmpty>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d026      	beq.n	8009a6a <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d109      	bne.n	8009a38 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009a24:	f002 f8ca 	bl	800bbbc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	f001 f86d 	bl	800ab0c <xTaskPriorityInherit>
 8009a32:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009a34:	f002 f8f0 	bl	800bc18 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3a:	3324      	adds	r3, #36	; 0x24
 8009a3c:	683a      	ldr	r2, [r7, #0]
 8009a3e:	4611      	mov	r1, r2
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 fe41 	bl	800a6c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009a46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a48:	f000 f921 	bl	8009c8e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009a4c:	f000 fc6a 	bl	800a324 <xTaskResumeAll>
 8009a50:	4603      	mov	r3, r0
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	f47f af69 	bne.w	800992a <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8009a58:	4b18      	ldr	r3, [pc, #96]	; (8009abc <xQueueSemaphoreTake+0x20c>)
 8009a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a5e:	601a      	str	r2, [r3, #0]
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	e75f      	b.n	800992a <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009a6a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a6c:	f000 f90f 	bl	8009c8e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009a70:	f000 fc58 	bl	800a324 <xTaskResumeAll>
 8009a74:	e759      	b.n	800992a <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009a76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a78:	f000 f909 	bl	8009c8e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009a7c:	f000 fc52 	bl	800a324 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009a80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a82:	f000 f956 	bl	8009d32 <prvIsQueueEmpty>
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	f43f af4e 	beq.w	800992a <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d00d      	beq.n	8009ab0 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8009a94:	f002 f892 	bl	800bbbc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009a98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009a9a:	f000 f850 	bl	8009b3e <prvGetDisinheritPriorityAfterTimeout>
 8009a9e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f001 f904 	bl	800acb4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009aac:	f002 f8b4 	bl	800bc18 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ab0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3738      	adds	r7, #56	; 0x38
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	e000ed04 	.word	0xe000ed04

08009ac0 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d109      	bne.n	8009ae2 <uxQueueMessagesWaiting+0x22>
 8009ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad2:	f383 8811 	msr	BASEPRI, r3
 8009ad6:	f3bf 8f6f 	isb	sy
 8009ada:	f3bf 8f4f 	dsb	sy
 8009ade:	60bb      	str	r3, [r7, #8]
 8009ae0:	e7fe      	b.n	8009ae0 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8009ae2:	f002 f86b 	bl	800bbbc <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aea:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009aec:	f002 f894 	bl	800bc18 <vPortExitCritical>

	return uxReturn;
 8009af0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009af2:	4618      	mov	r0, r3
 8009af4:	3710      	adds	r7, #16
 8009af6:	46bd      	mov	sp, r7
 8009af8:	bd80      	pop	{r7, pc}

08009afa <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009afa:	b580      	push	{r7, lr}
 8009afc:	b084      	sub	sp, #16
 8009afe:	af00      	add	r7, sp, #0
 8009b00:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d109      	bne.n	8009b20 <vQueueDelete+0x26>
 8009b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	60bb      	str	r3, [r7, #8]
 8009b1e:	e7fe      	b.n	8009b1e <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009b20:	68f8      	ldr	r0, [r7, #12]
 8009b22:	f000 f95d 	bl	8009de0 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d102      	bne.n	8009b36 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f002 fa1f 	bl	800bf74 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009b36:	bf00      	nop
 8009b38:	3710      	adds	r7, #16
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009b3e:	b480      	push	{r7}
 8009b40:	b085      	sub	sp, #20
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d006      	beq.n	8009b5c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009b58:	60fb      	str	r3, [r7, #12]
 8009b5a:	e001      	b.n	8009b60 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009b60:	68fb      	ldr	r3, [r7, #12]
	}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3714      	adds	r7, #20
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr

08009b6e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009b6e:	b580      	push	{r7, lr}
 8009b70:	b086      	sub	sp, #24
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	60f8      	str	r0, [r7, #12]
 8009b76:	60b9      	str	r1, [r7, #8]
 8009b78:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b82:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10d      	bne.n	8009ba8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d14d      	bne.n	8009c30 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f001 f81f 	bl	800abdc <xTaskPriorityDisinherit>
 8009b9e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	609a      	str	r2, [r3, #8]
 8009ba6:	e043      	b.n	8009c30 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d119      	bne.n	8009be2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	6858      	ldr	r0, [r3, #4]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	68b9      	ldr	r1, [r7, #8]
 8009bba:	f002 fb13 	bl	800c1e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	685a      	ldr	r2, [r3, #4]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bc6:	441a      	add	r2, r3
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	685a      	ldr	r2, [r3, #4]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d32b      	bcc.n	8009c30 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	605a      	str	r2, [r3, #4]
 8009be0:	e026      	b.n	8009c30 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	68d8      	ldr	r0, [r3, #12]
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bea:	461a      	mov	r2, r3
 8009bec:	68b9      	ldr	r1, [r7, #8]
 8009bee:	f002 faf9 	bl	800c1e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	68da      	ldr	r2, [r3, #12]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bfa:	425b      	negs	r3, r3
 8009bfc:	441a      	add	r2, r3
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	68da      	ldr	r2, [r3, #12]
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d207      	bcs.n	8009c1e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	689a      	ldr	r2, [r3, #8]
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c16:	425b      	negs	r3, r3
 8009c18:	441a      	add	r2, r3
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	2b02      	cmp	r3, #2
 8009c22:	d105      	bne.n	8009c30 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009c24:	693b      	ldr	r3, [r7, #16]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d002      	beq.n	8009c30 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	3b01      	subs	r3, #1
 8009c2e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009c30:	693b      	ldr	r3, [r7, #16]
 8009c32:	1c5a      	adds	r2, r3, #1
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009c38:	697b      	ldr	r3, [r7, #20]
}
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	3718      	adds	r7, #24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}

08009c42 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009c42:	b580      	push	{r7, lr}
 8009c44:	b082      	sub	sp, #8
 8009c46:	af00      	add	r7, sp, #0
 8009c48:	6078      	str	r0, [r7, #4]
 8009c4a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d018      	beq.n	8009c86 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	68da      	ldr	r2, [r3, #12]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c5c:	441a      	add	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	68da      	ldr	r2, [r3, #12]
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d303      	bcc.n	8009c76 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681a      	ldr	r2, [r3, #0]
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	68d9      	ldr	r1, [r3, #12]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c7e:	461a      	mov	r2, r3
 8009c80:	6838      	ldr	r0, [r7, #0]
 8009c82:	f002 faaf 	bl	800c1e4 <memcpy>
	}
}
 8009c86:	bf00      	nop
 8009c88:	3708      	adds	r7, #8
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}

08009c8e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009c8e:	b580      	push	{r7, lr}
 8009c90:	b084      	sub	sp, #16
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009c96:	f001 ff91 	bl	800bbbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ca0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009ca2:	e011      	b.n	8009cc8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d012      	beq.n	8009cd2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	3324      	adds	r3, #36	; 0x24
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	f000 fd57 	bl	800a764 <xTaskRemoveFromEventList>
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d001      	beq.n	8009cc0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009cbc:	f000 fe2a 	bl	800a914 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	3b01      	subs	r3, #1
 8009cc4:	b2db      	uxtb	r3, r3
 8009cc6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009cc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	dce9      	bgt.n	8009ca4 <prvUnlockQueue+0x16>
 8009cd0:	e000      	b.n	8009cd4 <prvUnlockQueue+0x46>
					break;
 8009cd2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	22ff      	movs	r2, #255	; 0xff
 8009cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009cdc:	f001 ff9c 	bl	800bc18 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009ce0:	f001 ff6c 	bl	800bbbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009cea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009cec:	e011      	b.n	8009d12 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d012      	beq.n	8009d1c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	3310      	adds	r3, #16
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	f000 fd32 	bl	800a764 <xTaskRemoveFromEventList>
 8009d00:	4603      	mov	r3, r0
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d001      	beq.n	8009d0a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009d06:	f000 fe05 	bl	800a914 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009d0a:	7bbb      	ldrb	r3, [r7, #14]
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009d12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	dce9      	bgt.n	8009cee <prvUnlockQueue+0x60>
 8009d1a:	e000      	b.n	8009d1e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009d1c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	22ff      	movs	r2, #255	; 0xff
 8009d22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009d26:	f001 ff77 	bl	800bc18 <vPortExitCritical>
}
 8009d2a:	bf00      	nop
 8009d2c:	3710      	adds	r7, #16
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}

08009d32 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b084      	sub	sp, #16
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d3a:	f001 ff3f 	bl	800bbbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d102      	bne.n	8009d4c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009d46:	2301      	movs	r3, #1
 8009d48:	60fb      	str	r3, [r7, #12]
 8009d4a:	e001      	b.n	8009d50 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d50:	f001 ff62 	bl	800bc18 <vPortExitCritical>

	return xReturn;
 8009d54:	68fb      	ldr	r3, [r7, #12]
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3710      	adds	r7, #16
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	bd80      	pop	{r7, pc}

08009d5e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009d5e:	b580      	push	{r7, lr}
 8009d60:	b084      	sub	sp, #16
 8009d62:	af00      	add	r7, sp, #0
 8009d64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009d66:	f001 ff29 	bl	800bbbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d72:	429a      	cmp	r2, r3
 8009d74:	d102      	bne.n	8009d7c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009d76:	2301      	movs	r3, #1
 8009d78:	60fb      	str	r3, [r7, #12]
 8009d7a:	e001      	b.n	8009d80 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009d80:	f001 ff4a 	bl	800bc18 <vPortExitCritical>

	return xReturn;
 8009d84:	68fb      	ldr	r3, [r7, #12]
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3710      	adds	r7, #16
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
	...

08009d90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	60fb      	str	r3, [r7, #12]
 8009d9e:	e014      	b.n	8009dca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009da0:	4a0e      	ldr	r2, [pc, #56]	; (8009ddc <vQueueAddToRegistry+0x4c>)
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	d10b      	bne.n	8009dc4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009dac:	490b      	ldr	r1, [pc, #44]	; (8009ddc <vQueueAddToRegistry+0x4c>)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	683a      	ldr	r2, [r7, #0]
 8009db2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009db6:	4a09      	ldr	r2, [pc, #36]	; (8009ddc <vQueueAddToRegistry+0x4c>)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	00db      	lsls	r3, r3, #3
 8009dbc:	4413      	add	r3, r2
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009dc2:	e005      	b.n	8009dd0 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	60fb      	str	r3, [r7, #12]
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2b07      	cmp	r3, #7
 8009dce:	d9e7      	bls.n	8009da0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009dd0:	bf00      	nop
 8009dd2:	3714      	adds	r7, #20
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dda:	4770      	bx	lr
 8009ddc:	2400502c 	.word	0x2400502c

08009de0 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009de0:	b480      	push	{r7}
 8009de2:	b085      	sub	sp, #20
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009de8:	2300      	movs	r3, #0
 8009dea:	60fb      	str	r3, [r7, #12]
 8009dec:	e016      	b.n	8009e1c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009dee:	4a10      	ldr	r2, [pc, #64]	; (8009e30 <vQueueUnregisterQueue+0x50>)
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	00db      	lsls	r3, r3, #3
 8009df4:	4413      	add	r3, r2
 8009df6:	685b      	ldr	r3, [r3, #4]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d10b      	bne.n	8009e16 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009dfe:	4a0c      	ldr	r2, [pc, #48]	; (8009e30 <vQueueUnregisterQueue+0x50>)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2100      	movs	r1, #0
 8009e04:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009e08:	4a09      	ldr	r2, [pc, #36]	; (8009e30 <vQueueUnregisterQueue+0x50>)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	00db      	lsls	r3, r3, #3
 8009e0e:	4413      	add	r3, r2
 8009e10:	2200      	movs	r2, #0
 8009e12:	605a      	str	r2, [r3, #4]
				break;
 8009e14:	e005      	b.n	8009e22 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	60fb      	str	r3, [r7, #12]
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2b07      	cmp	r3, #7
 8009e20:	d9e5      	bls.n	8009dee <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8009e22:	bf00      	nop
 8009e24:	3714      	adds	r7, #20
 8009e26:	46bd      	mov	sp, r7
 8009e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2c:	4770      	bx	lr
 8009e2e:	bf00      	nop
 8009e30:	2400502c 	.word	0x2400502c

08009e34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009e44:	f001 feba 	bl	800bbbc <vPortEnterCritical>
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e4e:	b25b      	sxtb	r3, r3
 8009e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e54:	d103      	bne.n	8009e5e <vQueueWaitForMessageRestricted+0x2a>
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e64:	b25b      	sxtb	r3, r3
 8009e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e6a:	d103      	bne.n	8009e74 <vQueueWaitForMessageRestricted+0x40>
 8009e6c:	697b      	ldr	r3, [r7, #20]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e74:	f001 fed0 	bl	800bc18 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d106      	bne.n	8009e8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009e80:	697b      	ldr	r3, [r7, #20]
 8009e82:	3324      	adds	r3, #36	; 0x24
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	68b9      	ldr	r1, [r7, #8]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f000 fc41 	bl	800a710 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009e8e:	6978      	ldr	r0, [r7, #20]
 8009e90:	f7ff fefd 	bl	8009c8e <prvUnlockQueue>
	}
 8009e94:	bf00      	nop
 8009e96:	3718      	adds	r7, #24
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b08e      	sub	sp, #56	; 0x38
 8009ea0:	af04      	add	r7, sp, #16
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
 8009ea8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d109      	bne.n	8009ec4 <xTaskCreateStatic+0x28>
 8009eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb4:	f383 8811 	msr	BASEPRI, r3
 8009eb8:	f3bf 8f6f 	isb	sy
 8009ebc:	f3bf 8f4f 	dsb	sy
 8009ec0:	623b      	str	r3, [r7, #32]
 8009ec2:	e7fe      	b.n	8009ec2 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8009ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d109      	bne.n	8009ede <xTaskCreateStatic+0x42>
 8009eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	61fb      	str	r3, [r7, #28]
 8009edc:	e7fe      	b.n	8009edc <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009ede:	235c      	movs	r3, #92	; 0x5c
 8009ee0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	2b5c      	cmp	r3, #92	; 0x5c
 8009ee6:	d009      	beq.n	8009efc <xTaskCreateStatic+0x60>
 8009ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eec:	f383 8811 	msr	BASEPRI, r3
 8009ef0:	f3bf 8f6f 	isb	sy
 8009ef4:	f3bf 8f4f 	dsb	sy
 8009ef8:	61bb      	str	r3, [r7, #24]
 8009efa:	e7fe      	b.n	8009efa <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009efc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d01e      	beq.n	8009f42 <xTaskCreateStatic+0xa6>
 8009f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d01b      	beq.n	8009f42 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f0c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f10:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f12:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	2202      	movs	r2, #2
 8009f18:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	9303      	str	r3, [sp, #12]
 8009f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f22:	9302      	str	r3, [sp, #8]
 8009f24:	f107 0314 	add.w	r3, r7, #20
 8009f28:	9301      	str	r3, [sp, #4]
 8009f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f2c:	9300      	str	r3, [sp, #0]
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	687a      	ldr	r2, [r7, #4]
 8009f32:	68b9      	ldr	r1, [r7, #8]
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	f000 f850 	bl	8009fda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009f3a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f3c:	f000 f8dc 	bl	800a0f8 <prvAddNewTaskToReadyList>
 8009f40:	e001      	b.n	8009f46 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8009f42:	2300      	movs	r3, #0
 8009f44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009f46:	697b      	ldr	r3, [r7, #20]
	}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3728      	adds	r7, #40	; 0x28
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b08c      	sub	sp, #48	; 0x30
 8009f54:	af04      	add	r7, sp, #16
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	603b      	str	r3, [r7, #0]
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009f60:	88fb      	ldrh	r3, [r7, #6]
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4618      	mov	r0, r3
 8009f66:	f001 ff43 	bl	800bdf0 <pvPortMalloc>
 8009f6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d00e      	beq.n	8009f90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009f72:	205c      	movs	r0, #92	; 0x5c
 8009f74:	f001 ff3c 	bl	800bdf0 <pvPortMalloc>
 8009f78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d003      	beq.n	8009f88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009f80:	69fb      	ldr	r3, [r7, #28]
 8009f82:	697a      	ldr	r2, [r7, #20]
 8009f84:	631a      	str	r2, [r3, #48]	; 0x30
 8009f86:	e005      	b.n	8009f94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009f88:	6978      	ldr	r0, [r7, #20]
 8009f8a:	f001 fff3 	bl	800bf74 <vPortFree>
 8009f8e:	e001      	b.n	8009f94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009f90:	2300      	movs	r3, #0
 8009f92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009f94:	69fb      	ldr	r3, [r7, #28]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d017      	beq.n	8009fca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009fa2:	88fa      	ldrh	r2, [r7, #6]
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	9303      	str	r3, [sp, #12]
 8009fa8:	69fb      	ldr	r3, [r7, #28]
 8009faa:	9302      	str	r3, [sp, #8]
 8009fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fae:	9301      	str	r3, [sp, #4]
 8009fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	68b9      	ldr	r1, [r7, #8]
 8009fb8:	68f8      	ldr	r0, [r7, #12]
 8009fba:	f000 f80e 	bl	8009fda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009fbe:	69f8      	ldr	r0, [r7, #28]
 8009fc0:	f000 f89a 	bl	800a0f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	61bb      	str	r3, [r7, #24]
 8009fc8:	e002      	b.n	8009fd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009fca:	f04f 33ff 	mov.w	r3, #4294967295
 8009fce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009fd0:	69bb      	ldr	r3, [r7, #24]
	}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	3720      	adds	r7, #32
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b088      	sub	sp, #32
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	60f8      	str	r0, [r7, #12]
 8009fe2:	60b9      	str	r1, [r7, #8]
 8009fe4:	607a      	str	r2, [r7, #4]
 8009fe6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fea:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	461a      	mov	r2, r3
 8009ff2:	21a5      	movs	r1, #165	; 0xa5
 8009ff4:	f002 f901 	bl	800c1fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ffa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ffc:	6879      	ldr	r1, [r7, #4]
 8009ffe:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800a002:	440b      	add	r3, r1
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	4413      	add	r3, r2
 800a008:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a00a:	69bb      	ldr	r3, [r7, #24]
 800a00c:	f023 0307 	bic.w	r3, r3, #7
 800a010:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	f003 0307 	and.w	r3, r3, #7
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d009      	beq.n	800a030 <prvInitialiseNewTask+0x56>
 800a01c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a020:	f383 8811 	msr	BASEPRI, r3
 800a024:	f3bf 8f6f 	isb	sy
 800a028:	f3bf 8f4f 	dsb	sy
 800a02c:	617b      	str	r3, [r7, #20]
 800a02e:	e7fe      	b.n	800a02e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d01f      	beq.n	800a076 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a036:	2300      	movs	r3, #0
 800a038:	61fb      	str	r3, [r7, #28]
 800a03a:	e012      	b.n	800a062 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a03c:	68ba      	ldr	r2, [r7, #8]
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	4413      	add	r3, r2
 800a042:	7819      	ldrb	r1, [r3, #0]
 800a044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a046:	69fb      	ldr	r3, [r7, #28]
 800a048:	4413      	add	r3, r2
 800a04a:	3334      	adds	r3, #52	; 0x34
 800a04c:	460a      	mov	r2, r1
 800a04e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	4413      	add	r3, r2
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d006      	beq.n	800a06a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	3301      	adds	r3, #1
 800a060:	61fb      	str	r3, [r7, #28]
 800a062:	69fb      	ldr	r3, [r7, #28]
 800a064:	2b0f      	cmp	r3, #15
 800a066:	d9e9      	bls.n	800a03c <prvInitialiseNewTask+0x62>
 800a068:	e000      	b.n	800a06c <prvInitialiseNewTask+0x92>
			{
				break;
 800a06a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06e:	2200      	movs	r2, #0
 800a070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a074:	e003      	b.n	800a07e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a078:	2200      	movs	r2, #0
 800a07a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a080:	2b37      	cmp	r3, #55	; 0x37
 800a082:	d901      	bls.n	800a088 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a084:	2337      	movs	r3, #55	; 0x37
 800a086:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a08a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a08c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a090:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a092:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a096:	2200      	movs	r2, #0
 800a098:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	3304      	adds	r3, #4
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fe ff64 	bl	8008f6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0a6:	3318      	adds	r3, #24
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fe ff5f 	bl	8008f6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a0ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a0ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a0c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a0ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a0d2:	683a      	ldr	r2, [r7, #0]
 800a0d4:	68f9      	ldr	r1, [r7, #12]
 800a0d6:	69b8      	ldr	r0, [r7, #24]
 800a0d8:	f001 fc4a 	bl	800b970 <pxPortInitialiseStack>
 800a0dc:	4602      	mov	r2, r0
 800a0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a0e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a0ee:	bf00      	nop
 800a0f0:	3720      	adds	r7, #32
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}
	...

0800a0f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a100:	f001 fd5c 	bl	800bbbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a104:	4b2d      	ldr	r3, [pc, #180]	; (800a1bc <prvAddNewTaskToReadyList+0xc4>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3301      	adds	r3, #1
 800a10a:	4a2c      	ldr	r2, [pc, #176]	; (800a1bc <prvAddNewTaskToReadyList+0xc4>)
 800a10c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a10e:	4b2c      	ldr	r3, [pc, #176]	; (800a1c0 <prvAddNewTaskToReadyList+0xc8>)
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d109      	bne.n	800a12a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a116:	4a2a      	ldr	r2, [pc, #168]	; (800a1c0 <prvAddNewTaskToReadyList+0xc8>)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a11c:	4b27      	ldr	r3, [pc, #156]	; (800a1bc <prvAddNewTaskToReadyList+0xc4>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2b01      	cmp	r3, #1
 800a122:	d110      	bne.n	800a146 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a124:	f000 fc1a 	bl	800a95c <prvInitialiseTaskLists>
 800a128:	e00d      	b.n	800a146 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a12a:	4b26      	ldr	r3, [pc, #152]	; (800a1c4 <prvAddNewTaskToReadyList+0xcc>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d109      	bne.n	800a146 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a132:	4b23      	ldr	r3, [pc, #140]	; (800a1c0 <prvAddNewTaskToReadyList+0xc8>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d802      	bhi.n	800a146 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a140:	4a1f      	ldr	r2, [pc, #124]	; (800a1c0 <prvAddNewTaskToReadyList+0xc8>)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a146:	4b20      	ldr	r3, [pc, #128]	; (800a1c8 <prvAddNewTaskToReadyList+0xd0>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	3301      	adds	r3, #1
 800a14c:	4a1e      	ldr	r2, [pc, #120]	; (800a1c8 <prvAddNewTaskToReadyList+0xd0>)
 800a14e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a150:	4b1d      	ldr	r3, [pc, #116]	; (800a1c8 <prvAddNewTaskToReadyList+0xd0>)
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a15c:	4b1b      	ldr	r3, [pc, #108]	; (800a1cc <prvAddNewTaskToReadyList+0xd4>)
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	429a      	cmp	r2, r3
 800a162:	d903      	bls.n	800a16c <prvAddNewTaskToReadyList+0x74>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a168:	4a18      	ldr	r2, [pc, #96]	; (800a1cc <prvAddNewTaskToReadyList+0xd4>)
 800a16a:	6013      	str	r3, [r2, #0]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a170:	4613      	mov	r3, r2
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	4413      	add	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4a15      	ldr	r2, [pc, #84]	; (800a1d0 <prvAddNewTaskToReadyList+0xd8>)
 800a17a:	441a      	add	r2, r3
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	3304      	adds	r3, #4
 800a180:	4619      	mov	r1, r3
 800a182:	4610      	mov	r0, r2
 800a184:	f7fe feff 	bl	8008f86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a188:	f001 fd46 	bl	800bc18 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a18c:	4b0d      	ldr	r3, [pc, #52]	; (800a1c4 <prvAddNewTaskToReadyList+0xcc>)
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d00e      	beq.n	800a1b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a194:	4b0a      	ldr	r3, [pc, #40]	; (800a1c0 <prvAddNewTaskToReadyList+0xc8>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d207      	bcs.n	800a1b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a1a2:	4b0c      	ldr	r3, [pc, #48]	; (800a1d4 <prvAddNewTaskToReadyList+0xdc>)
 800a1a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a1a8:	601a      	str	r2, [r3, #0]
 800a1aa:	f3bf 8f4f 	dsb	sy
 800a1ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1b2:	bf00      	nop
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	24000c84 	.word	0x24000c84
 800a1c0:	240007b0 	.word	0x240007b0
 800a1c4:	24000c90 	.word	0x24000c90
 800a1c8:	24000ca0 	.word	0x24000ca0
 800a1cc:	24000c8c 	.word	0x24000c8c
 800a1d0:	240007b4 	.word	0x240007b4
 800a1d4:	e000ed04 	.word	0xe000ed04

0800a1d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d016      	beq.n	800a218 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a1ea:	4b13      	ldr	r3, [pc, #76]	; (800a238 <vTaskDelay+0x60>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d009      	beq.n	800a206 <vTaskDelay+0x2e>
 800a1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f6:	f383 8811 	msr	BASEPRI, r3
 800a1fa:	f3bf 8f6f 	isb	sy
 800a1fe:	f3bf 8f4f 	dsb	sy
 800a202:	60bb      	str	r3, [r7, #8]
 800a204:	e7fe      	b.n	800a204 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a206:	f000 f87f 	bl	800a308 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a20a:	2100      	movs	r1, #0
 800a20c:	6878      	ldr	r0, [r7, #4]
 800a20e:	f000 ffb9 	bl	800b184 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a212:	f000 f887 	bl	800a324 <xTaskResumeAll>
 800a216:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d107      	bne.n	800a22e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a21e:	4b07      	ldr	r3, [pc, #28]	; (800a23c <vTaskDelay+0x64>)
 800a220:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a224:	601a      	str	r2, [r3, #0]
 800a226:	f3bf 8f4f 	dsb	sy
 800a22a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a22e:	bf00      	nop
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
 800a236:	bf00      	nop
 800a238:	24000cac 	.word	0x24000cac
 800a23c:	e000ed04 	.word	0xe000ed04

0800a240 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08a      	sub	sp, #40	; 0x28
 800a244:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a246:	2300      	movs	r3, #0
 800a248:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a24a:	2300      	movs	r3, #0
 800a24c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a24e:	463a      	mov	r2, r7
 800a250:	1d39      	adds	r1, r7, #4
 800a252:	f107 0308 	add.w	r3, r7, #8
 800a256:	4618      	mov	r0, r3
 800a258:	f7fe fe34 	bl	8008ec4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a25c:	6839      	ldr	r1, [r7, #0]
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	68ba      	ldr	r2, [r7, #8]
 800a262:	9202      	str	r2, [sp, #8]
 800a264:	9301      	str	r3, [sp, #4]
 800a266:	2300      	movs	r3, #0
 800a268:	9300      	str	r3, [sp, #0]
 800a26a:	2300      	movs	r3, #0
 800a26c:	460a      	mov	r2, r1
 800a26e:	4920      	ldr	r1, [pc, #128]	; (800a2f0 <vTaskStartScheduler+0xb0>)
 800a270:	4820      	ldr	r0, [pc, #128]	; (800a2f4 <vTaskStartScheduler+0xb4>)
 800a272:	f7ff fe13 	bl	8009e9c <xTaskCreateStatic>
 800a276:	4602      	mov	r2, r0
 800a278:	4b1f      	ldr	r3, [pc, #124]	; (800a2f8 <vTaskStartScheduler+0xb8>)
 800a27a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a27c:	4b1e      	ldr	r3, [pc, #120]	; (800a2f8 <vTaskStartScheduler+0xb8>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a284:	2301      	movs	r3, #1
 800a286:	617b      	str	r3, [r7, #20]
 800a288:	e001      	b.n	800a28e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a28a:	2300      	movs	r3, #0
 800a28c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	2b01      	cmp	r3, #1
 800a292:	d102      	bne.n	800a29a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a294:	f000 ffca 	bl	800b22c <xTimerCreateTimerTask>
 800a298:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d115      	bne.n	800a2cc <vTaskStartScheduler+0x8c>
 800a2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2a4:	f383 8811 	msr	BASEPRI, r3
 800a2a8:	f3bf 8f6f 	isb	sy
 800a2ac:	f3bf 8f4f 	dsb	sy
 800a2b0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a2b2:	4b12      	ldr	r3, [pc, #72]	; (800a2fc <vTaskStartScheduler+0xbc>)
 800a2b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a2b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a2ba:	4b11      	ldr	r3, [pc, #68]	; (800a300 <vTaskStartScheduler+0xc0>)
 800a2bc:	2201      	movs	r2, #1
 800a2be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a2c0:	4b10      	ldr	r3, [pc, #64]	; (800a304 <vTaskStartScheduler+0xc4>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a2c6:	f001 fbdb 	bl	800ba80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a2ca:	e00d      	b.n	800a2e8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2d2:	d109      	bne.n	800a2e8 <vTaskStartScheduler+0xa8>
 800a2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	60fb      	str	r3, [r7, #12]
 800a2e6:	e7fe      	b.n	800a2e6 <vTaskStartScheduler+0xa6>
}
 800a2e8:	bf00      	nop
 800a2ea:	3718      	adds	r7, #24
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	0800c2a4 	.word	0x0800c2a4
 800a2f4:	0800a92d 	.word	0x0800a92d
 800a2f8:	24000ca8 	.word	0x24000ca8
 800a2fc:	24000ca4 	.word	0x24000ca4
 800a300:	24000c90 	.word	0x24000c90
 800a304:	24000c88 	.word	0x24000c88

0800a308 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a308:	b480      	push	{r7}
 800a30a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a30c:	4b04      	ldr	r3, [pc, #16]	; (800a320 <vTaskSuspendAll+0x18>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3301      	adds	r3, #1
 800a312:	4a03      	ldr	r2, [pc, #12]	; (800a320 <vTaskSuspendAll+0x18>)
 800a314:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800a316:	bf00      	nop
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr
 800a320:	24000cac 	.word	0x24000cac

0800a324 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a32a:	2300      	movs	r3, #0
 800a32c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a32e:	2300      	movs	r3, #0
 800a330:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a332:	4b41      	ldr	r3, [pc, #260]	; (800a438 <xTaskResumeAll+0x114>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2b00      	cmp	r3, #0
 800a338:	d109      	bne.n	800a34e <xTaskResumeAll+0x2a>
 800a33a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a33e:	f383 8811 	msr	BASEPRI, r3
 800a342:	f3bf 8f6f 	isb	sy
 800a346:	f3bf 8f4f 	dsb	sy
 800a34a:	603b      	str	r3, [r7, #0]
 800a34c:	e7fe      	b.n	800a34c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a34e:	f001 fc35 	bl	800bbbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a352:	4b39      	ldr	r3, [pc, #228]	; (800a438 <xTaskResumeAll+0x114>)
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	3b01      	subs	r3, #1
 800a358:	4a37      	ldr	r2, [pc, #220]	; (800a438 <xTaskResumeAll+0x114>)
 800a35a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a35c:	4b36      	ldr	r3, [pc, #216]	; (800a438 <xTaskResumeAll+0x114>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d162      	bne.n	800a42a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a364:	4b35      	ldr	r3, [pc, #212]	; (800a43c <xTaskResumeAll+0x118>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d05e      	beq.n	800a42a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a36c:	e02f      	b.n	800a3ce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a36e:	4b34      	ldr	r3, [pc, #208]	; (800a440 <xTaskResumeAll+0x11c>)
 800a370:	68db      	ldr	r3, [r3, #12]
 800a372:	68db      	ldr	r3, [r3, #12]
 800a374:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	3318      	adds	r3, #24
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7fe fe60 	bl	8009040 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	3304      	adds	r3, #4
 800a384:	4618      	mov	r0, r3
 800a386:	f7fe fe5b 	bl	8009040 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a38e:	4b2d      	ldr	r3, [pc, #180]	; (800a444 <xTaskResumeAll+0x120>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	429a      	cmp	r2, r3
 800a394:	d903      	bls.n	800a39e <xTaskResumeAll+0x7a>
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39a:	4a2a      	ldr	r2, [pc, #168]	; (800a444 <xTaskResumeAll+0x120>)
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	4a27      	ldr	r2, [pc, #156]	; (800a448 <xTaskResumeAll+0x124>)
 800a3ac:	441a      	add	r2, r3
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	3304      	adds	r3, #4
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	f7fe fde6 	bl	8008f86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3be:	4b23      	ldr	r3, [pc, #140]	; (800a44c <xTaskResumeAll+0x128>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d302      	bcc.n	800a3ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a3c8:	4b21      	ldr	r3, [pc, #132]	; (800a450 <xTaskResumeAll+0x12c>)
 800a3ca:	2201      	movs	r2, #1
 800a3cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a3ce:	4b1c      	ldr	r3, [pc, #112]	; (800a440 <xTaskResumeAll+0x11c>)
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d1cb      	bne.n	800a36e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d001      	beq.n	800a3e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a3dc:	f000 fb58 	bl	800aa90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a3e0:	4b1c      	ldr	r3, [pc, #112]	; (800a454 <xTaskResumeAll+0x130>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d010      	beq.n	800a40e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a3ec:	f000 f858 	bl	800a4a0 <xTaskIncrementTick>
 800a3f0:	4603      	mov	r3, r0
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d002      	beq.n	800a3fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a3f6:	4b16      	ldr	r3, [pc, #88]	; (800a450 <xTaskResumeAll+0x12c>)
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	3b01      	subs	r3, #1
 800a400:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1f1      	bne.n	800a3ec <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a408:	4b12      	ldr	r3, [pc, #72]	; (800a454 <xTaskResumeAll+0x130>)
 800a40a:	2200      	movs	r2, #0
 800a40c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a40e:	4b10      	ldr	r3, [pc, #64]	; (800a450 <xTaskResumeAll+0x12c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d009      	beq.n	800a42a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a416:	2301      	movs	r3, #1
 800a418:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a41a:	4b0f      	ldr	r3, [pc, #60]	; (800a458 <xTaskResumeAll+0x134>)
 800a41c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a420:	601a      	str	r2, [r3, #0]
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a42a:	f001 fbf5 	bl	800bc18 <vPortExitCritical>

	return xAlreadyYielded;
 800a42e:	68bb      	ldr	r3, [r7, #8]
}
 800a430:	4618      	mov	r0, r3
 800a432:	3710      	adds	r7, #16
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	24000cac 	.word	0x24000cac
 800a43c:	24000c84 	.word	0x24000c84
 800a440:	24000c44 	.word	0x24000c44
 800a444:	24000c8c 	.word	0x24000c8c
 800a448:	240007b4 	.word	0x240007b4
 800a44c:	240007b0 	.word	0x240007b0
 800a450:	24000c98 	.word	0x24000c98
 800a454:	24000c94 	.word	0x24000c94
 800a458:	e000ed04 	.word	0xe000ed04

0800a45c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a45c:	b480      	push	{r7}
 800a45e:	b083      	sub	sp, #12
 800a460:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a462:	4b05      	ldr	r3, [pc, #20]	; (800a478 <xTaskGetTickCount+0x1c>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a468:	687b      	ldr	r3, [r7, #4]
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	370c      	adds	r7, #12
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
 800a476:	bf00      	nop
 800a478:	24000c88 	.word	0x24000c88

0800a47c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a482:	f001 fc77 	bl	800bd74 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a486:	2300      	movs	r3, #0
 800a488:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a48a:	4b04      	ldr	r3, [pc, #16]	; (800a49c <xTaskGetTickCountFromISR+0x20>)
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a490:	683b      	ldr	r3, [r7, #0]
}
 800a492:	4618      	mov	r0, r3
 800a494:	3708      	adds	r7, #8
 800a496:	46bd      	mov	sp, r7
 800a498:	bd80      	pop	{r7, pc}
 800a49a:	bf00      	nop
 800a49c:	24000c88 	.word	0x24000c88

0800a4a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b086      	sub	sp, #24
 800a4a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4aa:	4b4e      	ldr	r3, [pc, #312]	; (800a5e4 <xTaskIncrementTick+0x144>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f040 8088 	bne.w	800a5c4 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a4b4:	4b4c      	ldr	r3, [pc, #304]	; (800a5e8 <xTaskIncrementTick+0x148>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	3301      	adds	r3, #1
 800a4ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a4bc:	4a4a      	ldr	r2, [pc, #296]	; (800a5e8 <xTaskIncrementTick+0x148>)
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d11f      	bne.n	800a508 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a4c8:	4b48      	ldr	r3, [pc, #288]	; (800a5ec <xTaskIncrementTick+0x14c>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d009      	beq.n	800a4e6 <xTaskIncrementTick+0x46>
 800a4d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d6:	f383 8811 	msr	BASEPRI, r3
 800a4da:	f3bf 8f6f 	isb	sy
 800a4de:	f3bf 8f4f 	dsb	sy
 800a4e2:	603b      	str	r3, [r7, #0]
 800a4e4:	e7fe      	b.n	800a4e4 <xTaskIncrementTick+0x44>
 800a4e6:	4b41      	ldr	r3, [pc, #260]	; (800a5ec <xTaskIncrementTick+0x14c>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	60fb      	str	r3, [r7, #12]
 800a4ec:	4b40      	ldr	r3, [pc, #256]	; (800a5f0 <xTaskIncrementTick+0x150>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a3e      	ldr	r2, [pc, #248]	; (800a5ec <xTaskIncrementTick+0x14c>)
 800a4f2:	6013      	str	r3, [r2, #0]
 800a4f4:	4a3e      	ldr	r2, [pc, #248]	; (800a5f0 <xTaskIncrementTick+0x150>)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6013      	str	r3, [r2, #0]
 800a4fa:	4b3e      	ldr	r3, [pc, #248]	; (800a5f4 <xTaskIncrementTick+0x154>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	3301      	adds	r3, #1
 800a500:	4a3c      	ldr	r2, [pc, #240]	; (800a5f4 <xTaskIncrementTick+0x154>)
 800a502:	6013      	str	r3, [r2, #0]
 800a504:	f000 fac4 	bl	800aa90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a508:	4b3b      	ldr	r3, [pc, #236]	; (800a5f8 <xTaskIncrementTick+0x158>)
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	693a      	ldr	r2, [r7, #16]
 800a50e:	429a      	cmp	r2, r3
 800a510:	d349      	bcc.n	800a5a6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a512:	4b36      	ldr	r3, [pc, #216]	; (800a5ec <xTaskIncrementTick+0x14c>)
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d104      	bne.n	800a526 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a51c:	4b36      	ldr	r3, [pc, #216]	; (800a5f8 <xTaskIncrementTick+0x158>)
 800a51e:	f04f 32ff 	mov.w	r2, #4294967295
 800a522:	601a      	str	r2, [r3, #0]
					break;
 800a524:	e03f      	b.n	800a5a6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a526:	4b31      	ldr	r3, [pc, #196]	; (800a5ec <xTaskIncrementTick+0x14c>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	68db      	ldr	r3, [r3, #12]
 800a52c:	68db      	ldr	r3, [r3, #12]
 800a52e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a536:	693a      	ldr	r2, [r7, #16]
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d203      	bcs.n	800a546 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a53e:	4a2e      	ldr	r2, [pc, #184]	; (800a5f8 <xTaskIncrementTick+0x158>)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a544:	e02f      	b.n	800a5a6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	3304      	adds	r3, #4
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fe fd78 	bl	8009040 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a554:	2b00      	cmp	r3, #0
 800a556:	d004      	beq.n	800a562 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	3318      	adds	r3, #24
 800a55c:	4618      	mov	r0, r3
 800a55e:	f7fe fd6f 	bl	8009040 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a566:	4b25      	ldr	r3, [pc, #148]	; (800a5fc <xTaskIncrementTick+0x15c>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d903      	bls.n	800a576 <xTaskIncrementTick+0xd6>
 800a56e:	68bb      	ldr	r3, [r7, #8]
 800a570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a572:	4a22      	ldr	r2, [pc, #136]	; (800a5fc <xTaskIncrementTick+0x15c>)
 800a574:	6013      	str	r3, [r2, #0]
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a57a:	4613      	mov	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4413      	add	r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4a1f      	ldr	r2, [pc, #124]	; (800a600 <xTaskIncrementTick+0x160>)
 800a584:	441a      	add	r2, r3
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	3304      	adds	r3, #4
 800a58a:	4619      	mov	r1, r3
 800a58c:	4610      	mov	r0, r2
 800a58e:	f7fe fcfa 	bl	8008f86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a596:	4b1b      	ldr	r3, [pc, #108]	; (800a604 <xTaskIncrementTick+0x164>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d3b8      	bcc.n	800a512 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5a4:	e7b5      	b.n	800a512 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a5a6:	4b17      	ldr	r3, [pc, #92]	; (800a604 <xTaskIncrementTick+0x164>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ac:	4914      	ldr	r1, [pc, #80]	; (800a600 <xTaskIncrementTick+0x160>)
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	009b      	lsls	r3, r3, #2
 800a5b2:	4413      	add	r3, r2
 800a5b4:	009b      	lsls	r3, r3, #2
 800a5b6:	440b      	add	r3, r1
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d907      	bls.n	800a5ce <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	617b      	str	r3, [r7, #20]
 800a5c2:	e004      	b.n	800a5ce <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800a5c4:	4b10      	ldr	r3, [pc, #64]	; (800a608 <xTaskIncrementTick+0x168>)
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	4a0f      	ldr	r2, [pc, #60]	; (800a608 <xTaskIncrementTick+0x168>)
 800a5cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800a5ce:	4b0f      	ldr	r3, [pc, #60]	; (800a60c <xTaskIncrementTick+0x16c>)
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d001      	beq.n	800a5da <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800a5da:	697b      	ldr	r3, [r7, #20]
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3718      	adds	r7, #24
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	24000cac 	.word	0x24000cac
 800a5e8:	24000c88 	.word	0x24000c88
 800a5ec:	24000c3c 	.word	0x24000c3c
 800a5f0:	24000c40 	.word	0x24000c40
 800a5f4:	24000c9c 	.word	0x24000c9c
 800a5f8:	24000ca4 	.word	0x24000ca4
 800a5fc:	24000c8c 	.word	0x24000c8c
 800a600:	240007b4 	.word	0x240007b4
 800a604:	240007b0 	.word	0x240007b0
 800a608:	24000c94 	.word	0x24000c94
 800a60c:	24000c98 	.word	0x24000c98

0800a610 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a610:	b480      	push	{r7}
 800a612:	b085      	sub	sp, #20
 800a614:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a616:	4b27      	ldr	r3, [pc, #156]	; (800a6b4 <vTaskSwitchContext+0xa4>)
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d003      	beq.n	800a626 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a61e:	4b26      	ldr	r3, [pc, #152]	; (800a6b8 <vTaskSwitchContext+0xa8>)
 800a620:	2201      	movs	r2, #1
 800a622:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a624:	e040      	b.n	800a6a8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a626:	4b24      	ldr	r3, [pc, #144]	; (800a6b8 <vTaskSwitchContext+0xa8>)
 800a628:	2200      	movs	r2, #0
 800a62a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a62c:	4b23      	ldr	r3, [pc, #140]	; (800a6bc <vTaskSwitchContext+0xac>)
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	60fb      	str	r3, [r7, #12]
 800a632:	e00f      	b.n	800a654 <vTaskSwitchContext+0x44>
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d109      	bne.n	800a64e <vTaskSwitchContext+0x3e>
 800a63a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63e:	f383 8811 	msr	BASEPRI, r3
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	f3bf 8f4f 	dsb	sy
 800a64a:	607b      	str	r3, [r7, #4]
 800a64c:	e7fe      	b.n	800a64c <vTaskSwitchContext+0x3c>
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	3b01      	subs	r3, #1
 800a652:	60fb      	str	r3, [r7, #12]
 800a654:	491a      	ldr	r1, [pc, #104]	; (800a6c0 <vTaskSwitchContext+0xb0>)
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	4613      	mov	r3, r2
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	4413      	add	r3, r2
 800a65e:	009b      	lsls	r3, r3, #2
 800a660:	440b      	add	r3, r1
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d0e5      	beq.n	800a634 <vTaskSwitchContext+0x24>
 800a668:	68fa      	ldr	r2, [r7, #12]
 800a66a:	4613      	mov	r3, r2
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	4413      	add	r3, r2
 800a670:	009b      	lsls	r3, r3, #2
 800a672:	4a13      	ldr	r2, [pc, #76]	; (800a6c0 <vTaskSwitchContext+0xb0>)
 800a674:	4413      	add	r3, r2
 800a676:	60bb      	str	r3, [r7, #8]
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	685b      	ldr	r3, [r3, #4]
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	605a      	str	r2, [r3, #4]
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	685a      	ldr	r2, [r3, #4]
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	3308      	adds	r3, #8
 800a68a:	429a      	cmp	r2, r3
 800a68c:	d104      	bne.n	800a698 <vTaskSwitchContext+0x88>
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	605a      	str	r2, [r3, #4]
 800a698:	68bb      	ldr	r3, [r7, #8]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	68db      	ldr	r3, [r3, #12]
 800a69e:	4a09      	ldr	r2, [pc, #36]	; (800a6c4 <vTaskSwitchContext+0xb4>)
 800a6a0:	6013      	str	r3, [r2, #0]
 800a6a2:	4a06      	ldr	r2, [pc, #24]	; (800a6bc <vTaskSwitchContext+0xac>)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	6013      	str	r3, [r2, #0]
}
 800a6a8:	bf00      	nop
 800a6aa:	3714      	adds	r7, #20
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b2:	4770      	bx	lr
 800a6b4:	24000cac 	.word	0x24000cac
 800a6b8:	24000c98 	.word	0x24000c98
 800a6bc:	24000c8c 	.word	0x24000c8c
 800a6c0:	240007b4 	.word	0x240007b4
 800a6c4:	240007b0 	.word	0x240007b0

0800a6c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a6c8:	b580      	push	{r7, lr}
 800a6ca:	b084      	sub	sp, #16
 800a6cc:	af00      	add	r7, sp, #0
 800a6ce:	6078      	str	r0, [r7, #4]
 800a6d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d109      	bne.n	800a6ec <vTaskPlaceOnEventList+0x24>
 800a6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	60fb      	str	r3, [r7, #12]
 800a6ea:	e7fe      	b.n	800a6ea <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a6ec:	4b07      	ldr	r3, [pc, #28]	; (800a70c <vTaskPlaceOnEventList+0x44>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	3318      	adds	r3, #24
 800a6f2:	4619      	mov	r1, r3
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f7fe fc6a 	bl	8008fce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a6fa:	2101      	movs	r1, #1
 800a6fc:	6838      	ldr	r0, [r7, #0]
 800a6fe:	f000 fd41 	bl	800b184 <prvAddCurrentTaskToDelayedList>
}
 800a702:	bf00      	nop
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	240007b0 	.word	0x240007b0

0800a710 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a710:	b580      	push	{r7, lr}
 800a712:	b086      	sub	sp, #24
 800a714:	af00      	add	r7, sp, #0
 800a716:	60f8      	str	r0, [r7, #12]
 800a718:	60b9      	str	r1, [r7, #8]
 800a71a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d109      	bne.n	800a736 <vTaskPlaceOnEventListRestricted+0x26>
 800a722:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a726:	f383 8811 	msr	BASEPRI, r3
 800a72a:	f3bf 8f6f 	isb	sy
 800a72e:	f3bf 8f4f 	dsb	sy
 800a732:	617b      	str	r3, [r7, #20]
 800a734:	e7fe      	b.n	800a734 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a736:	4b0a      	ldr	r3, [pc, #40]	; (800a760 <vTaskPlaceOnEventListRestricted+0x50>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	3318      	adds	r3, #24
 800a73c:	4619      	mov	r1, r3
 800a73e:	68f8      	ldr	r0, [r7, #12]
 800a740:	f7fe fc21 	bl	8008f86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d002      	beq.n	800a750 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800a74a:	f04f 33ff 	mov.w	r3, #4294967295
 800a74e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a750:	6879      	ldr	r1, [r7, #4]
 800a752:	68b8      	ldr	r0, [r7, #8]
 800a754:	f000 fd16 	bl	800b184 <prvAddCurrentTaskToDelayedList>
	}
 800a758:	bf00      	nop
 800a75a:	3718      	adds	r7, #24
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	240007b0 	.word	0x240007b0

0800a764 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b086      	sub	sp, #24
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	68db      	ldr	r3, [r3, #12]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d109      	bne.n	800a78e <xTaskRemoveFromEventList+0x2a>
 800a77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a77e:	f383 8811 	msr	BASEPRI, r3
 800a782:	f3bf 8f6f 	isb	sy
 800a786:	f3bf 8f4f 	dsb	sy
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	e7fe      	b.n	800a78c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a78e:	693b      	ldr	r3, [r7, #16]
 800a790:	3318      	adds	r3, #24
 800a792:	4618      	mov	r0, r3
 800a794:	f7fe fc54 	bl	8009040 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a798:	4b1d      	ldr	r3, [pc, #116]	; (800a810 <xTaskRemoveFromEventList+0xac>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d11d      	bne.n	800a7dc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	3304      	adds	r3, #4
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7fe fc4b 	bl	8009040 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a7aa:	693b      	ldr	r3, [r7, #16]
 800a7ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ae:	4b19      	ldr	r3, [pc, #100]	; (800a814 <xTaskRemoveFromEventList+0xb0>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d903      	bls.n	800a7be <xTaskRemoveFromEventList+0x5a>
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ba:	4a16      	ldr	r2, [pc, #88]	; (800a814 <xTaskRemoveFromEventList+0xb0>)
 800a7bc:	6013      	str	r3, [r2, #0]
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	4413      	add	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	4a13      	ldr	r2, [pc, #76]	; (800a818 <xTaskRemoveFromEventList+0xb4>)
 800a7cc:	441a      	add	r2, r3
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	3304      	adds	r3, #4
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	4610      	mov	r0, r2
 800a7d6:	f7fe fbd6 	bl	8008f86 <vListInsertEnd>
 800a7da:	e005      	b.n	800a7e8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	3318      	adds	r3, #24
 800a7e0:	4619      	mov	r1, r3
 800a7e2:	480e      	ldr	r0, [pc, #56]	; (800a81c <xTaskRemoveFromEventList+0xb8>)
 800a7e4:	f7fe fbcf 	bl	8008f86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ec:	4b0c      	ldr	r3, [pc, #48]	; (800a820 <xTaskRemoveFromEventList+0xbc>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d905      	bls.n	800a802 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a7fa:	4b0a      	ldr	r3, [pc, #40]	; (800a824 <xTaskRemoveFromEventList+0xc0>)
 800a7fc:	2201      	movs	r2, #1
 800a7fe:	601a      	str	r2, [r3, #0]
 800a800:	e001      	b.n	800a806 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800a802:	2300      	movs	r3, #0
 800a804:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a806:	697b      	ldr	r3, [r7, #20]
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3718      	adds	r7, #24
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}
 800a810:	24000cac 	.word	0x24000cac
 800a814:	24000c8c 	.word	0x24000c8c
 800a818:	240007b4 	.word	0x240007b4
 800a81c:	24000c44 	.word	0x24000c44
 800a820:	240007b0 	.word	0x240007b0
 800a824:	24000c98 	.word	0x24000c98

0800a828 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a830:	4b06      	ldr	r3, [pc, #24]	; (800a84c <vTaskInternalSetTimeOutState+0x24>)
 800a832:	681a      	ldr	r2, [r3, #0]
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a838:	4b05      	ldr	r3, [pc, #20]	; (800a850 <vTaskInternalSetTimeOutState+0x28>)
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	605a      	str	r2, [r3, #4]
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr
 800a84c:	24000c9c 	.word	0x24000c9c
 800a850:	24000c88 	.word	0x24000c88

0800a854 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b088      	sub	sp, #32
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
 800a85c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d109      	bne.n	800a878 <xTaskCheckForTimeOut+0x24>
 800a864:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a868:	f383 8811 	msr	BASEPRI, r3
 800a86c:	f3bf 8f6f 	isb	sy
 800a870:	f3bf 8f4f 	dsb	sy
 800a874:	613b      	str	r3, [r7, #16]
 800a876:	e7fe      	b.n	800a876 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d109      	bne.n	800a892 <xTaskCheckForTimeOut+0x3e>
 800a87e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a882:	f383 8811 	msr	BASEPRI, r3
 800a886:	f3bf 8f6f 	isb	sy
 800a88a:	f3bf 8f4f 	dsb	sy
 800a88e:	60fb      	str	r3, [r7, #12]
 800a890:	e7fe      	b.n	800a890 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800a892:	f001 f993 	bl	800bbbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a896:	4b1d      	ldr	r3, [pc, #116]	; (800a90c <xTaskCheckForTimeOut+0xb8>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	69ba      	ldr	r2, [r7, #24]
 800a8a2:	1ad3      	subs	r3, r2, r3
 800a8a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ae:	d102      	bne.n	800a8b6 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	61fb      	str	r3, [r7, #28]
 800a8b4:	e023      	b.n	800a8fe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	4b15      	ldr	r3, [pc, #84]	; (800a910 <xTaskCheckForTimeOut+0xbc>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d007      	beq.n	800a8d2 <xTaskCheckForTimeOut+0x7e>
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	69ba      	ldr	r2, [r7, #24]
 800a8c8:	429a      	cmp	r2, r3
 800a8ca:	d302      	bcc.n	800a8d2 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	61fb      	str	r3, [r7, #28]
 800a8d0:	e015      	b.n	800a8fe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	697a      	ldr	r2, [r7, #20]
 800a8d8:	429a      	cmp	r2, r3
 800a8da:	d20b      	bcs.n	800a8f4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	1ad2      	subs	r2, r2, r3
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f7ff ff9d 	bl	800a828 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	61fb      	str	r3, [r7, #28]
 800a8f2:	e004      	b.n	800a8fe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a8fe:	f001 f98b 	bl	800bc18 <vPortExitCritical>

	return xReturn;
 800a902:	69fb      	ldr	r3, [r7, #28]
}
 800a904:	4618      	mov	r0, r3
 800a906:	3720      	adds	r7, #32
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}
 800a90c:	24000c88 	.word	0x24000c88
 800a910:	24000c9c 	.word	0x24000c9c

0800a914 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a914:	b480      	push	{r7}
 800a916:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a918:	4b03      	ldr	r3, [pc, #12]	; (800a928 <vTaskMissedYield+0x14>)
 800a91a:	2201      	movs	r2, #1
 800a91c:	601a      	str	r2, [r3, #0]
}
 800a91e:	bf00      	nop
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr
 800a928:	24000c98 	.word	0x24000c98

0800a92c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a934:	f000 f852 	bl	800a9dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a938:	4b06      	ldr	r3, [pc, #24]	; (800a954 <prvIdleTask+0x28>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d9f9      	bls.n	800a934 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a940:	4b05      	ldr	r3, [pc, #20]	; (800a958 <prvIdleTask+0x2c>)
 800a942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a946:	601a      	str	r2, [r3, #0]
 800a948:	f3bf 8f4f 	dsb	sy
 800a94c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a950:	e7f0      	b.n	800a934 <prvIdleTask+0x8>
 800a952:	bf00      	nop
 800a954:	240007b4 	.word	0x240007b4
 800a958:	e000ed04 	.word	0xe000ed04

0800a95c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b082      	sub	sp, #8
 800a960:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a962:	2300      	movs	r3, #0
 800a964:	607b      	str	r3, [r7, #4]
 800a966:	e00c      	b.n	800a982 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	4613      	mov	r3, r2
 800a96c:	009b      	lsls	r3, r3, #2
 800a96e:	4413      	add	r3, r2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4a12      	ldr	r2, [pc, #72]	; (800a9bc <prvInitialiseTaskLists+0x60>)
 800a974:	4413      	add	r3, r2
 800a976:	4618      	mov	r0, r3
 800a978:	f7fe fad8 	bl	8008f2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	3301      	adds	r3, #1
 800a980:	607b      	str	r3, [r7, #4]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2b37      	cmp	r3, #55	; 0x37
 800a986:	d9ef      	bls.n	800a968 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a988:	480d      	ldr	r0, [pc, #52]	; (800a9c0 <prvInitialiseTaskLists+0x64>)
 800a98a:	f7fe facf 	bl	8008f2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a98e:	480d      	ldr	r0, [pc, #52]	; (800a9c4 <prvInitialiseTaskLists+0x68>)
 800a990:	f7fe facc 	bl	8008f2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a994:	480c      	ldr	r0, [pc, #48]	; (800a9c8 <prvInitialiseTaskLists+0x6c>)
 800a996:	f7fe fac9 	bl	8008f2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a99a:	480c      	ldr	r0, [pc, #48]	; (800a9cc <prvInitialiseTaskLists+0x70>)
 800a99c:	f7fe fac6 	bl	8008f2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a9a0:	480b      	ldr	r0, [pc, #44]	; (800a9d0 <prvInitialiseTaskLists+0x74>)
 800a9a2:	f7fe fac3 	bl	8008f2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a9a6:	4b0b      	ldr	r3, [pc, #44]	; (800a9d4 <prvInitialiseTaskLists+0x78>)
 800a9a8:	4a05      	ldr	r2, [pc, #20]	; (800a9c0 <prvInitialiseTaskLists+0x64>)
 800a9aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a9ac:	4b0a      	ldr	r3, [pc, #40]	; (800a9d8 <prvInitialiseTaskLists+0x7c>)
 800a9ae:	4a05      	ldr	r2, [pc, #20]	; (800a9c4 <prvInitialiseTaskLists+0x68>)
 800a9b0:	601a      	str	r2, [r3, #0]
}
 800a9b2:	bf00      	nop
 800a9b4:	3708      	adds	r7, #8
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
 800a9ba:	bf00      	nop
 800a9bc:	240007b4 	.word	0x240007b4
 800a9c0:	24000c14 	.word	0x24000c14
 800a9c4:	24000c28 	.word	0x24000c28
 800a9c8:	24000c44 	.word	0x24000c44
 800a9cc:	24000c58 	.word	0x24000c58
 800a9d0:	24000c70 	.word	0x24000c70
 800a9d4:	24000c3c 	.word	0x24000c3c
 800a9d8:	24000c40 	.word	0x24000c40

0800a9dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a9e2:	e019      	b.n	800aa18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a9e4:	f001 f8ea 	bl	800bbbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9e8:	4b0f      	ldr	r3, [pc, #60]	; (800aa28 <prvCheckTasksWaitingTermination+0x4c>)
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	68db      	ldr	r3, [r3, #12]
 800a9ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7fe fb23 	bl	8009040 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a9fa:	4b0c      	ldr	r3, [pc, #48]	; (800aa2c <prvCheckTasksWaitingTermination+0x50>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	3b01      	subs	r3, #1
 800aa00:	4a0a      	ldr	r2, [pc, #40]	; (800aa2c <prvCheckTasksWaitingTermination+0x50>)
 800aa02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aa04:	4b0a      	ldr	r3, [pc, #40]	; (800aa30 <prvCheckTasksWaitingTermination+0x54>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	4a09      	ldr	r2, [pc, #36]	; (800aa30 <prvCheckTasksWaitingTermination+0x54>)
 800aa0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aa0e:	f001 f903 	bl	800bc18 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f000 f80e 	bl	800aa34 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aa18:	4b05      	ldr	r3, [pc, #20]	; (800aa30 <prvCheckTasksWaitingTermination+0x54>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d1e1      	bne.n	800a9e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aa20:	bf00      	nop
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	24000c58 	.word	0x24000c58
 800aa2c:	24000c84 	.word	0x24000c84
 800aa30:	24000c6c 	.word	0x24000c6c

0800aa34 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d108      	bne.n	800aa58 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f001 fa92 	bl	800bf74 <vPortFree>
				vPortFree( pxTCB );
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f001 fa8f 	bl	800bf74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aa56:	e017      	b.n	800aa88 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d103      	bne.n	800aa6a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f001 fa86 	bl	800bf74 <vPortFree>
	}
 800aa68:	e00e      	b.n	800aa88 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aa70:	2b02      	cmp	r3, #2
 800aa72:	d009      	beq.n	800aa88 <prvDeleteTCB+0x54>
 800aa74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa78:	f383 8811 	msr	BASEPRI, r3
 800aa7c:	f3bf 8f6f 	isb	sy
 800aa80:	f3bf 8f4f 	dsb	sy
 800aa84:	60fb      	str	r3, [r7, #12]
 800aa86:	e7fe      	b.n	800aa86 <prvDeleteTCB+0x52>
	}
 800aa88:	bf00      	nop
 800aa8a:	3710      	adds	r7, #16
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aa90:	b480      	push	{r7}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa96:	4b0c      	ldr	r3, [pc, #48]	; (800aac8 <prvResetNextTaskUnblockTime+0x38>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d104      	bne.n	800aaaa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800aaa0:	4b0a      	ldr	r3, [pc, #40]	; (800aacc <prvResetNextTaskUnblockTime+0x3c>)
 800aaa2:	f04f 32ff 	mov.w	r2, #4294967295
 800aaa6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800aaa8:	e008      	b.n	800aabc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aaaa:	4b07      	ldr	r3, [pc, #28]	; (800aac8 <prvResetNextTaskUnblockTime+0x38>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	68db      	ldr	r3, [r3, #12]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	4a04      	ldr	r2, [pc, #16]	; (800aacc <prvResetNextTaskUnblockTime+0x3c>)
 800aaba:	6013      	str	r3, [r2, #0]
}
 800aabc:	bf00      	nop
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr
 800aac8:	24000c3c 	.word	0x24000c3c
 800aacc:	24000ca4 	.word	0x24000ca4

0800aad0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800aad6:	4b0b      	ldr	r3, [pc, #44]	; (800ab04 <xTaskGetSchedulerState+0x34>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d102      	bne.n	800aae4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800aade:	2301      	movs	r3, #1
 800aae0:	607b      	str	r3, [r7, #4]
 800aae2:	e008      	b.n	800aaf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aae4:	4b08      	ldr	r3, [pc, #32]	; (800ab08 <xTaskGetSchedulerState+0x38>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d102      	bne.n	800aaf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800aaec:	2302      	movs	r3, #2
 800aaee:	607b      	str	r3, [r7, #4]
 800aaf0:	e001      	b.n	800aaf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800aaf6:	687b      	ldr	r3, [r7, #4]
	}
 800aaf8:	4618      	mov	r0, r3
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	24000c90 	.word	0x24000c90
 800ab08:	24000cac 	.word	0x24000cac

0800ab0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d051      	beq.n	800abc6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab26:	4b2a      	ldr	r3, [pc, #168]	; (800abd0 <xTaskPriorityInherit+0xc4>)
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d241      	bcs.n	800abb4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	699b      	ldr	r3, [r3, #24]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	db06      	blt.n	800ab46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab38:	4b25      	ldr	r3, [pc, #148]	; (800abd0 <xTaskPriorityInherit+0xc4>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	6959      	ldr	r1, [r3, #20]
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab4e:	4613      	mov	r3, r2
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	4413      	add	r3, r2
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4a1f      	ldr	r2, [pc, #124]	; (800abd4 <xTaskPriorityInherit+0xc8>)
 800ab58:	4413      	add	r3, r2
 800ab5a:	4299      	cmp	r1, r3
 800ab5c:	d122      	bne.n	800aba4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ab5e:	68bb      	ldr	r3, [r7, #8]
 800ab60:	3304      	adds	r3, #4
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7fe fa6c 	bl	8009040 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ab68:	4b19      	ldr	r3, [pc, #100]	; (800abd0 <xTaskPriorityInherit+0xc4>)
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab6e:	68bb      	ldr	r3, [r7, #8]
 800ab70:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab76:	4b18      	ldr	r3, [pc, #96]	; (800abd8 <xTaskPriorityInherit+0xcc>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	d903      	bls.n	800ab86 <xTaskPriorityInherit+0x7a>
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab82:	4a15      	ldr	r2, [pc, #84]	; (800abd8 <xTaskPriorityInherit+0xcc>)
 800ab84:	6013      	str	r3, [r2, #0]
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab8a:	4613      	mov	r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	4413      	add	r3, r2
 800ab90:	009b      	lsls	r3, r3, #2
 800ab92:	4a10      	ldr	r2, [pc, #64]	; (800abd4 <xTaskPriorityInherit+0xc8>)
 800ab94:	441a      	add	r2, r3
 800ab96:	68bb      	ldr	r3, [r7, #8]
 800ab98:	3304      	adds	r3, #4
 800ab9a:	4619      	mov	r1, r3
 800ab9c:	4610      	mov	r0, r2
 800ab9e:	f7fe f9f2 	bl	8008f86 <vListInsertEnd>
 800aba2:	e004      	b.n	800abae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800aba4:	4b0a      	ldr	r3, [pc, #40]	; (800abd0 <xTaskPriorityInherit+0xc4>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800abae:	2301      	movs	r3, #1
 800abb0:	60fb      	str	r3, [r7, #12]
 800abb2:	e008      	b.n	800abc6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abb8:	4b05      	ldr	r3, [pc, #20]	; (800abd0 <xTaskPriorityInherit+0xc4>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d201      	bcs.n	800abc6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800abc2:	2301      	movs	r3, #1
 800abc4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800abc6:	68fb      	ldr	r3, [r7, #12]
	}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	240007b0 	.word	0x240007b0
 800abd4:	240007b4 	.word	0x240007b4
 800abd8:	24000c8c 	.word	0x24000c8c

0800abdc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800abdc:	b580      	push	{r7, lr}
 800abde:	b086      	sub	sp, #24
 800abe0:	af00      	add	r7, sp, #0
 800abe2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800abe8:	2300      	movs	r3, #0
 800abea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d054      	beq.n	800ac9c <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800abf2:	4b2d      	ldr	r3, [pc, #180]	; (800aca8 <xTaskPriorityDisinherit+0xcc>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	693a      	ldr	r2, [r7, #16]
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d009      	beq.n	800ac10 <xTaskPriorityDisinherit+0x34>
 800abfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	60fb      	str	r3, [r7, #12]
 800ac0e:	e7fe      	b.n	800ac0e <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d109      	bne.n	800ac2c <xTaskPriorityDisinherit+0x50>
 800ac18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1c:	f383 8811 	msr	BASEPRI, r3
 800ac20:	f3bf 8f6f 	isb	sy
 800ac24:	f3bf 8f4f 	dsb	sy
 800ac28:	60bb      	str	r3, [r7, #8]
 800ac2a:	e7fe      	b.n	800ac2a <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac30:	1e5a      	subs	r2, r3, #1
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ac36:	693b      	ldr	r3, [r7, #16]
 800ac38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac3a:	693b      	ldr	r3, [r7, #16]
 800ac3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d02c      	beq.n	800ac9c <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d128      	bne.n	800ac9c <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ac4a:	693b      	ldr	r3, [r7, #16]
 800ac4c:	3304      	adds	r3, #4
 800ac4e:	4618      	mov	r0, r3
 800ac50:	f7fe f9f6 	bl	8009040 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ac68:	693b      	ldr	r3, [r7, #16]
 800ac6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac6c:	4b0f      	ldr	r3, [pc, #60]	; (800acac <xTaskPriorityDisinherit+0xd0>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	429a      	cmp	r2, r3
 800ac72:	d903      	bls.n	800ac7c <xTaskPriorityDisinherit+0xa0>
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac78:	4a0c      	ldr	r2, [pc, #48]	; (800acac <xTaskPriorityDisinherit+0xd0>)
 800ac7a:	6013      	str	r3, [r2, #0]
 800ac7c:	693b      	ldr	r3, [r7, #16]
 800ac7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac80:	4613      	mov	r3, r2
 800ac82:	009b      	lsls	r3, r3, #2
 800ac84:	4413      	add	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4a09      	ldr	r2, [pc, #36]	; (800acb0 <xTaskPriorityDisinherit+0xd4>)
 800ac8a:	441a      	add	r2, r3
 800ac8c:	693b      	ldr	r3, [r7, #16]
 800ac8e:	3304      	adds	r3, #4
 800ac90:	4619      	mov	r1, r3
 800ac92:	4610      	mov	r0, r2
 800ac94:	f7fe f977 	bl	8008f86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ac98:	2301      	movs	r3, #1
 800ac9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ac9c:	697b      	ldr	r3, [r7, #20]
	}
 800ac9e:	4618      	mov	r0, r3
 800aca0:	3718      	adds	r7, #24
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	240007b0 	.word	0x240007b0
 800acac:	24000c8c 	.word	0x24000c8c
 800acb0:	240007b4 	.word	0x240007b4

0800acb4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b088      	sub	sp, #32
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800acc2:	2301      	movs	r3, #1
 800acc4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d068      	beq.n	800ad9e <vTaskPriorityDisinheritAfterTimeout+0xea>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d109      	bne.n	800ace8 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800acd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd8:	f383 8811 	msr	BASEPRI, r3
 800acdc:	f3bf 8f6f 	isb	sy
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	60fb      	str	r3, [r7, #12]
 800ace6:	e7fe      	b.n	800ace6 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acec:	683a      	ldr	r2, [r7, #0]
 800acee:	429a      	cmp	r2, r3
 800acf0:	d902      	bls.n	800acf8 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	61fb      	str	r3, [r7, #28]
 800acf6:	e002      	b.n	800acfe <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800acf8:	69bb      	ldr	r3, [r7, #24]
 800acfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acfc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800acfe:	69bb      	ldr	r3, [r7, #24]
 800ad00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad02:	69fa      	ldr	r2, [r7, #28]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d04a      	beq.n	800ad9e <vTaskPriorityDisinheritAfterTimeout+0xea>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ad08:	69bb      	ldr	r3, [r7, #24]
 800ad0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad0c:	697a      	ldr	r2, [r7, #20]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d145      	bne.n	800ad9e <vTaskPriorityDisinheritAfterTimeout+0xea>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ad12:	4b25      	ldr	r3, [pc, #148]	; (800ada8 <vTaskPriorityDisinheritAfterTimeout+0xf4>)
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	69ba      	ldr	r2, [r7, #24]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d109      	bne.n	800ad30 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800ad1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad20:	f383 8811 	msr	BASEPRI, r3
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	60bb      	str	r3, [r7, #8]
 800ad2e:	e7fe      	b.n	800ad2e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ad30:	69bb      	ldr	r3, [r7, #24]
 800ad32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad34:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ad36:	69bb      	ldr	r3, [r7, #24]
 800ad38:	69fa      	ldr	r2, [r7, #28]
 800ad3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	699b      	ldr	r3, [r3, #24]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	db04      	blt.n	800ad4e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad44:	69fb      	ldr	r3, [r7, #28]
 800ad46:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ad4a:	69bb      	ldr	r3, [r7, #24]
 800ad4c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	6959      	ldr	r1, [r3, #20]
 800ad52:	693a      	ldr	r2, [r7, #16]
 800ad54:	4613      	mov	r3, r2
 800ad56:	009b      	lsls	r3, r3, #2
 800ad58:	4413      	add	r3, r2
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	4a13      	ldr	r2, [pc, #76]	; (800adac <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ad5e:	4413      	add	r3, r2
 800ad60:	4299      	cmp	r1, r3
 800ad62:	d11c      	bne.n	800ad9e <vTaskPriorityDisinheritAfterTimeout+0xea>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	3304      	adds	r3, #4
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f7fe f969 	bl	8009040 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad72:	4b0f      	ldr	r3, [pc, #60]	; (800adb0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	429a      	cmp	r2, r3
 800ad78:	d903      	bls.n	800ad82 <vTaskPriorityDisinheritAfterTimeout+0xce>
 800ad7a:	69bb      	ldr	r3, [r7, #24]
 800ad7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad7e:	4a0c      	ldr	r2, [pc, #48]	; (800adb0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ad80:	6013      	str	r3, [r2, #0]
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad86:	4613      	mov	r3, r2
 800ad88:	009b      	lsls	r3, r3, #2
 800ad8a:	4413      	add	r3, r2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4a07      	ldr	r2, [pc, #28]	; (800adac <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ad90:	441a      	add	r2, r3
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	3304      	adds	r3, #4
 800ad96:	4619      	mov	r1, r3
 800ad98:	4610      	mov	r0, r2
 800ad9a:	f7fe f8f4 	bl	8008f86 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad9e:	bf00      	nop
 800ada0:	3720      	adds	r7, #32
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	240007b0 	.word	0x240007b0
 800adac:	240007b4 	.word	0x240007b4
 800adb0:	24000c8c 	.word	0x24000c8c

0800adb4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800adb4:	b480      	push	{r7}
 800adb6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800adb8:	4b07      	ldr	r3, [pc, #28]	; (800add8 <pvTaskIncrementMutexHeldCount+0x24>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d004      	beq.n	800adca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800adc0:	4b05      	ldr	r3, [pc, #20]	; (800add8 <pvTaskIncrementMutexHeldCount+0x24>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800adc6:	3201      	adds	r2, #1
 800adc8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800adca:	4b03      	ldr	r3, [pc, #12]	; (800add8 <pvTaskIncrementMutexHeldCount+0x24>)
 800adcc:	681b      	ldr	r3, [r3, #0]
	}
 800adce:	4618      	mov	r0, r3
 800add0:	46bd      	mov	sp, r7
 800add2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add6:	4770      	bx	lr
 800add8:	240007b0 	.word	0x240007b0

0800addc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800ade6:	f000 fee9 	bl	800bbbc <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800adea:	4b1e      	ldr	r3, [pc, #120]	; (800ae64 <ulTaskNotifyTake+0x88>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d113      	bne.n	800ae1c <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800adf4:	4b1b      	ldr	r3, [pc, #108]	; (800ae64 <ulTaskNotifyTake+0x88>)
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2201      	movs	r2, #1
 800adfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00b      	beq.n	800ae1c <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae04:	2101      	movs	r1, #1
 800ae06:	6838      	ldr	r0, [r7, #0]
 800ae08:	f000 f9bc 	bl	800b184 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800ae0c:	4b16      	ldr	r3, [pc, #88]	; (800ae68 <ulTaskNotifyTake+0x8c>)
 800ae0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae12:	601a      	str	r2, [r3, #0]
 800ae14:	f3bf 8f4f 	dsb	sy
 800ae18:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800ae1c:	f000 fefc 	bl	800bc18 <vPortExitCritical>

		taskENTER_CRITICAL();
 800ae20:	f000 fecc 	bl	800bbbc <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800ae24:	4b0f      	ldr	r3, [pc, #60]	; (800ae64 <ulTaskNotifyTake+0x88>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae2a:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d00c      	beq.n	800ae4c <ulTaskNotifyTake+0x70>
			{
				if( xClearCountOnExit != pdFALSE )
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d004      	beq.n	800ae42 <ulTaskNotifyTake+0x66>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800ae38:	4b0a      	ldr	r3, [pc, #40]	; (800ae64 <ulTaskNotifyTake+0x88>)
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	655a      	str	r2, [r3, #84]	; 0x54
 800ae40:	e004      	b.n	800ae4c <ulTaskNotifyTake+0x70>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800ae42:	4b08      	ldr	r3, [pc, #32]	; (800ae64 <ulTaskNotifyTake+0x88>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	3a01      	subs	r2, #1
 800ae4a:	655a      	str	r2, [r3, #84]	; 0x54
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ae4c:	4b05      	ldr	r3, [pc, #20]	; (800ae64 <ulTaskNotifyTake+0x88>)
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	2200      	movs	r2, #0
 800ae52:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
		}
		taskEXIT_CRITICAL();
 800ae56:	f000 fedf 	bl	800bc18 <vPortExitCritical>

		return ulReturn;
 800ae5a:	68fb      	ldr	r3, [r7, #12]
	}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	3710      	adds	r7, #16
 800ae60:	46bd      	mov	sp, r7
 800ae62:	bd80      	pop	{r7, pc}
 800ae64:	240007b0 	.word	0x240007b0
 800ae68:	e000ed04 	.word	0xe000ed04

0800ae6c <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b08a      	sub	sp, #40	; 0x28
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	603b      	str	r3, [r7, #0]
 800ae78:	4613      	mov	r3, r2
 800ae7a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800ae7c:	2301      	movs	r3, #1
 800ae7e:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d109      	bne.n	800ae9a <xTaskGenericNotify+0x2e>
 800ae86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8a:	f383 8811 	msr	BASEPRI, r3
 800ae8e:	f3bf 8f6f 	isb	sy
 800ae92:	f3bf 8f4f 	dsb	sy
 800ae96:	61bb      	str	r3, [r7, #24]
 800ae98:	e7fe      	b.n	800ae98 <xTaskGenericNotify+0x2c>
		pxTCB = xTaskToNotify;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800ae9e:	f000 fe8d 	bl	800bbbc <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d003      	beq.n	800aeb0 <xTaskGenericNotify+0x44>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800aea8:	6a3b      	ldr	r3, [r7, #32]
 800aeaa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aeac:	683b      	ldr	r3, [r7, #0]
 800aeae:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800aeb0:	6a3b      	ldr	r3, [r7, #32]
 800aeb2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800aeb6:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800aeb8:	6a3b      	ldr	r3, [r7, #32]
 800aeba:	2202      	movs	r2, #2
 800aebc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800aec0:	79fb      	ldrb	r3, [r7, #7]
 800aec2:	2b04      	cmp	r3, #4
 800aec4:	d827      	bhi.n	800af16 <xTaskGenericNotify+0xaa>
 800aec6:	a201      	add	r2, pc, #4	; (adr r2, 800aecc <xTaskGenericNotify+0x60>)
 800aec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aecc:	0800af35 	.word	0x0800af35
 800aed0:	0800aee1 	.word	0x0800aee1
 800aed4:	0800aeef 	.word	0x0800aeef
 800aed8:	0800aefb 	.word	0x0800aefb
 800aedc:	0800af03 	.word	0x0800af03
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800aee0:	6a3b      	ldr	r3, [r7, #32]
 800aee2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	431a      	orrs	r2, r3
 800aee8:	6a3b      	ldr	r3, [r7, #32]
 800aeea:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800aeec:	e025      	b.n	800af3a <xTaskGenericNotify+0xce>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800aeee:	6a3b      	ldr	r3, [r7, #32]
 800aef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aef2:	1c5a      	adds	r2, r3, #1
 800aef4:	6a3b      	ldr	r3, [r7, #32]
 800aef6:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800aef8:	e01f      	b.n	800af3a <xTaskGenericNotify+0xce>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800aefa:	6a3b      	ldr	r3, [r7, #32]
 800aefc:	68ba      	ldr	r2, [r7, #8]
 800aefe:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800af00:	e01b      	b.n	800af3a <xTaskGenericNotify+0xce>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800af02:	7ffb      	ldrb	r3, [r7, #31]
 800af04:	2b02      	cmp	r3, #2
 800af06:	d003      	beq.n	800af10 <xTaskGenericNotify+0xa4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800af08:	6a3b      	ldr	r3, [r7, #32]
 800af0a:	68ba      	ldr	r2, [r7, #8]
 800af0c:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800af0e:	e014      	b.n	800af3a <xTaskGenericNotify+0xce>
						xReturn = pdFAIL;
 800af10:	2300      	movs	r3, #0
 800af12:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800af14:	e011      	b.n	800af3a <xTaskGenericNotify+0xce>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800af16:	6a3b      	ldr	r3, [r7, #32]
 800af18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af1e:	d00b      	beq.n	800af38 <xTaskGenericNotify+0xcc>
 800af20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af24:	f383 8811 	msr	BASEPRI, r3
 800af28:	f3bf 8f6f 	isb	sy
 800af2c:	f3bf 8f4f 	dsb	sy
 800af30:	617b      	str	r3, [r7, #20]
 800af32:	e7fe      	b.n	800af32 <xTaskGenericNotify+0xc6>
					break;
 800af34:	bf00      	nop
 800af36:	e000      	b.n	800af3a <xTaskGenericNotify+0xce>

					break;
 800af38:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800af3a:	7ffb      	ldrb	r3, [r7, #31]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d139      	bne.n	800afb4 <xTaskGenericNotify+0x148>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af40:	6a3b      	ldr	r3, [r7, #32]
 800af42:	3304      	adds	r3, #4
 800af44:	4618      	mov	r0, r3
 800af46:	f7fe f87b 	bl	8009040 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800af4a:	6a3b      	ldr	r3, [r7, #32]
 800af4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af4e:	4b1d      	ldr	r3, [pc, #116]	; (800afc4 <xTaskGenericNotify+0x158>)
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	429a      	cmp	r2, r3
 800af54:	d903      	bls.n	800af5e <xTaskGenericNotify+0xf2>
 800af56:	6a3b      	ldr	r3, [r7, #32]
 800af58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5a:	4a1a      	ldr	r2, [pc, #104]	; (800afc4 <xTaskGenericNotify+0x158>)
 800af5c:	6013      	str	r3, [r2, #0]
 800af5e:	6a3b      	ldr	r3, [r7, #32]
 800af60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af62:	4613      	mov	r3, r2
 800af64:	009b      	lsls	r3, r3, #2
 800af66:	4413      	add	r3, r2
 800af68:	009b      	lsls	r3, r3, #2
 800af6a:	4a17      	ldr	r2, [pc, #92]	; (800afc8 <xTaskGenericNotify+0x15c>)
 800af6c:	441a      	add	r2, r3
 800af6e:	6a3b      	ldr	r3, [r7, #32]
 800af70:	3304      	adds	r3, #4
 800af72:	4619      	mov	r1, r3
 800af74:	4610      	mov	r0, r2
 800af76:	f7fe f806 	bl	8008f86 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800af7a:	6a3b      	ldr	r3, [r7, #32]
 800af7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d009      	beq.n	800af96 <xTaskGenericNotify+0x12a>
 800af82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af86:	f383 8811 	msr	BASEPRI, r3
 800af8a:	f3bf 8f6f 	isb	sy
 800af8e:	f3bf 8f4f 	dsb	sy
 800af92:	613b      	str	r3, [r7, #16]
 800af94:	e7fe      	b.n	800af94 <xTaskGenericNotify+0x128>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af96:	6a3b      	ldr	r3, [r7, #32]
 800af98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af9a:	4b0c      	ldr	r3, [pc, #48]	; (800afcc <xTaskGenericNotify+0x160>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afa0:	429a      	cmp	r2, r3
 800afa2:	d907      	bls.n	800afb4 <xTaskGenericNotify+0x148>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800afa4:	4b0a      	ldr	r3, [pc, #40]	; (800afd0 <xTaskGenericNotify+0x164>)
 800afa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afaa:	601a      	str	r2, [r3, #0]
 800afac:	f3bf 8f4f 	dsb	sy
 800afb0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800afb4:	f000 fe30 	bl	800bc18 <vPortExitCritical>

		return xReturn;
 800afb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800afba:	4618      	mov	r0, r3
 800afbc:	3728      	adds	r7, #40	; 0x28
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	24000c8c 	.word	0x24000c8c
 800afc8:	240007b4 	.word	0x240007b4
 800afcc:	240007b0 	.word	0x240007b0
 800afd0:	e000ed04 	.word	0xe000ed04

0800afd4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b08e      	sub	sp, #56	; 0x38
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	603b      	str	r3, [r7, #0]
 800afe0:	4613      	mov	r3, r2
 800afe2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 800afe4:	2301      	movs	r3, #1
 800afe6:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d109      	bne.n	800b002 <xTaskGenericNotifyFromISR+0x2e>
 800afee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aff2:	f383 8811 	msr	BASEPRI, r3
 800aff6:	f3bf 8f6f 	isb	sy
 800affa:	f3bf 8f4f 	dsb	sy
 800affe:	627b      	str	r3, [r7, #36]	; 0x24
 800b000:	e7fe      	b.n	800b000 <xTaskGenericNotifyFromISR+0x2c>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b002:	f000 feb7 	bl	800bd74 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 800b00a:	f3ef 8211 	mrs	r2, BASEPRI
 800b00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b012:	f383 8811 	msr	BASEPRI, r3
 800b016:	f3bf 8f6f 	isb	sy
 800b01a:	f3bf 8f4f 	dsb	sy
 800b01e:	623a      	str	r2, [r7, #32]
 800b020:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 800b022:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b024:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d003      	beq.n	800b034 <xTaskGenericNotifyFromISR+0x60>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800b02c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b036:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800b03a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b040:	2202      	movs	r2, #2
 800b042:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

			switch( eAction )
 800b046:	79fb      	ldrb	r3, [r7, #7]
 800b048:	2b04      	cmp	r3, #4
 800b04a:	d829      	bhi.n	800b0a0 <xTaskGenericNotifyFromISR+0xcc>
 800b04c:	a201      	add	r2, pc, #4	; (adr r2, 800b054 <xTaskGenericNotifyFromISR+0x80>)
 800b04e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b052:	bf00      	nop
 800b054:	0800b0bf 	.word	0x0800b0bf
 800b058:	0800b069 	.word	0x0800b069
 800b05c:	0800b077 	.word	0x0800b077
 800b060:	0800b083 	.word	0x0800b083
 800b064:	0800b08b 	.word	0x0800b08b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800b068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	431a      	orrs	r2, r3
 800b070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b072:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b074:	e026      	b.n	800b0c4 <xTaskGenericNotifyFromISR+0xf0>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800b076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b07a:	1c5a      	adds	r2, r3, #1
 800b07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07e:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b080:	e020      	b.n	800b0c4 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800b082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b084:	68ba      	ldr	r2, [r7, #8]
 800b086:	655a      	str	r2, [r3, #84]	; 0x54
					break;
 800b088:	e01c      	b.n	800b0c4 <xTaskGenericNotifyFromISR+0xf0>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800b08a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b08e:	2b02      	cmp	r3, #2
 800b090:	d003      	beq.n	800b09a <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800b092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b094:	68ba      	ldr	r2, [r7, #8]
 800b096:	655a      	str	r2, [r3, #84]	; 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800b098:	e014      	b.n	800b0c4 <xTaskGenericNotifyFromISR+0xf0>
						xReturn = pdFAIL;
 800b09a:	2300      	movs	r3, #0
 800b09c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800b09e:	e011      	b.n	800b0c4 <xTaskGenericNotifyFromISR+0xf0>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800b0a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a8:	d00b      	beq.n	800b0c2 <xTaskGenericNotifyFromISR+0xee>
	__asm volatile
 800b0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0ae:	f383 8811 	msr	BASEPRI, r3
 800b0b2:	f3bf 8f6f 	isb	sy
 800b0b6:	f3bf 8f4f 	dsb	sy
 800b0ba:	61bb      	str	r3, [r7, #24]
 800b0bc:	e7fe      	b.n	800b0bc <xTaskGenericNotifyFromISR+0xe8>
					break;
 800b0be:	bf00      	nop
 800b0c0:	e000      	b.n	800b0c4 <xTaskGenericNotifyFromISR+0xf0>
					break;
 800b0c2:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b0c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800b0c8:	2b01      	cmp	r3, #1
 800b0ca:	d145      	bne.n	800b158 <xTaskGenericNotifyFromISR+0x184>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b0cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d009      	beq.n	800b0e8 <xTaskGenericNotifyFromISR+0x114>
 800b0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0d8:	f383 8811 	msr	BASEPRI, r3
 800b0dc:	f3bf 8f6f 	isb	sy
 800b0e0:	f3bf 8f4f 	dsb	sy
 800b0e4:	617b      	str	r3, [r7, #20]
 800b0e6:	e7fe      	b.n	800b0e6 <xTaskGenericNotifyFromISR+0x112>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0e8:	4b20      	ldr	r3, [pc, #128]	; (800b16c <xTaskGenericNotifyFromISR+0x198>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d11d      	bne.n	800b12c <xTaskGenericNotifyFromISR+0x158>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0f2:	3304      	adds	r3, #4
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	f7fd ffa3 	bl	8009040 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0fe:	4b1c      	ldr	r3, [pc, #112]	; (800b170 <xTaskGenericNotifyFromISR+0x19c>)
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	429a      	cmp	r2, r3
 800b104:	d903      	bls.n	800b10e <xTaskGenericNotifyFromISR+0x13a>
 800b106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10a:	4a19      	ldr	r2, [pc, #100]	; (800b170 <xTaskGenericNotifyFromISR+0x19c>)
 800b10c:	6013      	str	r3, [r2, #0]
 800b10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b112:	4613      	mov	r3, r2
 800b114:	009b      	lsls	r3, r3, #2
 800b116:	4413      	add	r3, r2
 800b118:	009b      	lsls	r3, r3, #2
 800b11a:	4a16      	ldr	r2, [pc, #88]	; (800b174 <xTaskGenericNotifyFromISR+0x1a0>)
 800b11c:	441a      	add	r2, r3
 800b11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b120:	3304      	adds	r3, #4
 800b122:	4619      	mov	r1, r3
 800b124:	4610      	mov	r0, r2
 800b126:	f7fd ff2e 	bl	8008f86 <vListInsertEnd>
 800b12a:	e005      	b.n	800b138 <xTaskGenericNotifyFromISR+0x164>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b12c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b12e:	3318      	adds	r3, #24
 800b130:	4619      	mov	r1, r3
 800b132:	4811      	ldr	r0, [pc, #68]	; (800b178 <xTaskGenericNotifyFromISR+0x1a4>)
 800b134:	f7fd ff27 	bl	8008f86 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b13a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b13c:	4b0f      	ldr	r3, [pc, #60]	; (800b17c <xTaskGenericNotifyFromISR+0x1a8>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b142:	429a      	cmp	r2, r3
 800b144:	d908      	bls.n	800b158 <xTaskGenericNotifyFromISR+0x184>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d002      	beq.n	800b152 <xTaskGenericNotifyFromISR+0x17e>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b14c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b14e:	2201      	movs	r2, #1
 800b150:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b152:	4b0b      	ldr	r3, [pc, #44]	; (800b180 <xTaskGenericNotifyFromISR+0x1ac>)
 800b154:	2201      	movs	r2, #1
 800b156:	601a      	str	r2, [r3, #0]
 800b158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b15a:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	f383 8811 	msr	BASEPRI, r3
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800b162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800b164:	4618      	mov	r0, r3
 800b166:	3738      	adds	r7, #56	; 0x38
 800b168:	46bd      	mov	sp, r7
 800b16a:	bd80      	pop	{r7, pc}
 800b16c:	24000cac 	.word	0x24000cac
 800b170:	24000c8c 	.word	0x24000c8c
 800b174:	240007b4 	.word	0x240007b4
 800b178:	24000c44 	.word	0x24000c44
 800b17c:	240007b0 	.word	0x240007b0
 800b180:	24000c98 	.word	0x24000c98

0800b184 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b084      	sub	sp, #16
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b18e:	4b21      	ldr	r3, [pc, #132]	; (800b214 <prvAddCurrentTaskToDelayedList+0x90>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b194:	4b20      	ldr	r3, [pc, #128]	; (800b218 <prvAddCurrentTaskToDelayedList+0x94>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	3304      	adds	r3, #4
 800b19a:	4618      	mov	r0, r3
 800b19c:	f7fd ff50 	bl	8009040 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1a6:	d10a      	bne.n	800b1be <prvAddCurrentTaskToDelayedList+0x3a>
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d007      	beq.n	800b1be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1ae:	4b1a      	ldr	r3, [pc, #104]	; (800b218 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	3304      	adds	r3, #4
 800b1b4:	4619      	mov	r1, r3
 800b1b6:	4819      	ldr	r0, [pc, #100]	; (800b21c <prvAddCurrentTaskToDelayedList+0x98>)
 800b1b8:	f7fd fee5 	bl	8008f86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b1bc:	e026      	b.n	800b20c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b1be:	68fa      	ldr	r2, [r7, #12]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b1c6:	4b14      	ldr	r3, [pc, #80]	; (800b218 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	68ba      	ldr	r2, [r7, #8]
 800b1cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b1ce:	68ba      	ldr	r2, [r7, #8]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d209      	bcs.n	800b1ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1d6:	4b12      	ldr	r3, [pc, #72]	; (800b220 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	4b0f      	ldr	r3, [pc, #60]	; (800b218 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	3304      	adds	r3, #4
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	4610      	mov	r0, r2
 800b1e4:	f7fd fef3 	bl	8008fce <vListInsert>
}
 800b1e8:	e010      	b.n	800b20c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b1ea:	4b0e      	ldr	r3, [pc, #56]	; (800b224 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b1ec:	681a      	ldr	r2, [r3, #0]
 800b1ee:	4b0a      	ldr	r3, [pc, #40]	; (800b218 <prvAddCurrentTaskToDelayedList+0x94>)
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	4610      	mov	r0, r2
 800b1f8:	f7fd fee9 	bl	8008fce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b1fc:	4b0a      	ldr	r3, [pc, #40]	; (800b228 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	68ba      	ldr	r2, [r7, #8]
 800b202:	429a      	cmp	r2, r3
 800b204:	d202      	bcs.n	800b20c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b206:	4a08      	ldr	r2, [pc, #32]	; (800b228 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	6013      	str	r3, [r2, #0]
}
 800b20c:	bf00      	nop
 800b20e:	3710      	adds	r7, #16
 800b210:	46bd      	mov	sp, r7
 800b212:	bd80      	pop	{r7, pc}
 800b214:	24000c88 	.word	0x24000c88
 800b218:	240007b0 	.word	0x240007b0
 800b21c:	24000c70 	.word	0x24000c70
 800b220:	24000c40 	.word	0x24000c40
 800b224:	24000c3c 	.word	0x24000c3c
 800b228:	24000ca4 	.word	0x24000ca4

0800b22c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b08a      	sub	sp, #40	; 0x28
 800b230:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b232:	2300      	movs	r3, #0
 800b234:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b236:	f000 fb5b 	bl	800b8f0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b23a:	4b1c      	ldr	r3, [pc, #112]	; (800b2ac <xTimerCreateTimerTask+0x80>)
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d021      	beq.n	800b286 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b242:	2300      	movs	r3, #0
 800b244:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b246:	2300      	movs	r3, #0
 800b248:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b24a:	1d3a      	adds	r2, r7, #4
 800b24c:	f107 0108 	add.w	r1, r7, #8
 800b250:	f107 030c 	add.w	r3, r7, #12
 800b254:	4618      	mov	r0, r3
 800b256:	f7fd fe4f 	bl	8008ef8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b25a:	6879      	ldr	r1, [r7, #4]
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	9202      	str	r2, [sp, #8]
 800b262:	9301      	str	r3, [sp, #4]
 800b264:	2302      	movs	r3, #2
 800b266:	9300      	str	r3, [sp, #0]
 800b268:	2300      	movs	r3, #0
 800b26a:	460a      	mov	r2, r1
 800b26c:	4910      	ldr	r1, [pc, #64]	; (800b2b0 <xTimerCreateTimerTask+0x84>)
 800b26e:	4811      	ldr	r0, [pc, #68]	; (800b2b4 <xTimerCreateTimerTask+0x88>)
 800b270:	f7fe fe14 	bl	8009e9c <xTaskCreateStatic>
 800b274:	4602      	mov	r2, r0
 800b276:	4b10      	ldr	r3, [pc, #64]	; (800b2b8 <xTimerCreateTimerTask+0x8c>)
 800b278:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b27a:	4b0f      	ldr	r3, [pc, #60]	; (800b2b8 <xTimerCreateTimerTask+0x8c>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d001      	beq.n	800b286 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b282:	2301      	movs	r3, #1
 800b284:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b286:	697b      	ldr	r3, [r7, #20]
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d109      	bne.n	800b2a0 <xTimerCreateTimerTask+0x74>
	__asm volatile
 800b28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b290:	f383 8811 	msr	BASEPRI, r3
 800b294:	f3bf 8f6f 	isb	sy
 800b298:	f3bf 8f4f 	dsb	sy
 800b29c:	613b      	str	r3, [r7, #16]
 800b29e:	e7fe      	b.n	800b29e <xTimerCreateTimerTask+0x72>
	return xReturn;
 800b2a0:	697b      	ldr	r3, [r7, #20]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3718      	adds	r7, #24
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}
 800b2aa:	bf00      	nop
 800b2ac:	24000ce0 	.word	0x24000ce0
 800b2b0:	0800c2ac 	.word	0x0800c2ac
 800b2b4:	0800b4a5 	.word	0x0800b4a5
 800b2b8:	24000ce4 	.word	0x24000ce4

0800b2bc <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b088      	sub	sp, #32
 800b2c0:	af02      	add	r7, sp, #8
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
 800b2c8:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b2ca:	202c      	movs	r0, #44	; 0x2c
 800b2cc:	f000 fd90 	bl	800bdf0 <pvPortMalloc>
 800b2d0:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00d      	beq.n	800b2f4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The autoreload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b2e0:	697b      	ldr	r3, [r7, #20]
 800b2e2:	9301      	str	r3, [sp, #4]
 800b2e4:	6a3b      	ldr	r3, [r7, #32]
 800b2e6:	9300      	str	r3, [sp, #0]
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	68b9      	ldr	r1, [r7, #8]
 800b2ee:	68f8      	ldr	r0, [r7, #12]
 800b2f0:	f000 f805 	bl	800b2fe <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b2f4:	697b      	ldr	r3, [r7, #20]
	}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b086      	sub	sp, #24
 800b302:	af00      	add	r7, sp, #0
 800b304:	60f8      	str	r0, [r7, #12]
 800b306:	60b9      	str	r1, [r7, #8]
 800b308:	607a      	str	r2, [r7, #4]
 800b30a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d109      	bne.n	800b326 <prvInitialiseNewTimer+0x28>
 800b312:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b316:	f383 8811 	msr	BASEPRI, r3
 800b31a:	f3bf 8f6f 	isb	sy
 800b31e:	f3bf 8f4f 	dsb	sy
 800b322:	617b      	str	r3, [r7, #20]
 800b324:	e7fe      	b.n	800b324 <prvInitialiseNewTimer+0x26>

	if( pxNewTimer != NULL )
 800b326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d01e      	beq.n	800b36a <prvInitialiseNewTimer+0x6c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b32c:	f000 fae0 	bl	800b8f0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b338:	68ba      	ldr	r2, [r7, #8]
 800b33a:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33e:	683a      	ldr	r2, [r7, #0]
 800b340:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b344:	6a3a      	ldr	r2, [r7, #32]
 800b346:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b34a:	3304      	adds	r3, #4
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7fd fe0d 	bl	8008f6c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d008      	beq.n	800b36a <prvInitialiseNewTimer+0x6c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b35a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b35e:	f043 0304 	orr.w	r3, r3, #4
 800b362:	b2da      	uxtb	r2, r3
 800b364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b366:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b36a:	bf00      	nop
 800b36c:	3718      	adds	r7, #24
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
	...

0800b374 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b08a      	sub	sp, #40	; 0x28
 800b378:	af00      	add	r7, sp, #0
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	60b9      	str	r1, [r7, #8]
 800b37e:	607a      	str	r2, [r7, #4]
 800b380:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b382:	2300      	movs	r3, #0
 800b384:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d109      	bne.n	800b3a0 <xTimerGenericCommand+0x2c>
 800b38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b390:	f383 8811 	msr	BASEPRI, r3
 800b394:	f3bf 8f6f 	isb	sy
 800b398:	f3bf 8f4f 	dsb	sy
 800b39c:	623b      	str	r3, [r7, #32]
 800b39e:	e7fe      	b.n	800b39e <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b3a0:	4b19      	ldr	r3, [pc, #100]	; (800b408 <xTimerGenericCommand+0x94>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d02a      	beq.n	800b3fe <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	2b05      	cmp	r3, #5
 800b3b8:	dc18      	bgt.n	800b3ec <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b3ba:	f7ff fb89 	bl	800aad0 <xTaskGetSchedulerState>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b02      	cmp	r3, #2
 800b3c2:	d109      	bne.n	800b3d8 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b3c4:	4b10      	ldr	r3, [pc, #64]	; (800b408 <xTimerGenericCommand+0x94>)
 800b3c6:	6818      	ldr	r0, [r3, #0]
 800b3c8:	f107 0110 	add.w	r1, r7, #16
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3d0:	f7fe f804 	bl	80093dc <xQueueGenericSend>
 800b3d4:	6278      	str	r0, [r7, #36]	; 0x24
 800b3d6:	e012      	b.n	800b3fe <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b3d8:	4b0b      	ldr	r3, [pc, #44]	; (800b408 <xTimerGenericCommand+0x94>)
 800b3da:	6818      	ldr	r0, [r3, #0]
 800b3dc:	f107 0110 	add.w	r1, r7, #16
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f7fd fffa 	bl	80093dc <xQueueGenericSend>
 800b3e8:	6278      	str	r0, [r7, #36]	; 0x24
 800b3ea:	e008      	b.n	800b3fe <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b3ec:	4b06      	ldr	r3, [pc, #24]	; (800b408 <xTimerGenericCommand+0x94>)
 800b3ee:	6818      	ldr	r0, [r3, #0]
 800b3f0:	f107 0110 	add.w	r1, r7, #16
 800b3f4:	2300      	movs	r3, #0
 800b3f6:	683a      	ldr	r2, [r7, #0]
 800b3f8:	f7fe f8ea 	bl	80095d0 <xQueueGenericSendFromISR>
 800b3fc:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b400:	4618      	mov	r0, r3
 800b402:	3728      	adds	r7, #40	; 0x28
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}
 800b408:	24000ce0 	.word	0x24000ce0

0800b40c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b40c:	b580      	push	{r7, lr}
 800b40e:	b088      	sub	sp, #32
 800b410:	af02      	add	r7, sp, #8
 800b412:	6078      	str	r0, [r7, #4]
 800b414:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b416:	4b22      	ldr	r3, [pc, #136]	; (800b4a0 <prvProcessExpiredTimer+0x94>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	68db      	ldr	r3, [r3, #12]
 800b41c:	68db      	ldr	r3, [r3, #12]
 800b41e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b420:	697b      	ldr	r3, [r7, #20]
 800b422:	3304      	adds	r3, #4
 800b424:	4618      	mov	r0, r3
 800b426:	f7fd fe0b 	bl	8009040 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b42a:	697b      	ldr	r3, [r7, #20]
 800b42c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b430:	f003 0304 	and.w	r3, r3, #4
 800b434:	2b00      	cmp	r3, #0
 800b436:	d021      	beq.n	800b47c <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b438:	697b      	ldr	r3, [r7, #20]
 800b43a:	699a      	ldr	r2, [r3, #24]
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	18d1      	adds	r1, r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	683a      	ldr	r2, [r7, #0]
 800b444:	6978      	ldr	r0, [r7, #20]
 800b446:	f000 f8d1 	bl	800b5ec <prvInsertTimerInActiveList>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d01e      	beq.n	800b48e <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b450:	2300      	movs	r3, #0
 800b452:	9300      	str	r3, [sp, #0]
 800b454:	2300      	movs	r3, #0
 800b456:	687a      	ldr	r2, [r7, #4]
 800b458:	2100      	movs	r1, #0
 800b45a:	6978      	ldr	r0, [r7, #20]
 800b45c:	f7ff ff8a 	bl	800b374 <xTimerGenericCommand>
 800b460:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b462:	693b      	ldr	r3, [r7, #16]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d112      	bne.n	800b48e <prvProcessExpiredTimer+0x82>
 800b468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b46c:	f383 8811 	msr	BASEPRI, r3
 800b470:	f3bf 8f6f 	isb	sy
 800b474:	f3bf 8f4f 	dsb	sy
 800b478:	60fb      	str	r3, [r7, #12]
 800b47a:	e7fe      	b.n	800b47a <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b482:	f023 0301 	bic.w	r3, r3, #1
 800b486:	b2da      	uxtb	r2, r3
 800b488:	697b      	ldr	r3, [r7, #20]
 800b48a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b48e:	697b      	ldr	r3, [r7, #20]
 800b490:	6a1b      	ldr	r3, [r3, #32]
 800b492:	6978      	ldr	r0, [r7, #20]
 800b494:	4798      	blx	r3
}
 800b496:	bf00      	nop
 800b498:	3718      	adds	r7, #24
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	24000cd8 	.word	0x24000cd8

0800b4a4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b4a4:	b580      	push	{r7, lr}
 800b4a6:	b084      	sub	sp, #16
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4ac:	f107 0308 	add.w	r3, r7, #8
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f000 f857 	bl	800b564 <prvGetNextExpireTime>
 800b4b6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b4b8:	68bb      	ldr	r3, [r7, #8]
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	68f8      	ldr	r0, [r7, #12]
 800b4be:	f000 f803 	bl	800b4c8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b4c2:	f000 f8d5 	bl	800b670 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4c6:	e7f1      	b.n	800b4ac <prvTimerTask+0x8>

0800b4c8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b084      	sub	sp, #16
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b4d2:	f7fe ff19 	bl	800a308 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b4d6:	f107 0308 	add.w	r3, r7, #8
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f000 f866 	bl	800b5ac <prvSampleTimeNow>
 800b4e0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b4e2:	68bb      	ldr	r3, [r7, #8]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d130      	bne.n	800b54a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b4e8:	683b      	ldr	r3, [r7, #0]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d10a      	bne.n	800b504 <prvProcessTimerOrBlockTask+0x3c>
 800b4ee:	687a      	ldr	r2, [r7, #4]
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	429a      	cmp	r2, r3
 800b4f4:	d806      	bhi.n	800b504 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b4f6:	f7fe ff15 	bl	800a324 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b4fa:	68f9      	ldr	r1, [r7, #12]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	f7ff ff85 	bl	800b40c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b502:	e024      	b.n	800b54e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b504:	683b      	ldr	r3, [r7, #0]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d008      	beq.n	800b51c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b50a:	4b13      	ldr	r3, [pc, #76]	; (800b558 <prvProcessTimerOrBlockTask+0x90>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2b00      	cmp	r3, #0
 800b512:	d101      	bne.n	800b518 <prvProcessTimerOrBlockTask+0x50>
 800b514:	2301      	movs	r3, #1
 800b516:	e000      	b.n	800b51a <prvProcessTimerOrBlockTask+0x52>
 800b518:	2300      	movs	r3, #0
 800b51a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b51c:	4b0f      	ldr	r3, [pc, #60]	; (800b55c <prvProcessTimerOrBlockTask+0x94>)
 800b51e:	6818      	ldr	r0, [r3, #0]
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	1ad3      	subs	r3, r2, r3
 800b526:	683a      	ldr	r2, [r7, #0]
 800b528:	4619      	mov	r1, r3
 800b52a:	f7fe fc83 	bl	8009e34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b52e:	f7fe fef9 	bl	800a324 <xTaskResumeAll>
 800b532:	4603      	mov	r3, r0
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10a      	bne.n	800b54e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b538:	4b09      	ldr	r3, [pc, #36]	; (800b560 <prvProcessTimerOrBlockTask+0x98>)
 800b53a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b53e:	601a      	str	r2, [r3, #0]
 800b540:	f3bf 8f4f 	dsb	sy
 800b544:	f3bf 8f6f 	isb	sy
}
 800b548:	e001      	b.n	800b54e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b54a:	f7fe feeb 	bl	800a324 <xTaskResumeAll>
}
 800b54e:	bf00      	nop
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}
 800b556:	bf00      	nop
 800b558:	24000cdc 	.word	0x24000cdc
 800b55c:	24000ce0 	.word	0x24000ce0
 800b560:	e000ed04 	.word	0xe000ed04

0800b564 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b564:	b480      	push	{r7}
 800b566:	b085      	sub	sp, #20
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b56c:	4b0e      	ldr	r3, [pc, #56]	; (800b5a8 <prvGetNextExpireTime+0x44>)
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d101      	bne.n	800b57a <prvGetNextExpireTime+0x16>
 800b576:	2201      	movs	r2, #1
 800b578:	e000      	b.n	800b57c <prvGetNextExpireTime+0x18>
 800b57a:	2200      	movs	r2, #0
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d105      	bne.n	800b594 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b588:	4b07      	ldr	r3, [pc, #28]	; (800b5a8 <prvGetNextExpireTime+0x44>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	60fb      	str	r3, [r7, #12]
 800b592:	e001      	b.n	800b598 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b594:	2300      	movs	r3, #0
 800b596:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b598:	68fb      	ldr	r3, [r7, #12]
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3714      	adds	r7, #20
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr
 800b5a6:	bf00      	nop
 800b5a8:	24000cd8 	.word	0x24000cd8

0800b5ac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b084      	sub	sp, #16
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b5b4:	f7fe ff52 	bl	800a45c <xTaskGetTickCount>
 800b5b8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b5ba:	4b0b      	ldr	r3, [pc, #44]	; (800b5e8 <prvSampleTimeNow+0x3c>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	68fa      	ldr	r2, [r7, #12]
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	d205      	bcs.n	800b5d0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b5c4:	f000 f930 	bl	800b828 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2201      	movs	r2, #1
 800b5cc:	601a      	str	r2, [r3, #0]
 800b5ce:	e002      	b.n	800b5d6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b5d6:	4a04      	ldr	r2, [pc, #16]	; (800b5e8 <prvSampleTimeNow+0x3c>)
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3710      	adds	r7, #16
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	24000ce8 	.word	0x24000ce8

0800b5ec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b086      	sub	sp, #24
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	60f8      	str	r0, [r7, #12]
 800b5f4:	60b9      	str	r1, [r7, #8]
 800b5f6:	607a      	str	r2, [r7, #4]
 800b5f8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	68ba      	ldr	r2, [r7, #8]
 800b602:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	68fa      	ldr	r2, [r7, #12]
 800b608:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b60a:	68ba      	ldr	r2, [r7, #8]
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	429a      	cmp	r2, r3
 800b610:	d812      	bhi.n	800b638 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b612:	687a      	ldr	r2, [r7, #4]
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	1ad2      	subs	r2, r2, r3
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	699b      	ldr	r3, [r3, #24]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d302      	bcc.n	800b626 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b620:	2301      	movs	r3, #1
 800b622:	617b      	str	r3, [r7, #20]
 800b624:	e01b      	b.n	800b65e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b626:	4b10      	ldr	r3, [pc, #64]	; (800b668 <prvInsertTimerInActiveList+0x7c>)
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	3304      	adds	r3, #4
 800b62e:	4619      	mov	r1, r3
 800b630:	4610      	mov	r0, r2
 800b632:	f7fd fccc 	bl	8008fce <vListInsert>
 800b636:	e012      	b.n	800b65e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	429a      	cmp	r2, r3
 800b63e:	d206      	bcs.n	800b64e <prvInsertTimerInActiveList+0x62>
 800b640:	68ba      	ldr	r2, [r7, #8]
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	429a      	cmp	r2, r3
 800b646:	d302      	bcc.n	800b64e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b648:	2301      	movs	r3, #1
 800b64a:	617b      	str	r3, [r7, #20]
 800b64c:	e007      	b.n	800b65e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b64e:	4b07      	ldr	r3, [pc, #28]	; (800b66c <prvInsertTimerInActiveList+0x80>)
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	3304      	adds	r3, #4
 800b656:	4619      	mov	r1, r3
 800b658:	4610      	mov	r0, r2
 800b65a:	f7fd fcb8 	bl	8008fce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b65e:	697b      	ldr	r3, [r7, #20]
}
 800b660:	4618      	mov	r0, r3
 800b662:	3718      	adds	r7, #24
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	24000cdc 	.word	0x24000cdc
 800b66c:	24000cd8 	.word	0x24000cd8

0800b670 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b08e      	sub	sp, #56	; 0x38
 800b674:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b676:	e0c6      	b.n	800b806 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	da17      	bge.n	800b6ae <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b67e:	1d3b      	adds	r3, r7, #4
 800b680:	3304      	adds	r3, #4
 800b682:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b686:	2b00      	cmp	r3, #0
 800b688:	d109      	bne.n	800b69e <prvProcessReceivedCommands+0x2e>
 800b68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68e:	f383 8811 	msr	BASEPRI, r3
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	61fb      	str	r3, [r7, #28]
 800b69c:	e7fe      	b.n	800b69c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6a4:	6850      	ldr	r0, [r2, #4]
 800b6a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6a8:	6892      	ldr	r2, [r2, #8]
 800b6aa:	4611      	mov	r1, r2
 800b6ac:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f2c0 80a7 	blt.w	800b804 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b6ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6bc:	695b      	ldr	r3, [r3, #20]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d004      	beq.n	800b6cc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6c4:	3304      	adds	r3, #4
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fd fcba 	bl	8009040 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6cc:	463b      	mov	r3, r7
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f7ff ff6c 	bl	800b5ac <prvSampleTimeNow>
 800b6d4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2b09      	cmp	r3, #9
 800b6da:	f200 8094 	bhi.w	800b806 <prvProcessReceivedCommands+0x196>
 800b6de:	a201      	add	r2, pc, #4	; (adr r2, 800b6e4 <prvProcessReceivedCommands+0x74>)
 800b6e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6e4:	0800b70d 	.word	0x0800b70d
 800b6e8:	0800b70d 	.word	0x0800b70d
 800b6ec:	0800b70d 	.word	0x0800b70d
 800b6f0:	0800b77f 	.word	0x0800b77f
 800b6f4:	0800b793 	.word	0x0800b793
 800b6f8:	0800b7db 	.word	0x0800b7db
 800b6fc:	0800b70d 	.word	0x0800b70d
 800b700:	0800b70d 	.word	0x0800b70d
 800b704:	0800b77f 	.word	0x0800b77f
 800b708:	0800b793 	.word	0x0800b793
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b70c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b70e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b712:	f043 0301 	orr.w	r3, r3, #1
 800b716:	b2da      	uxtb	r2, r3
 800b718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b71e:	68ba      	ldr	r2, [r7, #8]
 800b720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b722:	699b      	ldr	r3, [r3, #24]
 800b724:	18d1      	adds	r1, r2, r3
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b72a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b72c:	f7ff ff5e 	bl	800b5ec <prvInsertTimerInActiveList>
 800b730:	4603      	mov	r3, r0
 800b732:	2b00      	cmp	r3, #0
 800b734:	d067      	beq.n	800b806 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b738:	6a1b      	ldr	r3, [r3, #32]
 800b73a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b73c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b73e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b740:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b744:	f003 0304 	and.w	r3, r3, #4
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d05c      	beq.n	800b806 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b74c:	68ba      	ldr	r2, [r7, #8]
 800b74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b750:	699b      	ldr	r3, [r3, #24]
 800b752:	441a      	add	r2, r3
 800b754:	2300      	movs	r3, #0
 800b756:	9300      	str	r3, [sp, #0]
 800b758:	2300      	movs	r3, #0
 800b75a:	2100      	movs	r1, #0
 800b75c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b75e:	f7ff fe09 	bl	800b374 <xTimerGenericCommand>
 800b762:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b764:	6a3b      	ldr	r3, [r7, #32]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d14d      	bne.n	800b806 <prvProcessReceivedCommands+0x196>
 800b76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b76e:	f383 8811 	msr	BASEPRI, r3
 800b772:	f3bf 8f6f 	isb	sy
 800b776:	f3bf 8f4f 	dsb	sy
 800b77a:	61bb      	str	r3, [r7, #24]
 800b77c:	e7fe      	b.n	800b77c <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b780:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b784:	f023 0301 	bic.w	r3, r3, #1
 800b788:	b2da      	uxtb	r2, r3
 800b78a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b790:	e039      	b.n	800b806 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b794:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b798:	f043 0301 	orr.w	r3, r3, #1
 800b79c:	b2da      	uxtb	r2, r3
 800b79e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b7aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ac:	699b      	ldr	r3, [r3, #24]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d109      	bne.n	800b7c6 <prvProcessReceivedCommands+0x156>
 800b7b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b6:	f383 8811 	msr	BASEPRI, r3
 800b7ba:	f3bf 8f6f 	isb	sy
 800b7be:	f3bf 8f4f 	dsb	sy
 800b7c2:	617b      	str	r3, [r7, #20]
 800b7c4:	e7fe      	b.n	800b7c4 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c8:	699a      	ldr	r2, [r3, #24]
 800b7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7cc:	18d1      	adds	r1, r2, r3
 800b7ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7d4:	f7ff ff0a 	bl	800b5ec <prvInsertTimerInActiveList>
					break;
 800b7d8:	e015      	b.n	800b806 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7e0:	f003 0302 	and.w	r3, r3, #2
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d103      	bne.n	800b7f0 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800b7e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7ea:	f000 fbc3 	bl	800bf74 <vPortFree>
 800b7ee:	e00a      	b.n	800b806 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b7f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7f6:	f023 0301 	bic.w	r3, r3, #1
 800b7fa:	b2da      	uxtb	r2, r3
 800b7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b802:	e000      	b.n	800b806 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b804:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b806:	4b07      	ldr	r3, [pc, #28]	; (800b824 <prvProcessReceivedCommands+0x1b4>)
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	1d39      	adds	r1, r7, #4
 800b80c:	2200      	movs	r2, #0
 800b80e:	4618      	mov	r0, r3
 800b810:	f7fd ff72 	bl	80096f8 <xQueueReceive>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	f47f af2e 	bne.w	800b678 <prvProcessReceivedCommands+0x8>
	}
}
 800b81c:	bf00      	nop
 800b81e:	3730      	adds	r7, #48	; 0x30
 800b820:	46bd      	mov	sp, r7
 800b822:	bd80      	pop	{r7, pc}
 800b824:	24000ce0 	.word	0x24000ce0

0800b828 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b088      	sub	sp, #32
 800b82c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b82e:	e047      	b.n	800b8c0 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b830:	4b2d      	ldr	r3, [pc, #180]	; (800b8e8 <prvSwitchTimerLists+0xc0>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	68db      	ldr	r3, [r3, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b83a:	4b2b      	ldr	r3, [pc, #172]	; (800b8e8 <prvSwitchTimerLists+0xc0>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	68db      	ldr	r3, [r3, #12]
 800b842:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	3304      	adds	r3, #4
 800b848:	4618      	mov	r0, r3
 800b84a:	f7fd fbf9 	bl	8009040 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	6a1b      	ldr	r3, [r3, #32]
 800b852:	68f8      	ldr	r0, [r7, #12]
 800b854:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b85c:	f003 0304 	and.w	r3, r3, #4
 800b860:	2b00      	cmp	r3, #0
 800b862:	d02d      	beq.n	800b8c0 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	699b      	ldr	r3, [r3, #24]
 800b868:	693a      	ldr	r2, [r7, #16]
 800b86a:	4413      	add	r3, r2
 800b86c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b86e:	68ba      	ldr	r2, [r7, #8]
 800b870:	693b      	ldr	r3, [r7, #16]
 800b872:	429a      	cmp	r2, r3
 800b874:	d90e      	bls.n	800b894 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	68ba      	ldr	r2, [r7, #8]
 800b87a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b882:	4b19      	ldr	r3, [pc, #100]	; (800b8e8 <prvSwitchTimerLists+0xc0>)
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	3304      	adds	r3, #4
 800b88a:	4619      	mov	r1, r3
 800b88c:	4610      	mov	r0, r2
 800b88e:	f7fd fb9e 	bl	8008fce <vListInsert>
 800b892:	e015      	b.n	800b8c0 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b894:	2300      	movs	r3, #0
 800b896:	9300      	str	r3, [sp, #0]
 800b898:	2300      	movs	r3, #0
 800b89a:	693a      	ldr	r2, [r7, #16]
 800b89c:	2100      	movs	r1, #0
 800b89e:	68f8      	ldr	r0, [r7, #12]
 800b8a0:	f7ff fd68 	bl	800b374 <xTimerGenericCommand>
 800b8a4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d109      	bne.n	800b8c0 <prvSwitchTimerLists+0x98>
 800b8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8b0:	f383 8811 	msr	BASEPRI, r3
 800b8b4:	f3bf 8f6f 	isb	sy
 800b8b8:	f3bf 8f4f 	dsb	sy
 800b8bc:	603b      	str	r3, [r7, #0]
 800b8be:	e7fe      	b.n	800b8be <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8c0:	4b09      	ldr	r3, [pc, #36]	; (800b8e8 <prvSwitchTimerLists+0xc0>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1b2      	bne.n	800b830 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b8ca:	4b07      	ldr	r3, [pc, #28]	; (800b8e8 <prvSwitchTimerLists+0xc0>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b8d0:	4b06      	ldr	r3, [pc, #24]	; (800b8ec <prvSwitchTimerLists+0xc4>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	4a04      	ldr	r2, [pc, #16]	; (800b8e8 <prvSwitchTimerLists+0xc0>)
 800b8d6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b8d8:	4a04      	ldr	r2, [pc, #16]	; (800b8ec <prvSwitchTimerLists+0xc4>)
 800b8da:	697b      	ldr	r3, [r7, #20]
 800b8dc:	6013      	str	r3, [r2, #0]
}
 800b8de:	bf00      	nop
 800b8e0:	3718      	adds	r7, #24
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	bd80      	pop	{r7, pc}
 800b8e6:	bf00      	nop
 800b8e8:	24000cd8 	.word	0x24000cd8
 800b8ec:	24000cdc 	.word	0x24000cdc

0800b8f0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b8f6:	f000 f961 	bl	800bbbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b8fa:	4b15      	ldr	r3, [pc, #84]	; (800b950 <prvCheckForValidListAndQueue+0x60>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d120      	bne.n	800b944 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b902:	4814      	ldr	r0, [pc, #80]	; (800b954 <prvCheckForValidListAndQueue+0x64>)
 800b904:	f7fd fb12 	bl	8008f2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b908:	4813      	ldr	r0, [pc, #76]	; (800b958 <prvCheckForValidListAndQueue+0x68>)
 800b90a:	f7fd fb0f 	bl	8008f2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b90e:	4b13      	ldr	r3, [pc, #76]	; (800b95c <prvCheckForValidListAndQueue+0x6c>)
 800b910:	4a10      	ldr	r2, [pc, #64]	; (800b954 <prvCheckForValidListAndQueue+0x64>)
 800b912:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b914:	4b12      	ldr	r3, [pc, #72]	; (800b960 <prvCheckForValidListAndQueue+0x70>)
 800b916:	4a10      	ldr	r2, [pc, #64]	; (800b958 <prvCheckForValidListAndQueue+0x68>)
 800b918:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b91a:	2300      	movs	r3, #0
 800b91c:	9300      	str	r3, [sp, #0]
 800b91e:	4b11      	ldr	r3, [pc, #68]	; (800b964 <prvCheckForValidListAndQueue+0x74>)
 800b920:	4a11      	ldr	r2, [pc, #68]	; (800b968 <prvCheckForValidListAndQueue+0x78>)
 800b922:	2110      	movs	r1, #16
 800b924:	200a      	movs	r0, #10
 800b926:	f7fd fc1d 	bl	8009164 <xQueueGenericCreateStatic>
 800b92a:	4602      	mov	r2, r0
 800b92c:	4b08      	ldr	r3, [pc, #32]	; (800b950 <prvCheckForValidListAndQueue+0x60>)
 800b92e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b930:	4b07      	ldr	r3, [pc, #28]	; (800b950 <prvCheckForValidListAndQueue+0x60>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d005      	beq.n	800b944 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b938:	4b05      	ldr	r3, [pc, #20]	; (800b950 <prvCheckForValidListAndQueue+0x60>)
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	490b      	ldr	r1, [pc, #44]	; (800b96c <prvCheckForValidListAndQueue+0x7c>)
 800b93e:	4618      	mov	r0, r3
 800b940:	f7fe fa26 	bl	8009d90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b944:	f000 f968 	bl	800bc18 <vPortExitCritical>
}
 800b948:	bf00      	nop
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	24000ce0 	.word	0x24000ce0
 800b954:	24000cb0 	.word	0x24000cb0
 800b958:	24000cc4 	.word	0x24000cc4
 800b95c:	24000cd8 	.word	0x24000cd8
 800b960:	24000cdc 	.word	0x24000cdc
 800b964:	24000d8c 	.word	0x24000d8c
 800b968:	24000cec 	.word	0x24000cec
 800b96c:	0800c2b4 	.word	0x0800c2b4

0800b970 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b970:	b480      	push	{r7}
 800b972:	b085      	sub	sp, #20
 800b974:	af00      	add	r7, sp, #0
 800b976:	60f8      	str	r0, [r7, #12]
 800b978:	60b9      	str	r1, [r7, #8]
 800b97a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	3b04      	subs	r3, #4
 800b980:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b988:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	3b04      	subs	r3, #4
 800b98e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	f023 0201 	bic.w	r2, r3, #1
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	3b04      	subs	r3, #4
 800b99e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b9a0:	4a0c      	ldr	r2, [pc, #48]	; (800b9d4 <pxPortInitialiseStack+0x64>)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	3b14      	subs	r3, #20
 800b9aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	3b04      	subs	r3, #4
 800b9b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	f06f 0202 	mvn.w	r2, #2
 800b9be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	3b20      	subs	r3, #32
 800b9c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	3714      	adds	r7, #20
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr
 800b9d4:	0800b9d9 	.word	0x0800b9d9

0800b9d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b085      	sub	sp, #20
 800b9dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b9e2:	4b11      	ldr	r3, [pc, #68]	; (800ba28 <prvTaskExitError+0x50>)
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9ea:	d009      	beq.n	800ba00 <prvTaskExitError+0x28>
 800b9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9f0:	f383 8811 	msr	BASEPRI, r3
 800b9f4:	f3bf 8f6f 	isb	sy
 800b9f8:	f3bf 8f4f 	dsb	sy
 800b9fc:	60fb      	str	r3, [r7, #12]
 800b9fe:	e7fe      	b.n	800b9fe <prvTaskExitError+0x26>
 800ba00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba04:	f383 8811 	msr	BASEPRI, r3
 800ba08:	f3bf 8f6f 	isb	sy
 800ba0c:	f3bf 8f4f 	dsb	sy
 800ba10:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ba12:	bf00      	nop
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d0fc      	beq.n	800ba14 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ba1a:	bf00      	nop
 800ba1c:	3714      	adds	r7, #20
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr
 800ba26:	bf00      	nop
 800ba28:	24000010 	.word	0x24000010
 800ba2c:	00000000 	.word	0x00000000

0800ba30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba30:	4b07      	ldr	r3, [pc, #28]	; (800ba50 <pxCurrentTCBConst2>)
 800ba32:	6819      	ldr	r1, [r3, #0]
 800ba34:	6808      	ldr	r0, [r1, #0]
 800ba36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba3a:	f380 8809 	msr	PSP, r0
 800ba3e:	f3bf 8f6f 	isb	sy
 800ba42:	f04f 0000 	mov.w	r0, #0
 800ba46:	f380 8811 	msr	BASEPRI, r0
 800ba4a:	4770      	bx	lr
 800ba4c:	f3af 8000 	nop.w

0800ba50 <pxCurrentTCBConst2>:
 800ba50:	240007b0 	.word	0x240007b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba54:	bf00      	nop
 800ba56:	bf00      	nop

0800ba58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba58:	4808      	ldr	r0, [pc, #32]	; (800ba7c <prvPortStartFirstTask+0x24>)
 800ba5a:	6800      	ldr	r0, [r0, #0]
 800ba5c:	6800      	ldr	r0, [r0, #0]
 800ba5e:	f380 8808 	msr	MSP, r0
 800ba62:	f04f 0000 	mov.w	r0, #0
 800ba66:	f380 8814 	msr	CONTROL, r0
 800ba6a:	b662      	cpsie	i
 800ba6c:	b661      	cpsie	f
 800ba6e:	f3bf 8f4f 	dsb	sy
 800ba72:	f3bf 8f6f 	isb	sy
 800ba76:	df00      	svc	0
 800ba78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba7a:	bf00      	nop
 800ba7c:	e000ed08 	.word	0xe000ed08

0800ba80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b086      	sub	sp, #24
 800ba84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba86:	4b44      	ldr	r3, [pc, #272]	; (800bb98 <xPortStartScheduler+0x118>)
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a44      	ldr	r2, [pc, #272]	; (800bb9c <xPortStartScheduler+0x11c>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d109      	bne.n	800baa4 <xPortStartScheduler+0x24>
 800ba90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba94:	f383 8811 	msr	BASEPRI, r3
 800ba98:	f3bf 8f6f 	isb	sy
 800ba9c:	f3bf 8f4f 	dsb	sy
 800baa0:	613b      	str	r3, [r7, #16]
 800baa2:	e7fe      	b.n	800baa2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800baa4:	4b3c      	ldr	r3, [pc, #240]	; (800bb98 <xPortStartScheduler+0x118>)
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	4a3d      	ldr	r2, [pc, #244]	; (800bba0 <xPortStartScheduler+0x120>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d109      	bne.n	800bac2 <xPortStartScheduler+0x42>
 800baae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	60fb      	str	r3, [r7, #12]
 800bac0:	e7fe      	b.n	800bac0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bac2:	4b38      	ldr	r3, [pc, #224]	; (800bba4 <xPortStartScheduler+0x124>)
 800bac4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bac6:	697b      	ldr	r3, [r7, #20]
 800bac8:	781b      	ldrb	r3, [r3, #0]
 800baca:	b2db      	uxtb	r3, r3
 800bacc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bace:	697b      	ldr	r3, [r7, #20]
 800bad0:	22ff      	movs	r2, #255	; 0xff
 800bad2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800badc:	78fb      	ldrb	r3, [r7, #3]
 800bade:	b2db      	uxtb	r3, r3
 800bae0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bae4:	b2da      	uxtb	r2, r3
 800bae6:	4b30      	ldr	r3, [pc, #192]	; (800bba8 <xPortStartScheduler+0x128>)
 800bae8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800baea:	4b30      	ldr	r3, [pc, #192]	; (800bbac <xPortStartScheduler+0x12c>)
 800baec:	2207      	movs	r2, #7
 800baee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800baf0:	e009      	b.n	800bb06 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800baf2:	4b2e      	ldr	r3, [pc, #184]	; (800bbac <xPortStartScheduler+0x12c>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	3b01      	subs	r3, #1
 800baf8:	4a2c      	ldr	r2, [pc, #176]	; (800bbac <xPortStartScheduler+0x12c>)
 800bafa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bafc:	78fb      	ldrb	r3, [r7, #3]
 800bafe:	b2db      	uxtb	r3, r3
 800bb00:	005b      	lsls	r3, r3, #1
 800bb02:	b2db      	uxtb	r3, r3
 800bb04:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bb06:	78fb      	ldrb	r3, [r7, #3]
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb0e:	2b80      	cmp	r3, #128	; 0x80
 800bb10:	d0ef      	beq.n	800baf2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bb12:	4b26      	ldr	r3, [pc, #152]	; (800bbac <xPortStartScheduler+0x12c>)
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f1c3 0307 	rsb	r3, r3, #7
 800bb1a:	2b04      	cmp	r3, #4
 800bb1c:	d009      	beq.n	800bb32 <xPortStartScheduler+0xb2>
 800bb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb22:	f383 8811 	msr	BASEPRI, r3
 800bb26:	f3bf 8f6f 	isb	sy
 800bb2a:	f3bf 8f4f 	dsb	sy
 800bb2e:	60bb      	str	r3, [r7, #8]
 800bb30:	e7fe      	b.n	800bb30 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb32:	4b1e      	ldr	r3, [pc, #120]	; (800bbac <xPortStartScheduler+0x12c>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	021b      	lsls	r3, r3, #8
 800bb38:	4a1c      	ldr	r2, [pc, #112]	; (800bbac <xPortStartScheduler+0x12c>)
 800bb3a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb3c:	4b1b      	ldr	r3, [pc, #108]	; (800bbac <xPortStartScheduler+0x12c>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb44:	4a19      	ldr	r2, [pc, #100]	; (800bbac <xPortStartScheduler+0x12c>)
 800bb46:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	b2da      	uxtb	r2, r3
 800bb4c:	697b      	ldr	r3, [r7, #20]
 800bb4e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb50:	4b17      	ldr	r3, [pc, #92]	; (800bbb0 <xPortStartScheduler+0x130>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4a16      	ldr	r2, [pc, #88]	; (800bbb0 <xPortStartScheduler+0x130>)
 800bb56:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb5a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb5c:	4b14      	ldr	r3, [pc, #80]	; (800bbb0 <xPortStartScheduler+0x130>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	4a13      	ldr	r2, [pc, #76]	; (800bbb0 <xPortStartScheduler+0x130>)
 800bb62:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb66:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb68:	f000 f8d6 	bl	800bd18 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb6c:	4b11      	ldr	r3, [pc, #68]	; (800bbb4 <xPortStartScheduler+0x134>)
 800bb6e:	2200      	movs	r2, #0
 800bb70:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb72:	f000 f8f5 	bl	800bd60 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb76:	4b10      	ldr	r3, [pc, #64]	; (800bbb8 <xPortStartScheduler+0x138>)
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	4a0f      	ldr	r2, [pc, #60]	; (800bbb8 <xPortStartScheduler+0x138>)
 800bb7c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bb80:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bb82:	f7ff ff69 	bl	800ba58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bb86:	f7fe fd43 	bl	800a610 <vTaskSwitchContext>
	prvTaskExitError();
 800bb8a:	f7ff ff25 	bl	800b9d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb8e:	2300      	movs	r3, #0
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3718      	adds	r7, #24
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	e000ed00 	.word	0xe000ed00
 800bb9c:	410fc271 	.word	0x410fc271
 800bba0:	410fc270 	.word	0x410fc270
 800bba4:	e000e400 	.word	0xe000e400
 800bba8:	24000ddc 	.word	0x24000ddc
 800bbac:	24000de0 	.word	0x24000de0
 800bbb0:	e000ed20 	.word	0xe000ed20
 800bbb4:	24000010 	.word	0x24000010
 800bbb8:	e000ef34 	.word	0xe000ef34

0800bbbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc6:	f383 8811 	msr	BASEPRI, r3
 800bbca:	f3bf 8f6f 	isb	sy
 800bbce:	f3bf 8f4f 	dsb	sy
 800bbd2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bbd4:	4b0e      	ldr	r3, [pc, #56]	; (800bc10 <vPortEnterCritical+0x54>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	4a0d      	ldr	r2, [pc, #52]	; (800bc10 <vPortEnterCritical+0x54>)
 800bbdc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bbde:	4b0c      	ldr	r3, [pc, #48]	; (800bc10 <vPortEnterCritical+0x54>)
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	2b01      	cmp	r3, #1
 800bbe4:	d10e      	bne.n	800bc04 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bbe6:	4b0b      	ldr	r3, [pc, #44]	; (800bc14 <vPortEnterCritical+0x58>)
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	b2db      	uxtb	r3, r3
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d009      	beq.n	800bc04 <vPortEnterCritical+0x48>
 800bbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	603b      	str	r3, [r7, #0]
 800bc02:	e7fe      	b.n	800bc02 <vPortEnterCritical+0x46>
	}
}
 800bc04:	bf00      	nop
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0e:	4770      	bx	lr
 800bc10:	24000010 	.word	0x24000010
 800bc14:	e000ed04 	.word	0xe000ed04

0800bc18 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b083      	sub	sp, #12
 800bc1c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bc1e:	4b11      	ldr	r3, [pc, #68]	; (800bc64 <vPortExitCritical+0x4c>)
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d109      	bne.n	800bc3a <vPortExitCritical+0x22>
 800bc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	607b      	str	r3, [r7, #4]
 800bc38:	e7fe      	b.n	800bc38 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800bc3a:	4b0a      	ldr	r3, [pc, #40]	; (800bc64 <vPortExitCritical+0x4c>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	4a08      	ldr	r2, [pc, #32]	; (800bc64 <vPortExitCritical+0x4c>)
 800bc42:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc44:	4b07      	ldr	r3, [pc, #28]	; (800bc64 <vPortExitCritical+0x4c>)
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d104      	bne.n	800bc56 <vPortExitCritical+0x3e>
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc56:	bf00      	nop
 800bc58:	370c      	adds	r7, #12
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr
 800bc62:	bf00      	nop
 800bc64:	24000010 	.word	0x24000010
	...

0800bc70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc70:	f3ef 8009 	mrs	r0, PSP
 800bc74:	f3bf 8f6f 	isb	sy
 800bc78:	4b15      	ldr	r3, [pc, #84]	; (800bcd0 <pxCurrentTCBConst>)
 800bc7a:	681a      	ldr	r2, [r3, #0]
 800bc7c:	f01e 0f10 	tst.w	lr, #16
 800bc80:	bf08      	it	eq
 800bc82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc8a:	6010      	str	r0, [r2, #0]
 800bc8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bc94:	f380 8811 	msr	BASEPRI, r0
 800bc98:	f3bf 8f4f 	dsb	sy
 800bc9c:	f3bf 8f6f 	isb	sy
 800bca0:	f7fe fcb6 	bl	800a610 <vTaskSwitchContext>
 800bca4:	f04f 0000 	mov.w	r0, #0
 800bca8:	f380 8811 	msr	BASEPRI, r0
 800bcac:	bc09      	pop	{r0, r3}
 800bcae:	6819      	ldr	r1, [r3, #0]
 800bcb0:	6808      	ldr	r0, [r1, #0]
 800bcb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb6:	f01e 0f10 	tst.w	lr, #16
 800bcba:	bf08      	it	eq
 800bcbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bcc0:	f380 8809 	msr	PSP, r0
 800bcc4:	f3bf 8f6f 	isb	sy
 800bcc8:	4770      	bx	lr
 800bcca:	bf00      	nop
 800bccc:	f3af 8000 	nop.w

0800bcd0 <pxCurrentTCBConst>:
 800bcd0:	240007b0 	.word	0x240007b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bcd4:	bf00      	nop
 800bcd6:	bf00      	nop

0800bcd8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b082      	sub	sp, #8
 800bcdc:	af00      	add	r7, sp, #0
	__asm volatile
 800bcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce2:	f383 8811 	msr	BASEPRI, r3
 800bce6:	f3bf 8f6f 	isb	sy
 800bcea:	f3bf 8f4f 	dsb	sy
 800bcee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bcf0:	f7fe fbd6 	bl	800a4a0 <xTaskIncrementTick>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d003      	beq.n	800bd02 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bcfa:	4b06      	ldr	r3, [pc, #24]	; (800bd14 <SysTick_Handler+0x3c>)
 800bcfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd00:	601a      	str	r2, [r3, #0]
 800bd02:	2300      	movs	r3, #0
 800bd04:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800bd0c:	bf00      	nop
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}
 800bd14:	e000ed04 	.word	0xe000ed04

0800bd18 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bd18:	b480      	push	{r7}
 800bd1a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bd1c:	4b0b      	ldr	r3, [pc, #44]	; (800bd4c <vPortSetupTimerInterrupt+0x34>)
 800bd1e:	2200      	movs	r2, #0
 800bd20:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bd22:	4b0b      	ldr	r3, [pc, #44]	; (800bd50 <vPortSetupTimerInterrupt+0x38>)
 800bd24:	2200      	movs	r2, #0
 800bd26:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bd28:	4b0a      	ldr	r3, [pc, #40]	; (800bd54 <vPortSetupTimerInterrupt+0x3c>)
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	4a0a      	ldr	r2, [pc, #40]	; (800bd58 <vPortSetupTimerInterrupt+0x40>)
 800bd2e:	fba2 2303 	umull	r2, r3, r2, r3
 800bd32:	099b      	lsrs	r3, r3, #6
 800bd34:	4a09      	ldr	r2, [pc, #36]	; (800bd5c <vPortSetupTimerInterrupt+0x44>)
 800bd36:	3b01      	subs	r3, #1
 800bd38:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd3a:	4b04      	ldr	r3, [pc, #16]	; (800bd4c <vPortSetupTimerInterrupt+0x34>)
 800bd3c:	2207      	movs	r2, #7
 800bd3e:	601a      	str	r2, [r3, #0]
}
 800bd40:	bf00      	nop
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr
 800bd4a:	bf00      	nop
 800bd4c:	e000e010 	.word	0xe000e010
 800bd50:	e000e018 	.word	0xe000e018
 800bd54:	24000000 	.word	0x24000000
 800bd58:	10624dd3 	.word	0x10624dd3
 800bd5c:	e000e014 	.word	0xe000e014

0800bd60 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd60:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bd70 <vPortEnableVFP+0x10>
 800bd64:	6801      	ldr	r1, [r0, #0]
 800bd66:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd6a:	6001      	str	r1, [r0, #0]
 800bd6c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd6e:	bf00      	nop
 800bd70:	e000ed88 	.word	0xe000ed88

0800bd74 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bd7a:	f3ef 8305 	mrs	r3, IPSR
 800bd7e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	2b0f      	cmp	r3, #15
 800bd84:	d913      	bls.n	800bdae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd86:	4a16      	ldr	r2, [pc, #88]	; (800bde0 <vPortValidateInterruptPriority+0x6c>)
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	4413      	add	r3, r2
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bd90:	4b14      	ldr	r3, [pc, #80]	; (800bde4 <vPortValidateInterruptPriority+0x70>)
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	7afa      	ldrb	r2, [r7, #11]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d209      	bcs.n	800bdae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800bd9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9e:	f383 8811 	msr	BASEPRI, r3
 800bda2:	f3bf 8f6f 	isb	sy
 800bda6:	f3bf 8f4f 	dsb	sy
 800bdaa:	607b      	str	r3, [r7, #4]
 800bdac:	e7fe      	b.n	800bdac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bdae:	4b0e      	ldr	r3, [pc, #56]	; (800bde8 <vPortValidateInterruptPriority+0x74>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bdb6:	4b0d      	ldr	r3, [pc, #52]	; (800bdec <vPortValidateInterruptPriority+0x78>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	429a      	cmp	r2, r3
 800bdbc:	d909      	bls.n	800bdd2 <vPortValidateInterruptPriority+0x5e>
 800bdbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc2:	f383 8811 	msr	BASEPRI, r3
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	603b      	str	r3, [r7, #0]
 800bdd0:	e7fe      	b.n	800bdd0 <vPortValidateInterruptPriority+0x5c>
	}
 800bdd2:	bf00      	nop
 800bdd4:	3714      	adds	r7, #20
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bddc:	4770      	bx	lr
 800bdde:	bf00      	nop
 800bde0:	e000e3f0 	.word	0xe000e3f0
 800bde4:	24000ddc 	.word	0x24000ddc
 800bde8:	e000ed0c 	.word	0xe000ed0c
 800bdec:	24000de0 	.word	0x24000de0

0800bdf0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b08a      	sub	sp, #40	; 0x28
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bdfc:	f7fe fa84 	bl	800a308 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800be00:	4b57      	ldr	r3, [pc, #348]	; (800bf60 <pvPortMalloc+0x170>)
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d101      	bne.n	800be0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800be08:	f000 f90c 	bl	800c024 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800be0c:	4b55      	ldr	r3, [pc, #340]	; (800bf64 <pvPortMalloc+0x174>)
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	4013      	ands	r3, r2
 800be14:	2b00      	cmp	r3, #0
 800be16:	f040 808c 	bne.w	800bf32 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d01c      	beq.n	800be5a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800be20:	2208      	movs	r2, #8
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	4413      	add	r3, r2
 800be26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f003 0307 	and.w	r3, r3, #7
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d013      	beq.n	800be5a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f023 0307 	bic.w	r3, r3, #7
 800be38:	3308      	adds	r3, #8
 800be3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f003 0307 	and.w	r3, r3, #7
 800be42:	2b00      	cmp	r3, #0
 800be44:	d009      	beq.n	800be5a <pvPortMalloc+0x6a>
 800be46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4a:	f383 8811 	msr	BASEPRI, r3
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	617b      	str	r3, [r7, #20]
 800be58:	e7fe      	b.n	800be58 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d068      	beq.n	800bf32 <pvPortMalloc+0x142>
 800be60:	4b41      	ldr	r3, [pc, #260]	; (800bf68 <pvPortMalloc+0x178>)
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	429a      	cmp	r2, r3
 800be68:	d863      	bhi.n	800bf32 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800be6a:	4b40      	ldr	r3, [pc, #256]	; (800bf6c <pvPortMalloc+0x17c>)
 800be6c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800be6e:	4b3f      	ldr	r3, [pc, #252]	; (800bf6c <pvPortMalloc+0x17c>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be74:	e004      	b.n	800be80 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800be76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be78:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800be7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be82:	685b      	ldr	r3, [r3, #4]
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	429a      	cmp	r2, r3
 800be88:	d903      	bls.n	800be92 <pvPortMalloc+0xa2>
 800be8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d1f1      	bne.n	800be76 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800be92:	4b33      	ldr	r3, [pc, #204]	; (800bf60 <pvPortMalloc+0x170>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be98:	429a      	cmp	r2, r3
 800be9a:	d04a      	beq.n	800bf32 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800be9c:	6a3b      	ldr	r3, [r7, #32]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	2208      	movs	r2, #8
 800bea2:	4413      	add	r3, r2
 800bea4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bea8:	681a      	ldr	r2, [r3, #0]
 800beaa:	6a3b      	ldr	r3, [r7, #32]
 800beac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800beae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb0:	685a      	ldr	r2, [r3, #4]
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	1ad2      	subs	r2, r2, r3
 800beb6:	2308      	movs	r3, #8
 800beb8:	005b      	lsls	r3, r3, #1
 800beba:	429a      	cmp	r2, r3
 800bebc:	d91e      	bls.n	800befc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	4413      	add	r3, r2
 800bec4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bec6:	69bb      	ldr	r3, [r7, #24]
 800bec8:	f003 0307 	and.w	r3, r3, #7
 800becc:	2b00      	cmp	r3, #0
 800bece:	d009      	beq.n	800bee4 <pvPortMalloc+0xf4>
 800bed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bed4:	f383 8811 	msr	BASEPRI, r3
 800bed8:	f3bf 8f6f 	isb	sy
 800bedc:	f3bf 8f4f 	dsb	sy
 800bee0:	613b      	str	r3, [r7, #16]
 800bee2:	e7fe      	b.n	800bee2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee6:	685a      	ldr	r2, [r3, #4]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	1ad2      	subs	r2, r2, r3
 800beec:	69bb      	ldr	r3, [r7, #24]
 800beee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef2:	687a      	ldr	r2, [r7, #4]
 800bef4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bef6:	69b8      	ldr	r0, [r7, #24]
 800bef8:	f000 f8f6 	bl	800c0e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800befc:	4b1a      	ldr	r3, [pc, #104]	; (800bf68 <pvPortMalloc+0x178>)
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	1ad3      	subs	r3, r2, r3
 800bf06:	4a18      	ldr	r2, [pc, #96]	; (800bf68 <pvPortMalloc+0x178>)
 800bf08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bf0a:	4b17      	ldr	r3, [pc, #92]	; (800bf68 <pvPortMalloc+0x178>)
 800bf0c:	681a      	ldr	r2, [r3, #0]
 800bf0e:	4b18      	ldr	r3, [pc, #96]	; (800bf70 <pvPortMalloc+0x180>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	429a      	cmp	r2, r3
 800bf14:	d203      	bcs.n	800bf1e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bf16:	4b14      	ldr	r3, [pc, #80]	; (800bf68 <pvPortMalloc+0x178>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4a15      	ldr	r2, [pc, #84]	; (800bf70 <pvPortMalloc+0x180>)
 800bf1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bf1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf20:	685a      	ldr	r2, [r3, #4]
 800bf22:	4b10      	ldr	r3, [pc, #64]	; (800bf64 <pvPortMalloc+0x174>)
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	431a      	orrs	r2, r3
 800bf28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bf2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf2e:	2200      	movs	r2, #0
 800bf30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bf32:	f7fe f9f7 	bl	800a324 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	f003 0307 	and.w	r3, r3, #7
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d009      	beq.n	800bf54 <pvPortMalloc+0x164>
 800bf40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	60fb      	str	r3, [r7, #12]
 800bf52:	e7fe      	b.n	800bf52 <pvPortMalloc+0x162>
	return pvReturn;
 800bf54:	69fb      	ldr	r3, [r7, #28]
}
 800bf56:	4618      	mov	r0, r3
 800bf58:	3728      	adds	r7, #40	; 0x28
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	240049ec 	.word	0x240049ec
 800bf64:	240049f8 	.word	0x240049f8
 800bf68:	240049f0 	.word	0x240049f0
 800bf6c:	240049e4 	.word	0x240049e4
 800bf70:	240049f4 	.word	0x240049f4

0800bf74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b086      	sub	sp, #24
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d046      	beq.n	800c014 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bf86:	2308      	movs	r3, #8
 800bf88:	425b      	negs	r3, r3
 800bf8a:	697a      	ldr	r2, [r7, #20]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bf94:	693b      	ldr	r3, [r7, #16]
 800bf96:	685a      	ldr	r2, [r3, #4]
 800bf98:	4b20      	ldr	r3, [pc, #128]	; (800c01c <vPortFree+0xa8>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	4013      	ands	r3, r2
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d109      	bne.n	800bfb6 <vPortFree+0x42>
 800bfa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfa6:	f383 8811 	msr	BASEPRI, r3
 800bfaa:	f3bf 8f6f 	isb	sy
 800bfae:	f3bf 8f4f 	dsb	sy
 800bfb2:	60fb      	str	r3, [r7, #12]
 800bfb4:	e7fe      	b.n	800bfb4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bfb6:	693b      	ldr	r3, [r7, #16]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d009      	beq.n	800bfd2 <vPortFree+0x5e>
 800bfbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc2:	f383 8811 	msr	BASEPRI, r3
 800bfc6:	f3bf 8f6f 	isb	sy
 800bfca:	f3bf 8f4f 	dsb	sy
 800bfce:	60bb      	str	r3, [r7, #8]
 800bfd0:	e7fe      	b.n	800bfd0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	685a      	ldr	r2, [r3, #4]
 800bfd6:	4b11      	ldr	r3, [pc, #68]	; (800c01c <vPortFree+0xa8>)
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4013      	ands	r3, r2
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d019      	beq.n	800c014 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bfe0:	693b      	ldr	r3, [r7, #16]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d115      	bne.n	800c014 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	685a      	ldr	r2, [r3, #4]
 800bfec:	4b0b      	ldr	r3, [pc, #44]	; (800c01c <vPortFree+0xa8>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	43db      	mvns	r3, r3
 800bff2:	401a      	ands	r2, r3
 800bff4:	693b      	ldr	r3, [r7, #16]
 800bff6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bff8:	f7fe f986 	bl	800a308 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	685a      	ldr	r2, [r3, #4]
 800c000:	4b07      	ldr	r3, [pc, #28]	; (800c020 <vPortFree+0xac>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4413      	add	r3, r2
 800c006:	4a06      	ldr	r2, [pc, #24]	; (800c020 <vPortFree+0xac>)
 800c008:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c00a:	6938      	ldr	r0, [r7, #16]
 800c00c:	f000 f86c 	bl	800c0e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800c010:	f7fe f988 	bl	800a324 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c014:	bf00      	nop
 800c016:	3718      	adds	r7, #24
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	240049f8 	.word	0x240049f8
 800c020:	240049f0 	.word	0x240049f0

0800c024 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c024:	b480      	push	{r7}
 800c026:	b085      	sub	sp, #20
 800c028:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c02a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c02e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c030:	4b27      	ldr	r3, [pc, #156]	; (800c0d0 <prvHeapInit+0xac>)
 800c032:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f003 0307 	and.w	r3, r3, #7
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d00c      	beq.n	800c058 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	3307      	adds	r3, #7
 800c042:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f023 0307 	bic.w	r3, r3, #7
 800c04a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c04c:	68ba      	ldr	r2, [r7, #8]
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	1ad3      	subs	r3, r2, r3
 800c052:	4a1f      	ldr	r2, [pc, #124]	; (800c0d0 <prvHeapInit+0xac>)
 800c054:	4413      	add	r3, r2
 800c056:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c05c:	4a1d      	ldr	r2, [pc, #116]	; (800c0d4 <prvHeapInit+0xb0>)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c062:	4b1c      	ldr	r3, [pc, #112]	; (800c0d4 <prvHeapInit+0xb0>)
 800c064:	2200      	movs	r2, #0
 800c066:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	68ba      	ldr	r2, [r7, #8]
 800c06c:	4413      	add	r3, r2
 800c06e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c070:	2208      	movs	r2, #8
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	1a9b      	subs	r3, r3, r2
 800c076:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c078:	68fb      	ldr	r3, [r7, #12]
 800c07a:	f023 0307 	bic.w	r3, r3, #7
 800c07e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	4a15      	ldr	r2, [pc, #84]	; (800c0d8 <prvHeapInit+0xb4>)
 800c084:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c086:	4b14      	ldr	r3, [pc, #80]	; (800c0d8 <prvHeapInit+0xb4>)
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	2200      	movs	r2, #0
 800c08c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c08e:	4b12      	ldr	r3, [pc, #72]	; (800c0d8 <prvHeapInit+0xb4>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	2200      	movs	r2, #0
 800c094:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	68fa      	ldr	r2, [r7, #12]
 800c09e:	1ad2      	subs	r2, r2, r3
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c0a4:	4b0c      	ldr	r3, [pc, #48]	; (800c0d8 <prvHeapInit+0xb4>)
 800c0a6:	681a      	ldr	r2, [r3, #0]
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0ac:	683b      	ldr	r3, [r7, #0]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	4a0a      	ldr	r2, [pc, #40]	; (800c0dc <prvHeapInit+0xb8>)
 800c0b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c0b4:	683b      	ldr	r3, [r7, #0]
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	4a09      	ldr	r2, [pc, #36]	; (800c0e0 <prvHeapInit+0xbc>)
 800c0ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c0bc:	4b09      	ldr	r3, [pc, #36]	; (800c0e4 <prvHeapInit+0xc0>)
 800c0be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c0c2:	601a      	str	r2, [r3, #0]
}
 800c0c4:	bf00      	nop
 800c0c6:	3714      	adds	r7, #20
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr
 800c0d0:	24000de4 	.word	0x24000de4
 800c0d4:	240049e4 	.word	0x240049e4
 800c0d8:	240049ec 	.word	0x240049ec
 800c0dc:	240049f4 	.word	0x240049f4
 800c0e0:	240049f0 	.word	0x240049f0
 800c0e4:	240049f8 	.word	0x240049f8

0800c0e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c0e8:	b480      	push	{r7}
 800c0ea:	b085      	sub	sp, #20
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c0f0:	4b28      	ldr	r3, [pc, #160]	; (800c194 <prvInsertBlockIntoFreeList+0xac>)
 800c0f2:	60fb      	str	r3, [r7, #12]
 800c0f4:	e002      	b.n	800c0fc <prvInsertBlockIntoFreeList+0x14>
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	60fb      	str	r3, [r7, #12]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	429a      	cmp	r2, r3
 800c104:	d8f7      	bhi.n	800c0f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	68ba      	ldr	r2, [r7, #8]
 800c110:	4413      	add	r3, r2
 800c112:	687a      	ldr	r2, [r7, #4]
 800c114:	429a      	cmp	r2, r3
 800c116:	d108      	bne.n	800c12a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	685a      	ldr	r2, [r3, #4]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	441a      	add	r2, r3
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	685b      	ldr	r3, [r3, #4]
 800c132:	68ba      	ldr	r2, [r7, #8]
 800c134:	441a      	add	r2, r3
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d118      	bne.n	800c170 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	681a      	ldr	r2, [r3, #0]
 800c142:	4b15      	ldr	r3, [pc, #84]	; (800c198 <prvInsertBlockIntoFreeList+0xb0>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	429a      	cmp	r2, r3
 800c148:	d00d      	beq.n	800c166 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	685a      	ldr	r2, [r3, #4]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	441a      	add	r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	601a      	str	r2, [r3, #0]
 800c164:	e008      	b.n	800c178 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c166:	4b0c      	ldr	r3, [pc, #48]	; (800c198 <prvInsertBlockIntoFreeList+0xb0>)
 800c168:	681a      	ldr	r2, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	601a      	str	r2, [r3, #0]
 800c16e:	e003      	b.n	800c178 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681a      	ldr	r2, [r3, #0]
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c178:	68fa      	ldr	r2, [r7, #12]
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d002      	beq.n	800c186 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c186:	bf00      	nop
 800c188:	3714      	adds	r7, #20
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr
 800c192:	bf00      	nop
 800c194:	240049e4 	.word	0x240049e4
 800c198:	240049ec 	.word	0x240049ec

0800c19c <__libc_init_array>:
 800c19c:	b570      	push	{r4, r5, r6, lr}
 800c19e:	4e0d      	ldr	r6, [pc, #52]	; (800c1d4 <__libc_init_array+0x38>)
 800c1a0:	4c0d      	ldr	r4, [pc, #52]	; (800c1d8 <__libc_init_array+0x3c>)
 800c1a2:	1ba4      	subs	r4, r4, r6
 800c1a4:	10a4      	asrs	r4, r4, #2
 800c1a6:	2500      	movs	r5, #0
 800c1a8:	42a5      	cmp	r5, r4
 800c1aa:	d109      	bne.n	800c1c0 <__libc_init_array+0x24>
 800c1ac:	4e0b      	ldr	r6, [pc, #44]	; (800c1dc <__libc_init_array+0x40>)
 800c1ae:	4c0c      	ldr	r4, [pc, #48]	; (800c1e0 <__libc_init_array+0x44>)
 800c1b0:	f000 f82c 	bl	800c20c <_init>
 800c1b4:	1ba4      	subs	r4, r4, r6
 800c1b6:	10a4      	asrs	r4, r4, #2
 800c1b8:	2500      	movs	r5, #0
 800c1ba:	42a5      	cmp	r5, r4
 800c1bc:	d105      	bne.n	800c1ca <__libc_init_array+0x2e>
 800c1be:	bd70      	pop	{r4, r5, r6, pc}
 800c1c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c1c4:	4798      	blx	r3
 800c1c6:	3501      	adds	r5, #1
 800c1c8:	e7ee      	b.n	800c1a8 <__libc_init_array+0xc>
 800c1ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c1ce:	4798      	blx	r3
 800c1d0:	3501      	adds	r5, #1
 800c1d2:	e7f2      	b.n	800c1ba <__libc_init_array+0x1e>
 800c1d4:	0800c3a0 	.word	0x0800c3a0
 800c1d8:	0800c3a0 	.word	0x0800c3a0
 800c1dc:	0800c3a0 	.word	0x0800c3a0
 800c1e0:	0800c3a4 	.word	0x0800c3a4

0800c1e4 <memcpy>:
 800c1e4:	b510      	push	{r4, lr}
 800c1e6:	1e43      	subs	r3, r0, #1
 800c1e8:	440a      	add	r2, r1
 800c1ea:	4291      	cmp	r1, r2
 800c1ec:	d100      	bne.n	800c1f0 <memcpy+0xc>
 800c1ee:	bd10      	pop	{r4, pc}
 800c1f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c1f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c1f8:	e7f7      	b.n	800c1ea <memcpy+0x6>

0800c1fa <memset>:
 800c1fa:	4402      	add	r2, r0
 800c1fc:	4603      	mov	r3, r0
 800c1fe:	4293      	cmp	r3, r2
 800c200:	d100      	bne.n	800c204 <memset+0xa>
 800c202:	4770      	bx	lr
 800c204:	f803 1b01 	strb.w	r1, [r3], #1
 800c208:	e7f9      	b.n	800c1fe <memset+0x4>
	...

0800c20c <_init>:
 800c20c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c20e:	bf00      	nop
 800c210:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c212:	bc08      	pop	{r3}
 800c214:	469e      	mov	lr, r3
 800c216:	4770      	bx	lr

0800c218 <_fini>:
 800c218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c21a:	bf00      	nop
 800c21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c21e:	bc08      	pop	{r3}
 800c220:	469e      	mov	lr, r3
 800c222:	4770      	bx	lr
